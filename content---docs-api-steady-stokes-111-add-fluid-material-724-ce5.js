"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkeasifem_docs"] = globalThis["webpackChunkeasifem_docs"] || []).push([["content---docs-api-steady-stokes-111-add-fluid-material-724-ce5"],{

/***/ "./docs/docs-api/SteadyStokes111/AddFluidMaterial.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  assets: () => (/* binding */ assets),\n  contentTitle: () => (/* binding */ AddFluidMaterial_contentTitle),\n  \"default\": () => (/* binding */ AddFluidMaterial_MDXContent),\n  frontMatter: () => (/* binding */ AddFluidMaterial_frontMatter),\n  metadata: () => (/* reexport */ site_docs_docs_api_steady_stokes_111_add_fluid_material_md_724_namespaceObject),\n  toc: () => (/* binding */ AddFluidMaterial_toc)\n});\n\n;// ./.docusaurus/docusaurus-plugin-content-docs/docs-api/site-docs-docs-api-steady-stokes-111-add-fluid-material-md-724.json\nconst site_docs_docs_api_steady_stokes_111_add_fluid_material_md_724_namespaceObject = /*#__PURE__*/JSON.parse('{\"id\":\"SteadyStokes111/AddFluidMaterial\",\"title\":\"AddFluidMaterial\",\"description\":\"This routine adds Fluid material to the AbstractSteadyStokes.\",\"source\":\"@site/docs/docs-api/SteadyStokes111/AddFluidMaterial.md\",\"sourceDirName\":\"SteadyStokes111\",\"slug\":\"/SteadyStokes111/AddFluidMaterial\",\"permalink\":\"/docs-api/SteadyStokes111/AddFluidMaterial\",\"draft\":false,\"unlisted\":false,\"editUrl\":\"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/SteadyStokes111/AddFluidMaterial.md\",\"tags\":[],\"version\":\"current\",\"lastUpdatedAt\":1539502055000,\"frontMatter\":{},\"sidebar\":\"tutorialSidebar\",\"previous\":{\"title\":\"SteadyStokes111\",\"permalink\":\"/docs-api/SteadyStokes111/SteadyStokes111_\"},\"next\":{\"title\":\"AddPressureDirichletBC\",\"permalink\":\"/docs-api/SteadyStokes111/AddPressureDirichletBC\"}}');\n// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n// EXTERNAL MODULE: ./node_modules/@mdx-js/react/lib/index.js\nvar lib = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js + 2 modules\nvar Tabs = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js + 1 modules\nvar TabItem = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js\");\n;// ./docs/docs-api/SteadyStokes111/_AddFluidMaterial_test_1.md\n\n\nconst frontMatter = {};\nconst contentTitle = undefined;\n\n\n\n\n\nconst toc = [];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.p, {\n      children: \"In this example we will learn how to add a fluid material in the kernel.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n  USE easifemBase\\n  USE easifemClasses\\n  USE easifemMaterials\\n  USE easifemKernels\\n  USE SteadyStokes111_Class\\n  IMPLICIT NONE\\n  TYPE( SteadyStokes111_ ) :: obj\\n  TYPE( ParameterList_ ) :: param\\n  TYPE( HDF5File_ ) :: domainFile\\n  TYPE( Domain_ ) :: dom\\n  INTEGER( I4B ), PARAMETER :: refPressureNode=2\\n  REAL( DFP ), PARAMETER :: refPressure = 0.0_DFP\\n  INTEGER( I4B ), PARAMETER :: tDirichletBCForVelocity = 2\\n  INTEGER( I4B ), PARAMETER :: tDirichletBCForPressure = 0\\n  INTEGER( I4B ), PARAMETER :: tFluidMaterials= 1\\n  INTEGER( I4B ), PARAMETER :: stabParamOption= 1\\n  LOGICAL( LGT ), PARAMETER :: isSubscalePressure = .FALSE.\\n  LOGICAL( LGT ), PARAMETER :: isBoundarySubscale = .FALSE.\\n  REAL( DFP ), PARAMETER :: gravity(3)=[0.0, -9.8, 0.0]\\n  LOGICAL( LGT ), PARAMETER :: isConservativeForm = .TRUE.\\n  CHARACTER( * ), PARAMETER :: engine=\\\"NATIVE_SERIAL\\\"\\n  CHARACTER( * ), PARAMETER :: domainFileName=\\\"./long_pipe_tri3.h5\\\"\\n  INTEGER( I4B ), PARAMETER :: CoordinateSystem = KERNEL_CARTESIAN\\n  INTEGER( I4B ), PARAMETER :: maxIter = 100\\n  REAL( DFP ), PARAMETER :: rtoleranceForPressure = 1.0E-6\\n  REAL( DFP ), PARAMETER :: rtoleranceForVelocity = 1.0E-6\\n  REAL( DFP ), PARAMETER :: atoleranceForPressure = 1.0E-6\\n  REAL( DFP ), PARAMETER :: atoleranceForVelocity = 1.0E-6\\n  REAL( DFP ), PARAMETER :: toleranceForSteadyState = 1.0E-6\\n  CHARACTER(*), PARAMETER :: baseInterpolationForSpace=\\\"LagrangeInterpolation\\\"\\n  CHARACTER(*), PARAMETER :: baseContinuityForSpace=\\\"H1\\\"\\n  CHARACTER(*), PARAMETER :: quadratureTypeForSpace=\\\"GaussLegendre\\\"\\n  INTEGER(I4B), PARAMETER :: ls_solverName = LIS_GMRES\\n  INTEGER(I4B), PARAMETER :: ls_preconditionOption= LEFT_PRECONDITION\\n  INTEGER(I4B), PARAMETER :: ls_convergenceIn = convergenceInRes\\n  INTEGER(I4B), PARAMETER :: ls_convergenceType = relativeConvergence\\n  INTEGER( I4B ), PARAMETER :: ls_maxIter = 100\\n  LOGICAL( LGT ), PARAMETER :: ls_relativeToRHS = .TRUE.\\n  INTEGER( I4B ), PARAMETER :: ls_KrylovSubspaceSize=20\\n  REAL( DFP ) , PARAMETER :: ls_rtol=1.0E-10\\n  REAL( DFP ) , PARAMETER :: ls_atol=1.0E-10\\n  TYPE( MeshSelection_ ) :: region\\n  INTEGER( I4B ), PARAMETER :: fluid_meshID(1) = [1]\\n  REAL( DFP ), PARAMETER :: fluid_massDensity=1000.0\\n  REAL( DFP ), PARAMETER :: fluid_dynamicViscosity=0.001_DFP\\n  CHARACTER( LEN = * ), PARAMETER :: fluid_stressStrainModel=\\\"NewtonianFluidModel\\\"\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Set parameters for kernel.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL FPL_INIT(); CALL param%Initiate()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Set parameters for the kernel.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL SetSteadyStokes111Param( &\\n  & param=param, &\\n  & isConservativeForm=isConservativeForm, &\\n  & gravity = gravity, &\\n  & isSubscalePressure = isSubscalePressure, &\\n  & isBoundarySubscale = isBoundarySubscale, &\\n  & stabParamOption = stabParamOption, &\\n  & domainFile = domainFileName, &\\n  & engine=engine, &\\n  & CoordinateSystem=KERNEL_CARTESIAN, &\\n  & maxIter =maxIter, &\\n  & rtoleranceForPressure = rtoleranceForPressure, &\\n  & rtoleranceForVelocity = rtoleranceForVelocity, &\\n  & atoleranceForPressure = atoleranceForPressure, &\\n  & atoleranceForVelocity = atoleranceForVelocity, &\\n  & toleranceForSteadyState = toleranceForSteadyState, &\\n  & tFluidMaterials=tFluidMaterials, &\\n  & tDirichletBCForPressure=tDirichletBCForPressure, &\\n  & tDirichletBCForVelocity=tDirichletBCForVelocity, &\\n  & baseInterpolationForSpace=baseInterpolationForSpace, &\\n  & baseContinuityForSpace=baseContinuityForSpace, &\\n  & quadratureTypeForSpace=quadratureTypeForSpace, &\\n  & refPressureNode=refPressureNode, &\\n  & refPressure=refPressure &\\n  & )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Setting parameters for linear solver.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL SetLinSolverParam( &\\n  & param=param, &\\n  & solverName=ls_solverName,&\\n  & preconditionOption=ls_preconditionOption, &\\n  & convergenceIn=ls_convergenceIn, &\\n  & convergenceType=ls_convergenceType, &\\n  & maxIter=ls_maxIter, &\\n  & relativeToRHS=ls_relativeToRHS, &\\n  & KrylovSubspaceSize=ls_KrylovSubspaceSize, &\\n  & rtol=ls_rtol, &\\n  & atol=ls_atol )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Initiate domain by reading data from a domain file.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL domainFile%Initiate( filename=domainFileName, MODE=\\\"READ\\\" )\\nCALL domainFile%Open()\\nCALL dom%Initiate( domainFile, \\\"\\\" )\\nCALL domainFile%Deallocate()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Initiate the kernel.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL obj%Initiate(param=param, dom=dom )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"Add fluid material to kernel. To do so, we first create an instance of \", (0,jsx_runtime.jsx)(_components.a, {\n        href: \"/docs-api/MeshSelection/MeshSelection_\",\n        children: \"MeshSelection\"\n      }), \". Then, we add this instance to the kernel.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL region%Initiate( isSelectionByMeshID=.TRUE. )\\nCALL region%Add( dim=dom%GetNSD(), meshID=fluid_meshID )\\nCALL SetFluidMaterialParam( &\\n  & param=param, &\\n  & name=\\\"fluidMaterial\\\", &\\n  & massDensity=fluid_massDensity, &\\n  & dynamicViscosity = fluid_dynamicViscosity, &\\n  & stressStrainModel=fluid_stressStrainModel )\\nCALL SetNewtonianFluidModelParam( &\\n  & param = param, &\\n  & dynamicViscosity = fluid_dynamicViscosity )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL obj%AddFluidMaterial( &\\n  & materialNo=1, &\\n  & materialName=\\\"fluidMaterial\\\", &\\n  & param=param, &\\n  & region=region)\\nCALL region%Deallocate()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Display the kernel.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL obj%Display(\\\"\\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Cleanup\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"  CALL obj%Deallocate()\\n  CALL dom%Deallocate()\\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\\nEND PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/SteadyStokes111/AddFluidMaterial.md\n\n\nconst AddFluidMaterial_frontMatter = {};\nconst AddFluidMaterial_contentTitle = 'AddFluidMaterial';\n\nconst assets = {\n\n};\n\n\n\n\n\n\nconst AddFluidMaterial_toc = [{\n  \"value\": \"Interface\",\n  \"id\": \"interface\",\n  \"level\": 2\n}, ...toc];\nfunction AddFluidMaterial_createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    admonition: \"admonition\",\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    header: \"header\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.header, {\n      children: (0,jsx_runtime.jsx)(_components.h1, {\n        id: \"addfluidmaterial\",\n        children: \"AddFluidMaterial\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This routine adds Fluid material to the AbstractSteadyStokes.\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"It also prepares \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"obj%FluidMaterialToMesh(materialNo)\"\n        }), \" and \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"obj%fluidMaterial(materialNo)\"\n        }), \".\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"param\"\n        }), \" contains the parameters for constructing a FluidMaterial.\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"materialName\"\n        }), \" is the name of material, it should be \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"fluidMaterial\"\n        }), \".\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"region\"\n        }), \" is an instance of \", (0,jsx_runtime.jsx)(_components.a, {\n          href: \"/docs-api/MeshSelection/MeshSelection_\",\n          children: \"MeshSelection_\"\n        }), \".\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.admonition, {\n      type: \"caution\",\n      children: (0,jsx_runtime.jsxs)(_components.p, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"materialNo\"\n        }), \" should be lesser than or equal to the total\\nnumber of Fluid materials.\"]\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface\",\n      children: \"Interface\"\n    }), \"\\n\", \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE SUBROUTINE addFluidMaterial(obj, materialNo, materialName, &\\n    & param, region)\\n    CLASS(SteadyStokes111_), INTENT(INOUT) :: obj\\n    INTEGER(I4B), INTENT(IN) :: materialNo\\n    CHARACTER(LEN=*), OPTIONAL, INTENT(IN) :: materialName\\n    TYPE(ParameterList_), OPTIONAL, INTENT(IN) :: param\\n    TYPE(MeshSelection_), OPTIONAL, INTENT(IN) :: region\\n  END SUBROUTINE addFluidMaterial\\nEND INTERFACE\\n\"\n          })\n        })\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    })]\n  });\n}\nfunction AddFluidMaterial_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(AddFluidMaterial_createMdxContent, {\n      ...props\n    })\n  }) : AddFluidMaterial_createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./docs/docs-api/SteadyStokes111/AddFluidMaterial.md\n");

/***/ })

}]);