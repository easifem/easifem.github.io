"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkeasifem_docs"] = globalThis["webpackChunkeasifem_docs"] || []).push([["content---docs-api-txt-file-read-351-946"],{

/***/ "./docs/docs-api/TxtFile/Read.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  assets: () => (/* binding */ assets),\n  contentTitle: () => (/* binding */ Read_contentTitle),\n  \"default\": () => (/* binding */ Read_MDXContent),\n  frontMatter: () => (/* binding */ Read_frontMatter),\n  metadata: () => (/* reexport */ site_docs_docs_api_txt_file_read_md_351_namespaceObject),\n  toc: () => (/* binding */ Read_toc)\n});\n\n;// ./.docusaurus/docusaurus-plugin-content-docs/docs-api/site-docs-docs-api-txt-file-read-md-351.json\nconst site_docs_docs_api_txt_file_read_md_351_namespaceObject = /*#__PURE__*/JSON.parse('{\"id\":\"TxtFile/Read\",\"title\":\"Read\",\"description\":\"This method reads data from a file into various Fortran data types, including scalars, vectors, and instances of IntVector and RealVector.\",\"source\":\"@site/docs/docs-api/TxtFile/Read.md\",\"sourceDirName\":\"TxtFile\",\"slug\":\"/TxtFile/Read\",\"permalink\":\"/docs-api/TxtFile/Read\",\"draft\":false,\"unlisted\":false,\"editUrl\":\"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/TxtFile/Read.md\",\"tags\":[],\"version\":\"current\",\"lastUpdatedAt\":1539502055000,\"frontMatter\":{\"title\":\"Read\"},\"sidebar\":\"tutorialSidebar\",\"previous\":{\"title\":\"ConvertMarkdownToSource\",\"permalink\":\"/docs-api/TxtFile/ConvertMarkdownToSource\"},\"next\":{\"title\":\"ReadLine\",\"permalink\":\"/docs-api/TxtFile/ReadLine\"}}');\n// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n// EXTERNAL MODULE: ./node_modules/@mdx-js/react/lib/index.js\nvar lib = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/CodeBlock/index.js + 27 modules\nvar CodeBlock = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/CodeBlock/index.js\");\n;// ./node_modules/raw-loader/dist/cjs.js!./docs/docs-api/TxtFile/examples/_Read_test_1.F90\n/* harmony default export */ const _Read_test_1 = (\"! This example shows the usage of `Read` methods to read a scalar.\\n! We will read integre, real, and boolean value from a file\\n\\nPROGRAM main\\nUSE TxtFile_Class\\nUSE String_Class\\nUSE GlobalData\\nUSE Test_Method\\nUSE Display_Method\\nUSE ExceptionHandler_Class, ONLY: e, EXCEPTION_INFORMATION\\n\\nTYPE(TxtFile_) :: obj\\nTYPE(String) :: aline\\nINTEGER(I4B) :: int_r0, iostat\\nREAL(DFP) :: real_r0\\nLOGICAL(LGT) :: bool_r0\\nCHARACTER(len=*), PARAMETER :: filename = \\\"./files/_Read_test_1.txt\\\"\\n\\n! Initiate an instance of [[TxtFile_]], and then\\n! Open the [[TxtFile_]] file\\n\\nCALL e%SetQuietMode(EXCEPTION_INFORMATION, .TRUE.)\\n\\nCALL obj%Initiate(filename=filename, status='OLD', &\\n                  action='READ')\\nCALL obj%OPEN()\\n\\n! Read the value in the integer.\\nint_r0 = 0\\nCALL obj%READ(val=int_r0, iostat=iostat)\\nCALL IS(int_r0, 1, \\\"test read scalar integer\\\")\\n\\n! Read the value in the real.\\nreal_r0 = 0\\n! CALL obj%REWIND()\\nCALL obj%READ(val=real_r0, iostat=iostat)\\nCALL IS(INT(real_r0, I4B), 2, \\\"test read scalar real\\\")\\n\\n! Read the value in the boolean\\nbool_r0 = .FALSE.\\n! CALL obj%REWIND()\\nCALL obj%READ(val=bool_r0, iostat=iostat)\\nCALL IS(bool_r0, .TRUE., \\\"test read scalar boolean\\\")\\n\\n! Read the value in the boolean\\nbool_r0 = .TRUE.\\n! CALL obj%REWIND()\\nCALL obj%READ(val=bool_r0, iostat=iostat)\\nCALL IS(bool_r0, .FALSE., \\\"test read scalar boolean\\\")\\n\\n! Cleaning up.\\n\\nCALL obj%DEALLOCATE()\\nEND PROGRAM main\\n\");\n;// ./docs/docs-api/TxtFile/examples/_Read_test_1.md\n\n\nconst frontMatter = {};\nconst contentTitle = undefined;\n\n\n\n\n\n\n\nconst toc = [];\nfunction _createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    p: \"p\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"This example shows the usage of \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"Read\"\n      }), \" methods to read a scalar.\"]\n    }), \"\\n\", \"\\n\", \"\\n\", (0,jsx_runtime.jsx)(CodeBlock[\"default\"], {\n      language: \"fortran\",\n      children: _Read_test_1\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n\n;// ./node_modules/raw-loader/dist/cjs.js!./docs/docs-api/TxtFile/examples/_Read_test_2.F90\n/* harmony default export */ const _Read_test_2 = (\"! This example shows the usage of `Read`\\n! methods to read a vector of integer, real, and booleans.\\n\\nPROGRAM main\\nUSE TxtFile_Class\\nUSE String_Class\\nUSE GlobalData\\nUSE Test_Method\\nUSE Display_Method\\nUSE BaseType, ONLY: IntVector_, RealVector_\\nUSE ApproxUtility\\nUSE ExceptionHandler_Class, ONLY: e, EXCEPTION_INFORMATION\\nUSE IntVector_Method\\nUSE RealVector_Method\\n\\nCHARACTER(LEN=*), PARAMETER :: filename = \\\"./files/_Read_test_2.txt\\\"\\n\\nINTEGER(I4B) :: ii\\nLOGICAL(LGT) :: isok\\nTYPE(TxtFile_) :: obj\\nTYPE(String) :: aline\\nTYPE(IntVector_) :: intvectorval\\nTYPE(RealVector_) :: realvectorval\\nINTEGER(I4B), ALLOCATABLE :: intval(:), iostat\\nREAL(DFP), ALLOCATABLE :: realval(:)\\nTYPE(String), ALLOCATABLE :: stringval(:)\\nLOGICAL(LGT), ALLOCATABLE :: boolval(:)\\n\\nCALL e%SetQuietMode(EXCEPTION_INFORMATION, .TRUE.)\\n\\n! Initiate an instance of [[TxtFile_]], and then\\n! Open the [[TxtFile_]] file\\nCALL obj%Initiate(filename=filename, status='OLD', &\\n                  action='READ')\\nCALL obj%OPEN()\\n\\n! Read the value in the integer.\\nCALL obj%READ(val=intval, iostat=iostat)\\nisok = ALL(intval .EQ. [1, 2, 3])\\nCALL OK(isok, \\\"test read vector of integer\\\")\\n\\n! Read the value in the real.\\nCALL obj%REWIND()\\nCALL obj%READ(val=realval, iostat=iostat)\\nisok = ALL(realval.approxeq. [1.0_DFP, 2.0_DFP, 3.0_DFP])\\nCALL OK(isok, \\\"test read vector of real\\\")\\n\\n! Read the value in the string.\\nCALL obj%REWIND()\\nCALL obj%READ(val=stringval, iostat=iostat)\\nisok = ALL(stringval .EQ. [String(\\\"1\\\"), String(\\\"2\\\"), String(\\\"3\\\")])\\nCALL OK(isok, \\\"test read vector of string\\\")\\n\\n! Read the value in an instance of [[IntVector_]]\\nCALL obj%REWIND()\\nCALL obj%READ(val=intvectorval, iostat=iostat)\\nisok = ALL(Get(intvectorval, 1_I4B) .EQ. [1, 2, 3])\\nCALL OK(isok, \\\"test read IntVector_\\\")\\n\\n! Read the value in an instance of [[RealVector_]]\\nCALL obj%REWIND()\\nCALL obj%READ(val=realvectorval, iostat=iostat)\\nisok = ALL(Get(realvectorval, 1_I4B) .EQ. [1, 2, 3])\\nCALL OK(isok, \\\"test read RealVector_\\\")\\n\\n! Read the value in vector of boolean\\nCALL obj%REWIND()\\nCALL obj%READ(val=boolval, iostat=iostat)\\nisok = ALL(boolval .EQV. [.TRUE., .FALSE., .FALSE.])\\nCALL OK(isok, \\\"test read a vector of boolean\\\")\\n\\n! Cleaning up.\\nCALL obj%DEALLOCATE()\\nEND PROGRAM main\\n\");\n;// ./docs/docs-api/TxtFile/examples/_Read_test_2.md\n\n\nconst _Read_test_2_frontMatter = {};\nconst _Read_test_2_contentTitle = undefined;\n\n\n\n\n\n\n\nconst _Read_test_2_toc = [];\nfunction _Read_test_2_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    p: \"p\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"This example shows the usage of \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"Read\"\n      }), \" methods to read a vector.\"]\n    }), \"\\n\", \"\\n\", \"\\n\", (0,jsx_runtime.jsx)(CodeBlock[\"default\"], {\n      language: \"fortran\",\n      children: _Read_test_2\n    })]\n  });\n}\nfunction _Read_test_2_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_Read_test_2_createMdxContent, {\n      ...props\n    })\n  }) : _Read_test_2_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/TxtFile/Read.md\n\n\nconst Read_frontMatter = {\n\ttitle: 'Read'\n};\nconst Read_contentTitle = undefined;\n\nconst assets = {\n\n};\n\n\n\n\n\nconst Read_toc = [{\n  \"value\": \"Interface 1 (For reading scalar)\",\n  \"id\": \"interface-1-for-reading-scalar\",\n  \"level\": 2\n}, {\n  \"value\": \"Interface 2 (For reading vector)\",\n  \"id\": \"interface-2-for-reading-vector\",\n  \"level\": 2\n}, {\n  \"value\": \"Interface 3 (For reading matrix)\",\n  \"id\": \"interface-3-for-reading-matrix\",\n  \"level\": 2\n}, {\n  \"value\": \"Example 1 (Reading scalar values)\",\n  \"id\": \"example-1-reading-scalar-values\",\n  \"level\": 2\n}, ...toc, {\n  \"value\": \"Example 2 (Reading vector values)\",\n  \"id\": \"example-2-reading-vector-values\",\n  \"level\": 2\n}, ..._Read_test_2_toc];\nfunction Read_createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    h2: \"h2\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"This method reads data from a file into various Fortran data types, including scalars, vectors, and instances of \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"IntVector_\"\n      }), \" and \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"RealVector_\"\n      }), \".\"]\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"We can read data from a file in a scalar variable of Integer, Real, String, Boolean, \", (0,jsx_runtime.jsx)(_components.a, {\n          href: \"/docs-api/IntVector/IntVector_\",\n          children: \"IntVector\"\n        }), \" or \", (0,jsx_runtime.jsx)(_components.a, {\n          href: \"/docs-api/RealVector/RealVector_\",\n          children: \"RealVector\"\n        }), \" type.\"]\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"We can read data in a vector of Integer, Real, String, Boolean, IntVector, RealVector type.\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"We can read data in a matrix of Integer, Real, String.\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-1-for-reading-scalar\",\n      children: \"Interface 1 (For reading scalar)\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n  MODULE SUBROUTINE READ (obj, val, iostat, iomsg, &\\n                         ignoreComment, ignoreBlank, commentSymbol, separator)\\n    CLASS(TxtFile_), INTENT(INOUT) :: obj\\n    DataType, INTENT(INOUT) :: val\\n    INTEGER(I4B), INTENT(OUT) :: iostat\\n    CHARACTER(LEN=*), OPTIONAL, INTENT(OUT) :: iomsg\\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: ignoreComment\\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: ignoreBlank\\n    CHARACTER(len=1), OPTIONAL, INTENT(IN) :: commentSymbol\\n    CHARACTER(LEN=*), OPTIONAL, INTENT(IN) :: separator\\n  END SUBROUTINE READ\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"In above call, DataType can be any of the following:\", \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"INTEGER(Int8|Int16|Int32|Int64)\"\n            })\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"REAL(Real32|Real64)\"\n            })\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"LOGICAL(LGT)\"\n            })\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"STRING\"\n            })\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"INTVECTOR_\"\n            })\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"REALVECTOR_\"\n            })\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-2-for-reading-vector\",\n      children: \"Interface 2 (For reading vector)\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n  MODULE SUBROUTINE READ (obj, val, iostat, iomsg, &\\n                         ignoreComment, ignoreBlank, commentSymbol, separator)\\n    CLASS(TxtFile_), INTENT(INOUT) :: obj\\n    DataType, ALLOCATABLE, INTENT(INOUT) :: val(:)\\n    INTEGER(I4B), OPTIONAL, INTENT(OUT) :: iostat\\n    CHARACTER(LEN=*), OPTIONAL, INTENT(OUT) :: iomsg\\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: ignoreComment\\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: ignoreBlank\\n    CHARACTER(len=1), OPTIONAL, INTENT(IN) :: commentSymbol\\n    CHARACTER(LEN=*), OPTIONAL, INTENT(IN) :: separator\\n  END SUBROUTINE READ\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"In above call, DataType can be any of the following:\", \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"INTEGER(Int8|Int16|Int32|Int64)\"\n            })\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"REAL(Real32|Real64)\"\n            })\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"LOGICAL(LGT)\"\n            })\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"STRING\"\n            })\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"INTVECTOR_\"\n            })\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"REALVECTOR_\"\n            })\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-3-for-reading-matrix\",\n      children: \"Interface 3 (For reading matrix)\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n  MODULE SUBROUTINE txt_Read_mat_Int8(obj, val, iostat, iomsg, &\\n                         ignoreComment, ignoreBlank, commentSymbol, separator)\\n    CLASS(TxtFile_), INTENT(INOUT) :: obj\\n    DataType, ALLOCATABLE, INTENT(INOUT) :: val(:, :)\\n    INTEGER(I4B), OPTIONAL, INTENT(OUT) :: iostat\\n    CHARACTER(LEN=*), OPTIONAL, INTENT(OUT) :: iomsg\\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: ignoreComment\\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: ignoreBlank\\n    CHARACTER(len=1), OPTIONAL, INTENT(IN) :: commentSymbol\\n    CHARACTER(LEN=*), OPTIONAL, INTENT(IN) :: separator\\n  END SUBROUTINE txt_Read_mat_Int8\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"In above call, DataType can be any of the following:\", \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"INTEGER(Int8|Int16|Int32|Int64)\"\n            })\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"REAL(Real32|Real64)\"\n            })\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"LOGICAL(LGT)\"\n            })\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"STRING\"\n            })\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"example-1-reading-scalar-values\",\n      children: \"Example 1 (Reading scalar values)\"\n    }), \"\\n\", \"\\n\", (0,jsx_runtime.jsx)(MDXContent, {}), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"example-2-reading-vector-values\",\n      children: \"Example 2 (Reading vector values)\"\n    }), \"\\n\", \"\\n\", (0,jsx_runtime.jsx)(_Read_test_2_MDXContent, {})]\n  });\n}\nfunction Read_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(Read_createMdxContent, {\n      ...props\n    })\n  }) : Read_createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./docs/docs-api/TxtFile/Read.md\n");

/***/ }),

/***/ "./node_modules/@mdx-js/react/lib/index.js":
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MDXProvider: () => (/* binding */ MDXProvider),\n/* harmony export */   useMDXComponents: () => (/* binding */ useMDXComponents)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/react/index.js\");\n/**\n * @import {MDXComponents} from 'mdx/types.js'\n * @import {Component, ReactElement, ReactNode} from 'react'\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\n\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nfunction useMDXComponents(components) {\n  const contextComponents = react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {ReactElement}\n *   Element.\n * @satisfies {Component}\n */\nfunction MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Vhc2lmZW0tZG9jcy8uL25vZGVfbW9kdWxlcy9AbWR4LWpzL3JlYWN0L2xpYi9pbmRleC5qcz9hZjEyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGltcG9ydCB7TURYQ29tcG9uZW50c30gZnJvbSAnbWR4L3R5cGVzLmpzJ1xuICogQGltcG9ydCB7Q29tcG9uZW50LCBSZWFjdEVsZW1lbnQsIFJlYWN0Tm9kZX0gZnJvbSAncmVhY3QnXG4gKi9cblxuLyoqXG4gKiBAY2FsbGJhY2sgTWVyZ2VDb21wb25lbnRzXG4gKiAgIEN1c3RvbSBtZXJnZSBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7UmVhZG9ubHk8TURYQ29tcG9uZW50cz59IGN1cnJlbnRDb21wb25lbnRzXG4gKiAgIEN1cnJlbnQgY29tcG9uZW50cyBmcm9tIHRoZSBjb250ZXh0LlxuICogQHJldHVybnMge01EWENvbXBvbmVudHN9XG4gKiAgIEFkZGl0aW9uYWwgY29tcG9uZW50cy5cbiAqXG4gKiBAdHlwZWRlZiBQcm9wc1xuICogICBDb25maWd1cmF0aW9uIGZvciBgTURYUHJvdmlkZXJgLlxuICogQHByb3BlcnR5IHtSZWFjdE5vZGUgfCBudWxsIHwgdW5kZWZpbmVkfSBbY2hpbGRyZW5dXG4gKiAgIENoaWxkcmVuIChvcHRpb25hbCkuXG4gKiBAcHJvcGVydHkge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+IHwgTWVyZ2VDb21wb25lbnRzIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2NvbXBvbmVudHNdXG4gKiAgIEFkZGl0aW9uYWwgY29tcG9uZW50cyB0byB1c2Ugb3IgYSBmdW5jdGlvbiB0aGF0IGNyZWF0ZXMgdGhlbSAob3B0aW9uYWwpLlxuICogQHByb3BlcnR5IHtib29sZWFuIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2Rpc2FibGVQYXJlbnRDb250ZXh0PWZhbHNlXVxuICogICBUdXJuIG9mZiBvdXRlciBjb21wb25lbnQgY29udGV4dCAoZGVmYXVsdDogYGZhbHNlYCkuXG4gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuXG4vKiogQHR5cGUge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+fSAqL1xuY29uc3QgZW1wdHlDb21wb25lbnRzID0ge31cblxuY29uc3QgTURYQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoZW1wdHlDb21wb25lbnRzKVxuXG4vKipcbiAqIEdldCBjdXJyZW50IGNvbXBvbmVudHMgZnJvbSB0aGUgTURYIENvbnRleHQuXG4gKlxuICogQHBhcmFtIHtSZWFkb25seTxNRFhDb21wb25lbnRzPiB8IE1lcmdlQ29tcG9uZW50cyB8IG51bGwgfCB1bmRlZmluZWR9IFtjb21wb25lbnRzXVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMgdG8gdXNlIG9yIGEgZnVuY3Rpb24gdGhhdCBjcmVhdGVzIHRoZW0gKG9wdGlvbmFsKS5cbiAqIEByZXR1cm5zIHtNRFhDb21wb25lbnRzfVxuICogICBDdXJyZW50IGNvbXBvbmVudHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VNRFhDb21wb25lbnRzKGNvbXBvbmVudHMpIHtcbiAgY29uc3QgY29udGV4dENvbXBvbmVudHMgPSBSZWFjdC51c2VDb250ZXh0KE1EWENvbnRleHQpXG5cbiAgLy8gTWVtb2l6ZSB0byBhdm9pZCB1bm5lY2Vzc2FyeSB0b3AtbGV2ZWwgY29udGV4dCBjaGFuZ2VzXG4gIHJldHVybiBSZWFjdC51c2VNZW1vKFxuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIEN1c3RvbSBtZXJnZSB2aWEgYSBmdW5jdGlvbiBwcm9wXG4gICAgICBpZiAodHlwZW9mIGNvbXBvbmVudHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGNvbXBvbmVudHMoY29udGV4dENvbXBvbmVudHMpXG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7Li4uY29udGV4dENvbXBvbmVudHMsIC4uLmNvbXBvbmVudHN9XG4gICAgfSxcbiAgICBbY29udGV4dENvbXBvbmVudHMsIGNvbXBvbmVudHNdXG4gIClcbn1cblxuLyoqXG4gKiBQcm92aWRlciBmb3IgTURYIGNvbnRleHQuXG4gKlxuICogQHBhcmFtIHtSZWFkb25seTxQcm9wcz59IHByb3BlcnRpZXNcbiAqICAgUHJvcGVydGllcy5cbiAqIEByZXR1cm5zIHtSZWFjdEVsZW1lbnR9XG4gKiAgIEVsZW1lbnQuXG4gKiBAc2F0aXNmaWVzIHtDb21wb25lbnR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBNRFhQcm92aWRlcihwcm9wZXJ0aWVzKSB7XG4gIC8qKiBAdHlwZSB7UmVhZG9ubHk8TURYQ29tcG9uZW50cz59ICovXG4gIGxldCBhbGxDb21wb25lbnRzXG5cbiAgaWYgKHByb3BlcnRpZXMuZGlzYWJsZVBhcmVudENvbnRleHQpIHtcbiAgICBhbGxDb21wb25lbnRzID1cbiAgICAgIHR5cGVvZiBwcm9wZXJ0aWVzLmNvbXBvbmVudHMgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBwcm9wZXJ0aWVzLmNvbXBvbmVudHMoZW1wdHlDb21wb25lbnRzKVxuICAgICAgICA6IHByb3BlcnRpZXMuY29tcG9uZW50cyB8fCBlbXB0eUNvbXBvbmVudHNcbiAgfSBlbHNlIHtcbiAgICBhbGxDb21wb25lbnRzID0gdXNlTURYQ29tcG9uZW50cyhwcm9wZXJ0aWVzLmNvbXBvbmVudHMpXG4gIH1cblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICBNRFhDb250ZXh0LlByb3ZpZGVyLFxuICAgIHt2YWx1ZTogYWxsQ29tcG9uZW50c30sXG4gICAgcHJvcGVydGllcy5jaGlsZHJlblxuICApXG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@mdx-js/react/lib/index.js\n");

/***/ })

}]);