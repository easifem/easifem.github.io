"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkeasifem_docs"] = globalThis["webpackChunkeasifem_docs"] || []).push([["content---docs-api-abstract-function-abstract-function-b-90-2c2"],{

/***/ "./docs/docs-api/AbstractFunction/AbstractFunction_.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  assets: () => (/* binding */ assets),\n  contentTitle: () => (/* binding */ contentTitle),\n  \"default\": () => (/* binding */ MDXContent),\n  frontMatter: () => (/* binding */ frontMatter),\n  metadata: () => (/* reexport */ site_docs_docs_api_abstract_function_abstract_function_md_b90_namespaceObject),\n  toc: () => (/* binding */ toc)\n});\n\n;// ./.docusaurus/docusaurus-plugin-content-docs/docs-api/site-docs-docs-api-abstract-function-abstract-function-md-b90.json\nconst site_docs_docs_api_abstract_function_abstract_function_md_b90_namespaceObject = /*#__PURE__*/JSON.parse('{\"id\":\"AbstractFunction/AbstractFunction_\",\"title\":\"AbstractFunction\",\"description\":\"To handle analytical functions following abstract functions have been defined in EASIFEM.\",\"source\":\"@site/docs/docs-api/AbstractFunction/AbstractFunction_.md\",\"sourceDirName\":\"AbstractFunction\",\"slug\":\"/AbstractFunction/AbstractFunction_\",\"permalink\":\"/docs-api/AbstractFunction/AbstractFunction_\",\"draft\":false,\"unlisted\":false,\"editUrl\":\"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/AbstractFunction/AbstractFunction_.md\",\"tags\":[],\"version\":\"current\",\"lastUpdatedAt\":1539502055000,\"frontMatter\":{},\"sidebar\":\"tutorialSidebar\",\"previous\":{\"title\":\"AbstractFunction\",\"permalink\":\"/docs-api/AbstractFunction/\"},\"next\":{\"title\":\"AbstractKernel\",\"permalink\":\"/docs-api/AbstractKernel/\"}}');\n// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n// EXTERNAL MODULE: ./node_modules/@mdx-js/react/lib/index.js\nvar lib = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js + 2 modules\nvar Tabs = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js + 1 modules\nvar TabItem = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js\");\n;// ./docs/docs-api/AbstractFunction/AbstractFunction_.md\n\n\nconst frontMatter = {};\nconst contentTitle = 'AbstractFunction';\n\nconst assets = {\n\n};\n\n\n\n\n\nconst toc = [{\n  \"value\": \"Structure\",\n  \"id\": \"structure\",\n  \"level\": 2\n}, {\n  \"value\": \"Methods\",\n  \"id\": \"methods\",\n  \"level\": 2\n}, {\n  \"value\": \"Eval\",\n  \"id\": \"eval\",\n  \"level\": 3\n}, {\n  \"value\": \"EvalGradient\",\n  \"id\": \"evalgradient\",\n  \"level\": 3\n}, {\n  \"value\": \"GetVarName\",\n  \"id\": \"getvarname\",\n  \"level\": 3\n}];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    admonition: \"admonition\",\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    h3: \"h3\",\n    header: \"header\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.header, {\n      children: (0,jsx_runtime.jsx)(_components.h1, {\n        id: \"abstractfunction\",\n        children: \"AbstractFunction\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"To handle analytical functions following abstract functions have been defined in EASIFEM.\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"AbstractFunction_\"\n        }), \" all functions are children of this.\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"AbstractFunction1D_\"\n        }), \" abstract function in one variable\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"AbstractFunction2D_\"\n        }), \" abstract function of two variables\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"AbstractFunction3D_\"\n        }), \" abstract function of three variables\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"AbstractFunctionND_\"\n        }), \" abstract function of N variables\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"structure\",\n      children: \"Structure\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"TYPE, ABSTRACT :: AbstractFunction_\\nCONTAINS\\n  PROCEDURE, PUBLIC, PASS(Obj) :: Deallocate => func_Deallocate\\nEND TYPE AbstractFunction_\\n\"\n      })\n    }), \"\\n\", \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      defaultValue: \"0\",\n      values: [{\n        label: 'AbstractFunction',\n        value: '0'\n      }, {\n        label: 'AbstractFunction1D',\n        value: '1'\n      }, {\n        label: 'AbstractFunction2D',\n        value: '2'\n      }, {\n        label: 'AbstractFunction3D',\n        value: '3'\n      }, {\n        label: 'AbstractFunctionND',\n        value: '4'\n      }],\n      children: [(0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"0\",\n        children: (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"TYPE, ABSTRACT :: AbstractFunction_\\nCONTAINS\\n  PROCEDURE, PUBLIC, PASS(Obj) :: Deallocate => func_Deallocate\\nEND TYPE AbstractFunction_\\n\"\n          })\n        })\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"1\",\n        children: (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"TYPE, ABSTRACT, EXTENDS(AbstractFunction_) :: AbstractFunction1D_\\n  TYPE(String) :: varname\\nEND TYPE AbstractFunction1D_\\n\"\n          })\n        })\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"2\",\n        children: (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"TYPE, ABSTRACT, EXTENDS(AbstractFunction_) :: AbstractFunction2D_\\n  TYPE(String) :: varname(2)\\nEND TYPE AbstractFunction2D_\\n\"\n          })\n        })\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"3\",\n        children: (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"TYPE, ABSTRACT, EXTENDS(AbstractFunction_) :: AbstractFunction3D_\\n  TYPE(String) :: varname(3)\\nEND TYPE AbstractFunction3D_\\n\"\n          })\n        })\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"4\",\n        children: (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"TYPE, ABSTRACT, EXTENDS(AbstractFunction_) :: AbstractFunctionND_\\n  TYPE(String), ALLOCATABLE :: varname(:)\\nEND TYPE AbstractFunctionND_\\n\"\n          })\n        })\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.admonition, {\n      type: \"note\",\n      children: [(0,jsx_runtime.jsxs)(_components.p, {\n        children: [\"Following classes are children of \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"Abstract1D_\"\n        })]\n      }), (0,jsx_runtime.jsxs)(_components.ul, {\n        children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n          children: (0,jsx_runtime.jsx)(_components.a, {\n            href: \"/docs-api/Polynomial1D/Polynomial1D_\",\n            children: \"Polynomial1D_\"\n          })\n        }), \"\\n\"]\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"methods\",\n      children: \"Methods\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"AbstractFunctions are equipied with following methdods:\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"Deallocate()\"\n        }), \" To deallocate/ destroy the instance/variable.\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"Eval\"\n        }), \" Evaluate the function\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"EvalGradient\"\n        }), \" Evaluate the first gradient.\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"GetVarName\"\n        }), \" return the name of agrumnets of the function.\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"eval\",\n      children: \"Eval\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [(0,jsx_runtime.jsx)(_components.code, {\n        children: \"Eval\"\n      }), \" method evaluates the function. For \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"AbstractFunction1D,2D,3D\"\n      }), \" it is an ELEMENTAL function. In case of \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"AbstractFunctionND\"\n      }), \" it is only PURE.\"]\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      defaultValue: \"1\",\n      values: [{\n        label: 'AbstractFunction1D',\n        value: '1'\n      }, {\n        label: 'AbstractFunction2D',\n        value: '2'\n      }, {\n        label: 'AbstractFunction3D',\n        value: '3'\n      }, {\n        label: 'AbstractFunctionND',\n        value: '4'\n      }],\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"1\",\n        children: [(0,jsx_runtime.jsxs)(_components.p, {\n          children: [(0,jsx_runtime.jsx)(_components.code, {\n            children: \"Eval\"\n          }), \" method for \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"AbstractFunction1D_\"\n          })]\n        }), (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"ABSTRACT INTERFACE\\n  RECURSIVE PURE FUNCTION Eval(obj, x) RESULT(ans)\\n    IMPORT AbstractFunction1D_, DFP\\n    CLASS(AbstractFunction1D_), INTENT(IN) :: obj\\n    REAL(DFP), INTENT(IN) :: x\\n    REAL(DFP) :: ans\\n  END FUNCTION Eval\\nEND INTERFACE\\n\"\n          })\n        })]\n      }), (0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"2\",\n        children: [(0,jsx_runtime.jsxs)(_components.p, {\n          children: [(0,jsx_runtime.jsx)(_components.code, {\n            children: \"Eval\"\n          }), \" method for \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"AbstractFunction2D_\"\n          })]\n        }), (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"ABSTRACT INTERFACE\\n  ELEMENTAL FUNCTION Eval(obj, x, y) RESULT(ans)\\n    IMPORT AbstractFunction2D_, DFP\\n    CLASS(AbstractFunction2D_), INTENT(IN) :: obj\\n    REAL(DFP), INTENT(IN) :: x\\n    REAL(DFP), INTENT(IN) :: y\\n    REAL(DFP) :: ans\\n  END FUNCTION Eval\\nEND INTERFACE\\n\"\n          })\n        })]\n      }), (0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"3\",\n        children: [(0,jsx_runtime.jsxs)(_components.p, {\n          children: [(0,jsx_runtime.jsx)(_components.code, {\n            children: \"Eval\"\n          }), \" method for \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"AbstractFunction3D_\"\n          })]\n        }), (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"ABSTRACT INTERFACE\\n  ELEMENTAL FUNCTION Eval(obj, x, y, z) RESULT(ans)\\n    IMPORT AbstractFunction3D_, DFP\\n    CLASS(AbstractFunction3D_), INTENT(IN) :: obj\\n    REAL(DFP), INTENT(IN) :: x\\n    REAL(DFP), INTENT(IN) :: y\\n    REAL(DFP), INTENT(IN) :: z\\n    REAL(DFP) :: ans\\n  END FUNCTION Eval\\nEND INTERFACE\\n\"\n          })\n        })]\n      }), (0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"4\",\n        children: [(0,jsx_runtime.jsxs)(_components.p, {\n          children: [(0,jsx_runtime.jsx)(_components.code, {\n            children: \"Eval\"\n          }), \" method for \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"AbstractFunctionND_\"\n          })]\n        }), (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"ABSTRACT INTERFACE\\n  PURE FUNCTION Eval(obj, x) RESULT(ans)\\n    IMPORT AbstractFunctionND_, DFP\\n    CLASS(AbstractFunctionND_), INTENT(IN) :: obj\\n    REAL(DFP), INTENT(IN) :: x(:)\\n    REAL(DFP) :: ans\\n  END FUNCTION Eval\\nEND INTERFACE\\n\"\n          })\n        })]\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"evalgradient\",\n      children: \"EvalGradient\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [(0,jsx_runtime.jsx)(_components.code, {\n        children: \"EvalGradient\"\n      }), \" computes the first derivative of the function at given argument.\"]\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      defaultValue: \"1\",\n      values: [{\n        label: 'AbstractFunction1D',\n        value: '1'\n      }, {\n        label: 'AbstractFunction2D',\n        value: '2'\n      }, {\n        label: 'AbstractFunction3D',\n        value: '3'\n      }, {\n        label: 'AbstractFunctionND',\n        value: '4'\n      }],\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"1\",\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"ABSTRACT INTERFACE\\n  RECURSIVE PURE FUNCTION EvalGradient(obj, x) RESULT(ans)\\n    IMPORT AbstractFunction1D_, DFP\\n    CLASS(AbstractFunction1D_), INTENT(IN) :: obj\\n    REAL(DFP), INTENT(IN) :: x\\n    REAL(DFP) :: ans\\n  END FUNCTION EvalGradient\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsx)(_components.admonition, {\n          type: \"info\",\n          children: (0,jsx_runtime.jsxs)(_components.p, {\n            children: [\"EvalGradient method for \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"AbstractFunction1D_\"\n            })]\n          })\n        })]\n      }), (0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"2\",\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"ABSTRACT INTERFACE\\n  ELEMENTAL FUNCTION EvalGradient(obj, x, y, dim) RESULT(ans)\\n    IMPORT AbstractFunction2D_, DFP, I4B\\n    CLASS(AbstractFunction2D_), INTENT(IN) :: obj\\n    REAL(DFP), INTENT(IN) :: x\\n    REAL(DFP), INTENT(IN) :: y\\n    INTEGER(I4B), INTENT(IN) :: dim\\n    REAL(DFP) :: ans\\n  END FUNCTION EvalGradient\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsx)(_components.admonition, {\n          type: \"info\",\n          children: (0,jsx_runtime.jsxs)(_components.p, {\n            children: [\"Here, \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"dim\"\n            }), \" denotes the argument with respect to which the derivative is computed.\"]\n          })\n        })]\n      }), (0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"3\",\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"ABSTRACT INTERFACE\\n  ELEMENTAL FUNCTION EvalGradient(obj, x, y, z, dim)  &\\n    & RESULT(ans)\\n    IMPORT AbstractFunction3D_, DFP, I4B\\n    CLASS(AbstractFunction3D_), INTENT(IN) :: obj\\n    REAL(DFP), INTENT(IN) :: x\\n    REAL(DFP), INTENT(IN) :: y\\n    REAL(DFP), INTENT(IN) :: z\\n    INTEGER(I4B), INTENT(IN) :: dim\\n    REAL(DFP) :: ans\\n  END FUNCTION EvalGradient\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsx)(_components.admonition, {\n          type: \"info\",\n          children: (0,jsx_runtime.jsxs)(_components.p, {\n            children: [\"Here, \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"dim\"\n            }), \" denotes the argument with respect to which the derivative is computed.\"]\n          })\n        })]\n      }), (0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"4\",\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"ABSTRACT INTERFACE\\n  PURE FUNCTION EvalGradient(obj, x, dim) RESULT(ans)\\n    IMPORT AbstractFunctionND_, DFP, I4B\\n    CLASS(AbstractFunctionND_), INTENT(IN) :: obj\\n    REAL(DFP), INTENT(IN) :: x(:)\\n    INTEGER(I4B), INTENT(IN) :: dim\\n    REAL(DFP) :: ans\\n  END FUNCTION EvalGradient\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsx)(_components.admonition, {\n          type: \"info\",\n          children: (0,jsx_runtime.jsxs)(_components.p, {\n            children: [\"Here, \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"dim\"\n            }), \" denotes the argument with respect to which the derivative is computed.\"]\n          })\n        })]\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"getvarname\",\n      children: \"GetVarName\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [(0,jsx_runtime.jsx)(_components.code, {\n        children: \"GetVarName\"\n      }), \" returns the variable name as an instance of \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"String\"\n      }), \".\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./docs/docs-api/AbstractFunction/AbstractFunction_.md\n");

/***/ })

}]);