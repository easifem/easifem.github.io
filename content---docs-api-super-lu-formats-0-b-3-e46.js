"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkeasifem_docs"] = globalThis["webpackChunkeasifem_docs"] || []).push([["content---docs-api-super-lu-formats-0-b-3-e46"],{

/***/ "./docs/docs-api/SuperLU/formats.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  assets: () => (/* binding */ assets),\n  contentTitle: () => (/* binding */ contentTitle),\n  \"default\": () => (/* binding */ MDXContent),\n  frontMatter: () => (/* binding */ frontMatter),\n  metadata: () => (/* reexport */ site_docs_docs_api_super_lu_formats_md_0b3_namespaceObject),\n  toc: () => (/* binding */ toc)\n});\n\n;// ./.docusaurus/docusaurus-plugin-content-docs/docs-api/site-docs-docs-api-super-lu-formats-md-0b3.json\nconst site_docs_docs_api_super_lu_formats_md_0b3_namespaceObject = /*#__PURE__*/JSON.parse('{\"id\":\"SuperLU/formats\",\"title\":\"Formats\",\"description\":\"Yesnot\",\"source\":\"@site/docs/docs-api/SuperLU/formats.md\",\"sourceDirName\":\"SuperLU\",\"slug\":\"/SuperLU/formats\",\"permalink\":\"/docs-api/SuperLU/formats\",\"draft\":false,\"unlisted\":false,\"editUrl\":\"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/SuperLU/formats.md\",\"tags\":[],\"version\":\"current\",\"lastUpdatedAt\":1539502055000,\"frontMatter\":{},\"sidebar\":\"tutorialSidebar\",\"previous\":{\"title\":\"Utility\",\"permalink\":\"/docs-api/SuperLU/dutil\"},\"next\":{\"title\":\"Options\",\"permalink\":\"/docs-api/SuperLU/options\"}}');\n// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n// EXTERNAL MODULE: ./node_modules/@mdx-js/react/lib/index.js\nvar lib = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n;// ./docs/docs-api/SuperLU/formats.md\n\n\nconst frontMatter = {};\nconst contentTitle = 'Formats';\n\nconst assets = {\n\n};\n\n\n\nconst toc = [{\n  \"value\": \"Yes_no_t\",\n  \"id\": \"yes_no_t\",\n  \"level\": 2\n}, {\n  \"value\": \"Fact_t\",\n  \"id\": \"fact_t\",\n  \"level\": 2\n}, {\n  \"value\": \"RowPerm_t\",\n  \"id\": \"rowperm_t\",\n  \"level\": 2\n}, {\n  \"value\": \"ColPerm_t\",\n  \"id\": \"colperm_t\",\n  \"level\": 2\n}, {\n  \"value\": \"Trans_t\",\n  \"id\": \"trans_t\",\n  \"level\": 2\n}, {\n  \"value\": \"DiagScale_t\",\n  \"id\": \"diagscale_t\",\n  \"level\": 2\n}, {\n  \"value\": \"IterRefine_t\",\n  \"id\": \"iterrefine_t\",\n  \"level\": 2\n}, {\n  \"value\": \"MemType_t\",\n  \"id\": \"memtype_t\",\n  \"level\": 2\n}, {\n  \"value\": \"Stack_end_t\",\n  \"id\": \"stack_end_t\",\n  \"level\": 2\n}, {\n  \"value\": \"LU_space_t\",\n  \"id\": \"lu_space_t\",\n  \"level\": 2\n}, {\n  \"value\": \"Norm_t\",\n  \"id\": \"norm_t\",\n  \"level\": 2\n}, {\n  \"value\": \"Milu_t\",\n  \"id\": \"milu_t\",\n  \"level\": 2\n}, {\n  \"value\": \"MType_t\",\n  \"id\": \"mtype_t\",\n  \"level\": 2\n}, {\n  \"value\": \"DType_t\",\n  \"id\": \"dtype_t\",\n  \"level\": 2\n}, {\n  \"value\": \"SType_t\",\n  \"id\": \"stype_t\",\n  \"level\": 2\n}, {\n  \"value\": \"NCFormat\",\n  \"id\": \"ncformat\",\n  \"level\": 2\n}, {\n  \"value\": \"NRFormat\",\n  \"id\": \"nrformat\",\n  \"level\": 2\n}, {\n  \"value\": \"SCformat\",\n  \"id\": \"scformat\",\n  \"level\": 2\n}, {\n  \"value\": \"SCPformat\",\n  \"id\": \"scpformat\",\n  \"level\": 2\n}, {\n  \"value\": \"NCPformat\",\n  \"id\": \"ncpformat\",\n  \"level\": 2\n}, {\n  \"value\": \"DNformat\",\n  \"id\": \"dnformat\",\n  \"level\": 2\n}, {\n  \"value\": \"<code>superlu_options_t</code>\",\n  \"id\": \"superlu_options_t\",\n  \"level\": 2\n}, {\n  \"value\": \"SuperLUStat_t\",\n  \"id\": \"superlustat_t\",\n  \"level\": 2\n}];\nfunction _createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    header: \"header\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.header, {\n      children: (0,jsx_runtime.jsx)(_components.h1, {\n        id: \"formats\",\n        children: \"Formats\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"yes_no_t\",\n      children: \"Yes_no_t\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"TYPE :: yes_no_\\n  INTEGER(C_INT) :: NO, YES\\nEND TYPE yes_no_\\n\\nTYPE(yes_no_), PUBLIC, PARAMETER :: yes_no_t = yes_no_(NO, YES)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"fact_t\",\n      children: \"Fact_t\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"TYPE :: fact_\\n  INTEGER(C_INT) :: DOFACT, SamePattern, SamePattern_SameRowPerm, FACTORED\\nEND TYPE fact_\\n\\nTYPE(fact_), PUBLIC, PARAMETER :: fact_t = fact_(&\\n  & DOFACT, SamePattern, SamePattern_SameRowPerm, FACTORED)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"rowperm_t\",\n      children: \"RowPerm_t\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"TYPE :: rowperm_\\n  INTEGER(C_INT) :: NOROWPERM, LargeDiag_MC64, LargeDiag_HWPM, MY_PERMR\\nEND TYPE rowperm_\\n\\nTYPE(rowperm_), PUBLIC, PARAMETER :: rowperm_t = rowperm_( &\\n  & NOROWPERM, LargeDiag_MC64, LargeDiag_HWPM, MY_PERMR)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"colperm_t\",\n      children: \"ColPerm_t\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"TYPE :: colperm_\\n  INTEGER(C_INT) :: NATURAL, MMD_ATA, MMD_AT_PLUS_A, COLAMD, &\\n   & METIS_AT_PLUS_A, PARMETIS, ZOLTAN, MY_PERMC\\nEND TYPE\\n\\nTYPE(colperm_), PUBLIC, PARAMETER :: colperm_t = colperm_(&\\n  & NATURAL, MMD_ATA, MMD_AT_PLUS_A, COLAMD, &\\n  & METIS_AT_PLUS_A, PARMETIS, ZOLTAN, MY_PERMC)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"trans_t\",\n      children: \"Trans_t\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"TYPE :: trans_\\n  INTEGER(C_INT) :: NOTRANS, TRANS, CONJ\\nEND TYPE\\n\\nTYPE(trans_), PARAMETER, PUBLIC :: trans_t = trans_(&\\n  & NOTRANS, TRANS, CONJ)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"diagscale_t\",\n      children: \"DiagScale_t\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"TYPE :: DiagScale_\\n  INTEGER(C_INT) :: NOEQUIL, ROW, COL, BOTH\\nEND TYPE\\n\\nTYPE(DiagScale_), PUBLIC, PARAMETER :: DiagScale_t = DiagScale_(&\\n& NOEQUIL, ROW, COL, BOTH)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"iterrefine_t\",\n      children: \"IterRefine_t\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"TYPE :: IterRefine_\\n  INTEGER(C_INT) :: NOREFINE, SLU_SINGLE = 1, SLU_DOUBLE, SLU_EXTRA\\nEND TYPE\\n\\nTYPE(IterRefine_), PUBLIC, PARAMETER :: IterRefine_t = IterRefine_(&\\n  & NOREFINE, SLU_SINGLE, SLU_DOUBLE, SLU_EXTRA)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"memtype_t\",\n      children: \"MemType_t\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"TYPE :: MemType_\\n  INTEGER(C_INT) :: USUB, LSUB, UCOL, LUSUP, LLVL, ULVL, NO_MEMTYPE\\nEND TYPE MemType_\\n\\nTYPE(MemType_), PUBLIC, PARAMETER :: MemType_t = MemType_(&\\n  & USUB, LSUB, UCOL, LUSUP, LLVL, ULVL, NO_MEMTYPE)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"stack_end_t\",\n      children: \"Stack_end_t\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"TYPE :: stack_end_\\n  INTEGER(C_INT) :: HEAD, TAIL\\nEND TYPE\\n\\nTYPE(stack_end_), PUBLIC, PARAMETER :: stack_end_t = stack_end_(&\\n & HEAD, TAIL)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"lu_space_t\",\n      children: \"LU_space_t\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"TYPE :: LU_space_\\n  INTEGER(C_INT) :: SYSTEM, USER\\nEND TYPE\\n\\nTYPE(LU_space_), PARAMETER, PUBLIC :: LU_space_t = LU_space_(&\\n& SYSTEM, USER)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"norm_t\",\n      children: \"Norm_t\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"TYPE :: norm_\\n  INTEGER(C_INT) :: ONE_NORM, TWO_NORM, INF_NORM\\nEND TYPE\\n\\nTYPE(norm_), PUBLIC, PARAMETER :: norm_t = norm_(&\\n & ONE_NORM, TWO_NORM, INF_NORM)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"milu_t\",\n      children: \"Milu_t\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"TYPE :: milu_\\n  INTEGER(C_INT) :: SILU, SMILU_1, SMILU_2, SMILU_3\\nEND TYPE milu_\\n\\nTYPE(milu_), PARAMETER, PUBLIC :: milu_t = milu_(&\\n  &  SILU, SMILU_1, SMILU_2, SMILU_3)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"mtype_t\",\n      children: \"MType_t\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"TYPE :: Mtype_\\n  INTEGER(C_INT) :: SLU_GE\\n  INTEGER(C_INT) :: SLU_TRLU\\n  INTEGER(C_INT) :: SLU_TRUU\\n  INTEGER(C_INT) :: SLU_TRL\\n  INTEGER(C_INT) :: SLU_TRU\\n  INTEGER(C_INT) :: SLU_SYL\\n  INTEGER(C_INT) :: SLU_SYU\\n  INTEGER(C_INT) :: SLU_HEL\\n  INTEGER(C_INT) :: SLU_HEU\\nEND TYPE Mtype_\\n\\n\\nTYPE(Mtype_), PUBLIC, PARAMETER :: Mtype_t = Mtype_(&\\n  & SLU_GE=SLU_GE, &\\n  & SLU_TRLU=SLU_TRLU, &\\n  & SLU_TRUU=SLU_TRUU, &\\n  & SLU_TRL=SLU_TRL, &\\n  & SLU_TRU=SLU_TRU, &\\n  & SLU_SYL=SLU_SYL, &\\n  & SLU_SYU=SLU_SYU, &\\n  & SLU_HEL=SLU_HEL, &\\n  & SLU_HEU=SLU_HEU)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"dtype_t\",\n      children: \"DType_t\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"TYPE :: Dtype_\\n  INTEGER(C_INT) :: SLU_S\\n  INTEGER(C_INT) :: SLU_D\\n  INTEGER(C_INT) :: SLU_C\\n  INTEGER(C_INT) :: SLU_Z\\nEND TYPE Dtype_\\n\\n\\nTYPE(Dtype_), PARAMETER, PUBLIC :: Dtype_t = Dtype_(&\\n  & SLU_S=SLU_S, &\\n  & SLU_D=SLU_D, &\\n  & SLU_C=SLU_C, &\\n  & SLU_Z=SLU_Z)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"stype_t\",\n      children: \"SType_t\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"TYPE :: Stype_\\n  INTEGER(C_INT) :: SLU_NC\\n  INTEGER(C_INT) :: SLU_NCP\\n  INTEGER(C_INT) :: SLU_NR\\n  INTEGER(C_INT) :: SLU_SC\\n  INTEGER(C_INT) :: SLU_SCP\\n  INTEGER(C_INT) :: SLU_SR\\n  INTEGER(C_INT) :: SLU_DN\\n  INTEGER(C_INT) :: SLU_NR_LOC\\nEND TYPE Stype_\\n\\n\\nTYPE(Stype_), PARAMETER, PUBLIC :: Stype_t = Stype_(&\\n  & SLU_NC=SLU_NC, &\\n  & SLU_NCP=SLU_NCP, &\\n  & SLU_NR=SLU_NR, &\\n  & SLU_SC=SLU_SC, &\\n  & SLU_SCP=SLU_SCP, &\\n  & SLU_SR=SLU_SR, &\\n  & SLU_DN=SLU_DN, &\\n  & SLU_NR_LOC=SLU_NR_LOC &\\n  & )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"ncformat\",\n      children: \"NCFormat\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"! typedef struct {\\n!   int_t nnz;     /* number of nonzeros in the matrix */\\n!   void *nzval;   /* pointer to array of nonzero values, packed by column */\\n!   int_t *rowind; /* pointer to array of row indices of the nonzeros */\\n!   int_t *colptr; /* pointer to array of beginning of columns in nzval[]\\n!                     and rowind[]  */\\n!                  /* Note:\\n!                     Zero-based indexing is used;\\n!                     colptr[] has ncol+1 entries, the last one pointing\\n!                     beyond the last column, so that colptr[ncol] = nnz. */\\n! } NCformat;\\n\\nTYPE, BIND(c) :: NCformat\\n  INTEGER(C_INT) :: nnz\\n  TYPE(C_PTR) :: nzval\\n  TYPE(C_PTR) :: rowind\\n  TYPE(C_PTR) :: colptr\\nEND TYPE NCformat\\n\\nPUBLIC :: NCformat\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"nrformat\",\n      children: \"NRFormat\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"! typedef struct {\\n!   int_t nnz;     /* number of nonzeros in the matrix */\\n!   void *nzval;   /* pointer to array of nonzero values, packed by raw */\\n!   int_t *colind; /* pointer to array of columns indices of the nonzeros */\\n!   int_t *rowptr; /* pointer to array of beginning of rows in nzval[]\\n!                     and colind[]  */\\n!                  /* Note:\\n!                     Zero-based indexing is used;\\n!                     rowptr[] has nrow+1 entries, the last one pointing\\n!                     beyond the last row, so that rowptr[nrow] = nnz. */\\n! } NRformat;\\n\\nTYPE, BIND(c) :: NRformat\\n  INTEGER(C_INT) :: nnz\\n  TYPE(C_PTR) :: nzval\\n  TYPE(C_PTR) :: colind\\n  TYPE(C_PTR) :: rowptr\\nEND TYPE NRformat\\n\\nPUBLIC :: NRformat\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"scformat\",\n      children: \"SCformat\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"! typedef struct {\\n!   int_t nnz;    /* number of nonzeros in the matrix */\\n!   int_t nsuper; /* number of supernodes, minus 1 */\\n!   void *nzval;  /* pointer to array of nonzero values, packed by column */\\n!   int_t *nzval_colptr; /* pointer to array of beginning of columns in nzval[] */\\n!   int_t *rowind;       /* pointer to array of compressed row indices of\\n!                           rectangular supernodes */\\n!   int_t\\n!       *rowind_colptr; /* pointer to array of beginning of columns in rowind[] */\\n!   int_t *col_to_sup;  /* col_to_sup[j] is the supernode number to which column\\n!                        j belongs; mapping from column to supernode number. */\\n!   int_t *sup_to_col;  /* sup_to_col[s] points to the start of the s-th\\n!                        supernode; mapping from supernode number to column.\\n!                        e.g.: col_to_sup: 0 1 2 2 3 3 3 4 4 4 4 4 4 (ncol=12)\\n!                              sup_to_col: 0 1 2 4 7 12           (nsuper=4) */\\n!                       /* Note:\\n!                          Zero-based indexing is used;\\n!                          nzval_colptr[], rowind_colptr[], col_to_sup and\\n!                          sup_to_col[] have ncol+1 entries, the last one\\n!                          pointing beyond the last column.\\n!                          For col_to_sup[], only the first ncol entries are\\n!                          defined. For sup_to_col[], only the first nsuper+2\\n!                          entries are defined. */\\n! } SCformat;\\n!\\n\\nTYPE, BIND(c) :: SCformat\\n  INTEGER(C_INT) :: nnz\\n  INTEGER(C_INT) :: nsuper\\n  TYPE(C_PTR) :: nzval\\n  TYPE(C_PTR) :: nzval_colptr\\n  TYPE(C_PTR) :: rowind\\n  TYPE(C_PTR) :: rowind_colptr\\n  TYPE(C_PTR) :: col_to_sup\\n  TYPE(C_PTR) :: sup_to_col\\nEND TYPE SCformat\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"scpformat\",\n      children: \"SCPformat\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"! typedef struct {\\n!   int_t nnz;    /*number of nonzeros in the matrix*/\\n!   int_t nsuper; /*number of supernodes*/\\n!   void *nzval;  /* pointer to array of nonzero values, packed by column */\\n!   int_t*nzval_colbeg;  /*nzval_colbeg[j] points to beginning of column j\\n!                            in nzval[]*/\\n!   int_t *nzval_colend;  /* nzval_colend[j] points to one past the last element\\n!                            of column j in nzval[] */\\n!   int_t*rowind;        /*pointer to array of compressed row indices of\\n!                            rectangular supernodes*/\\n!   int_t *rowind_colbeg; /* rowind_colbeg[j] points to beginning of column j\\n!                            in rowind[] */\\n!   int_t*rowind_colend; /*rowind_colend[j] points to one past the last element\\n!                            of column j in rowind[]*/\\n!   int_t *col_to_sup;    /* col_to_sup[j] is the supernode number to which column\\n!                            j belongs; mapping from column to supernode. */\\n!   int_t*sup_to_colbeg; /*sup_to_colbeg[s] points to the start of the s-th\\n!                            supernode; mapping from supernode to column.*/\\n!   int_t *sup_to_colend; /* sup_to_colend[s] points to one past the end of the\\n!                            s-th supernode; mapping from supernode number to\\n!                            column.\\n!                         e.g.: col_to_sup: 0 1 2 2 3 3 3 4 4 4 4 4 4 (ncol=12)\\n!                               sup_to_colbeg: 0 1 2 4 7              (nsuper=4)\\n!                               sup_to_colend: 1 2 4 7 12                    */\\n!                         /* Note:\\n!                            Zero-based indexing is used;\\n!                            nzval_colptr[], rowind_colptr[], col_to_sup and\\n!                            sup_to_col[] have ncol+1 entries, the last one\\n!                            pointing beyond the last column.         */\\n! } SCPformat;\\n\\nTYPE, BIND(c) :: SCPformat\\n  INTEGER(C_INT) :: nnz, nsuper\\n  TYPE(C_PTR) :: nzval, nzval_colbeg, nzval_colend, rowind, &\\n    & rowind_colbeg, rowindx_colend, col_to_sup, sup_to_colbeg, &\\n    & sup_to_colend\\nEND TYPE SCPformat\\n\\nPUBLIC :: SCPformat\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"ncpformat\",\n      children: \"NCPformat\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"! typedef struct {\\n!   int_t nnz;     /*number of nonzeros in the matrix*/\\n!   void *nzval;   /* pointer to array of nonzero values, packed by column */\\n!   int_t*rowind; /*pointer to array of row indices of the nonzeros*/\\n!   /*Note: nzval[]/rowind[] always have the same length*/\\n!   int_t *colbeg; /* colbeg[j] points to the beginning of column j in nzval[]\\n!                     and rowind[]  */\\n!   int_t*colend; /*colend[j] points to one past the last element of column\\n!                     j in nzval[] and rowind[]*/\\n!                  /*Note:\\n!                     Zero-based indexing is used;\\n!                     The consecutive columns of the nonzeros may not be\\n!                     contiguous in storage, because the matrix has been\\n!                     postmultiplied by a column permutation matrix.*/\\n! } NCPformat;\\n\\nTYPE, BIND(c) :: NCPformat\\n  INTEGER(C_INT) :: nnz\\n  TYPE(C_PTR) :: nzval, rowindx, colbeg, colend\\nEND TYPE NCPformat\\n\\nPUBLIC :: NCPformat\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"dnformat\",\n      children: \"DNformat\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"! typedef struct {\\n!   int_t lda;   /*leading dimension*/\\n!   void *nzval; /* array of size lda*ncol to represent a dense matrix*/\\n! } DNformat;\\n\\nTYPE, BIND(c) :: DNformat\\n  INTEGER(C_INT) :: lda\\n  TYPE(C_PTR) :: nzval\\nEND TYPE DNformat\\n\\nPUBLIC :: DNformat\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"superlu_options_t\",\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        children: \"superlu_options_t\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"! typedef struct {\\n!     fact_t        Fact;\\n!     yes_no_t      Equil;\\n!     colperm_t     ColPerm;\\n!     trans_t       Trans;\\n!     IterRefine_t  IterRefine;\\n!     double        DiagPivotThresh;\\n!     yes_no_t      SymmetricMode;\\n!     yes_no_t      PivotGrowth;\\n!     yes_no_t      ConditionNumber;\\n!     rowperm_t     RowPerm;\\n!     int           ILU_DropRule;\\n!     double          ILU_DropTol;    /* threshold for dropping */\\n!     double          ILU_FillFactor; /* gamma in the secondary dropping */\\n!     norm_t          ILU_Norm;       /* infinity-norm, 1-norm, or 2-norm */\\n!     double          ILU_FillTol;    /* threshold for zero pivot perturbation */\\n!     milu_t          ILU_MILU;\\n!     double          ILU_MILU_Dim;   /* Dimension of PDE (if available) */\\n!     yes_no_t      ParSymbFact;\\n!     yes_no_t      ReplaceTinyPivot; /* used in SuperLU_DIST */\\n!     yes_no_t      SolveInitialized;\\n!     yes_no_t      RefineInitialized;\\n!     yes_no_t      PrintStat;\\n!     int           nnzL, nnzU;      /* used to store nnzs for now       */\\n!     int           num_lookaheads;  /* num of levels in look-ahead      */\\n!     yes_no_t      lookahead_etree; /* use etree computed from the\\n!                                       serial symbolic factorization */\\n!     yes_no_t      SymPattern;      /* symmetric factorization          */\\n! } superlu_options_t;\\n!\\n\\nTYPE, BIND(C) :: superlu_options_t\\n  INTEGER(C_INT) :: Fact\\n  INTEGER(C_INT) :: Equil\\n  INTEGER(C_INT) :: ColPerm\\n  INTEGER(C_INT) :: Trans\\n  INTEGER(C_INT) :: IterRefine\\n  REAL(C_DOUBLE) :: DiagPivotThresh\\n  INTEGER(C_INT) :: SymmetricMode\\n  INTEGER(C_INT) :: PivotGrowth\\n  INTEGER(C_INT) :: ConditionNumber\\n  INTEGER(C_INT) :: RowPerm\\n  INTEGER(C_INT) :: ILU_DropRule\\n  REAL(C_DOUBLE) :: ILU_DropTol\\n  REAL(C_DOUBLE) :: ILU_FillFactor\\n  INTEGER(C_INT) :: ILU_Norm\\n  REAL(C_DOUBLE) :: ILU_FillTol\\n  INTEGER(C_INT) :: ILU_MILU; \\n  REAL(C_DOUBLE) :: ILU_MILU_Dim\\n  INTEGER(C_INT) :: ParSymbFact\\n  INTEGER(C_INT) :: ReplaceTinyPivot\\n  INTEGER(C_INT) :: SolveInitialized\\n  INTEGER(C_INT) :: RefineInitialized\\n  INTEGER(C_INT) :: PrintStat = 0\\n  INTEGER(C_INT) :: nnzL\\n  INTEGER(C_INT) :: nnzU\\n  INTEGER(C_INT) :: num_lookaheads\\n  INTEGER(C_INT) :: lookahead_etree\\n  INTEGER(C_INT) :: SymPattern\\nEND TYPE superlu_options_t\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"superlustat_t\",\n      children: \"SuperLUStat_t\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"! typedef struct {\\n!     int     *panel_histo; /* histogram of panel size distribution */\\n!     double  *utime;       /* running time at various phases */\\n!     flops_t *ops;         /* operation count at various phases */\\n!     int     TinyPivots;   /* number of tiny pivots */\\n!     int     RefineSteps;  /* number of iterative refinement steps */\\n!     int     expansions;   /* number of memory expansions */\\n! } SuperLUStat_t;\\n\\nTYPE, BIND(C) :: SuperLUStat_t\\n  ! INTEGER(C_INT), POINTER :: panel_histo(:)\\n  ! REAL(C_DOUBLE), POINTER :: utime(:)\\n  ! REAL(C_FLOAT), POINTER :: ops(:)\\n  TYPE(C_PTR) :: panel_histo\\n  TYPE(C_PTR) :: utime\\n  TYPE(C_PTR) :: ops\\n  INTEGER(C_INT) :: TinyPivots\\n  INTEGER(C_INT) :: RefineSteps\\n  INTEGER(C_INT) :: expansions\\nEND TYPE SuperLUStat_t\\n\\nPUBLIC :: SuperLUStat_t\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./docs/docs-api/SuperLU/formats.md\n");

/***/ }),

/***/ "./node_modules/@mdx-js/react/lib/index.js":
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MDXProvider: () => (/* binding */ MDXProvider),\n/* harmony export */   useMDXComponents: () => (/* binding */ useMDXComponents)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/react/index.js\");\n/**\n * @import {MDXComponents} from 'mdx/types.js'\n * @import {Component, ReactElement, ReactNode} from 'react'\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\n\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nfunction useMDXComponents(components) {\n  const contextComponents = react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {ReactElement}\n *   Element.\n * @satisfies {Component}\n */\nfunction MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Vhc2lmZW0tZG9jcy8uL25vZGVfbW9kdWxlcy9AbWR4LWpzL3JlYWN0L2xpYi9pbmRleC5qcz9hZjEyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGltcG9ydCB7TURYQ29tcG9uZW50c30gZnJvbSAnbWR4L3R5cGVzLmpzJ1xuICogQGltcG9ydCB7Q29tcG9uZW50LCBSZWFjdEVsZW1lbnQsIFJlYWN0Tm9kZX0gZnJvbSAncmVhY3QnXG4gKi9cblxuLyoqXG4gKiBAY2FsbGJhY2sgTWVyZ2VDb21wb25lbnRzXG4gKiAgIEN1c3RvbSBtZXJnZSBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7UmVhZG9ubHk8TURYQ29tcG9uZW50cz59IGN1cnJlbnRDb21wb25lbnRzXG4gKiAgIEN1cnJlbnQgY29tcG9uZW50cyBmcm9tIHRoZSBjb250ZXh0LlxuICogQHJldHVybnMge01EWENvbXBvbmVudHN9XG4gKiAgIEFkZGl0aW9uYWwgY29tcG9uZW50cy5cbiAqXG4gKiBAdHlwZWRlZiBQcm9wc1xuICogICBDb25maWd1cmF0aW9uIGZvciBgTURYUHJvdmlkZXJgLlxuICogQHByb3BlcnR5IHtSZWFjdE5vZGUgfCBudWxsIHwgdW5kZWZpbmVkfSBbY2hpbGRyZW5dXG4gKiAgIENoaWxkcmVuIChvcHRpb25hbCkuXG4gKiBAcHJvcGVydHkge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+IHwgTWVyZ2VDb21wb25lbnRzIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2NvbXBvbmVudHNdXG4gKiAgIEFkZGl0aW9uYWwgY29tcG9uZW50cyB0byB1c2Ugb3IgYSBmdW5jdGlvbiB0aGF0IGNyZWF0ZXMgdGhlbSAob3B0aW9uYWwpLlxuICogQHByb3BlcnR5IHtib29sZWFuIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2Rpc2FibGVQYXJlbnRDb250ZXh0PWZhbHNlXVxuICogICBUdXJuIG9mZiBvdXRlciBjb21wb25lbnQgY29udGV4dCAoZGVmYXVsdDogYGZhbHNlYCkuXG4gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuXG4vKiogQHR5cGUge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+fSAqL1xuY29uc3QgZW1wdHlDb21wb25lbnRzID0ge31cblxuY29uc3QgTURYQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoZW1wdHlDb21wb25lbnRzKVxuXG4vKipcbiAqIEdldCBjdXJyZW50IGNvbXBvbmVudHMgZnJvbSB0aGUgTURYIENvbnRleHQuXG4gKlxuICogQHBhcmFtIHtSZWFkb25seTxNRFhDb21wb25lbnRzPiB8IE1lcmdlQ29tcG9uZW50cyB8IG51bGwgfCB1bmRlZmluZWR9IFtjb21wb25lbnRzXVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMgdG8gdXNlIG9yIGEgZnVuY3Rpb24gdGhhdCBjcmVhdGVzIHRoZW0gKG9wdGlvbmFsKS5cbiAqIEByZXR1cm5zIHtNRFhDb21wb25lbnRzfVxuICogICBDdXJyZW50IGNvbXBvbmVudHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VNRFhDb21wb25lbnRzKGNvbXBvbmVudHMpIHtcbiAgY29uc3QgY29udGV4dENvbXBvbmVudHMgPSBSZWFjdC51c2VDb250ZXh0KE1EWENvbnRleHQpXG5cbiAgLy8gTWVtb2l6ZSB0byBhdm9pZCB1bm5lY2Vzc2FyeSB0b3AtbGV2ZWwgY29udGV4dCBjaGFuZ2VzXG4gIHJldHVybiBSZWFjdC51c2VNZW1vKFxuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIEN1c3RvbSBtZXJnZSB2aWEgYSBmdW5jdGlvbiBwcm9wXG4gICAgICBpZiAodHlwZW9mIGNvbXBvbmVudHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGNvbXBvbmVudHMoY29udGV4dENvbXBvbmVudHMpXG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7Li4uY29udGV4dENvbXBvbmVudHMsIC4uLmNvbXBvbmVudHN9XG4gICAgfSxcbiAgICBbY29udGV4dENvbXBvbmVudHMsIGNvbXBvbmVudHNdXG4gIClcbn1cblxuLyoqXG4gKiBQcm92aWRlciBmb3IgTURYIGNvbnRleHQuXG4gKlxuICogQHBhcmFtIHtSZWFkb25seTxQcm9wcz59IHByb3BlcnRpZXNcbiAqICAgUHJvcGVydGllcy5cbiAqIEByZXR1cm5zIHtSZWFjdEVsZW1lbnR9XG4gKiAgIEVsZW1lbnQuXG4gKiBAc2F0aXNmaWVzIHtDb21wb25lbnR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBNRFhQcm92aWRlcihwcm9wZXJ0aWVzKSB7XG4gIC8qKiBAdHlwZSB7UmVhZG9ubHk8TURYQ29tcG9uZW50cz59ICovXG4gIGxldCBhbGxDb21wb25lbnRzXG5cbiAgaWYgKHByb3BlcnRpZXMuZGlzYWJsZVBhcmVudENvbnRleHQpIHtcbiAgICBhbGxDb21wb25lbnRzID1cbiAgICAgIHR5cGVvZiBwcm9wZXJ0aWVzLmNvbXBvbmVudHMgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBwcm9wZXJ0aWVzLmNvbXBvbmVudHMoZW1wdHlDb21wb25lbnRzKVxuICAgICAgICA6IHByb3BlcnRpZXMuY29tcG9uZW50cyB8fCBlbXB0eUNvbXBvbmVudHNcbiAgfSBlbHNlIHtcbiAgICBhbGxDb21wb25lbnRzID0gdXNlTURYQ29tcG9uZW50cyhwcm9wZXJ0aWVzLmNvbXBvbmVudHMpXG4gIH1cblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICBNRFhDb250ZXh0LlByb3ZpZGVyLFxuICAgIHt2YWx1ZTogYWxsQ29tcG9uZW50c30sXG4gICAgcHJvcGVydGllcy5jaGlsZHJlblxuICApXG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@mdx-js/react/lib/index.js\n");

/***/ })

}]);