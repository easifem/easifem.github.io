"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkeasifem_docs"] = globalThis["webpackChunkeasifem_docs"] || []).push([["content---docs-api-block-matrix-field-set-865-279"],{

/***/ "./docs/docs-api/BlockMatrixField/Set.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  assets: () => (/* binding */ assets),\n  contentTitle: () => (/* binding */ contentTitle),\n  \"default\": () => (/* binding */ MDXContent),\n  frontMatter: () => (/* binding */ frontMatter),\n  metadata: () => (/* reexport */ site_docs_docs_api_block_matrix_field_set_md_865_namespaceObject),\n  toc: () => (/* binding */ toc)\n});\n\n;// ./.docusaurus/docusaurus-plugin-content-docs/docs-api/site-docs-docs-api-block-matrix-field-set-md-865.json\nconst site_docs_docs_api_block_matrix_field_set_md_865_namespaceObject = /*#__PURE__*/JSON.parse('{\"id\":\"BlockMatrixField/Set\",\"title\":\"Set\",\"description\":\"Set entries of MatrixField.\",\"source\":\"@site/docs/docs-api/BlockMatrixField/Set.md\",\"sourceDirName\":\"BlockMatrixField\",\"slug\":\"/BlockMatrixField/Set\",\"permalink\":\"/docs-api/BlockMatrixField/Set\",\"draft\":false,\"unlisted\":false,\"editUrl\":\"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/BlockMatrixField/Set.md\",\"tags\":[],\"version\":\"current\",\"lastUpdatedAt\":1539502055000,\"frontMatter\":{},\"sidebar\":\"tutorialSidebar\",\"previous\":{\"title\":\"ReversePermutation\",\"permalink\":\"/docs-api/BlockMatrixField/ReversePermutation\"},\"next\":{\"title\":\"SetBlockMatrixFieldParam\",\"permalink\":\"/docs-api/BlockMatrixField/SetBlockMatrixFieldParam\"}}');\n// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n// EXTERNAL MODULE: ./node_modules/@mdx-js/react/lib/index.js\nvar lib = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js + 2 modules\nvar Tabs = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js + 1 modules\nvar TabItem = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js\");\n;// ./docs/docs-api/BlockMatrixField/Set.md\n\n\nconst frontMatter = {};\nconst contentTitle = 'Set';\n\nconst assets = {\n\n};\n\n\n\n\n\nconst toc = [{\n  \"value\": \"Interface 1\",\n  \"id\": \"interface-1\",\n  \"level\": 2\n}, {\n  \"value\": \"Interface 2\",\n  \"id\": \"interface-2\",\n  \"level\": 2\n}, {\n  \"value\": \"Interface 3\",\n  \"id\": \"interface-3\",\n  \"level\": 2\n}, {\n  \"value\": \"Interface 4\",\n  \"id\": \"interface-4\",\n  \"level\": 2\n}, {\n  \"value\": \"Interface 5\",\n  \"id\": \"interface-5\",\n  \"level\": 2\n}, {\n  \"value\": \"Interface 6\",\n  \"id\": \"interface-6\",\n  \"level\": 2\n}, {\n  \"value\": \"Interface 7\",\n  \"id\": \"interface-7\",\n  \"level\": 2\n}, {\n  \"value\": \"Interface 8\",\n  \"id\": \"interface-8\",\n  \"level\": 2\n}];\nfunction _createMdxContent(props) {\n  const _components = {\n    admonition: \"admonition\",\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    header: \"header\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.header, {\n      children: (0,jsx_runtime.jsx)(_components.h1, {\n        id: \"set\",\n        children: \"Set\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Set entries of MatrixField.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Calling example:\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"{2,4,5}\",\n        children: \"CALL Set(\\nMatrixField_::obj\\nreal::value \\n<int::scale >\\n<bool::addContribution>\\n)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"{8,9}\",\n        children: \"Set( \\n  MatrixField_ :: obj\\n  int :: iNodeNum(:)\\n  int ::  jNodeNum(:)\\n  int ::  ivar\\n  int :: jvar\\n  real::  value(:,:)\\n  <real:: scale>\\n  <bool:: addContribution>\\n)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"{10,11}\",\n        children: \"CALL Set( \\n  MatrixField_ :: obj\\n  int :: iNodeNum(:)\\n  int :: jNodeNum(:)\\n  int :: ivar\\n  int :: jvar\\n  int :: idof\\n  int :: jdof\\n  real:: value(:,:)\\n  <real:: scale>\\n  <bool:: addContribution>\\n)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"{10,11}\",\n        children: \"CALL Set( \\n  MatrixField_:: obj\\n  int :: iNodeNum(:)\\n  int :: jNodeNum(:)\\n  int :: ivar\\n  int :: jvar\\n  int :: idof\\n  int :: jdof\\n  real :: value(:,:)\\n  <real :: scale>\\n  <bool :: addContribution>\\n  )\\n\"\n      })\n    }), \"\\n\", \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-1\",\n      children: \"Interface 1\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(Tabs[\"default\"], {\n      children: (0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface-2\",\n        label: \"ëóç Set\",\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\nMODULE SUBROUTINE Set( obj, value, scale, &\\n  & addContribution )\\n  CLASS( MatrixField_ ), INTENT( INOUT ) :: obj\\n  REAL( DFP ), INTENT( IN ) :: value\\n  REAL( DFP ), OPTIONAL, INTENT( IN ) :: scale\\n  LOGICAL( LGT ), OPTIONAL, INTENT( IN ) :: addContribution\\nEND SUBROUTINE Set\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.p, {\n          children: [\"IF \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"addContribution\"\n          }), \" and \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"scale\"\n          }), \" are ABSENT then:\"]\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"This subroutine sets a scalar value \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"value\"\n            }), \" to all the entries of the matrix.\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"Symbolically, we peform \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"obj=value\"\n            })]\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-2\",\n      children: \"Interface 2\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(Tabs[\"default\"], {\n      children: (0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface-4\",\n        label: \"ëóç Set\",\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\nMODULE SUBROUTINE Set( obj, iNodeNum, jNodeNum, ivar, &\\n  & jvar, value, scale, addContribution )\\n  CLASS( MatrixField_ ), INTENT( INOUT ) :: obj\\n  INTEGER( I4B ), INTENT( IN ) :: iNodeNum(:)\\n  INTEGER( I4B ), INTENT( IN ) :: jNodeNum(:)\\n  INTEGER( I4B ), INTENT( IN ) :: ivar\\n  INTEGER( I4B ), INTENT( IN ) :: jvar\\n  REAL( DFP ), INTENT( IN ) :: value(:,:)\\n  REAL( DFP ), OPTIONAL, INTENT( IN ) :: scale\\n  LOGICAL( LGT ), OPTIONAL, INTENT( IN ) :: addContribution\\nEND SUBROUTINE Set\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"If addContribution and scale are NOT present then:\", \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n              children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n                children: \"This subroutine sets a block of data to matrix.\"\n              }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n                children: [\"This block data is contained in \", (0,jsx_runtime.jsx)(_components.code, {\n                  children: \"value(:,:)\"\n                }), \".\"]\n              }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n                children: [\"The number of rows in \", (0,jsx_runtime.jsx)(_components.code, {\n                  children: \"value\"\n                }), \" should be \", (0,jsx_runtime.jsx)(_components.code, {\n                  children: \"SIZE( iNodeNum ) * itdof\"\n                }), \", where \", (0,jsx_runtime.jsx)(_components.code, {\n                  children: \"itdof\"\n                }), \" is the total degrees of freedom in row dimension.\"]\n              }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n                children: [\"The number of columns in \", (0,jsx_runtime.jsx)(_components.code, {\n                  children: \"value\"\n                }), \" should be \", (0,jsx_runtime.jsx)(_components.code, {\n                  children: \"SIZE( jNodeNum ) * jtdof\"\n                }), \", where \", (0,jsx_runtime.jsx)(_components.code, {\n                  children: \"jtdof\"\n                }), \" is the total degrees of freedom in column dimension.\"]\n              }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n                children: \"globalNode contains the global node number\"\n              }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n                children: [\"This entry is specified by the \", (0,jsx_runtime.jsx)(_components.code, {\n                  children: \"iNodeNum\"\n                }), \" and \", (0,jsx_runtime.jsx)(_components.code, {\n                  children: \"jNodeNum\"\n                }), \", which are global node number.\"]\n              }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n                children: [\"The exact location of the entry is computed using \", (0,jsx_runtime.jsx)(_components.code, {\n                  children: \"iNodeNum\"\n                }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n                  children: \"ivar\"\n                }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n                  children: \"jNodeNum\"\n                }), \" and \", (0,jsx_runtime.jsx)(_components.code, {\n                  children: \"jvar\"\n                }), \".\"]\n              }), \"\\n\"]\n            }), \"\\n\"]\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"If addContribution and scale present then we add contribution to matrix, instead of setting the value.\"\n          }), \"\\n\"]\n        }), (0,jsx_runtime.jsx)(_components.admonition, {\n          type: \"info\",\n          children: (0,jsx_runtime.jsxs)(_components.p, {\n            children: [\"Storage format of \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"value\"\n            }), \" should be \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"FMT_DOF\"\n            }), \" because the storage format of MatrixField_ is \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"FMT_DOF\"\n            }), \".\"]\n          })\n        })]\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-3\",\n      children: \"Interface 3\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(Tabs[\"default\"], {\n      children: (0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface-5\",\n        label: \"ëóç Set\",\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\nMODULE SUBROUTINE Set( obj, iNodeNum, jNodeNum, ivar, &\\n  & jvar, idof, jdof, value, scale, addContribution )\\n  CLASS( MatrixField_ ), INTENT( INOUT ) :: obj\\n  INTEGER( I4B ), INTENT( IN ) :: iNodeNum(:)\\n  INTEGER( I4B ), INTENT( IN ) :: jNodeNum(:)\\n  INTEGER( I4B ), INTENT( IN ) :: ivar\\n  INTEGER( I4B ), INTENT( IN ) :: jvar\\n  INTEGER( I4B ), INTENT( IN ) :: idof\\n  INTEGER( I4B ), INTENT( IN ) :: jdof\\n  REAL( DFP ), INTENT( IN ) :: value(:,:)\\n  REAL( DFP ), OPTIONAL, INTENT( IN ) :: scale\\n  LOGICAL( LGT ), OPTIONAL, INTENT( IN ) :: addContribution\\nEND SUBROUTINE Set\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"If addContribution and scale are NOT present then:\", \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n              children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n                children: \"This subroutine sets a block of data to matrix.\"\n              }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n                children: [\"This block data is contained in \", (0,jsx_runtime.jsx)(_components.code, {\n                  children: \"value(:,:)\"\n                })]\n              }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n                children: [\"The size of \", (0,jsx_runtime.jsx)(_components.code, {\n                  children: \"value\"\n                }), \" should be \", (0,jsx_runtime.jsx)(_components.code, {\n                  children: \"SIZE(iNodeNum)\"\n                }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n                  children: \"SIZE(jNodeNum)\"\n                })]\n              }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n                children: \"globalNode contains the global node number\"\n              }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n                children: [\"This entry is specified by the \", (0,jsx_runtime.jsx)(_components.code, {\n                  children: \"iNodeNum\"\n                }), \" and \", (0,jsx_runtime.jsx)(_components.code, {\n                  children: \"jNodeNum\"\n                }), \", which are global node number.\"]\n              }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n                children: [\"The exact location of the entry is computed using \", (0,jsx_runtime.jsx)(_components.code, {\n                  children: \"iNodeNum\"\n                }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n                  children: \"ivar\"\n                }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n                  children: \"idof\"\n                }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n                  children: \"jNodeNum\"\n                }), \" and \", (0,jsx_runtime.jsx)(_components.code, {\n                  children: \"jvar\"\n                }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n                  children: \"jdof\"\n                }), \".\"]\n              }), \"\\n\"]\n            }), \"\\n\"]\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"If addContribution and scale present then we add contribution to matrix, instead of setting the value.\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-4\",\n      children: \"Interface 4\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(Tabs[\"default\"], {\n      children: (0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface-6\",\n        label: \"ëóç Set\",\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\nMODULE SUBROUTINE Set( obj, iNodeNum, jNodeNum, ivar, jvar, &\\n  & idof, jdof, value, scale, addContribution )\\n  CLASS( MatrixField_ ), INTENT( INOUT ) :: obj\\n  INTEGER( I4B ), INTENT( IN ) :: iNodeNum\\n  INTEGER( I4B ), INTENT( IN ) :: jNodeNum\\n  INTEGER( I4B ), INTENT( IN ) :: ivar\\n  INTEGER( I4B ), INTENT( IN ) :: jvar\\n  INTEGER( I4B ), INTENT( IN ) :: idof\\n  INTEGER( I4B ), INTENT( IN ) :: jdof\\n  REAL( DFP ), INTENT( IN ) :: value\\n  REAL( DFP ), OPTIONAL, INTENT( IN ) :: scale\\n  LOGICAL( LGT ), OPTIONAL, INTENT( IN ) :: addContribution\\nEND SUBROUTINE Set\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.p, {\n          children: [\"If \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"addContribution\"\n          }), \" and \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"scale\"\n          }), \" are NOT PRESENT, then:\"]\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n              children: [\"This subroutine sets a scalar value \", (0,jsx_runtime.jsx)(_components.code, {\n                children: \"value\"\n              }), \" to a single entry of the matrix.\"]\n            }), \"\\n\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n              children: [\"This entry is specified by the \", (0,jsx_runtime.jsx)(_components.code, {\n                children: \"iNodeNum\"\n              }), \" and \", (0,jsx_runtime.jsx)(_components.code, {\n                children: \"jNodeNum\"\n              }), \".\"]\n            }), \"\\n\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n              children: [\"The exact location of the entry is computed using \", (0,jsx_runtime.jsx)(_components.code, {\n                children: \"iNodeNum\"\n              }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n                children: \"idof\"\n              }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n                children: \"ivar\"\n              }), \", and \", (0,jsx_runtime.jsx)(_components.code, {\n                children: \"jNodeNum\"\n              }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n                children: \"jdof\"\n              }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n                children: \"jvar\"\n              }), \".\"]\n            }), \"\\n\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n              children: \"If addContribution and scale present then we add contribution to matrix, instead of setting the value.\"\n            }), \"\\n\"]\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-5\",\n      children: \"Interface 5\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(Tabs[\"default\"], {\n      children: (0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface-7\",\n        label: \"ëóç Set\",\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\nMODULE SUBROUTINE Set( obj, iNodeNum, jNodeNum, ivar, jvar, &\\n  & ispacecompo, itimecompo, jspacecompo, jtimecompo, value, scale, &\\n  & addContribution )\\n  CLASS( MatrixField_ ), INTENT( INOUT ) :: obj\\n  INTEGER( I4B ), INTENT( IN ) :: iNodeNum\\n  INTEGER( I4B ), INTENT( IN ) :: jNodeNum\\n  INTEGER( I4B ), INTENT( IN ) :: ivar\\n  INTEGER( I4B ), INTENT( IN ) :: jvar\\n  INTEGER( I4B ), INTENT( IN ) :: ispacecompo\\n  INTEGER( I4B ), INTENT( IN ) :: itimecompo\\n  INTEGER( I4B ), INTENT( IN ) :: jspacecompo\\n  INTEGER( I4B ), INTENT( IN ) :: jtimecompo\\n  REAL( DFP ), INTENT( IN ) :: value\\n  REAL( DFP ), OPTIONAL, INTENT( IN ) :: scale\\n  LOGICAL( LGT ), OPTIONAL, INTENT( IN ) :: addContribution\\nEND SUBROUTINE Set\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsx)(_components.p, {\n          children: \"If addContribution and scale are NOT present then:\"\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"This subroutine sets a scalar value \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"value\"\n            }), \" to a single entry of the matrix.\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"This entry is specified by the \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"iNodeNum\"\n            }), \" and \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"jNodeNum\"\n            }), \".\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"The exact location of the entry is computed using (\", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"iNodeNum\"\n            }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"ivar\"\n            }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"ispacecompo\"\n            }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"itimecompo\"\n            }), \") and (\", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"jNodeNum\"\n            }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"jvar\"\n            }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"jspacecompo\"\n            }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"jtimecompo\"\n            }), \").\"]\n          }), \"\\n\"]\n        }), (0,jsx_runtime.jsxs)(_components.p, {\n          children: [\"If addContribution and scale present, then this subroutine adds a scalar value \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"value\"\n          }), \" to a single entry of the matrix.\"]\n        })]\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-6\",\n      children: \"Interface 6\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(Tabs[\"default\"], {\n      children: (0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface-8\",\n        label: \"ëóç Set\",\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\nMODULE SUBROUTINE Set( obj, iNodeNum, jNodeNum, ivar, jvar, &\\n  & ispacecompo, itimecompo, jspacecompo, jtimecompo, value, scale, &\\n  & addContribution )\\n  CLASS( MatrixField_ ), INTENT( INOUT ) :: obj\\n  INTEGER( I4B ), INTENT( IN ) :: iNodeNum(:)\\n  INTEGER( I4B ), INTENT( IN ) :: jNodeNum(:)\\n  INTEGER( I4B ), INTENT( IN ) :: ivar\\n  INTEGER( I4B ), INTENT( IN ) :: jvar\\n  INTEGER( I4B ), INTENT( IN ) :: ispacecompo\\n  INTEGER( I4B ), INTENT( IN ) :: itimecompo\\n  INTEGER( I4B ), INTENT( IN ) :: jspacecompo\\n  INTEGER( I4B ), INTENT( IN ) :: jtimecompo\\n  REAL( DFP ), INTENT( IN ) :: value\\n  REAL( DFP ), OPTIONAL, INTENT( IN ) :: scale\\n  LOGICAL( LGT ), OPTIONAL, INTENT( IN ) :: addContribution\\nEND SUBROUTINE Set\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsx)(_components.p, {\n          children: \"If addContribution and scale are NOT present then:\"\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"This subroutine sets \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"value\"\n            }), \" to the matrix.\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"This entry is specified by the \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"iNodeNum\"\n            }), \" and \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"jNodeNum\"\n            }), \".\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"The exact location of the entry is computed using (\", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"iNodeNum\"\n            }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"ivar\"\n            }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"ispacecompo\"\n            }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"itimecompo\"\n            }), \") and (\", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"jNodeNum\"\n            }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"jvar\"\n            }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"jspacecompo\"\n            }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"jtimecompo\"\n            }), \").\"]\n          }), \"\\n\"]\n        }), (0,jsx_runtime.jsxs)(_components.p, {\n          children: [\"If addContribution and scale present, then this subroutine adds \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"value\"\n          }), \" to the matrix.\"]\n        })]\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-7\",\n      children: \"Interface 7\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(Tabs[\"default\"], {\n      children: (0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface-9\",\n        label: \"ëóç Set\",\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\nMODULE SUBROUTINE Set( obj, iNodeNum, jNodeNum, ivar, jvar, &\\n  & ispacecompo, itimecompo, jspacecompo, jtimecompo, value, scale, &\\n  & addContribution )\\n  CLASS( MatrixField_ ), INTENT( INOUT ) :: obj\\n  INTEGER( I4B ), INTENT( IN ) :: iNodeNum(:)\\n  INTEGER( I4B ), INTENT( IN ) :: jNodeNum(:)\\n  INTEGER( I4B ), INTENT( IN ) :: ivar\\n  INTEGER( I4B ), INTENT( IN ) :: jvar\\n  INTEGER( I4B ), INTENT( IN ) :: ispacecompo\\n  INTEGER( I4B ), INTENT( IN ) :: itimecompo(:)\\n  INTEGER( I4B ), INTENT( IN ) :: jspacecompo\\n  INTEGER( I4B ), INTENT( IN ) :: jtimecompo(:)\\n  REAL( DFP ), INTENT( IN ) :: value\\n  REAL( DFP ), OPTIONAL, INTENT( IN ) :: scale\\n  LOGICAL( LGT ), OPTIONAL, INTENT( IN ) :: addContribution\\nEND SUBROUTINE Set\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsx)(_components.p, {\n          children: \"If addContribution and scale are not present then:\"\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"This subroutine sets \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"value\"\n            }), \" to the matrix.\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"This entry is specified by the \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"iNodeNum\"\n            }), \" and \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"jNodeNum\"\n            }), \".\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"The exact location of the entry is computed using (\", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"iNodeNum\"\n            }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"ivar\"\n            }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"ispacecompo\"\n            }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"itimecompo\"\n            }), \") and (\", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"jNodeNum\"\n            }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"jvar\"\n            }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"jspacecompo\"\n            }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"jtimecompo\"\n            }), \").\"]\n          }), \"\\n\"]\n        }), (0,jsx_runtime.jsxs)(_components.p, {\n          children: [\"If addContribution and scale present, then this subroutine adds \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"value\"\n          }), \" to the matrix.\"]\n        })]\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-8\",\n      children: \"Interface 8\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(Tabs[\"default\"], {\n      children: (0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface-10\",\n        label: \"ëóç Set\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\nMODULE SUBROUTINE Set( obj, iNodeNum, jNodeNum, ivar, jvar, &\\n  & ispacecompo, itimecompo, jspacecompo, jtimecompo, value, scale, &\\n  & addContribution )\\n  CLASS( MatrixField_ ), INTENT( INOUT ) :: obj\\n  INTEGER( I4B ), INTENT( IN ) :: iNodeNum(:)\\n  INTEGER( I4B ), INTENT( IN ) :: jNodeNum(:)\\n  INTEGER( I4B ), INTENT( IN ) :: ivar\\n  INTEGER( I4B ), INTENT( IN ) :: jvar\\n  INTEGER( I4B ), INTENT( IN ) :: ispacecompo(:)\\n  INTEGER( I4B ), INTENT( IN ) :: itimecompo\\n  INTEGER( I4B ), INTENT( IN ) :: jspacecompo(:)\\n  INTEGER( I4B ), INTENT( IN ) :: jtimecompo\\n  REAL( DFP ), INTENT( IN ) :: value\\n  REAL( DFP ), OPTIONAL, INTENT( IN ) :: scale\\n  LOGICAL( LGT ), OPTIONAL, INTENT( IN ) :: addContribution\\nEND SUBROUTINE Set\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsx)(_components.p, {\n          children: \"If addContribution and scale are not present then:\"\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"This subroutine sets \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"value\"\n            }), \" to the matrix.\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"This entry is specified by the \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"iNodeNum\"\n            }), \" and \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"jNodeNum\"\n            }), \".\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"The exact location of the entry is computed using (\", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"iNodeNum\"\n            }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"ivar\"\n            }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"ispacecompo\"\n            }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"itimecompo\"\n            }), \") and (\", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"jNodeNum\"\n            }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"jvar\"\n            }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"jspacecompo\"\n            }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"jtimecompo\"\n            }), \").\"]\n          }), \"\\n\"]\n        }), (0,jsx_runtime.jsxs)(_components.p, {\n          children: [\"If addContribution and scale present, then this subroutine adds \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"value\"\n          }), \" to the matrix.\"]\n        })]\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./docs/docs-api/BlockMatrixField/Set.md\n");

/***/ })

}]);