"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkeasifem_docs"] = globalThis["webpackChunkeasifem_docs"] || []).push([["content---docs-api-triangle-interpolation-utility-cell-basis-triangle-7-d-1-830"],{

/***/ "./docs/docs-api/TriangleInterpolationUtility/CellBasis_Triangle.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  assets: () => (/* binding */ assets),\n  contentTitle: () => (/* binding */ CellBasis_Triangle_contentTitle),\n  \"default\": () => (/* binding */ CellBasis_Triangle_MDXContent),\n  frontMatter: () => (/* binding */ CellBasis_Triangle_frontMatter),\n  metadata: () => (/* reexport */ site_docs_docs_api_triangle_interpolation_utility_cell_basis_triangle_md_7d1_namespaceObject),\n  toc: () => (/* binding */ CellBasis_Triangle_toc)\n});\n\n;// ./.docusaurus/docusaurus-plugin-content-docs/docs-api/site-docs-docs-api-triangle-interpolation-utility-cell-basis-triangle-md-7d1.json\nconst site_docs_docs_api_triangle_interpolation_utility_cell_basis_triangle_md_7d1_namespaceObject = /*#__PURE__*/JSON.parse('{\"id\":\"TriangleInterpolationUtility/CellBasis_Triangle\",\"title\":\"CellBasis\",\"description\":\"Evaluate basis functions in the cell.\",\"source\":\"@site/docs/docs-api/TriangleInterpolationUtility/CellBasis_Triangle.md\",\"sourceDirName\":\"TriangleInterpolationUtility\",\"slug\":\"/TriangleInterpolationUtility/CellBasis_Triangle\",\"permalink\":\"/docs-api/TriangleInterpolationUtility/CellBasis_Triangle\",\"draft\":false,\"unlisted\":false,\"editUrl\":\"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/TriangleInterpolationUtility/CellBasis_Triangle.md\",\"tags\":[],\"version\":\"current\",\"lastUpdatedAt\":1539502055000,\"frontMatter\":{},\"sidebar\":\"tutorialSidebar\",\"previous\":{\"title\":\"BarycentricVertexBasis\",\"permalink\":\"/docs-api/TriangleInterpolationUtility/BarycentricVertexBasis_Triangle\"},\"next\":{\"title\":\"Dubiner_Triangle\",\"permalink\":\"/docs-api/TriangleInterpolationUtility/Dubiner_Triangle\"}}');\n// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n// EXTERNAL MODULE: ./node_modules/@mdx-js/react/lib/index.js\nvar lib = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js + 2 modules\nvar Tabs = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js + 1 modules\nvar TabItem = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js\");\n;// ./docs/docs-api/TriangleInterpolationUtility/_CellBasis_Triangle_test_1.md\n\n\nconst frontMatter = {};\nconst contentTitle = undefined;\n\n\n\n\n\nconst toc = [];\nfunction _createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsx)(_components.pre, {\n    children: (0,jsx_runtime.jsx)(_components.code, {\n      className: \"language-fortran\",\n      children: \"program main\\n  use easifembase\\n  use easifemClasses\\n  implicit none\\n  real(dfp), allocatable :: xij(:,:), avec(:)\\n  integer(i4b) :: ii, jj, cnt, n\\n  real(dfp), allocatable :: ans(:,:)\\n  integer(i4b) :: order\\n  type( VTKPlot_ ) :: aplot\\n  character(len=*), parameter :: fname=\\\"./results/\\\"\\n\\n  n = 51\\n  call reallocate(avec, n)\\n  call reallocate(xij, 2, int((n+1)*(n+2)/2))\\n  avec= linspace(0.0_DFP, 1.0_DFP, n)\\n  cnt=0\\n  do ii = 1, n\\n    do jj = 1, n-ii+1\\n      cnt=cnt+1\\n      xij(1,cnt) = avec(ii)\\n      xij(2,cnt) = avec(jj)\\n    end do\\n  end do\\n\\n  order=5\\n  ans = CellBasis_Triangle(order=order, xij=xij, refTriangle=\\\"UNIT\\\")\\n  do ii  = 1, size(ans,2)\\n    call aplot%scatter3D(x=xij(1,:), y=xij(2, :), z=ans(:,ii), &\\n      & filename=fname//\\\"CellBasis( order=\\\" // tostring(order) // &\\n        & \\\" )\\\" // tostring(ii) // &\\n        & \\\".vtp\\\", &\\n      & label=\\\"P\\\")\\n  end do\\nend program main\\n\"\n    })\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/TriangleInterpolationUtility/CellBasis_Triangle.md\n\n\nconst CellBasis_Triangle_frontMatter = {};\nconst CellBasis_Triangle_contentTitle = 'CellBasis';\n\nconst assets = {\n\n};\n\n\n\n\n\n\nconst CellBasis_Triangle_toc = [{\n  \"value\": \"Interface\",\n  \"id\": \"interface\",\n  \"level\": 2\n}, ...toc];\nfunction CellBasis_Triangle_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    header: \"header\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.header, {\n      children: (0,jsx_runtime.jsx)(_components.h1, {\n        id: \"cellbasis\",\n        children: \"CellBasis\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Evaluate basis functions in the cell.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface\",\n      children: \"Interface\"\n    }), \"\\n\", \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE PURE FUNCTION CellBasis_Triangle(order, xij, refTriangle) RESULT(ans)\\n    INTEGER(I4B), INTENT(IN) :: order\\n    !! order of approximation inside the cell\\n    !! order should be greater than two\\n    REAL(DFP), INTENT(IN) :: xij(:, :)\\n    !! point of evaluation\\n    !! number of rows = nsd\\n    !! number of cols = number of points\\n    CHARACTER(*), INTENT(IN) :: refTriangle\\n    !! Reference triangle\\n    !! \\\"BIUNIT\\\"\\n    !! \\\"UNIT\\\"\\n    REAL(DFP) :: ans(SIZE(xij, 2), INT((order - 1) * (order - 2) / 2))\\n  END FUNCTION CellBasis_Triangle\\nEND INTERFACE\\n\"\n          })\n        })\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    })]\n  });\n}\nfunction CellBasis_Triangle_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(CellBasis_Triangle_createMdxContent, {\n      ...props\n    })\n  }) : CellBasis_Triangle_createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9kb2NzL2RvY3MtYXBpL1RyaWFuZ2xlSW50ZXJwb2xhdGlvblV0aWxpdHkvQ2VsbEJhc2lzX1RyaWFuZ2xlLm1kIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNwQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lYXNpZmVtLWRvY3MvLi9kb2NzL2RvY3MtYXBpL1RyaWFuZ2xlSW50ZXJwb2xhdGlvblV0aWxpdHkvX0NlbGxCYXNpc19UcmlhbmdsZV90ZXN0XzEubWQ/ZjhkMyIsIndlYnBhY2s6Ly9lYXNpZmVtLWRvY3MvLi9kb2NzL2RvY3MtYXBpL1RyaWFuZ2xlSW50ZXJwb2xhdGlvblV0aWxpdHkvQ2VsbEJhc2lzX1RyaWFuZ2xlLm1kP2YyYWYiXSwic291cmNlc0NvbnRlbnQiOlsiXG5cbmV4cG9ydCBjb25zdCBmcm9udE1hdHRlciA9IHt9O1xuZXhwb3J0IGNvbnN0IGNvbnRlbnRUaXRsZSA9IHVuZGVmaW5lZDtcblxuXG5cbmltcG9ydCB7anN4IGFzIF9qc3h9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHt1c2VNRFhDb21wb25lbnRzIGFzIF9wcm92aWRlQ29tcG9uZW50c30gZnJvbSBcIkBtZHgtanMvcmVhY3RcIjtcbmV4cG9ydCBjb25zdCB0b2MgPSBbXTtcbmZ1bmN0aW9uIF9jcmVhdGVNZHhDb250ZW50KHByb3BzKSB7XG4gIGNvbnN0IF9jb21wb25lbnRzID0ge1xuICAgIGNvZGU6IFwiY29kZVwiLFxuICAgIHByZTogXCJwcmVcIixcbiAgICAuLi5fcHJvdmlkZUNvbXBvbmVudHMoKSxcbiAgICAuLi5wcm9wcy5jb21wb25lbnRzXG4gIH07XG4gIHJldHVybiBfanN4KF9jb21wb25lbnRzLnByZSwge1xuICAgIGNoaWxkcmVuOiBfanN4KF9jb21wb25lbnRzLmNvZGUsIHtcbiAgICAgIGNsYXNzTmFtZTogXCJsYW5ndWFnZS1mb3J0cmFuXCIsXG4gICAgICBjaGlsZHJlbjogXCJwcm9ncmFtIG1haW5cXG4gIHVzZSBlYXNpZmVtYmFzZVxcbiAgdXNlIGVhc2lmZW1DbGFzc2VzXFxuICBpbXBsaWNpdCBub25lXFxuICByZWFsKGRmcCksIGFsbG9jYXRhYmxlIDo6IHhpaig6LDopLCBhdmVjKDopXFxuICBpbnRlZ2VyKGk0YikgOjogaWksIGpqLCBjbnQsIG5cXG4gIHJlYWwoZGZwKSwgYWxsb2NhdGFibGUgOjogYW5zKDosOilcXG4gIGludGVnZXIoaTRiKSA6OiBvcmRlclxcbiAgdHlwZSggVlRLUGxvdF8gKSA6OiBhcGxvdFxcbiAgY2hhcmFjdGVyKGxlbj0qKSwgcGFyYW1ldGVyIDo6IGZuYW1lPVxcXCIuL3Jlc3VsdHMvXFxcIlxcblxcbiAgbiA9IDUxXFxuICBjYWxsIHJlYWxsb2NhdGUoYXZlYywgbilcXG4gIGNhbGwgcmVhbGxvY2F0ZSh4aWosIDIsIGludCgobisxKSoobisyKS8yKSlcXG4gIGF2ZWM9IGxpbnNwYWNlKDAuMF9ERlAsIDEuMF9ERlAsIG4pXFxuICBjbnQ9MFxcbiAgZG8gaWkgPSAxLCBuXFxuICAgIGRvIGpqID0gMSwgbi1paSsxXFxuICAgICAgY250PWNudCsxXFxuICAgICAgeGlqKDEsY250KSA9IGF2ZWMoaWkpXFxuICAgICAgeGlqKDIsY250KSA9IGF2ZWMoamopXFxuICAgIGVuZCBkb1xcbiAgZW5kIGRvXFxuXFxuICBvcmRlcj01XFxuICBhbnMgPSBDZWxsQmFzaXNfVHJpYW5nbGUob3JkZXI9b3JkZXIsIHhpaj14aWosIHJlZlRyaWFuZ2xlPVxcXCJVTklUXFxcIilcXG4gIGRvIGlpICA9IDEsIHNpemUoYW5zLDIpXFxuICAgIGNhbGwgYXBsb3Qlc2NhdHRlcjNEKHg9eGlqKDEsOiksIHk9eGlqKDIsIDopLCB6PWFucyg6LGlpKSwgJlxcbiAgICAgICYgZmlsZW5hbWU9Zm5hbWUvL1xcXCJDZWxsQmFzaXMoIG9yZGVyPVxcXCIgLy8gdG9zdHJpbmcob3JkZXIpIC8vICZcXG4gICAgICAgICYgXFxcIiApXFxcIiAvLyB0b3N0cmluZyhpaSkgLy8gJlxcbiAgICAgICAgJiBcXFwiLnZ0cFxcXCIsICZcXG4gICAgICAmIGxhYmVsPVxcXCJQXFxcIilcXG4gIGVuZCBkb1xcbmVuZCBwcm9ncmFtIG1haW5cXG5cIlxuICAgIH0pXG4gIH0pO1xufVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTURYQ29udGVudChwcm9wcyA9IHt9KSB7XG4gIGNvbnN0IHt3cmFwcGVyOiBNRFhMYXlvdXR9ID0ge1xuICAgIC4uLl9wcm92aWRlQ29tcG9uZW50cygpLFxuICAgIC4uLnByb3BzLmNvbXBvbmVudHNcbiAgfTtcbiAgcmV0dXJuIE1EWExheW91dCA/IF9qc3goTURYTGF5b3V0LCB7XG4gICAgLi4ucHJvcHMsXG4gICAgY2hpbGRyZW46IF9qc3goX2NyZWF0ZU1keENvbnRlbnQsIHtcbiAgICAgIC4uLnByb3BzXG4gICAgfSlcbiAgfSkgOiBfY3JlYXRlTWR4Q29udGVudChwcm9wcyk7XG59XG5cbiIsIlxuXG5leHBvcnQgY29uc3QgZnJvbnRNYXR0ZXIgPSB7fTtcbmV4cG9ydCBjb25zdCBjb250ZW50VGl0bGUgPSAnQ2VsbEJhc2lzJztcbmV4cG9ydCB7ZGVmYXVsdCBhcyBtZXRhZGF0YX0gZnJvbSAnQHNpdGUvLmRvY3VzYXVydXMvZG9jdXNhdXJ1cy1wbHVnaW4tY29udGVudC1kb2NzL2RvY3MtYXBpL3NpdGUtZG9jcy1kb2NzLWFwaS10cmlhbmdsZS1pbnRlcnBvbGF0aW9uLXV0aWxpdHktY2VsbC1iYXNpcy10cmlhbmdsZS1tZC03ZDEuanNvbidcbmV4cG9ydCBjb25zdCBhc3NldHMgPSB7XG5cbn07XG5cbmltcG9ydCB7RnJhZ21lbnQgYXMgX0ZyYWdtZW50LCBqc3ggYXMgX2pzeCwganN4cyBhcyBfanN4c30gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQge3VzZU1EWENvbXBvbmVudHMgYXMgX3Byb3ZpZGVDb21wb25lbnRzfSBmcm9tIFwiQG1keC1qcy9yZWFjdFwiO1xuaW1wb3J0IFRhYnMgZnJvbSAnQHRoZW1lL1RhYnMnO1xuaW1wb3J0IFRhYkl0ZW0gZnJvbSAnQHRoZW1lL1RhYkl0ZW0nO1xuaW1wb3J0IEVYQU1QTEUzNiwge3RvYyBhcyBfX3RvY0VYQU1QTEUzNn0gZnJvbSBcIi4vX0NlbGxCYXNpc19UcmlhbmdsZV90ZXN0XzEubWRcIjtcbmV4cG9ydCBjb25zdCB0b2MgPSBbe1xuICBcInZhbHVlXCI6IFwiSW50ZXJmYWNlXCIsXG4gIFwiaWRcIjogXCJpbnRlcmZhY2VcIixcbiAgXCJsZXZlbFwiOiAyXG59LCAuLi5fX3RvY0VYQU1QTEUzNl07XG5mdW5jdGlvbiBfY3JlYXRlTWR4Q29udGVudChwcm9wcykge1xuICBjb25zdCBfY29tcG9uZW50cyA9IHtcbiAgICBjb2RlOiBcImNvZGVcIixcbiAgICBoMTogXCJoMVwiLFxuICAgIGgyOiBcImgyXCIsXG4gICAgaGVhZGVyOiBcImhlYWRlclwiLFxuICAgIHA6IFwicFwiLFxuICAgIHByZTogXCJwcmVcIixcbiAgICAuLi5fcHJvdmlkZUNvbXBvbmVudHMoKSxcbiAgICAuLi5wcm9wcy5jb21wb25lbnRzXG4gIH07XG4gIHJldHVybiBfanN4cyhfRnJhZ21lbnQsIHtcbiAgICBjaGlsZHJlbjogW19qc3goX2NvbXBvbmVudHMuaGVhZGVyLCB7XG4gICAgICBjaGlsZHJlbjogX2pzeChfY29tcG9uZW50cy5oMSwge1xuICAgICAgICBpZDogXCJjZWxsYmFzaXNcIixcbiAgICAgICAgY2hpbGRyZW46IFwiQ2VsbEJhc2lzXCJcbiAgICAgIH0pXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMucCwge1xuICAgICAgY2hpbGRyZW46IFwiRXZhbHVhdGUgYmFzaXMgZnVuY3Rpb25zIGluIHRoZSBjZWxsLlwiXG4gICAgfSksIFwiXFxuXCIsIF9qc3goX2NvbXBvbmVudHMuaDIsIHtcbiAgICAgIGlkOiBcImludGVyZmFjZVwiLFxuICAgICAgY2hpbGRyZW46IFwiSW50ZXJmYWNlXCJcbiAgICB9KSwgXCJcXG5cIiwgXCJcXG5cIiwgX2pzeHMoVGFicywge1xuICAgICAgY2hpbGRyZW46IFtfanN4KFRhYkl0ZW0sIHtcbiAgICAgICAgdmFsdWU6IFwiaW50ZXJmYWNlXCIsXG4gICAgICAgIGxhYmVsOiBcItyAIEludGVyZmFjZVwiLFxuICAgICAgICBkZWZhdWx0OiB0cnVlLFxuICAgICAgICBjaGlsZHJlbjogX2pzeChfY29tcG9uZW50cy5wcmUsIHtcbiAgICAgICAgICBjaGlsZHJlbjogX2pzeChfY29tcG9uZW50cy5jb2RlLCB7XG4gICAgICAgICAgICBjbGFzc05hbWU6IFwibGFuZ3VhZ2UtZm9ydHJhblwiLFxuICAgICAgICAgICAgY2hpbGRyZW46IFwiSU5URVJGQUNFXFxuICBNT0RVTEUgUFVSRSBGVU5DVElPTiBDZWxsQmFzaXNfVHJpYW5nbGUob3JkZXIsIHhpaiwgcmVmVHJpYW5nbGUpIFJFU1VMVChhbnMpXFxuICAgIElOVEVHRVIoSTRCKSwgSU5URU5UKElOKSA6OiBvcmRlclxcbiAgICAhISBvcmRlciBvZiBhcHByb3hpbWF0aW9uIGluc2lkZSB0aGUgY2VsbFxcbiAgICAhISBvcmRlciBzaG91bGQgYmUgZ3JlYXRlciB0aGFuIHR3b1xcbiAgICBSRUFMKERGUCksIElOVEVOVChJTikgOjogeGlqKDosIDopXFxuICAgICEhIHBvaW50IG9mIGV2YWx1YXRpb25cXG4gICAgISEgbnVtYmVyIG9mIHJvd3MgPSBuc2RcXG4gICAgISEgbnVtYmVyIG9mIGNvbHMgPSBudW1iZXIgb2YgcG9pbnRzXFxuICAgIENIQVJBQ1RFUigqKSwgSU5URU5UKElOKSA6OiByZWZUcmlhbmdsZVxcbiAgICAhISBSZWZlcmVuY2UgdHJpYW5nbGVcXG4gICAgISEgXFxcIkJJVU5JVFxcXCJcXG4gICAgISEgXFxcIlVOSVRcXFwiXFxuICAgIFJFQUwoREZQKSA6OiBhbnMoU0laRSh4aWosIDIpLCBJTlQoKG9yZGVyIC0gMSkgKiAob3JkZXIgLSAyKSAvIDIpKVxcbiAgRU5EIEZVTkNUSU9OIENlbGxCYXNpc19UcmlhbmdsZVxcbkVORCBJTlRFUkZBQ0VcXG5cIlxuICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgICB9KSwgX2pzeChUYWJJdGVtLCB7XG4gICAgICAgIHZhbHVlOiBcImV4YW1wbGVcIixcbiAgICAgICAgbGFiZWw6IFwi77iP3IAgU2VlIGV4YW1wbGVcIixcbiAgICAgICAgY2hpbGRyZW46IF9qc3goRVhBTVBMRTM2LCB7fSlcbiAgICAgIH0pLCBfanN4KFRhYkl0ZW0sIHtcbiAgICAgICAgdmFsdWU6IFwiY2xvc2VcIixcbiAgICAgICAgbGFiZWw6IFwi4oaiIFwiXG4gICAgICB9KV1cbiAgICB9KV1cbiAgfSk7XG59XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNRFhDb250ZW50KHByb3BzID0ge30pIHtcbiAgY29uc3Qge3dyYXBwZXI6IE1EWExheW91dH0gPSB7XG4gICAgLi4uX3Byb3ZpZGVDb21wb25lbnRzKCksXG4gICAgLi4ucHJvcHMuY29tcG9uZW50c1xuICB9O1xuICByZXR1cm4gTURYTGF5b3V0ID8gX2pzeChNRFhMYXlvdXQsIHtcbiAgICAuLi5wcm9wcyxcbiAgICBjaGlsZHJlbjogX2pzeChfY3JlYXRlTWR4Q29udGVudCwge1xuICAgICAgLi4ucHJvcHNcbiAgICB9KVxuICB9KSA6IF9jcmVhdGVNZHhDb250ZW50KHByb3BzKTtcbn1cblxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./docs/docs-api/TriangleInterpolationUtility/CellBasis_Triangle.md\n");

/***/ })

}]);