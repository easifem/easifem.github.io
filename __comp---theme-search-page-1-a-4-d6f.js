/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkeasifem_docs"] = globalThis["webpackChunkeasifem_docs"] || []).push([["__comp---theme-search-page-1-a-4-d6f"],{

/***/ "./node_modules/@algolia/events/events.js":
/***/ ((module) => {

eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\n// EventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@algolia/events/events.js\n");

/***/ }),

/***/ "./node_modules/@docusaurus/theme-common/lib/utils/usePluralForm.js":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   usePluralForm: () => (/* binding */ usePluralForm)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _docusaurus_useDocusaurusContext__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./node_modules/@docusaurus/core/lib/client/exports/useDocusaurusContext.js\");\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */// We want to ensurer a stable plural form order in all cases\n// It is more convenient and natural to handle \"small values\" first\n// See https://x.com/sebastienlorber/status/1366820663261077510\nconst OrderedPluralForms=['zero','one','two','few','many','other'];function sortPluralForms(pluralForms){return OrderedPluralForms.filter(pf=>pluralForms.includes(pf));}// Hardcoded english/fallback implementation\nconst EnglishPluralForms={locale:'en',pluralForms:sortPluralForms(['one','other']),select:count=>count===1?'one':'other'};function createLocalePluralForms(locale){const pluralRules=new Intl.PluralRules(locale);return{locale,pluralForms:sortPluralForms(pluralRules.resolvedOptions().pluralCategories),select:count=>pluralRules.select(count)};}/**\n * Poor man's `PluralSelector` implementation, using an English fallback. We\n * want a lightweight, future-proof and good-enough solution. We don't want a\n * perfect and heavy solution.\n *\n * Docusaurus classic theme has only 2 deeply nested labels requiring complex\n * plural rules. We don't want to use `Intl` + `PluralRules` polyfills + full\n * ICU syntax (react-intl) just for that.\n *\n * Notes:\n * - 2021: 92+% Browsers support `Intl.PluralRules`, and support will increase\n * in the future\n * - NodeJS >= 13 has full ICU support by default\n * - In case of \"mismatch\" between SSR and Browser ICU support, React keeps\n * working!\n */function useLocalePluralForms(){const{i18n:{currentLocale}}=(0,_docusaurus_useDocusaurusContext__WEBPACK_IMPORTED_MODULE_1__[\"default\"])();return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{try{return createLocalePluralForms(currentLocale);}catch(err){console.error(`Failed to use Intl.PluralRules for locale \"${currentLocale}\".\nDocusaurus will fallback to the default (English) implementation.\nError: ${err.message}\n`);return EnglishPluralForms;}},[currentLocale]);}function selectPluralMessage(pluralMessages,count,localePluralForms){const separator='|';const parts=pluralMessages.split(separator);if(parts.length===1){return parts[0];}if(parts.length>localePluralForms.pluralForms.length){console.error(`For locale=${localePluralForms.locale}, a maximum of ${localePluralForms.pluralForms.length} plural forms are expected (${localePluralForms.pluralForms.join(',')}), but the message contains ${parts.length}: ${pluralMessages}`);}const pluralForm=localePluralForms.select(count);const pluralFormIndex=localePluralForms.pluralForms.indexOf(pluralForm);// In case of not enough plural form messages, we take the last one (other)\n// instead of returning undefined\nreturn parts[Math.min(pluralFormIndex,parts.length-1)];}/**\n * Reads the current locale and returns an interface very similar to\n * `Intl.PluralRules`.\n */function usePluralForm(){const localePluralForm=useLocalePluralForms();return{selectMessage:(count,pluralMessages)=>selectPluralMessage(pluralMessages,count,localePluralForm)};}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGRvY3VzYXVydXMvdGhlbWUtY29tbW9uL2xpYi91dGlscy91c2VQbHVyYWxGb3JtLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7Ozs7QUFPQTtBQUlBO0FBQ0E7QUFDQTtBQXFCQTs7Ozs7Ozs7Ozs7Ozs7O0FBaUNBOztBQVVBO0FBQ0E7QUE2QkE7QUFDQTs7O0FBT0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lYXNpZmVtLWRvY3MvLi4vLi4vc3JjL3V0aWxzL3VzZVBsdXJhbEZvcm0udHM/NjAyYiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@docusaurus/theme-common/lib/utils/usePluralForm.js\n");

/***/ }),

/***/ "./node_modules/@docusaurus/theme-search-algolia/lib/theme/SearchPage/index.js":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"default\": () => (/* binding */ SearchPage)\n});\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(\"./node_modules/react/index.js\");\n// EXTERNAL MODULE: ./node_modules/clsx/dist/clsx.mjs\nvar clsx = __webpack_require__(\"./node_modules/clsx/dist/clsx.mjs\");\n// EXTERNAL MODULE: ./node_modules/algoliasearch-helper/index.js\nvar algoliasearch_helper = __webpack_require__(\"./node_modules/algoliasearch-helper/index.js\");\nvar algoliasearch_helper_default = /*#__PURE__*/__webpack_require__.n(algoliasearch_helper);\n;// ./node_modules/@algolia/requester-browser-xhr/dist/requester.xhr.js\nfunction m(){function r(t){return new Promise(s=>{let e=new XMLHttpRequest;e.open(t.method,t.url,!0),Object.keys(t.headers).forEach(n=>e.setRequestHeader(n,t.headers[n]));let i=(n,a)=>setTimeout(()=>{e.abort(),s({status:0,content:a,isTimedOut:!0})},n),u=i(t.connectTimeout,\"Connection timeout\"),o;e.onreadystatechange=()=>{e.readyState>e.OPENED&&o===void 0&&(clearTimeout(u),o=i(t.responseTimeout,\"Socket timeout\"))},e.onerror=()=>{e.status===0&&(clearTimeout(u),clearTimeout(o),s({content:e.responseText||\"Network request failed\",status:e.status,isTimedOut:!1}))},e.onload=()=>{clearTimeout(u),clearTimeout(o),s({content:e.responseText,status:e.status,isTimedOut:!1})},e.send(t.data)})}return{send:r}}\n//# sourceMappingURL=requester.xhr.js.map\n;// ./node_modules/@algolia/client-common/dist/common.js\n// src/cache/createBrowserLocalStorageCache.ts\nfunction createBrowserLocalStorageCache(options) {\n  let storage;\n  const namespaceKey = `algolia-client-js-${options.key}`;\n  function getStorage() {\n    if (storage === void 0) {\n      storage = options.localStorage || window.localStorage;\n    }\n    return storage;\n  }\n  function getNamespace() {\n    return JSON.parse(getStorage().getItem(namespaceKey) || \"{}\");\n  }\n  function setNamespace(namespace) {\n    getStorage().setItem(namespaceKey, JSON.stringify(namespace));\n  }\n  function removeOutdatedCacheItems() {\n    const timeToLive = options.timeToLive ? options.timeToLive * 1e3 : null;\n    const namespace = getNamespace();\n    const filteredNamespaceWithoutOldFormattedCacheItems = Object.fromEntries(\n      Object.entries(namespace).filter(([, cacheItem]) => {\n        return cacheItem.timestamp !== void 0;\n      })\n    );\n    setNamespace(filteredNamespaceWithoutOldFormattedCacheItems);\n    if (!timeToLive) {\n      return;\n    }\n    const filteredNamespaceWithoutExpiredItems = Object.fromEntries(\n      Object.entries(filteredNamespaceWithoutOldFormattedCacheItems).filter(([, cacheItem]) => {\n        const currentTimestamp = (/* @__PURE__ */ new Date()).getTime();\n        const isExpired = cacheItem.timestamp + timeToLive < currentTimestamp;\n        return !isExpired;\n      })\n    );\n    setNamespace(filteredNamespaceWithoutExpiredItems);\n  }\n  return {\n    get(key, defaultValue, events = {\n      miss: () => Promise.resolve()\n    }) {\n      return Promise.resolve().then(() => {\n        removeOutdatedCacheItems();\n        return getNamespace()[JSON.stringify(key)];\n      }).then((value) => {\n        return Promise.all([value ? value.value : defaultValue(), value !== void 0]);\n      }).then(([value, exists]) => {\n        return Promise.all([value, exists || events.miss(value)]);\n      }).then(([value]) => value);\n    },\n    set(key, value) {\n      return Promise.resolve().then(() => {\n        const namespace = getNamespace();\n        namespace[JSON.stringify(key)] = {\n          timestamp: (/* @__PURE__ */ new Date()).getTime(),\n          value\n        };\n        getStorage().setItem(namespaceKey, JSON.stringify(namespace));\n        return value;\n      });\n    },\n    delete(key) {\n      return Promise.resolve().then(() => {\n        const namespace = getNamespace();\n        delete namespace[JSON.stringify(key)];\n        getStorage().setItem(namespaceKey, JSON.stringify(namespace));\n      });\n    },\n    clear() {\n      return Promise.resolve().then(() => {\n        getStorage().removeItem(namespaceKey);\n      });\n    }\n  };\n}\n\n// src/cache/createNullCache.ts\nfunction createNullCache() {\n  return {\n    get(_key, defaultValue, events = {\n      miss: () => Promise.resolve()\n    }) {\n      const value = defaultValue();\n      return value.then((result) => Promise.all([result, events.miss(result)])).then(([result]) => result);\n    },\n    set(_key, value) {\n      return Promise.resolve(value);\n    },\n    delete(_key) {\n      return Promise.resolve();\n    },\n    clear() {\n      return Promise.resolve();\n    }\n  };\n}\n\n// src/cache/createFallbackableCache.ts\nfunction createFallbackableCache(options) {\n  const caches = [...options.caches];\n  const current = caches.shift();\n  if (current === void 0) {\n    return createNullCache();\n  }\n  return {\n    get(key, defaultValue, events = {\n      miss: () => Promise.resolve()\n    }) {\n      return current.get(key, defaultValue, events).catch(() => {\n        return createFallbackableCache({ caches }).get(key, defaultValue, events);\n      });\n    },\n    set(key, value) {\n      return current.set(key, value).catch(() => {\n        return createFallbackableCache({ caches }).set(key, value);\n      });\n    },\n    delete(key) {\n      return current.delete(key).catch(() => {\n        return createFallbackableCache({ caches }).delete(key);\n      });\n    },\n    clear() {\n      return current.clear().catch(() => {\n        return createFallbackableCache({ caches }).clear();\n      });\n    }\n  };\n}\n\n// src/cache/createMemoryCache.ts\nfunction createMemoryCache(options = { serializable: true }) {\n  let cache = {};\n  return {\n    get(key, defaultValue, events = {\n      miss: () => Promise.resolve()\n    }) {\n      const keyAsString = JSON.stringify(key);\n      if (keyAsString in cache) {\n        return Promise.resolve(options.serializable ? JSON.parse(cache[keyAsString]) : cache[keyAsString]);\n      }\n      const promise = defaultValue();\n      return promise.then((value) => events.miss(value)).then(() => promise);\n    },\n    set(key, value) {\n      cache[JSON.stringify(key)] = options.serializable ? JSON.stringify(value) : value;\n      return Promise.resolve(value);\n    },\n    delete(key) {\n      delete cache[JSON.stringify(key)];\n      return Promise.resolve();\n    },\n    clear() {\n      cache = {};\n      return Promise.resolve();\n    }\n  };\n}\n\n// src/constants.ts\nvar DEFAULT_CONNECT_TIMEOUT_BROWSER = 1e3;\nvar DEFAULT_READ_TIMEOUT_BROWSER = 2e3;\nvar DEFAULT_WRITE_TIMEOUT_BROWSER = 3e4;\nvar DEFAULT_CONNECT_TIMEOUT_NODE = 2e3;\nvar DEFAULT_READ_TIMEOUT_NODE = 5e3;\nvar DEFAULT_WRITE_TIMEOUT_NODE = 3e4;\n\n// src/createAlgoliaAgent.ts\nfunction createAlgoliaAgent(version) {\n  const algoliaAgent = {\n    value: `Algolia for JavaScript (${version})`,\n    add(options) {\n      const addedAlgoliaAgent = `; ${options.segment}${options.version !== void 0 ? ` (${options.version})` : \"\"}`;\n      if (algoliaAgent.value.indexOf(addedAlgoliaAgent) === -1) {\n        algoliaAgent.value = `${algoliaAgent.value}${addedAlgoliaAgent}`;\n      }\n      return algoliaAgent;\n    }\n  };\n  return algoliaAgent;\n}\n\n// src/createAuth.ts\nfunction createAuth(appId, apiKey, authMode = \"WithinHeaders\") {\n  const credentials = {\n    \"x-algolia-api-key\": apiKey,\n    \"x-algolia-application-id\": appId\n  };\n  return {\n    headers() {\n      return authMode === \"WithinHeaders\" ? credentials : {};\n    },\n    queryParameters() {\n      return authMode === \"WithinQueryParameters\" ? credentials : {};\n    }\n  };\n}\n\n// src/createIterablePromise.ts\nfunction createIterablePromise({\n  func,\n  validate,\n  aggregator,\n  error,\n  timeout = () => 0\n}) {\n  const retry = (previousResponse) => {\n    return new Promise((resolve, reject) => {\n      func(previousResponse).then(async (response) => {\n        if (aggregator) {\n          await aggregator(response);\n        }\n        if (await validate(response)) {\n          return resolve(response);\n        }\n        if (error && await error.validate(response)) {\n          return reject(new Error(await error.message(response)));\n        }\n        return setTimeout(\n          () => {\n            retry(response).then(resolve).catch(reject);\n          },\n          await timeout()\n        );\n      }).catch((err) => {\n        reject(err);\n      });\n    });\n  };\n  return retry();\n}\n\n// src/getAlgoliaAgent.ts\nfunction getAlgoliaAgent({ algoliaAgents, client, version }) {\n  const defaultAlgoliaAgent = createAlgoliaAgent(version).add({\n    segment: client,\n    version\n  });\n  algoliaAgents.forEach((algoliaAgent) => defaultAlgoliaAgent.add(algoliaAgent));\n  return defaultAlgoliaAgent;\n}\n\n// src/logger/createNullLogger.ts\nfunction createNullLogger() {\n  return {\n    debug(_message, _args) {\n      return Promise.resolve();\n    },\n    info(_message, _args) {\n      return Promise.resolve();\n    },\n    error(_message, _args) {\n      return Promise.resolve();\n    }\n  };\n}\n\n// src/transporter/createStatefulHost.ts\nvar EXPIRATION_DELAY = 2 * 60 * 1e3;\nfunction createStatefulHost(host, status = \"up\") {\n  const lastUpdate = Date.now();\n  function isUp() {\n    return status === \"up\" || Date.now() - lastUpdate > EXPIRATION_DELAY;\n  }\n  function isTimedOut() {\n    return status === \"timed out\" && Date.now() - lastUpdate <= EXPIRATION_DELAY;\n  }\n  return { ...host, status, lastUpdate, isUp, isTimedOut };\n}\n\n// src/transporter/errors.ts\nvar AlgoliaError = class extends Error {\n  name = \"AlgoliaError\";\n  constructor(message, name) {\n    super(message);\n    if (name) {\n      this.name = name;\n    }\n  }\n};\nvar IndexNotFoundError = class extends AlgoliaError {\n  constructor(indexName) {\n    super(`${indexName} does not exist`, \"IndexNotFoundError\");\n  }\n};\nvar IndicesInSameAppError = class extends AlgoliaError {\n  constructor() {\n    super(\"Indices are in the same application. Use operationIndex instead.\", \"IndicesInSameAppError\");\n  }\n};\nvar IndexAlreadyExistsError = class extends AlgoliaError {\n  constructor(indexName) {\n    super(`${indexName} index already exists.`, \"IndexAlreadyExistsError\");\n  }\n};\nvar ErrorWithStackTrace = class extends AlgoliaError {\n  stackTrace;\n  constructor(message, stackTrace, name) {\n    super(message, name);\n    this.stackTrace = stackTrace;\n  }\n};\nvar RetryError = class extends ErrorWithStackTrace {\n  constructor(stackTrace) {\n    super(\n      \"Unreachable hosts - your application id may be incorrect. If the error persists, please reach out to the Algolia Support team: https://alg.li/support.\",\n      stackTrace,\n      \"RetryError\"\n    );\n  }\n};\nvar ApiError = class extends ErrorWithStackTrace {\n  status;\n  constructor(message, status, stackTrace, name = \"ApiError\") {\n    super(message, stackTrace, name);\n    this.status = status;\n  }\n};\nvar DeserializationError = class extends AlgoliaError {\n  response;\n  constructor(message, response) {\n    super(message, \"DeserializationError\");\n    this.response = response;\n  }\n};\nvar DetailedApiError = class extends ApiError {\n  error;\n  constructor(message, status, error, stackTrace) {\n    super(message, status, stackTrace, \"DetailedApiError\");\n    this.error = error;\n  }\n};\n\n// src/transporter/helpers.ts\nfunction shuffle(array) {\n  const shuffledArray = array;\n  for (let c = array.length - 1; c > 0; c--) {\n    const b = Math.floor(Math.random() * (c + 1));\n    const a = array[c];\n    shuffledArray[c] = array[b];\n    shuffledArray[b] = a;\n  }\n  return shuffledArray;\n}\nfunction serializeUrl(host, path, queryParameters) {\n  const queryParametersAsString = serializeQueryParameters(queryParameters);\n  let url = `${host.protocol}://${host.url}${host.port ? `:${host.port}` : \"\"}/${path.charAt(0) === \"/\" ? path.substring(1) : path}`;\n  if (queryParametersAsString.length) {\n    url += `?${queryParametersAsString}`;\n  }\n  return url;\n}\nfunction serializeQueryParameters(parameters) {\n  return Object.keys(parameters).filter((key) => parameters[key] !== void 0).sort().map(\n    (key) => `${key}=${encodeURIComponent(\n      Object.prototype.toString.call(parameters[key]) === \"[object Array]\" ? parameters[key].join(\",\") : parameters[key]\n    ).replace(/\\+/g, \"%20\")}`\n  ).join(\"&\");\n}\nfunction serializeData(request, requestOptions) {\n  if (request.method === \"GET\" || request.data === void 0 && requestOptions.data === void 0) {\n    return void 0;\n  }\n  const data = Array.isArray(request.data) ? request.data : { ...request.data, ...requestOptions.data };\n  return JSON.stringify(data);\n}\nfunction serializeHeaders(baseHeaders, requestHeaders, requestOptionsHeaders) {\n  const headers = {\n    Accept: \"application/json\",\n    ...baseHeaders,\n    ...requestHeaders,\n    ...requestOptionsHeaders\n  };\n  const serializedHeaders = {};\n  Object.keys(headers).forEach((header) => {\n    const value = headers[header];\n    serializedHeaders[header.toLowerCase()] = value;\n  });\n  return serializedHeaders;\n}\nfunction deserializeSuccess(response) {\n  try {\n    return JSON.parse(response.content);\n  } catch (e) {\n    throw new DeserializationError(e.message, response);\n  }\n}\nfunction deserializeFailure({ content, status }, stackFrame) {\n  try {\n    const parsed = JSON.parse(content);\n    if (\"error\" in parsed) {\n      return new DetailedApiError(parsed.message, status, parsed.error, stackFrame);\n    }\n    return new ApiError(parsed.message, status, stackFrame);\n  } catch {\n  }\n  return new ApiError(content, status, stackFrame);\n}\n\n// src/transporter/responses.ts\nfunction isNetworkError({ isTimedOut, status }) {\n  return !isTimedOut && ~~status === 0;\n}\nfunction isRetryable({ isTimedOut, status }) {\n  return isTimedOut || isNetworkError({ isTimedOut, status }) || ~~(status / 100) !== 2 && ~~(status / 100) !== 4;\n}\nfunction isSuccess({ status }) {\n  return ~~(status / 100) === 2;\n}\n\n// src/transporter/stackTrace.ts\nfunction stackTraceWithoutCredentials(stackTrace) {\n  return stackTrace.map((stackFrame) => stackFrameWithoutCredentials(stackFrame));\n}\nfunction stackFrameWithoutCredentials(stackFrame) {\n  const modifiedHeaders = stackFrame.request.headers[\"x-algolia-api-key\"] ? { \"x-algolia-api-key\": \"*****\" } : {};\n  return {\n    ...stackFrame,\n    request: {\n      ...stackFrame.request,\n      headers: {\n        ...stackFrame.request.headers,\n        ...modifiedHeaders\n      }\n    }\n  };\n}\n\n// src/transporter/createTransporter.ts\nfunction createTransporter({\n  hosts,\n  hostsCache,\n  baseHeaders,\n  logger,\n  baseQueryParameters,\n  algoliaAgent,\n  timeouts,\n  requester,\n  requestsCache,\n  responsesCache\n}) {\n  async function createRetryableOptions(compatibleHosts) {\n    const statefulHosts = await Promise.all(\n      compatibleHosts.map((compatibleHost) => {\n        return hostsCache.get(compatibleHost, () => {\n          return Promise.resolve(createStatefulHost(compatibleHost));\n        });\n      })\n    );\n    const hostsUp = statefulHosts.filter((host) => host.isUp());\n    const hostsTimedOut = statefulHosts.filter((host) => host.isTimedOut());\n    const hostsAvailable = [...hostsUp, ...hostsTimedOut];\n    const compatibleHostsAvailable = hostsAvailable.length > 0 ? hostsAvailable : compatibleHosts;\n    return {\n      hosts: compatibleHostsAvailable,\n      getTimeout(timeoutsCount, baseTimeout) {\n        const timeoutMultiplier = hostsTimedOut.length === 0 && timeoutsCount === 0 ? 1 : hostsTimedOut.length + 3 + timeoutsCount;\n        return timeoutMultiplier * baseTimeout;\n      }\n    };\n  }\n  async function retryableRequest(request, requestOptions, isRead = true) {\n    const stackTrace = [];\n    const data = serializeData(request, requestOptions);\n    const headers = serializeHeaders(baseHeaders, request.headers, requestOptions.headers);\n    const dataQueryParameters = request.method === \"GET\" ? {\n      ...request.data,\n      ...requestOptions.data\n    } : {};\n    const queryParameters = {\n      ...baseQueryParameters,\n      ...request.queryParameters,\n      ...dataQueryParameters\n    };\n    if (algoliaAgent.value) {\n      queryParameters[\"x-algolia-agent\"] = algoliaAgent.value;\n    }\n    if (requestOptions && requestOptions.queryParameters) {\n      for (const key of Object.keys(requestOptions.queryParameters)) {\n        if (!requestOptions.queryParameters[key] || Object.prototype.toString.call(requestOptions.queryParameters[key]) === \"[object Object]\") {\n          queryParameters[key] = requestOptions.queryParameters[key];\n        } else {\n          queryParameters[key] = requestOptions.queryParameters[key].toString();\n        }\n      }\n    }\n    let timeoutsCount = 0;\n    const retry = async (retryableHosts, getTimeout) => {\n      const host = retryableHosts.pop();\n      if (host === void 0) {\n        throw new RetryError(stackTraceWithoutCredentials(stackTrace));\n      }\n      const timeout = { ...timeouts, ...requestOptions.timeouts };\n      const payload = {\n        data,\n        headers,\n        method: request.method,\n        url: serializeUrl(host, request.path, queryParameters),\n        connectTimeout: getTimeout(timeoutsCount, timeout.connect),\n        responseTimeout: getTimeout(timeoutsCount, isRead ? timeout.read : timeout.write)\n      };\n      const pushToStackTrace = (response2) => {\n        const stackFrame = {\n          request: payload,\n          response: response2,\n          host,\n          triesLeft: retryableHosts.length\n        };\n        stackTrace.push(stackFrame);\n        return stackFrame;\n      };\n      const response = await requester.send(payload);\n      if (isRetryable(response)) {\n        const stackFrame = pushToStackTrace(response);\n        if (response.isTimedOut) {\n          timeoutsCount++;\n        }\n        logger.info(\"Retryable failure\", stackFrameWithoutCredentials(stackFrame));\n        await hostsCache.set(host, createStatefulHost(host, response.isTimedOut ? \"timed out\" : \"down\"));\n        return retry(retryableHosts, getTimeout);\n      }\n      if (isSuccess(response)) {\n        return deserializeSuccess(response);\n      }\n      pushToStackTrace(response);\n      throw deserializeFailure(response, stackTrace);\n    };\n    const compatibleHosts = hosts.filter(\n      (host) => host.accept === \"readWrite\" || (isRead ? host.accept === \"read\" : host.accept === \"write\")\n    );\n    const options = await createRetryableOptions(compatibleHosts);\n    return retry([...options.hosts].reverse(), options.getTimeout);\n  }\n  function createRequest(request, requestOptions = {}) {\n    const isRead = request.useReadTransporter || request.method === \"GET\";\n    if (!isRead) {\n      return retryableRequest(request, requestOptions, isRead);\n    }\n    const createRetryableRequest = () => {\n      return retryableRequest(request, requestOptions);\n    };\n    const cacheable = requestOptions.cacheable || request.cacheable;\n    if (cacheable !== true) {\n      return createRetryableRequest();\n    }\n    const key = {\n      request,\n      requestOptions,\n      transporter: {\n        queryParameters: baseQueryParameters,\n        headers: baseHeaders\n      }\n    };\n    return responsesCache.get(\n      key,\n      () => {\n        return requestsCache.get(\n          key,\n          () => (\n            /**\n             * Finally, if there is no request in progress with the same key,\n             * this `createRetryableRequest()` will actually trigger the\n             * retryable request.\n             */\n            requestsCache.set(key, createRetryableRequest()).then(\n              (response) => Promise.all([requestsCache.delete(key), response]),\n              (err) => Promise.all([requestsCache.delete(key), Promise.reject(err)])\n            ).then(([_, response]) => response)\n          )\n        );\n      },\n      {\n        /**\n         * Of course, once we get this response back from the server, we\n         * tell response cache to actually store the received response\n         * to be used later.\n         */\n        miss: (response) => responsesCache.set(key, response)\n      }\n    );\n  }\n  return {\n    hostsCache,\n    requester,\n    timeouts,\n    logger,\n    algoliaAgent,\n    baseHeaders,\n    baseQueryParameters,\n    hosts,\n    request: createRequest,\n    requestsCache,\n    responsesCache\n  };\n}\n\n// src/types/logger.ts\nvar LogLevelEnum = {\n  Debug: 1,\n  Info: 2,\n  Error: 3\n};\n\n//# sourceMappingURL=common.js.map\n;// ./node_modules/algoliasearch/dist/lite/builds/browser.js\n// lite/builds/browser.ts\n\n\n\n// lite/src/liteClient.ts\n\nvar apiClientVersion = \"5.25.0\";\nfunction getDefaultHosts(appId) {\n  return [\n    {\n      url: `${appId}-dsn.algolia.net`,\n      accept: \"read\",\n      protocol: \"https\"\n    },\n    {\n      url: `${appId}.algolia.net`,\n      accept: \"write\",\n      protocol: \"https\"\n    }\n  ].concat(\n    shuffle([\n      {\n        url: `${appId}-1.algolianet.com`,\n        accept: \"readWrite\",\n        protocol: \"https\"\n      },\n      {\n        url: `${appId}-2.algolianet.com`,\n        accept: \"readWrite\",\n        protocol: \"https\"\n      },\n      {\n        url: `${appId}-3.algolianet.com`,\n        accept: \"readWrite\",\n        protocol: \"https\"\n      }\n    ])\n  );\n}\nfunction createLiteClient({\n  appId: appIdOption,\n  apiKey: apiKeyOption,\n  authMode,\n  algoliaAgents,\n  ...options\n}) {\n  const auth = createAuth(appIdOption, apiKeyOption, authMode);\n  const transporter = createTransporter({\n    hosts: getDefaultHosts(appIdOption),\n    ...options,\n    algoliaAgent: getAlgoliaAgent({\n      algoliaAgents,\n      client: \"Lite\",\n      version: apiClientVersion\n    }),\n    baseHeaders: {\n      \"content-type\": \"text/plain\",\n      ...auth.headers(),\n      ...options.baseHeaders\n    },\n    baseQueryParameters: {\n      ...auth.queryParameters(),\n      ...options.baseQueryParameters\n    }\n  });\n  return {\n    transporter,\n    /**\n     * The `appId` currently in use.\n     */\n    appId: appIdOption,\n    /**\n     * The `apiKey` currently in use.\n     */\n    apiKey: apiKeyOption,\n    /**\n     * Clears the cache of the transporter for the `requestsCache` and `responsesCache` properties.\n     */\n    clearCache() {\n      return Promise.all([transporter.requestsCache.clear(), transporter.responsesCache.clear()]).then(() => void 0);\n    },\n    /**\n     * Get the value of the `algoliaAgent`, used by our libraries internally and telemetry system.\n     */\n    get _ua() {\n      return transporter.algoliaAgent.value;\n    },\n    /**\n     * Adds a `segment` to the `x-algolia-agent` sent with every requests.\n     *\n     * @param segment - The algolia agent (user-agent) segment to add.\n     * @param version - The version of the agent.\n     */\n    addAlgoliaAgent(segment, version) {\n      transporter.algoliaAgent.add({ segment, version });\n    },\n    /**\n     * Helper method to switch the API key used to authenticate the requests.\n     *\n     * @param params - Method params.\n     * @param params.apiKey - The new API Key to use.\n     */\n    setClientApiKey({ apiKey }) {\n      if (!authMode || authMode === \"WithinHeaders\") {\n        transporter.baseHeaders[\"x-algolia-api-key\"] = apiKey;\n      } else {\n        transporter.baseQueryParameters[\"x-algolia-api-key\"] = apiKey;\n      }\n    },\n    /**\n     * Helper: calls the `search` method but with certainty that we will only request Algolia records (hits) and not facets.\n     * Disclaimer: We don't assert that the parameters you pass to this method only contains `hits` requests to prevent impacting search performances, this helper is purely for typing purposes.\n     *\n     * @summary Search multiple indices for `hits`.\n     * @param searchMethodParams - Query requests and strategies. Results will be received in the same order as the queries.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    searchForHits(searchMethodParams, requestOptions) {\n      return this.search(searchMethodParams, requestOptions);\n    },\n    /**\n     * Helper: calls the `search` method but with certainty that we will only request Algolia facets and not records (hits).\n     * Disclaimer: We don't assert that the parameters you pass to this method only contains `facets` requests to prevent impacting search performances, this helper is purely for typing purposes.\n     *\n     * @summary Search multiple indices for `facets`.\n     * @param searchMethodParams - Query requests and strategies. Results will be received in the same order as the queries.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    searchForFacets(searchMethodParams, requestOptions) {\n      return this.search(searchMethodParams, requestOptions);\n    },\n    /**\n     * This method lets you send requests to the Algolia REST API.\n     * @param customPost - The customPost object.\n     * @param customPost.path - Path of the endpoint, anything after \\\"/1\\\" must be specified.\n     * @param customPost.parameters - Query parameters to apply to the current query.\n     * @param customPost.body - Parameters to send with the custom request.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    customPost({ path, parameters, body }, requestOptions) {\n      if (!path) {\n        throw new Error(\"Parameter `path` is required when calling `customPost`.\");\n      }\n      const requestPath = \"/{path}\".replace(\"{path}\", path);\n      const headers = {};\n      const queryParameters = parameters ? parameters : {};\n      const request = {\n        method: \"POST\",\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: body ? body : {}\n      };\n      return transporter.request(request, requestOptions);\n    },\n    /**\n     * Retrieves recommendations from selected AI models.\n     *\n     * Required API Key ACLs:\n     *  - search\n     * @param getRecommendationsParams - The getRecommendationsParams object.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getRecommendations(getRecommendationsParams, requestOptions) {\n      if (getRecommendationsParams && Array.isArray(getRecommendationsParams)) {\n        const newSignatureRequest = {\n          requests: getRecommendationsParams\n        };\n        getRecommendationsParams = newSignatureRequest;\n      }\n      if (!getRecommendationsParams) {\n        throw new Error(\"Parameter `getRecommendationsParams` is required when calling `getRecommendations`.\");\n      }\n      if (!getRecommendationsParams.requests) {\n        throw new Error(\"Parameter `getRecommendationsParams.requests` is required when calling `getRecommendations`.\");\n      }\n      const requestPath = \"/1/indexes/*/recommendations\";\n      const headers = {};\n      const queryParameters = {};\n      const request = {\n        method: \"POST\",\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: getRecommendationsParams,\n        useReadTransporter: true,\n        cacheable: true\n      };\n      return transporter.request(request, requestOptions);\n    },\n    /**\n     * Sends multiple search requests to one or more indices.  This can be useful in these cases:  - Different indices for different purposes, such as, one index for products, another one for marketing content. - Multiple searches to the same index—for example, with different filters.  Use the helper `searchForHits` or `searchForFacets` to get the results in a more convenient format, if you already know the return type you want.\n     *\n     * Required API Key ACLs:\n     *  - search\n     * @param searchMethodParams - Muli-search request body. Results are returned in the same order as the requests.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    search(searchMethodParams, requestOptions) {\n      if (searchMethodParams && Array.isArray(searchMethodParams)) {\n        const newSignatureRequest = {\n          requests: searchMethodParams.map(({ params, ...legacyRequest }) => {\n            if (legacyRequest.type === \"facet\") {\n              return {\n                ...legacyRequest,\n                ...params,\n                type: \"facet\"\n              };\n            }\n            return {\n              ...legacyRequest,\n              ...params,\n              facet: void 0,\n              maxFacetHits: void 0,\n              facetQuery: void 0\n            };\n          })\n        };\n        searchMethodParams = newSignatureRequest;\n      }\n      if (!searchMethodParams) {\n        throw new Error(\"Parameter `searchMethodParams` is required when calling `search`.\");\n      }\n      if (!searchMethodParams.requests) {\n        throw new Error(\"Parameter `searchMethodParams.requests` is required when calling `search`.\");\n      }\n      const requestPath = \"/1/indexes/*/queries\";\n      const headers = {};\n      const queryParameters = {};\n      const request = {\n        method: \"POST\",\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: searchMethodParams,\n        useReadTransporter: true,\n        cacheable: true\n      };\n      return transporter.request(request, requestOptions);\n    }\n  };\n}\n\n// lite/builds/browser.ts\nfunction liteClient(appId, apiKey, options) {\n  if (!appId || typeof appId !== \"string\") {\n    throw new Error(\"`appId` is missing.\");\n  }\n  if (!apiKey || typeof apiKey !== \"string\") {\n    throw new Error(\"`apiKey` is missing.\");\n  }\n  return createLiteClient({\n    appId,\n    apiKey,\n    timeouts: {\n      connect: 1e3,\n      read: 2e3,\n      write: 3e4\n    },\n    logger: createNullLogger(),\n    requester: m(),\n    algoliaAgents: [{ segment: \"Browser\" }],\n    authMode: \"WithinQueryParameters\",\n    responsesCache: createMemoryCache(),\n    requestsCache: createMemoryCache({ serializable: false }),\n    hostsCache: createFallbackableCache({\n      caches: [createBrowserLocalStorageCache({ key: `${apiClientVersion}-${appId}` }), createMemoryCache()]\n    }),\n    ...options\n  });\n}\n\n//# sourceMappingURL=browser.js.map\n// EXTERNAL MODULE: ./node_modules/@docusaurus/core/lib/client/exports/ExecutionEnvironment.js\nvar ExecutionEnvironment = __webpack_require__(\"./node_modules/@docusaurus/core/lib/client/exports/ExecutionEnvironment.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/core/lib/client/exports/Head.js\nvar Head = __webpack_require__(\"./node_modules/@docusaurus/core/lib/client/exports/Head.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/core/lib/client/exports/Link.js\nvar Link = __webpack_require__(\"./node_modules/@docusaurus/core/lib/client/exports/Link.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/plugin-content-docs/lib/client/index.js + 1 modules\nvar client = __webpack_require__(\"./node_modules/@docusaurus/plugin-content-docs/lib/client/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-common/lib/utils/usePluralForm.js\nvar usePluralForm = __webpack_require__(\"./node_modules/@docusaurus/theme-common/lib/utils/usePluralForm.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-common/lib/hooks/useSearchPage.js\nvar useSearchPage = __webpack_require__(\"./node_modules/@docusaurus/theme-common/lib/hooks/useSearchPage.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-common/lib/utils/reactUtils.js\nvar reactUtils = __webpack_require__(\"./node_modules/@docusaurus/theme-common/lib/utils/reactUtils.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-common/lib/utils/metadataUtils.js\nvar metadataUtils = __webpack_require__(\"./node_modules/@docusaurus/theme-common/lib/utils/metadataUtils.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/core/lib/client/exports/Translate.js + 1 modules\nvar Translate = __webpack_require__(\"./node_modules/@docusaurus/core/lib/client/exports/Translate.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/core/lib/client/exports/useDocusaurusContext.js\nvar useDocusaurusContext = __webpack_require__(\"./node_modules/@docusaurus/core/lib/client/exports/useDocusaurusContext.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-search-algolia/lib/client/useAlgoliaThemeConfig.js\nvar useAlgoliaThemeConfig = __webpack_require__(\"./node_modules/@docusaurus/theme-search-algolia/lib/client/useAlgoliaThemeConfig.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-search-algolia/lib/client/useSearchResultUrlProcessor.js\nvar useSearchResultUrlProcessor = __webpack_require__(\"./node_modules/@docusaurus/theme-search-algolia/lib/client/useSearchResultUrlProcessor.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/Layout/index.js + 50 modules\nvar Layout = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/Layout/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/Heading/index.js + 1 modules\nvar Heading = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/Heading/index.js\");\n;// ./node_modules/@docusaurus/theme-search-algolia/lib/theme/SearchPage/styles.module.css\n// extracted by mini-css-extract-plugin\n/* harmony default export */ const styles_module = ({\"searchQueryInput\":\"searchQueryInput_u2C7\",\"searchVersionInput\":\"searchVersionInput_m0Ui\",\"searchResultsColumn\":\"searchResultsColumn_JPFH\",\"algoliaLogo\":\"algoliaLogo_rT1R\",\"algoliaLogoPathFill\":\"algoliaLogoPathFill_WdUC\",\"searchResultItem\":\"searchResultItem_Tv2o\",\"searchResultItemHeading\":\"searchResultItemHeading_KbCB\",\"searchResultItemPath\":\"searchResultItemPath_lhe1\",\"searchResultItemSummary\":\"searchResultItemSummary_AEaO\",\"searchQueryColumn\":\"searchQueryColumn_RTkw\",\"searchVersionColumn\":\"searchVersionColumn_ypXd\",\"searchLogoColumn\":\"searchLogoColumn_rJIA\",\"loadingSpinner\":\"loadingSpinner_XVxU\",\"loading-spin\":\"loading-spin_vzvp\",\"loader\":\"loader_vvXV\"});\n// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n;// ./node_modules/@docusaurus/theme-search-algolia/lib/theme/SearchPage/index.js\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *//* eslint-disable jsx-a11y/no-autofocus */// Very simple pluralization: probably good enough for now\nfunction useDocumentsFoundPlural(){const{selectMessage}=(0,usePluralForm.usePluralForm)();return count=>selectMessage(count,(0,Translate.translate)({id:'theme.SearchPage.documentsFound.plurals',description:'Pluralized label for \"{count} documents found\". Use as much plural forms (separated by \"|\") as your language support (see https://www.unicode.org/cldr/cldr-aux/charts/34/supplemental/language_plural_rules.html)',message:'One document found|{count} documents found'},{count}));}function useDocsSearchVersionsHelpers(){const allDocsData=(0,client.useAllDocsData)();// State of the version select menus / algolia facet filters\n// docsPluginId -> versionName map\nconst[searchVersions,setSearchVersions]=(0,react.useState)(()=>Object.entries(allDocsData).reduce((acc,[pluginId,pluginData])=>({...acc,[pluginId]:pluginData.versions[0].name}),{}));// Set the value of a single select menu\nconst setSearchVersion=(pluginId,searchVersion)=>setSearchVersions(s=>({...s,[pluginId]:searchVersion}));const versioningEnabled=Object.values(allDocsData).some(docsData=>docsData.versions.length>1);return{allDocsData,versioningEnabled,searchVersions,setSearchVersion};}// We want to display one select per versioned docs plugin instance\nfunction SearchVersionSelectList({docsSearchVersionsHelpers}){const versionedPluginEntries=Object.entries(docsSearchVersionsHelpers.allDocsData)// Do not show a version select for unversioned docs plugin instances\n.filter(([,docsData])=>docsData.versions.length>1);return/*#__PURE__*/(0,jsx_runtime.jsx)(\"div\",{className:(0,clsx[\"default\"])('col','col--3','padding-left--none',styles_module.searchVersionColumn),children:versionedPluginEntries.map(([pluginId,docsData])=>{const labelPrefix=versionedPluginEntries.length>1?`${pluginId}: `:'';return/*#__PURE__*/(0,jsx_runtime.jsx)(\"select\",{onChange:e=>docsSearchVersionsHelpers.setSearchVersion(pluginId,e.target.value),defaultValue:docsSearchVersionsHelpers.searchVersions[pluginId],className:styles_module.searchVersionInput,children:docsData.versions.map((version,i)=>/*#__PURE__*/(0,jsx_runtime.jsx)(\"option\",{label:`${labelPrefix}${version.label}`,value:version.name},i))},pluginId);})});}function getSearchPageTitle(searchQuery){return searchQuery?(0,Translate.translate)({id:'theme.SearchPage.existingResultsTitle',message:'Search results for \"{query}\"',description:'The search page title for non-empty query'},{query:searchQuery}):(0,Translate.translate)({id:'theme.SearchPage.emptyResultsTitle',message:'Search the documentation',description:'The search page title for empty query'});}function SearchPageContent(){const{i18n:{currentLocale}}=(0,useDocusaurusContext[\"default\"])();const{algolia:{appId,apiKey,indexName,contextualSearch}}=(0,useAlgoliaThemeConfig.useAlgoliaThemeConfig)();const processSearchResultUrl=(0,useSearchResultUrlProcessor.useSearchResultUrlProcessor)();const documentsFoundPlural=useDocumentsFoundPlural();const docsSearchVersionsHelpers=useDocsSearchVersionsHelpers();const[searchQuery,setSearchQuery]=(0,useSearchPage.useSearchQueryString)();const pageTitle=getSearchPageTitle(searchQuery);const initialSearchResultState={items:[],query:null,totalResults:null,totalPages:null,lastPage:null,hasMore:null,loading:null};const[searchResultState,searchResultStateDispatcher]=(0,react.useReducer)((prevState,data)=>{switch(data.type){case'reset':{return initialSearchResultState;}case'loading':{return{...prevState,loading:true};}case'update':{if(searchQuery!==data.value.query){return prevState;}return{...data.value,items:data.value.lastPage===0?data.value.items:prevState.items.concat(data.value.items)};}case'advance':{const hasMore=prevState.totalPages>prevState.lastPage+1;return{...prevState,lastPage:hasMore?prevState.lastPage+1:prevState.lastPage,hasMore};}default:return prevState;}},initialSearchResultState);// respect settings from the theme config for facets\nconst disjunctiveFacets=contextualSearch?['language','docusaurus_tag']:[];const algoliaClient=liteClient(appId,apiKey);const algoliaHelper=algoliasearch_helper_default()(algoliaClient,indexName,{// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore: why errors happens after upgrading to TS 5.5 ?\nhitsPerPage:15,advancedSyntax:true,disjunctiveFacets});algoliaHelper.on('result',({results:{query,hits,page,nbHits,nbPages}})=>{if(query===''||!Array.isArray(hits)){searchResultStateDispatcher({type:'reset'});return;}const sanitizeValue=value=>value.replace(/algolia-docsearch-suggestion--highlight/g,'search-result-match');const items=hits.map(({url,_highlightResult:{hierarchy},_snippetResult:snippet={}})=>{const titles=Object.keys(hierarchy).map(key=>sanitizeValue(hierarchy[key].value));return{title:titles.pop(),url:processSearchResultUrl(url),summary:snippet.content?`${sanitizeValue(snippet.content.value)}...`:'',breadcrumbs:titles};});searchResultStateDispatcher({type:'update',value:{items,query,totalResults:nbHits,totalPages:nbPages,lastPage:page,hasMore:nbPages>page+1,loading:false}});});const[loaderRef,setLoaderRef]=(0,react.useState)(null);const prevY=(0,react.useRef)(0);const observer=(0,react.useRef)(ExecutionEnvironment[\"default\"].canUseIntersectionObserver&&new IntersectionObserver(// TODO need to fix this React Compiler lint error\n// eslint-disable-next-line react-compiler/react-compiler\nentries=>{const{isIntersecting,boundingClientRect:{y:currentY}}=entries[0];if(isIntersecting&&prevY.current>currentY){searchResultStateDispatcher({type:'advance'});}prevY.current=currentY;},{threshold:1}));const makeSearch=(0,reactUtils.useEvent)((page=0)=>{if(contextualSearch){algoliaHelper.addDisjunctiveFacetRefinement('docusaurus_tag','default');algoliaHelper.addDisjunctiveFacetRefinement('language',currentLocale);Object.entries(docsSearchVersionsHelpers.searchVersions).forEach(([pluginId,searchVersion])=>{algoliaHelper.addDisjunctiveFacetRefinement('docusaurus_tag',`docs-${pluginId}-${searchVersion}`);});}algoliaHelper.setQuery(searchQuery).setPage(page).search();});(0,react.useEffect)(()=>{if(!loaderRef){return undefined;}const currentObserver=observer.current;if(currentObserver){currentObserver.observe(loaderRef);return()=>currentObserver.unobserve(loaderRef);}return()=>true;},[loaderRef]);(0,react.useEffect)(()=>{searchResultStateDispatcher({type:'reset'});if(searchQuery){searchResultStateDispatcher({type:'loading'});setTimeout(()=>{makeSearch();},300);}},[searchQuery,docsSearchVersionsHelpers.searchVersions,makeSearch]);(0,react.useEffect)(()=>{if(!searchResultState.lastPage||searchResultState.lastPage===0){return;}makeSearch(searchResultState.lastPage);},[makeSearch,searchResultState.lastPage]);return/*#__PURE__*/(0,jsx_runtime.jsxs)(Layout[\"default\"],{children:[/*#__PURE__*/(0,jsx_runtime.jsx)(metadataUtils.PageMetadata,{title:pageTitle}),/*#__PURE__*/(0,jsx_runtime.jsx)(Head[\"default\"],{children:/*#__PURE__*/(0,jsx_runtime.jsx)(\"meta\",{property:\"robots\",content:\"noindex, follow\"})}),/*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\",{className:\"container margin-vert--lg\",children:[/*#__PURE__*/(0,jsx_runtime.jsx)(Heading[\"default\"],{as:\"h1\",children:pageTitle}),/*#__PURE__*/(0,jsx_runtime.jsxs)(\"form\",{className:\"row\",onSubmit:e=>e.preventDefault(),children:[/*#__PURE__*/(0,jsx_runtime.jsx)(\"div\",{className:(0,clsx[\"default\"])('col',styles_module.searchQueryColumn,{'col--9':docsSearchVersionsHelpers.versioningEnabled,'col--12':!docsSearchVersionsHelpers.versioningEnabled}),children:/*#__PURE__*/(0,jsx_runtime.jsx)(\"input\",{type:\"search\",name:\"q\",className:styles_module.searchQueryInput,placeholder:(0,Translate.translate)({id:'theme.SearchPage.inputPlaceholder',message:'Type your search here',description:'The placeholder for search page input'}),\"aria-label\":(0,Translate.translate)({id:'theme.SearchPage.inputLabel',message:'Search',description:'The ARIA label for search page input'}),onChange:e=>setSearchQuery(e.target.value),value:searchQuery,autoComplete:\"off\",autoFocus:true})}),contextualSearch&&docsSearchVersionsHelpers.versioningEnabled&&/*#__PURE__*/(0,jsx_runtime.jsx)(SearchVersionSelectList,{docsSearchVersionsHelpers:docsSearchVersionsHelpers})]}),/*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\",{className:\"row\",children:[/*#__PURE__*/(0,jsx_runtime.jsx)(\"div\",{className:(0,clsx[\"default\"])('col','col--8',styles_module.searchResultsColumn),children:!!searchResultState.totalResults&&documentsFoundPlural(searchResultState.totalResults)}),/*#__PURE__*/(0,jsx_runtime.jsx)(\"div\",{className:(0,clsx[\"default\"])('col','col--4','text--right',styles_module.searchLogoColumn),children:/*#__PURE__*/(0,jsx_runtime.jsx)(Link[\"default\"],{to:\"https://www.algolia.com/\",\"aria-label\":(0,Translate.translate)({id:'theme.SearchPage.algoliaLabel',message:'Search by Algolia',description:'The ARIA label for Algolia mention'}),children:/*#__PURE__*/(0,jsx_runtime.jsx)(\"svg\",{viewBox:\"0 0 168 24\",className:styles_module.algoliaLogo,children:/*#__PURE__*/(0,jsx_runtime.jsxs)(\"g\",{fill:\"none\",children:[/*#__PURE__*/(0,jsx_runtime.jsx)(\"path\",{className:styles_module.algoliaLogoPathFill,d:\"M120.925 18.804c-4.386.02-4.386-3.54-4.386-4.106l-.007-13.336 2.675-.424v13.254c0 .322 0 2.358 1.718 2.364v2.248zm-10.846-2.18c.821 0 1.43-.047 1.855-.129v-2.719a6.334 6.334 0 0 0-1.574-.199 5.7 5.7 0 0 0-.897.069 2.699 2.699 0 0 0-.814.24c-.24.116-.439.28-.582.491-.15.212-.219.335-.219.656 0 .628.219.991.616 1.23s.938.362 1.615.362zm-.233-9.7c.883 0 1.629.109 2.231.328.602.218 1.088.525 1.444.915.363.396.609.922.76 1.483.157.56.232 1.175.232 1.85v6.874a32.5 32.5 0 0 1-1.868.314c-.834.123-1.772.185-2.813.185-.69 0-1.327-.069-1.895-.198a4.001 4.001 0 0 1-1.471-.636 3.085 3.085 0 0 1-.951-1.134c-.226-.465-.343-1.12-.343-1.803 0-.656.13-1.073.384-1.525a3.24 3.24 0 0 1 1.047-1.106c.445-.287.95-.492 1.532-.615a8.8 8.8 0 0 1 1.82-.185 8.404 8.404 0 0 1 1.972.24v-.438c0-.307-.035-.6-.11-.874a1.88 1.88 0 0 0-.384-.73 1.784 1.784 0 0 0-.724-.493 3.164 3.164 0 0 0-1.143-.205c-.616 0-1.177.075-1.69.164a7.735 7.735 0 0 0-1.26.307l-.321-2.192c.335-.117.834-.233 1.478-.349a10.98 10.98 0 0 1 2.073-.178zm52.842 9.626c.822 0 1.43-.048 1.854-.13V13.7a6.347 6.347 0 0 0-1.574-.199c-.294 0-.595.021-.896.069a2.7 2.7 0 0 0-.814.24 1.46 1.46 0 0 0-.582.491c-.15.212-.218.335-.218.656 0 .628.218.991.615 1.23.404.245.938.362 1.615.362zm-.226-9.694c.883 0 1.629.108 2.231.327.602.219 1.088.526 1.444.915.355.39.609.923.759 1.483a6.8 6.8 0 0 1 .233 1.852v6.873c-.41.088-1.034.19-1.868.314-.834.123-1.772.184-2.813.184-.69 0-1.327-.068-1.895-.198a4.001 4.001 0 0 1-1.471-.635 3.085 3.085 0 0 1-.951-1.134c-.226-.465-.343-1.12-.343-1.804 0-.656.13-1.073.384-1.524.26-.45.608-.82 1.047-1.107.445-.286.95-.491 1.532-.614a8.803 8.803 0 0 1 2.751-.13c.329.034.671.096 1.04.185v-.437a3.3 3.3 0 0 0-.109-.875 1.873 1.873 0 0 0-.384-.731 1.784 1.784 0 0 0-.724-.492 3.165 3.165 0 0 0-1.143-.205c-.616 0-1.177.075-1.69.164a7.75 7.75 0 0 0-1.26.307l-.321-2.193c.335-.116.834-.232 1.478-.348a11.633 11.633 0 0 1 2.073-.177zm-8.034-1.271a1.626 1.626 0 0 1-1.628-1.62c0-.895.725-1.62 1.628-1.62.904 0 1.63.725 1.63 1.62 0 .895-.733 1.62-1.63 1.62zm1.348 13.22h-2.689V7.27l2.69-.423v11.956zm-4.714 0c-4.386.02-4.386-3.54-4.386-4.107l-.008-13.336 2.676-.424v13.254c0 .322 0 2.358 1.718 2.364v2.248zm-8.698-5.903c0-1.156-.253-2.119-.746-2.788-.493-.677-1.183-1.01-2.067-1.01-.882 0-1.574.333-2.065 1.01-.493.676-.733 1.632-.733 2.788 0 1.168.246 1.953.74 2.63.492.683 1.183 1.018 2.066 1.018.882 0 1.574-.342 2.067-1.019.492-.683.738-1.46.738-2.63zm2.737-.007c0 .902-.13 1.584-.397 2.33a5.52 5.52 0 0 1-1.128 1.906 4.986 4.986 0 0 1-1.752 1.223c-.685.286-1.739.45-2.265.45-.528-.006-1.574-.157-2.252-.45a5.096 5.096 0 0 1-1.744-1.223c-.487-.527-.863-1.162-1.137-1.906a6.345 6.345 0 0 1-.41-2.33c0-.902.123-1.77.397-2.508a5.554 5.554 0 0 1 1.15-1.892 5.133 5.133 0 0 1 1.75-1.216c.679-.287 1.425-.423 2.232-.423.808 0 1.553.142 2.237.423a4.88 4.88 0 0 1 1.753 1.216 5.644 5.644 0 0 1 1.135 1.892c.287.738.431 1.606.431 2.508zm-20.138 0c0 1.12.246 2.363.738 2.882.493.52 1.13.78 1.91.78.424 0 .828-.062 1.204-.178.377-.116.677-.253.917-.417V9.33a10.476 10.476 0 0 0-1.766-.226c-.971-.028-1.71.37-2.23 1.004-.513.636-.773 1.75-.773 2.788zm7.438 5.274c0 1.824-.466 3.156-1.404 4.004-.936.846-2.367 1.27-4.296 1.27-.705 0-2.17-.137-3.34-.396l.431-2.118c.98.205 2.272.26 2.95.26 1.074 0 1.84-.219 2.299-.656.459-.437.684-1.086.684-1.948v-.437a8.07 8.07 0 0 1-1.047.397c-.43.13-.93.198-1.492.198-.739 0-1.41-.116-2.018-.349a4.206 4.206 0 0 1-1.567-1.025c-.431-.45-.774-1.017-1.013-1.694-.24-.677-.363-1.885-.363-2.773 0-.834.13-1.88.384-2.577.26-.696.629-1.298 1.129-1.796.493-.498 1.095-.881 1.8-1.162a6.605 6.605 0 0 1 2.428-.457c.87 0 1.67.109 2.45.24.78.129 1.444.265 1.985.415V18.17zM6.972 6.677v1.627c-.712-.446-1.52-.67-2.425-.67-.585 0-1.045.13-1.38.391a1.24 1.24 0 0 0-.502 1.03c0 .425.164.765.494 1.02.33.256.835.532 1.516.83.447.192.795.356 1.045.495.25.138.537.332.862.582.324.25.563.548.718.894.154.345.23.741.23 1.188 0 .947-.334 1.691-1.004 2.234-.67.542-1.537.814-2.601.814-1.18 0-2.16-.229-2.936-.686v-1.708c.84.628 1.814.942 2.92.942.585 0 1.048-.136 1.388-.407.34-.271.51-.646.51-1.125 0-.287-.1-.55-.302-.79-.203-.24-.42-.42-.655-.542-.234-.123-.585-.29-1.053-.503a61.27 61.27 0 0 1-.582-.271 13.67 13.67 0 0 1-.55-.287 4.275 4.275 0 0 1-.567-.351 6.92 6.92 0 0 1-.455-.4c-.18-.17-.31-.34-.39-.51-.08-.17-.155-.37-.224-.598a2.553 2.553 0 0 1-.104-.742c0-.915.333-1.638.998-2.17.664-.532 1.523-.798 2.576-.798.968 0 1.793.17 2.473.51zm7.468 5.696v-.287c-.022-.607-.187-1.088-.495-1.444-.309-.357-.75-.535-1.324-.535-.532 0-.99.194-1.373.583-.382.388-.622.949-.717 1.683h3.909zm1.005 2.792v1.404c-.596.34-1.383.51-2.362.51-1.255 0-2.255-.377-3-1.132-.744-.755-1.116-1.744-1.116-2.968 0-1.297.34-2.316 1.021-3.055.68-.74 1.548-1.11 2.6-1.11 1.033 0 1.852.323 2.458.966.606.644.91 1.572.91 2.784 0 .33-.033.676-.096 1.038h-5.314c.107.702.405 1.239.894 1.611.49.372 1.106.558 1.85.558.862 0 1.58-.202 2.155-.606zm6.605-1.77h-1.212c-.596 0-1.045.116-1.349.35-.303.234-.454.532-.454.894 0 .372.117.664.35.877.235.213.575.32 1.022.32.51 0 .912-.142 1.204-.424.293-.281.44-.651.44-1.108v-.91zm-4.068-2.554V9.325c.627-.361 1.457-.542 2.489-.542 2.116 0 3.175 1.026 3.175 3.08V17h-1.548v-.957c-.415.68-1.143 1.02-2.186 1.02-.766 0-1.38-.22-1.843-.661-.462-.442-.694-1.003-.694-1.684 0-.776.293-1.38.878-1.81.585-.431 1.404-.647 2.457-.647h1.34V11.8c0-.554-.133-.971-.399-1.253-.266-.282-.707-.423-1.324-.423a4.07 4.07 0 0 0-2.345.718zm9.333-1.93v1.42c.394-1 1.101-1.5 2.123-1.5.148 0 .313.016.494.048v1.531a1.885 1.885 0 0 0-.75-.143c-.542 0-.989.24-1.34.718-.351.479-.527 1.048-.527 1.707V17h-1.563V8.91h1.563zm5.01 4.084c.022.82.272 1.492.75 2.019.479.526 1.15.79 2.01.79.639 0 1.235-.176 1.788-.527v1.404c-.521.319-1.186.479-1.995.479-1.265 0-2.276-.4-3.031-1.197-.755-.798-1.133-1.792-1.133-2.984 0-1.16.38-2.151 1.14-2.975.761-.825 1.79-1.237 3.088-1.237.702 0 1.346.149 1.93.447v1.436a3.242 3.242 0 0 0-1.77-.495c-.84 0-1.513.266-2.019.798-.505.532-.758 1.213-.758 2.042zM40.24 5.72v4.579c.458-1 1.293-1.5 2.505-1.5.787 0 1.42.245 1.899.734.479.49.718 1.17.718 2.042V17h-1.564v-5.106c0-.553-.14-.98-.422-1.284-.282-.303-.652-.455-1.11-.455-.531 0-1.002.202-1.411.606-.41.405-.615 1.022-.615 1.851V17h-1.563V5.72h1.563zm14.966 10.02c.596 0 1.096-.253 1.5-.758.404-.506.606-1.157.606-1.955 0-.915-.202-1.62-.606-2.114-.404-.495-.92-.742-1.548-.742-.553 0-1.05.224-1.491.67-.442.447-.662 1.133-.662 2.058 0 .958.212 1.67.638 2.138.425.469.946.703 1.563.703zM53.004 5.72v4.42c.574-.894 1.388-1.341 2.44-1.341 1.022 0 1.857.383 2.506 1.149.649.766.973 1.781.973 3.047 0 1.138-.309 2.109-.925 2.912-.617.803-1.463 1.205-2.537 1.205-1.075 0-1.894-.447-2.457-1.34V17h-1.58V5.72h1.58zm9.908 11.104l-3.223-7.913h1.739l1.005 2.632 1.26 3.415c.096-.32.48-1.458 1.15-3.415l.909-2.632h1.66l-2.92 7.866c-.777 2.074-1.963 3.11-3.559 3.11a2.92 2.92 0 0 1-.734-.079v-1.34c.17.042.351.064.543.064 1.032 0 1.755-.57 2.17-1.708z\"}),/*#__PURE__*/(0,jsx_runtime.jsx)(\"path\",{fill:\"#5468FF\",d:\"M78.988.938h16.594a2.968 2.968 0 0 1 2.966 2.966V20.5a2.967 2.967 0 0 1-2.966 2.964H78.988a2.967 2.967 0 0 1-2.966-2.964V3.897A2.961 2.961 0 0 1 78.988.938z\"}),/*#__PURE__*/(0,jsx_runtime.jsx)(\"path\",{fill:\"white\",d:\"M89.632 5.967v-.772a.978.978 0 0 0-.978-.977h-2.28a.978.978 0 0 0-.978.977v.793c0 .088.082.15.171.13a7.127 7.127 0 0 1 1.984-.28c.65 0 1.295.088 1.917.259.082.02.164-.04.164-.13m-6.248 1.01l-.39-.389a.977.977 0 0 0-1.382 0l-.465.465a.973.973 0 0 0 0 1.38l.383.383c.062.061.15.047.205-.014.226-.307.472-.601.746-.874.281-.28.568-.526.883-.751.068-.042.075-.137.02-.2m4.16 2.453v3.341c0 .096.104.165.192.117l2.97-1.537c.068-.034.089-.117.055-.184a3.695 3.695 0 0 0-3.08-1.866c-.068 0-.136.054-.136.13m0 8.048a4.489 4.489 0 0 1-4.49-4.482 4.488 4.488 0 0 1 4.49-4.482 4.488 4.488 0 0 1 4.489 4.482 4.484 4.484 0 0 1-4.49 4.482m0-10.85a6.363 6.363 0 1 0 0 12.729 6.37 6.37 0 0 0 6.372-6.368 6.358 6.358 0 0 0-6.371-6.36\"})]})})})})]}),searchResultState.items.length>0?/*#__PURE__*/(0,jsx_runtime.jsx)(\"main\",{children:searchResultState.items.map(({title,url,summary,breadcrumbs},i)=>/*#__PURE__*/(0,jsx_runtime.jsxs)(\"article\",{className:styles_module.searchResultItem,children:[/*#__PURE__*/(0,jsx_runtime.jsx)(Heading[\"default\"],{as:\"h2\",className:styles_module.searchResultItemHeading,children:/*#__PURE__*/(0,jsx_runtime.jsx)(Link[\"default\"],{to:url,dangerouslySetInnerHTML:{__html:title}})}),breadcrumbs.length>0&&/*#__PURE__*/(0,jsx_runtime.jsx)(\"nav\",{\"aria-label\":\"breadcrumbs\",children:/*#__PURE__*/(0,jsx_runtime.jsx)(\"ul\",{className:(0,clsx[\"default\"])('breadcrumbs',styles_module.searchResultItemPath),children:breadcrumbs.map((html,index)=>/*#__PURE__*/(0,jsx_runtime.jsx)(\"li\",{className:\"breadcrumbs__item\"// Developer provided the HTML, so assume it's safe.\n// eslint-disable-next-line react/no-danger\n,dangerouslySetInnerHTML:{__html:html}},index))})}),summary&&/*#__PURE__*/(0,jsx_runtime.jsx)(\"p\",{className:styles_module.searchResultItemSummary// Developer provided the HTML, so assume it's safe.\n// eslint-disable-next-line react/no-danger\n,dangerouslySetInnerHTML:{__html:summary}})]},i))}):[searchQuery&&!searchResultState.loading&&/*#__PURE__*/(0,jsx_runtime.jsx)(\"p\",{children:/*#__PURE__*/(0,jsx_runtime.jsx)(Translate[\"default\"],{id:\"theme.SearchPage.noResultsText\",description:\"The paragraph for empty search result\",children:\"No results were found\"})},\"no-results\"),!!searchResultState.loading&&/*#__PURE__*/(0,jsx_runtime.jsx)(\"div\",{className:styles_module.loadingSpinner},\"spinner\")],searchResultState.hasMore&&/*#__PURE__*/(0,jsx_runtime.jsx)(\"div\",{className:styles_module.loader,ref:setLoaderRef,children:/*#__PURE__*/(0,jsx_runtime.jsx)(Translate[\"default\"],{id:\"theme.SearchPage.fetchingNewResults\",description:\"The paragraph for fetching new search results\",children:\"Fetching new results...\"})})]})]});}function SearchPage(){return/*#__PURE__*/(0,jsx_runtime.jsx)(metadataUtils.HtmlClassNameProvider,{className:\"search-page-wrapper\",children:/*#__PURE__*/(0,jsx_runtime.jsx)(SearchPageContent,{})});}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@docusaurus/theme-search-algolia/lib/theme/SearchPage/index.js\n");

/***/ }),

/***/ "./node_modules/algoliasearch-helper/index.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar AlgoliaSearchHelper = __webpack_require__(\"./node_modules/algoliasearch-helper/src/algoliasearch.helper.js\");\nvar RecommendParameters = __webpack_require__(\"./node_modules/algoliasearch-helper/src/RecommendParameters/index.js\");\nvar RecommendResults = __webpack_require__(\"./node_modules/algoliasearch-helper/src/RecommendResults/index.js\");\nvar SearchParameters = __webpack_require__(\"./node_modules/algoliasearch-helper/src/SearchParameters/index.js\");\nvar SearchResults = __webpack_require__(\"./node_modules/algoliasearch-helper/src/SearchResults/index.js\");\n\n/**\n * The algoliasearchHelper module is the function that will let its\n * contains everything needed to use the Algoliasearch\n * Helper. It is a also a function that instanciate the helper.\n * To use the helper, you also need the Algolia JS client v3.\n * @example\n * //using the UMD build\n * var client = algoliasearch('latency', '6be0576ff61c053d5f9a3225e2a90f76');\n * var helper = algoliasearchHelper(client, 'bestbuy', {\n *   facets: ['shipping'],\n *   disjunctiveFacets: ['category']\n * });\n * helper.on('result', function(event) {\n *   console.log(event.results);\n * });\n * helper\n *   .toggleFacetRefinement('category', 'Movies & TV Shows')\n *   .toggleFacetRefinement('shipping', 'Free shipping')\n *   .search();\n * @example\n * // The helper is an event emitter using the node API\n * helper.on('result', updateTheResults);\n * helper.once('result', updateTheResults);\n * helper.removeListener('result', updateTheResults);\n * helper.removeAllListeners('result');\n * @module algoliasearchHelper\n * @param  {AlgoliaSearch} client an AlgoliaSearch client\n * @param  {string} index the name of the index to query\n * @param  {SearchParameters|object} opts an object defining the initial config of the search. It doesn't have to be a {SearchParameters}, just an object containing the properties you need from it.\n * @param {SearchResultsOptions|object} searchResultsOptions an object defining the options to use when creating the search results.\n * @return {AlgoliaSearchHelper} The helper instance\n */\nfunction algoliasearchHelper(client, index, opts, searchResultsOptions) {\n  return new AlgoliaSearchHelper(client, index, opts, searchResultsOptions);\n}\n\n/**\n * The version currently used\n * @member module:algoliasearchHelper.version\n * @type {number}\n */\nalgoliasearchHelper.version = __webpack_require__(\"./node_modules/algoliasearch-helper/src/version.js\");\n\n/**\n * Constructor for the Helper.\n * @member module:algoliasearchHelper.AlgoliaSearchHelper\n * @type {AlgoliaSearchHelper}\n */\nalgoliasearchHelper.AlgoliaSearchHelper = AlgoliaSearchHelper;\n\n/**\n * Constructor for the object containing all the parameters of the search.\n * @member module:algoliasearchHelper.SearchParameters\n * @type {SearchParameters}\n */\nalgoliasearchHelper.SearchParameters = SearchParameters;\n\n/**\n * Constructor for the object containing all the parameters for Recommend.\n * @member module:algoliasearchHelper.RecommendParameters\n * @type {RecommendParameters}\n */\nalgoliasearchHelper.RecommendParameters = RecommendParameters;\n\n/**\n * Constructor for the object containing the results of the search.\n * @member module:algoliasearchHelper.SearchResults\n * @type {SearchResults}\n */\nalgoliasearchHelper.SearchResults = SearchResults;\n\n/**\n * Constructor for the object containing the results for Recommend.\n * @member module:algoliasearchHelper.RecommendResults\n * @type {RecommendResults}\n */\nalgoliasearchHelper.RecommendResults = RecommendResults;\n\nmodule.exports = algoliasearchHelper;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWFzaWZlbS1kb2NzLy4vbm9kZV9tb2R1bGVzL2FsZ29saWFzZWFyY2gtaGVscGVyL2luZGV4LmpzPzU4NDciXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQWxnb2xpYVNlYXJjaEhlbHBlciA9IHJlcXVpcmUoJy4vc3JjL2FsZ29saWFzZWFyY2guaGVscGVyJyk7XG52YXIgUmVjb21tZW5kUGFyYW1ldGVycyA9IHJlcXVpcmUoJy4vc3JjL1JlY29tbWVuZFBhcmFtZXRlcnMnKTtcbnZhciBSZWNvbW1lbmRSZXN1bHRzID0gcmVxdWlyZSgnLi9zcmMvUmVjb21tZW5kUmVzdWx0cycpO1xudmFyIFNlYXJjaFBhcmFtZXRlcnMgPSByZXF1aXJlKCcuL3NyYy9TZWFyY2hQYXJhbWV0ZXJzJyk7XG52YXIgU2VhcmNoUmVzdWx0cyA9IHJlcXVpcmUoJy4vc3JjL1NlYXJjaFJlc3VsdHMnKTtcblxuLyoqXG4gKiBUaGUgYWxnb2xpYXNlYXJjaEhlbHBlciBtb2R1bGUgaXMgdGhlIGZ1bmN0aW9uIHRoYXQgd2lsbCBsZXQgaXRzXG4gKiBjb250YWlucyBldmVyeXRoaW5nIG5lZWRlZCB0byB1c2UgdGhlIEFsZ29saWFzZWFyY2hcbiAqIEhlbHBlci4gSXQgaXMgYSBhbHNvIGEgZnVuY3Rpb24gdGhhdCBpbnN0YW5jaWF0ZSB0aGUgaGVscGVyLlxuICogVG8gdXNlIHRoZSBoZWxwZXIsIHlvdSBhbHNvIG5lZWQgdGhlIEFsZ29saWEgSlMgY2xpZW50IHYzLlxuICogQGV4YW1wbGVcbiAqIC8vdXNpbmcgdGhlIFVNRCBidWlsZFxuICogdmFyIGNsaWVudCA9IGFsZ29saWFzZWFyY2goJ2xhdGVuY3knLCAnNmJlMDU3NmZmNjFjMDUzZDVmOWEzMjI1ZTJhOTBmNzYnKTtcbiAqIHZhciBoZWxwZXIgPSBhbGdvbGlhc2VhcmNoSGVscGVyKGNsaWVudCwgJ2Jlc3RidXknLCB7XG4gKiAgIGZhY2V0czogWydzaGlwcGluZyddLFxuICogICBkaXNqdW5jdGl2ZUZhY2V0czogWydjYXRlZ29yeSddXG4gKiB9KTtcbiAqIGhlbHBlci5vbigncmVzdWx0JywgZnVuY3Rpb24oZXZlbnQpIHtcbiAqICAgY29uc29sZS5sb2coZXZlbnQucmVzdWx0cyk7XG4gKiB9KTtcbiAqIGhlbHBlclxuICogICAudG9nZ2xlRmFjZXRSZWZpbmVtZW50KCdjYXRlZ29yeScsICdNb3ZpZXMgJiBUViBTaG93cycpXG4gKiAgIC50b2dnbGVGYWNldFJlZmluZW1lbnQoJ3NoaXBwaW5nJywgJ0ZyZWUgc2hpcHBpbmcnKVxuICogICAuc2VhcmNoKCk7XG4gKiBAZXhhbXBsZVxuICogLy8gVGhlIGhlbHBlciBpcyBhbiBldmVudCBlbWl0dGVyIHVzaW5nIHRoZSBub2RlIEFQSVxuICogaGVscGVyLm9uKCdyZXN1bHQnLCB1cGRhdGVUaGVSZXN1bHRzKTtcbiAqIGhlbHBlci5vbmNlKCdyZXN1bHQnLCB1cGRhdGVUaGVSZXN1bHRzKTtcbiAqIGhlbHBlci5yZW1vdmVMaXN0ZW5lcigncmVzdWx0JywgdXBkYXRlVGhlUmVzdWx0cyk7XG4gKiBoZWxwZXIucmVtb3ZlQWxsTGlzdGVuZXJzKCdyZXN1bHQnKTtcbiAqIEBtb2R1bGUgYWxnb2xpYXNlYXJjaEhlbHBlclxuICogQHBhcmFtICB7QWxnb2xpYVNlYXJjaH0gY2xpZW50IGFuIEFsZ29saWFTZWFyY2ggY2xpZW50XG4gKiBAcGFyYW0gIHtzdHJpbmd9IGluZGV4IHRoZSBuYW1lIG9mIHRoZSBpbmRleCB0byBxdWVyeVxuICogQHBhcmFtICB7U2VhcmNoUGFyYW1ldGVyc3xvYmplY3R9IG9wdHMgYW4gb2JqZWN0IGRlZmluaW5nIHRoZSBpbml0aWFsIGNvbmZpZyBvZiB0aGUgc2VhcmNoLiBJdCBkb2Vzbid0IGhhdmUgdG8gYmUgYSB7U2VhcmNoUGFyYW1ldGVyc30sIGp1c3QgYW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHByb3BlcnRpZXMgeW91IG5lZWQgZnJvbSBpdC5cbiAqIEBwYXJhbSB7U2VhcmNoUmVzdWx0c09wdGlvbnN8b2JqZWN0fSBzZWFyY2hSZXN1bHRzT3B0aW9ucyBhbiBvYmplY3QgZGVmaW5pbmcgdGhlIG9wdGlvbnMgdG8gdXNlIHdoZW4gY3JlYXRpbmcgdGhlIHNlYXJjaCByZXN1bHRzLlxuICogQHJldHVybiB7QWxnb2xpYVNlYXJjaEhlbHBlcn0gVGhlIGhlbHBlciBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBhbGdvbGlhc2VhcmNoSGVscGVyKGNsaWVudCwgaW5kZXgsIG9wdHMsIHNlYXJjaFJlc3VsdHNPcHRpb25zKSB7XG4gIHJldHVybiBuZXcgQWxnb2xpYVNlYXJjaEhlbHBlcihjbGllbnQsIGluZGV4LCBvcHRzLCBzZWFyY2hSZXN1bHRzT3B0aW9ucyk7XG59XG5cbi8qKlxuICogVGhlIHZlcnNpb24gY3VycmVudGx5IHVzZWRcbiAqIEBtZW1iZXIgbW9kdWxlOmFsZ29saWFzZWFyY2hIZWxwZXIudmVyc2lvblxuICogQHR5cGUge251bWJlcn1cbiAqL1xuYWxnb2xpYXNlYXJjaEhlbHBlci52ZXJzaW9uID0gcmVxdWlyZSgnLi9zcmMvdmVyc2lvbicpO1xuXG4vKipcbiAqIENvbnN0cnVjdG9yIGZvciB0aGUgSGVscGVyLlxuICogQG1lbWJlciBtb2R1bGU6YWxnb2xpYXNlYXJjaEhlbHBlci5BbGdvbGlhU2VhcmNoSGVscGVyXG4gKiBAdHlwZSB7QWxnb2xpYVNlYXJjaEhlbHBlcn1cbiAqL1xuYWxnb2xpYXNlYXJjaEhlbHBlci5BbGdvbGlhU2VhcmNoSGVscGVyID0gQWxnb2xpYVNlYXJjaEhlbHBlcjtcblxuLyoqXG4gKiBDb25zdHJ1Y3RvciBmb3IgdGhlIG9iamVjdCBjb250YWluaW5nIGFsbCB0aGUgcGFyYW1ldGVycyBvZiB0aGUgc2VhcmNoLlxuICogQG1lbWJlciBtb2R1bGU6YWxnb2xpYXNlYXJjaEhlbHBlci5TZWFyY2hQYXJhbWV0ZXJzXG4gKiBAdHlwZSB7U2VhcmNoUGFyYW1ldGVyc31cbiAqL1xuYWxnb2xpYXNlYXJjaEhlbHBlci5TZWFyY2hQYXJhbWV0ZXJzID0gU2VhcmNoUGFyYW1ldGVycztcblxuLyoqXG4gKiBDb25zdHJ1Y3RvciBmb3IgdGhlIG9iamVjdCBjb250YWluaW5nIGFsbCB0aGUgcGFyYW1ldGVycyBmb3IgUmVjb21tZW5kLlxuICogQG1lbWJlciBtb2R1bGU6YWxnb2xpYXNlYXJjaEhlbHBlci5SZWNvbW1lbmRQYXJhbWV0ZXJzXG4gKiBAdHlwZSB7UmVjb21tZW5kUGFyYW1ldGVyc31cbiAqL1xuYWxnb2xpYXNlYXJjaEhlbHBlci5SZWNvbW1lbmRQYXJhbWV0ZXJzID0gUmVjb21tZW5kUGFyYW1ldGVycztcblxuLyoqXG4gKiBDb25zdHJ1Y3RvciBmb3IgdGhlIG9iamVjdCBjb250YWluaW5nIHRoZSByZXN1bHRzIG9mIHRoZSBzZWFyY2guXG4gKiBAbWVtYmVyIG1vZHVsZTphbGdvbGlhc2VhcmNoSGVscGVyLlNlYXJjaFJlc3VsdHNcbiAqIEB0eXBlIHtTZWFyY2hSZXN1bHRzfVxuICovXG5hbGdvbGlhc2VhcmNoSGVscGVyLlNlYXJjaFJlc3VsdHMgPSBTZWFyY2hSZXN1bHRzO1xuXG4vKipcbiAqIENvbnN0cnVjdG9yIGZvciB0aGUgb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHJlc3VsdHMgZm9yIFJlY29tbWVuZC5cbiAqIEBtZW1iZXIgbW9kdWxlOmFsZ29saWFzZWFyY2hIZWxwZXIuUmVjb21tZW5kUmVzdWx0c1xuICogQHR5cGUge1JlY29tbWVuZFJlc3VsdHN9XG4gKi9cbmFsZ29saWFzZWFyY2hIZWxwZXIuUmVjb21tZW5kUmVzdWx0cyA9IFJlY29tbWVuZFJlc3VsdHM7XG5cbm1vZHVsZS5leHBvcnRzID0gYWxnb2xpYXNlYXJjaEhlbHBlcjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/algoliasearch-helper/index.js\n");

/***/ }),

/***/ "./node_modules/algoliasearch-helper/src/DerivedHelper/index.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar EventEmitter = __webpack_require__(\"./node_modules/@algolia/events/events.js\");\n\nvar inherits = __webpack_require__(\"./node_modules/algoliasearch-helper/src/functions/inherits.js\");\n\n/**\n * A DerivedHelper is a way to create sub requests to\n * Algolia from a main helper.\n * @class\n * @classdesc The DerivedHelper provides an event based interface for search callbacks:\n *  - search: when a search is triggered using the `search()` method.\n *  - result: when the response is retrieved from Algolia and is processed.\n *    This event contains a {@link SearchResults} object and the\n *    {@link SearchParameters} corresponding to this answer.\n * @param {AlgoliaSearchHelper} mainHelper the main helper\n * @param {function} fn the function to create the derived state for search\n * @param {function} recommendFn the function to create the derived state for recommendations\n */\nfunction DerivedHelper(mainHelper, fn, recommendFn) {\n  this.main = mainHelper;\n  this.fn = fn;\n  this.recommendFn = recommendFn;\n  this.lastResults = null;\n  this.lastRecommendResults = null;\n}\n\ninherits(DerivedHelper, EventEmitter);\n\n/**\n * Detach this helper from the main helper\n * @return {undefined}\n * @throws Error if the derived helper is already detached\n */\nDerivedHelper.prototype.detach = function () {\n  this.removeAllListeners();\n  this.main.detachDerivedHelper(this);\n};\n\nDerivedHelper.prototype.getModifiedState = function (parameters) {\n  return this.fn(parameters);\n};\n\nDerivedHelper.prototype.getModifiedRecommendState = function (parameters) {\n  return this.recommendFn(parameters);\n};\n\nmodule.exports = DerivedHelper;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL0Rlcml2ZWRIZWxwZXIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWFzaWZlbS1kb2NzLy4vbm9kZV9tb2R1bGVzL2FsZ29saWFzZWFyY2gtaGVscGVyL3NyYy9EZXJpdmVkSGVscGVyL2luZGV4LmpzP2EwNjgiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnQGFsZ29saWEvZXZlbnRzJyk7XG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJy4uL2Z1bmN0aW9ucy9pbmhlcml0cycpO1xuXG4vKipcbiAqIEEgRGVyaXZlZEhlbHBlciBpcyBhIHdheSB0byBjcmVhdGUgc3ViIHJlcXVlc3RzIHRvXG4gKiBBbGdvbGlhIGZyb20gYSBtYWluIGhlbHBlci5cbiAqIEBjbGFzc1xuICogQGNsYXNzZGVzYyBUaGUgRGVyaXZlZEhlbHBlciBwcm92aWRlcyBhbiBldmVudCBiYXNlZCBpbnRlcmZhY2UgZm9yIHNlYXJjaCBjYWxsYmFja3M6XG4gKiAgLSBzZWFyY2g6IHdoZW4gYSBzZWFyY2ggaXMgdHJpZ2dlcmVkIHVzaW5nIHRoZSBgc2VhcmNoKClgIG1ldGhvZC5cbiAqICAtIHJlc3VsdDogd2hlbiB0aGUgcmVzcG9uc2UgaXMgcmV0cmlldmVkIGZyb20gQWxnb2xpYSBhbmQgaXMgcHJvY2Vzc2VkLlxuICogICAgVGhpcyBldmVudCBjb250YWlucyBhIHtAbGluayBTZWFyY2hSZXN1bHRzfSBvYmplY3QgYW5kIHRoZVxuICogICAge0BsaW5rIFNlYXJjaFBhcmFtZXRlcnN9IGNvcnJlc3BvbmRpbmcgdG8gdGhpcyBhbnN3ZXIuXG4gKiBAcGFyYW0ge0FsZ29saWFTZWFyY2hIZWxwZXJ9IG1haW5IZWxwZXIgdGhlIG1haW4gaGVscGVyXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBmbiB0aGUgZnVuY3Rpb24gdG8gY3JlYXRlIHRoZSBkZXJpdmVkIHN0YXRlIGZvciBzZWFyY2hcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHJlY29tbWVuZEZuIHRoZSBmdW5jdGlvbiB0byBjcmVhdGUgdGhlIGRlcml2ZWQgc3RhdGUgZm9yIHJlY29tbWVuZGF0aW9uc1xuICovXG5mdW5jdGlvbiBEZXJpdmVkSGVscGVyKG1haW5IZWxwZXIsIGZuLCByZWNvbW1lbmRGbikge1xuICB0aGlzLm1haW4gPSBtYWluSGVscGVyO1xuICB0aGlzLmZuID0gZm47XG4gIHRoaXMucmVjb21tZW5kRm4gPSByZWNvbW1lbmRGbjtcbiAgdGhpcy5sYXN0UmVzdWx0cyA9IG51bGw7XG4gIHRoaXMubGFzdFJlY29tbWVuZFJlc3VsdHMgPSBudWxsO1xufVxuXG5pbmhlcml0cyhEZXJpdmVkSGVscGVyLCBFdmVudEVtaXR0ZXIpO1xuXG4vKipcbiAqIERldGFjaCB0aGlzIGhlbHBlciBmcm9tIHRoZSBtYWluIGhlbHBlclxuICogQHJldHVybiB7dW5kZWZpbmVkfVxuICogQHRocm93cyBFcnJvciBpZiB0aGUgZGVyaXZlZCBoZWxwZXIgaXMgYWxyZWFkeSBkZXRhY2hlZFxuICovXG5EZXJpdmVkSGVscGVyLnByb3RvdHlwZS5kZXRhY2ggPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gIHRoaXMubWFpbi5kZXRhY2hEZXJpdmVkSGVscGVyKHRoaXMpO1xufTtcblxuRGVyaXZlZEhlbHBlci5wcm90b3R5cGUuZ2V0TW9kaWZpZWRTdGF0ZSA9IGZ1bmN0aW9uIChwYXJhbWV0ZXJzKSB7XG4gIHJldHVybiB0aGlzLmZuKHBhcmFtZXRlcnMpO1xufTtcblxuRGVyaXZlZEhlbHBlci5wcm90b3R5cGUuZ2V0TW9kaWZpZWRSZWNvbW1lbmRTdGF0ZSA9IGZ1bmN0aW9uIChwYXJhbWV0ZXJzKSB7XG4gIHJldHVybiB0aGlzLnJlY29tbWVuZEZuKHBhcmFtZXRlcnMpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBEZXJpdmVkSGVscGVyO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/algoliasearch-helper/src/DerivedHelper/index.js\n");

/***/ }),

/***/ "./node_modules/algoliasearch-helper/src/RecommendParameters/index.js":
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * RecommendParameters is the data structure that contains all the information\n * usable for getting recommendations from the Algolia API. It doesn't do the\n * search itself, nor does it contains logic about the parameters.\n * It is an immutable object, therefore it has been created in a way that each\n * changes does not change the object itself but returns a copy with the\n * modification.\n * This object should probably not be instantiated outside of the helper. It\n * will be provided when needed.\n * @constructor\n * @classdesc contains all the parameters for recommendations\n * @param {RecommendParametersOptions} opts the options to create the object\n */\nfunction RecommendParameters(opts) {\n  opts = opts || {};\n  this.params = opts.params || [];\n}\n\nRecommendParameters.prototype = {\n  constructor: RecommendParameters,\n\n  addParams: function (params) {\n    var newParams = this.params.slice();\n\n    newParams.push(params);\n\n    return new RecommendParameters({ params: newParams });\n  },\n\n  removeParams: function (id) {\n    return new RecommendParameters({\n      params: this.params.filter(function (param) {\n        return param.$$id !== id;\n      }),\n    });\n  },\n\n  addFrequentlyBoughtTogether: function (params) {\n    return this.addParams(\n      Object.assign({}, params, { model: 'bought-together' })\n    );\n  },\n\n  addRelatedProducts: function (params) {\n    return this.addParams(\n      Object.assign({}, params, { model: 'related-products' })\n    );\n  },\n\n  addTrendingItems: function (params) {\n    return this.addParams(\n      Object.assign({}, params, { model: 'trending-items' })\n    );\n  },\n\n  addTrendingFacets: function (params) {\n    return this.addParams(\n      Object.assign({}, params, { model: 'trending-facets' })\n    );\n  },\n\n  addLookingSimilar: function (params) {\n    return this.addParams(\n      Object.assign({}, params, { model: 'looking-similar' })\n    );\n  },\n\n  _buildQueries: function (indexName, cache) {\n    return this.params\n      .filter(function (params) {\n        return cache[params.$$id] === undefined;\n      })\n      .map(function (params) {\n        var query = Object.assign({}, params, {\n          indexName: indexName,\n          // @TODO: remove this if it ever gets handled by the API\n          threshold: params.threshold || 0,\n        });\n        delete query.$$id;\n\n        return query;\n      });\n  },\n};\n\nmodule.exports = RecommendParameters;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL1JlY29tbWVuZFBhcmFtZXRlcnMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lYXNpZmVtLWRvY3MvLi9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL1JlY29tbWVuZFBhcmFtZXRlcnMvaW5kZXguanM/NmQ2OCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogUmVjb21tZW5kUGFyYW1ldGVycyBpcyB0aGUgZGF0YSBzdHJ1Y3R1cmUgdGhhdCBjb250YWlucyBhbGwgdGhlIGluZm9ybWF0aW9uXG4gKiB1c2FibGUgZm9yIGdldHRpbmcgcmVjb21tZW5kYXRpb25zIGZyb20gdGhlIEFsZ29saWEgQVBJLiBJdCBkb2Vzbid0IGRvIHRoZVxuICogc2VhcmNoIGl0c2VsZiwgbm9yIGRvZXMgaXQgY29udGFpbnMgbG9naWMgYWJvdXQgdGhlIHBhcmFtZXRlcnMuXG4gKiBJdCBpcyBhbiBpbW11dGFibGUgb2JqZWN0LCB0aGVyZWZvcmUgaXQgaGFzIGJlZW4gY3JlYXRlZCBpbiBhIHdheSB0aGF0IGVhY2hcbiAqIGNoYW5nZXMgZG9lcyBub3QgY2hhbmdlIHRoZSBvYmplY3QgaXRzZWxmIGJ1dCByZXR1cm5zIGEgY29weSB3aXRoIHRoZVxuICogbW9kaWZpY2F0aW9uLlxuICogVGhpcyBvYmplY3Qgc2hvdWxkIHByb2JhYmx5IG5vdCBiZSBpbnN0YW50aWF0ZWQgb3V0c2lkZSBvZiB0aGUgaGVscGVyLiBJdFxuICogd2lsbCBiZSBwcm92aWRlZCB3aGVuIG5lZWRlZC5cbiAqIEBjb25zdHJ1Y3RvclxuICogQGNsYXNzZGVzYyBjb250YWlucyBhbGwgdGhlIHBhcmFtZXRlcnMgZm9yIHJlY29tbWVuZGF0aW9uc1xuICogQHBhcmFtIHtSZWNvbW1lbmRQYXJhbWV0ZXJzT3B0aW9uc30gb3B0cyB0aGUgb3B0aW9ucyB0byBjcmVhdGUgdGhlIG9iamVjdFxuICovXG5mdW5jdGlvbiBSZWNvbW1lbmRQYXJhbWV0ZXJzKG9wdHMpIHtcbiAgb3B0cyA9IG9wdHMgfHwge307XG4gIHRoaXMucGFyYW1zID0gb3B0cy5wYXJhbXMgfHwgW107XG59XG5cblJlY29tbWVuZFBhcmFtZXRlcnMucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogUmVjb21tZW5kUGFyYW1ldGVycyxcblxuICBhZGRQYXJhbXM6IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICB2YXIgbmV3UGFyYW1zID0gdGhpcy5wYXJhbXMuc2xpY2UoKTtcblxuICAgIG5ld1BhcmFtcy5wdXNoKHBhcmFtcyk7XG5cbiAgICByZXR1cm4gbmV3IFJlY29tbWVuZFBhcmFtZXRlcnMoeyBwYXJhbXM6IG5ld1BhcmFtcyB9KTtcbiAgfSxcblxuICByZW1vdmVQYXJhbXM6IGZ1bmN0aW9uIChpZCkge1xuICAgIHJldHVybiBuZXcgUmVjb21tZW5kUGFyYW1ldGVycyh7XG4gICAgICBwYXJhbXM6IHRoaXMucGFyYW1zLmZpbHRlcihmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgcmV0dXJuIHBhcmFtLiQkaWQgIT09IGlkO1xuICAgICAgfSksXG4gICAgfSk7XG4gIH0sXG5cbiAgYWRkRnJlcXVlbnRseUJvdWdodFRvZ2V0aGVyOiBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgcmV0dXJuIHRoaXMuYWRkUGFyYW1zKFxuICAgICAgT2JqZWN0LmFzc2lnbih7fSwgcGFyYW1zLCB7IG1vZGVsOiAnYm91Z2h0LXRvZ2V0aGVyJyB9KVxuICAgICk7XG4gIH0sXG5cbiAgYWRkUmVsYXRlZFByb2R1Y3RzOiBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgcmV0dXJuIHRoaXMuYWRkUGFyYW1zKFxuICAgICAgT2JqZWN0LmFzc2lnbih7fSwgcGFyYW1zLCB7IG1vZGVsOiAncmVsYXRlZC1wcm9kdWN0cycgfSlcbiAgICApO1xuICB9LFxuXG4gIGFkZFRyZW5kaW5nSXRlbXM6IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICByZXR1cm4gdGhpcy5hZGRQYXJhbXMoXG4gICAgICBPYmplY3QuYXNzaWduKHt9LCBwYXJhbXMsIHsgbW9kZWw6ICd0cmVuZGluZy1pdGVtcycgfSlcbiAgICApO1xuICB9LFxuXG4gIGFkZFRyZW5kaW5nRmFjZXRzOiBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgcmV0dXJuIHRoaXMuYWRkUGFyYW1zKFxuICAgICAgT2JqZWN0LmFzc2lnbih7fSwgcGFyYW1zLCB7IG1vZGVsOiAndHJlbmRpbmctZmFjZXRzJyB9KVxuICAgICk7XG4gIH0sXG5cbiAgYWRkTG9va2luZ1NpbWlsYXI6IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICByZXR1cm4gdGhpcy5hZGRQYXJhbXMoXG4gICAgICBPYmplY3QuYXNzaWduKHt9LCBwYXJhbXMsIHsgbW9kZWw6ICdsb29raW5nLXNpbWlsYXInIH0pXG4gICAgKTtcbiAgfSxcblxuICBfYnVpbGRRdWVyaWVzOiBmdW5jdGlvbiAoaW5kZXhOYW1lLCBjYWNoZSkge1xuICAgIHJldHVybiB0aGlzLnBhcmFtc1xuICAgICAgLmZpbHRlcihmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICAgIHJldHVybiBjYWNoZVtwYXJhbXMuJCRpZF0gPT09IHVuZGVmaW5lZDtcbiAgICAgIH0pXG4gICAgICAubWFwKGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgICAgdmFyIHF1ZXJ5ID0gT2JqZWN0LmFzc2lnbih7fSwgcGFyYW1zLCB7XG4gICAgICAgICAgaW5kZXhOYW1lOiBpbmRleE5hbWUsXG4gICAgICAgICAgLy8gQFRPRE86IHJlbW92ZSB0aGlzIGlmIGl0IGV2ZXIgZ2V0cyBoYW5kbGVkIGJ5IHRoZSBBUElcbiAgICAgICAgICB0aHJlc2hvbGQ6IHBhcmFtcy50aHJlc2hvbGQgfHwgMCxcbiAgICAgICAgfSk7XG4gICAgICAgIGRlbGV0ZSBxdWVyeS4kJGlkO1xuXG4gICAgICAgIHJldHVybiBxdWVyeTtcbiAgICAgIH0pO1xuICB9LFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWNvbW1lbmRQYXJhbWV0ZXJzO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/algoliasearch-helper/src/RecommendParameters/index.js\n");

/***/ }),

/***/ "./node_modules/algoliasearch-helper/src/RecommendResults/index.js":
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * Constructor for SearchResults\n * @class\n * @classdesc SearchResults contains the results of a query to Algolia using the\n * {@link AlgoliaSearchHelper}.\n * @param {RecommendParameters} state state that led to the response\n * @param {Record<string,RecommendResultItem>} results the results from algolia client\n **/\nfunction RecommendResults(state, results) {\n  this._state = state;\n  this._rawResults = {};\n\n  // eslint-disable-next-line consistent-this\n  var self = this;\n\n  state.params.forEach(function (param) {\n    var id = param.$$id;\n    self[id] = results[id];\n    self._rawResults[id] = results[id];\n  });\n}\n\nRecommendResults.prototype = {\n  constructor: RecommendResults,\n};\n\nmodule.exports = RecommendResults;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL1JlY29tbWVuZFJlc3VsdHMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Vhc2lmZW0tZG9jcy8uL25vZGVfbW9kdWxlcy9hbGdvbGlhc2VhcmNoLWhlbHBlci9zcmMvUmVjb21tZW5kUmVzdWx0cy9pbmRleC5qcz8wNmNhIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb25zdHJ1Y3RvciBmb3IgU2VhcmNoUmVzdWx0c1xuICogQGNsYXNzXG4gKiBAY2xhc3NkZXNjIFNlYXJjaFJlc3VsdHMgY29udGFpbnMgdGhlIHJlc3VsdHMgb2YgYSBxdWVyeSB0byBBbGdvbGlhIHVzaW5nIHRoZVxuICoge0BsaW5rIEFsZ29saWFTZWFyY2hIZWxwZXJ9LlxuICogQHBhcmFtIHtSZWNvbW1lbmRQYXJhbWV0ZXJzfSBzdGF0ZSBzdGF0ZSB0aGF0IGxlZCB0byB0aGUgcmVzcG9uc2VcbiAqIEBwYXJhbSB7UmVjb3JkPHN0cmluZyxSZWNvbW1lbmRSZXN1bHRJdGVtPn0gcmVzdWx0cyB0aGUgcmVzdWx0cyBmcm9tIGFsZ29saWEgY2xpZW50XG4gKiovXG5mdW5jdGlvbiBSZWNvbW1lbmRSZXN1bHRzKHN0YXRlLCByZXN1bHRzKSB7XG4gIHRoaXMuX3N0YXRlID0gc3RhdGU7XG4gIHRoaXMuX3Jhd1Jlc3VsdHMgPSB7fTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC10aGlzXG4gIHZhciBzZWxmID0gdGhpcztcblxuICBzdGF0ZS5wYXJhbXMuZm9yRWFjaChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICB2YXIgaWQgPSBwYXJhbS4kJGlkO1xuICAgIHNlbGZbaWRdID0gcmVzdWx0c1tpZF07XG4gICAgc2VsZi5fcmF3UmVzdWx0c1tpZF0gPSByZXN1bHRzW2lkXTtcbiAgfSk7XG59XG5cblJlY29tbWVuZFJlc3VsdHMucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogUmVjb21tZW5kUmVzdWx0cyxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVjb21tZW5kUmVzdWx0cztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/algoliasearch-helper/src/RecommendResults/index.js\n");

/***/ }),

/***/ "./node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n/**\n * Functions to manipulate refinement lists\n *\n * The RefinementList is not formally defined through a prototype but is based\n * on a specific structure.\n *\n * @module SearchParameters.refinementList\n *\n * @typedef {string[]} SearchParameters.refinementList.Refinements\n * @typedef {Object.<string, SearchParameters.refinementList.Refinements>} SearchParameters.refinementList.RefinementList\n */\n\nvar defaultsPure = __webpack_require__(\"./node_modules/algoliasearch-helper/src/functions/defaultsPure.js\");\nvar objectHasKeys = __webpack_require__(\"./node_modules/algoliasearch-helper/src/functions/objectHasKeys.js\");\nvar omit = __webpack_require__(\"./node_modules/algoliasearch-helper/src/functions/omit.js\");\n\nvar lib = {\n  /**\n   * Adds a refinement to a RefinementList\n   * @param {RefinementList} refinementList the initial list\n   * @param {string} attribute the attribute to refine\n   * @param {string} value the value of the refinement, if the value is not a string it will be converted\n   * @return {RefinementList} a new and updated refinement list\n   */\n  addRefinement: function addRefinement(refinementList, attribute, value) {\n    if (lib.isRefined(refinementList, attribute, value)) {\n      return refinementList;\n    }\n\n    var valueAsString = '' + value;\n\n    var facetRefinement = !refinementList[attribute]\n      ? [valueAsString]\n      : refinementList[attribute].concat(valueAsString);\n\n    var mod = {};\n\n    mod[attribute] = facetRefinement;\n\n    return defaultsPure(mod, refinementList);\n  },\n  /**\n   * Removes refinement(s) for an attribute:\n   *  - if the value is specified removes the refinement for the value on the attribute\n   *  - if no value is specified removes all the refinements for this attribute\n   * @param {RefinementList} refinementList the initial list\n   * @param {string} attribute the attribute to refine\n   * @param {string} [value] the value of the refinement\n   * @return {RefinementList} a new and updated refinement lst\n   */\n  removeRefinement: function removeRefinement(\n    refinementList,\n    attribute,\n    value\n  ) {\n    if (value === undefined) {\n      // we use the \"filter\" form of clearRefinement, since it leaves empty values as-is\n      // the form with a string will remove the attribute completely\n      return lib.clearRefinement(refinementList, function (v, f) {\n        return attribute === f;\n      });\n    }\n\n    var valueAsString = '' + value;\n\n    return lib.clearRefinement(refinementList, function (v, f) {\n      return attribute === f && valueAsString === v;\n    });\n  },\n  /**\n   * Toggles the refinement value for an attribute.\n   * @param {RefinementList} refinementList the initial list\n   * @param {string} attribute the attribute to refine\n   * @param {string} value the value of the refinement\n   * @return {RefinementList} a new and updated list\n   */\n  toggleRefinement: function toggleRefinement(\n    refinementList,\n    attribute,\n    value\n  ) {\n    if (value === undefined)\n      throw new Error('toggleRefinement should be used with a value');\n\n    if (lib.isRefined(refinementList, attribute, value)) {\n      return lib.removeRefinement(refinementList, attribute, value);\n    }\n\n    return lib.addRefinement(refinementList, attribute, value);\n  },\n  /**\n   * Clear all or parts of a RefinementList. Depending on the arguments, three\n   * kinds of behavior can happen:\n   *  - if no attribute is provided: clears the whole list\n   *  - if an attribute is provided as a string: clears the list for the specific attribute\n   *  - if an attribute is provided as a function: discards the elements for which the function returns true\n   * @param {RefinementList} refinementList the initial list\n   * @param {string} [attribute] the attribute or function to discard\n   * @param {string} [refinementType] optional parameter to give more context to the attribute function\n   * @return {RefinementList} a new and updated refinement list\n   */\n  clearRefinement: function clearRefinement(\n    refinementList,\n    attribute,\n    refinementType\n  ) {\n    if (attribute === undefined) {\n      // return the same object if the list is already empty\n      // this is mainly for tests, as it doesn't have much impact on performance\n      if (!objectHasKeys(refinementList)) {\n        return refinementList;\n      }\n      return {};\n    } else if (typeof attribute === 'string') {\n      return omit(refinementList, [attribute]);\n    } else if (typeof attribute === 'function') {\n      var hasChanged = false;\n\n      var newRefinementList = Object.keys(refinementList).reduce(function (\n        memo,\n        key\n      ) {\n        var values = refinementList[key] || [];\n        var facetList = values.filter(function (value) {\n          return !attribute(value, key, refinementType);\n        });\n\n        if (facetList.length !== values.length) {\n          hasChanged = true;\n        }\n\n        memo[key] = facetList;\n\n        return memo;\n      },\n      {});\n\n      if (hasChanged) return newRefinementList;\n      return refinementList;\n    }\n\n    // We return nothing if the attribute is not undefined, a string or a function,\n    // as it is not a valid value for a refinement\n    return undefined;\n  },\n  /**\n   * Test if the refinement value is used for the attribute. If no refinement value\n   * is provided, test if the refinementList contains any refinement for the\n   * given attribute.\n   * @param {RefinementList} refinementList the list of refinement\n   * @param {string} attribute name of the attribute\n   * @param {string} [refinementValue] value of the filter/refinement\n   * @return {boolean} true if the attribute is refined, false otherwise\n   */\n  isRefined: function isRefined(refinementList, attribute, refinementValue) {\n    var containsRefinements =\n      Boolean(refinementList[attribute]) &&\n      refinementList[attribute].length > 0;\n\n    if (refinementValue === undefined || !containsRefinements) {\n      return containsRefinements;\n    }\n\n    var refinementValueAsString = '' + refinementValue;\n\n    return refinementList[attribute].indexOf(refinementValueAsString) !== -1;\n  },\n};\n\nmodule.exports = lib;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js\n");

/***/ }),

/***/ "./node_modules/algoliasearch-helper/src/SearchParameters/index.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar defaultsPure = __webpack_require__(\"./node_modules/algoliasearch-helper/src/functions/defaultsPure.js\");\nvar find = __webpack_require__(\"./node_modules/algoliasearch-helper/src/functions/find.js\");\nvar intersection = __webpack_require__(\"./node_modules/algoliasearch-helper/src/functions/intersection.js\");\nvar merge = __webpack_require__(\"./node_modules/algoliasearch-helper/src/functions/merge.js\");\nvar objectHasKeys = __webpack_require__(\"./node_modules/algoliasearch-helper/src/functions/objectHasKeys.js\");\nvar omit = __webpack_require__(\"./node_modules/algoliasearch-helper/src/functions/omit.js\");\nvar valToNumber = __webpack_require__(\"./node_modules/algoliasearch-helper/src/functions/valToNumber.js\");\nvar isValidUserToken = __webpack_require__(\"./node_modules/algoliasearch-helper/src/utils/isValidUserToken.js\");\n\nvar RefinementList = __webpack_require__(\"./node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js\");\n\n/**\n * isEqual, but only for numeric refinement values, possible values:\n * - 5\n * - [5]\n * - [[5]]\n * - [[5,5],[4]]\n * @param {any} a numeric refinement value\n * @param {any} b numeric refinement value\n * @return {boolean} true if the values are equal\n */\nfunction isEqualNumericRefinement(a, b) {\n  if (Array.isArray(a) && Array.isArray(b)) {\n    return (\n      a.length === b.length &&\n      a.every(function (el, i) {\n        return isEqualNumericRefinement(b[i], el);\n      })\n    );\n  }\n  return a === b;\n}\n\n/**\n * like _.find but using deep equality to be able to use it\n * to find arrays.\n * @private\n * @param {any[]} array array to search into (elements are base or array of base)\n * @param {any} searchedValue the value we're looking for (base or array of base)\n * @return {any} the searched value or undefined\n */\nfunction findArray(array, searchedValue) {\n  return find(array, function (currentValue) {\n    return isEqualNumericRefinement(currentValue, searchedValue);\n  });\n}\n\n/**\n * The facet list is the structure used to store the list of values used to\n * filter a single attribute.\n * @typedef {string[]} SearchParameters.FacetList\n */\n\n/**\n * Structure to store numeric filters with the operator as the key. The supported operators\n * are `=`, `>`, `<`, `>=`, `<=` and `!=`.\n * @typedef {Object.<string, Array.<number|number[]>>} SearchParameters.OperatorList\n */\n\n/**\n * SearchParameters is the data structure that contains all the information\n * usable for making a search to Algolia API. It doesn't do the search itself,\n * nor does it contains logic about the parameters.\n * It is an immutable object, therefore it has been created in a way that each\n * changes does not change the object itself but returns a copy with the\n * modification.\n * This object should probably not be instantiated outside of the helper. It will\n * be provided when needed. This object is documented for reference as you'll\n * get it from events generated by the {@link AlgoliaSearchHelper}.\n * If need be, instantiate the Helper from the factory function {@link SearchParameters.make}\n * @constructor\n * @classdesc contains all the parameters of a search\n * @param {object|SearchParameters} newParameters existing parameters or partial object\n * for the properties of a new SearchParameters\n * @see SearchParameters.make\n * @example <caption>SearchParameters of the first query in\n *   <a href=\"http://demos.algolia.com/instant-search-demo/\">the instant search demo</a></caption>\n{\n   \"query\": \"\",\n   \"disjunctiveFacets\": [\n      \"customerReviewCount\",\n      \"category\",\n      \"salePrice_range\",\n      \"manufacturer\"\n  ],\n   \"maxValuesPerFacet\": 30,\n   \"page\": 0,\n   \"hitsPerPage\": 10,\n   \"facets\": [\n      \"type\",\n      \"shipping\"\n  ]\n}\n */\nfunction SearchParameters(newParameters) {\n  var params = newParameters\n    ? SearchParameters._parseNumbers(newParameters)\n    : {};\n\n  if (params.userToken !== undefined && !isValidUserToken(params.userToken)) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      '[algoliasearch-helper] The `userToken` parameter is invalid. This can lead to wrong analytics.\\n  - Format: [a-zA-Z0-9_-]{1,64}'\n    );\n  }\n  /**\n   * This attribute contains the list of all the conjunctive facets\n   * used. This list will be added to requested facets in the\n   * [facets attribute](https://www.algolia.com/doc/rest-api/search#param-facets) sent to algolia.\n   * @member {string[]}\n   */\n  this.facets = params.facets || [];\n  /**\n   * This attribute contains the list of all the disjunctive facets\n   * used. This list will be added to requested facets in the\n   * [facets attribute](https://www.algolia.com/doc/rest-api/search#param-facets) sent to algolia.\n   * @member {string[]}\n   */\n  this.disjunctiveFacets = params.disjunctiveFacets || [];\n  /**\n   * This attribute contains the list of all the hierarchical facets\n   * used. This list will be added to requested facets in the\n   * [facets attribute](https://www.algolia.com/doc/rest-api/search#param-facets) sent to algolia.\n   * Hierarchical facets are a sub type of disjunctive facets that\n   * let you filter faceted attributes hierarchically.\n   * @member {string[]|object[]}\n   */\n  this.hierarchicalFacets = params.hierarchicalFacets || [];\n\n  // Refinements\n  /**\n   * This attribute contains all the filters that need to be\n   * applied on the conjunctive facets. Each facet must be properly\n   * defined in the `facets` attribute.\n   *\n   * The key is the name of the facet, and the `FacetList` contains all\n   * filters selected for the associated facet name.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `facetFilters` attribute.\n   * @member {Object.<string, SearchParameters.FacetList>}\n   */\n  this.facetsRefinements = params.facetsRefinements || {};\n  /**\n   * This attribute contains all the filters that need to be\n   * excluded from the conjunctive facets. Each facet must be properly\n   * defined in the `facets` attribute.\n   *\n   * The key is the name of the facet, and the `FacetList` contains all\n   * filters excluded for the associated facet name.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `facetFilters` attribute.\n   * @member {Object.<string, SearchParameters.FacetList>}\n   */\n  this.facetsExcludes = params.facetsExcludes || {};\n  /**\n   * This attribute contains all the filters that need to be\n   * applied on the disjunctive facets. Each facet must be properly\n   * defined in the `disjunctiveFacets` attribute.\n   *\n   * The key is the name of the facet, and the `FacetList` contains all\n   * filters selected for the associated facet name.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `facetFilters` attribute.\n   * @member {Object.<string, SearchParameters.FacetList>}\n   */\n  this.disjunctiveFacetsRefinements = params.disjunctiveFacetsRefinements || {};\n  /**\n   * This attribute contains all the filters that need to be\n   * applied on the numeric attributes.\n   *\n   * The key is the name of the attribute, and the value is the\n   * filters to apply to this attribute.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `numericFilters` attribute.\n   * @member {Object.<string, SearchParameters.OperatorList>}\n   */\n  this.numericRefinements = params.numericRefinements || {};\n  /**\n   * This attribute contains all the tags used to refine the query.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `tagFilters` attribute.\n   * @member {string[]}\n   */\n  this.tagRefinements = params.tagRefinements || [];\n  /**\n   * This attribute contains all the filters that need to be\n   * applied on the hierarchical facets. Each facet must be properly\n   * defined in the `hierarchicalFacets` attribute.\n   *\n   * The key is the name of the facet, and the `FacetList` contains all\n   * filters selected for the associated facet name. The FacetList values\n   * are structured as a string that contain the values for each level\n   * separated by the configured separator.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `facetFilters` attribute.\n   * @member {Object.<string, SearchParameters.FacetList>}\n   */\n  this.hierarchicalFacetsRefinements =\n    params.hierarchicalFacetsRefinements || {};\n\n  // eslint-disable-next-line consistent-this\n  var self = this;\n  Object.keys(params).forEach(function (paramName) {\n    var isKeyKnown = SearchParameters.PARAMETERS.indexOf(paramName) !== -1;\n    var isValueDefined = params[paramName] !== undefined;\n\n    if (!isKeyKnown && isValueDefined) {\n      self[paramName] = params[paramName];\n    }\n  });\n}\n\n/**\n * List all the properties in SearchParameters and therefore all the known Algolia properties\n * This doesn't contain any beta/hidden features.\n * @private\n */\nSearchParameters.PARAMETERS = Object.keys(new SearchParameters());\n\n/**\n * @private\n * @param {object} partialState full or part of a state\n * @return {object} a new object with the number keys as number\n */\nSearchParameters._parseNumbers = function (partialState) {\n  // Do not parse numbers again in SearchParameters, they ought to be parsed already\n  if (partialState instanceof SearchParameters) return partialState;\n\n  var numbers = {};\n\n  var numberKeys = [\n    'aroundPrecision',\n    'aroundRadius',\n    'getRankingInfo',\n    'minWordSizefor2Typos',\n    'minWordSizefor1Typo',\n    'page',\n    'maxValuesPerFacet',\n    'distinct',\n    'minimumAroundRadius',\n    'hitsPerPage',\n    'minProximity',\n  ];\n\n  numberKeys.forEach(function (k) {\n    var value = partialState[k];\n    if (typeof value === 'string') {\n      var parsedValue = parseFloat(value);\n      // global isNaN is ok to use here, value is only number or NaN\n      numbers[k] = isNaN(parsedValue) ? value : parsedValue;\n    }\n  });\n\n  // there's two formats of insideBoundingBox, we need to parse\n  // the one which is an array of float geo rectangles\n  if (Array.isArray(partialState.insideBoundingBox)) {\n    numbers.insideBoundingBox = partialState.insideBoundingBox.map(function (\n      geoRect\n    ) {\n      if (Array.isArray(geoRect)) {\n        return geoRect.map(function (value) {\n          return parseFloat(value);\n        });\n      }\n      return geoRect;\n    });\n  }\n\n  if (partialState.numericRefinements) {\n    var numericRefinements = {};\n    Object.keys(partialState.numericRefinements).forEach(function (attribute) {\n      var operators = partialState.numericRefinements[attribute] || {};\n      numericRefinements[attribute] = {};\n      Object.keys(operators).forEach(function (operator) {\n        var values = operators[operator];\n        var parsedValues = values.map(function (v) {\n          if (Array.isArray(v)) {\n            return v.map(function (vPrime) {\n              if (typeof vPrime === 'string') {\n                return parseFloat(vPrime);\n              }\n              return vPrime;\n            });\n          } else if (typeof v === 'string') {\n            return parseFloat(v);\n          }\n          return v;\n        });\n        numericRefinements[attribute][operator] = parsedValues;\n      });\n    });\n    numbers.numericRefinements = numericRefinements;\n  }\n\n  return merge(partialState, numbers);\n};\n\n/**\n * Factory for SearchParameters\n * @param {object|SearchParameters} newParameters existing parameters or partial\n * object for the properties of a new SearchParameters\n * @return {SearchParameters} frozen instance of SearchParameters\n */\nSearchParameters.make = function makeSearchParameters(newParameters) {\n  var instance = new SearchParameters(newParameters);\n\n  var hierarchicalFacets = newParameters.hierarchicalFacets || [];\n  hierarchicalFacets.forEach(function (facet) {\n    if (facet.rootPath) {\n      var currentRefinement = instance.getHierarchicalRefinement(facet.name);\n\n      if (\n        currentRefinement.length > 0 &&\n        currentRefinement[0].indexOf(facet.rootPath) !== 0\n      ) {\n        instance = instance.clearRefinements(facet.name);\n      }\n\n      // get it again in case it has been cleared\n      currentRefinement = instance.getHierarchicalRefinement(facet.name);\n      if (currentRefinement.length === 0) {\n        instance = instance.toggleHierarchicalFacetRefinement(\n          facet.name,\n          facet.rootPath\n        );\n      }\n    }\n  });\n\n  return instance;\n};\n\n/**\n * Validates the new parameters based on the previous state\n * @param {SearchParameters} currentState the current state\n * @param {object|SearchParameters} parameters the new parameters to set\n * @return {Error|null} Error if the modification is invalid, null otherwise\n */\nSearchParameters.validate = function (currentState, parameters) {\n  var params = parameters || {};\n\n  if (\n    currentState.tagFilters &&\n    params.tagRefinements &&\n    params.tagRefinements.length > 0\n  ) {\n    return new Error(\n      '[Tags] Cannot switch from the managed tag API to the advanced API. It is probably ' +\n        'an error, if it is really what you want, you should first clear the tags with clearTags method.'\n    );\n  }\n\n  if (currentState.tagRefinements.length > 0 && params.tagFilters) {\n    return new Error(\n      '[Tags] Cannot switch from the advanced tag API to the managed API. It is probably ' +\n        'an error, if it is not, you should first clear the tags with clearTags method.'\n    );\n  }\n\n  if (\n    currentState.numericFilters &&\n    params.numericRefinements &&\n    objectHasKeys(params.numericRefinements)\n  ) {\n    return new Error(\n      \"[Numeric filters] Can't switch from the advanced to the managed API. It\" +\n        ' is probably an error, if this is really what you want, you have to first' +\n        ' clear the numeric filters.'\n    );\n  }\n\n  if (objectHasKeys(currentState.numericRefinements) && params.numericFilters) {\n    return new Error(\n      \"[Numeric filters] Can't switch from the managed API to the advanced. It\" +\n        ' is probably an error, if this is really what you want, you have to first' +\n        ' clear the numeric filters.'\n    );\n  }\n\n  return null;\n};\n\nSearchParameters.prototype = {\n  constructor: SearchParameters,\n\n  /**\n   * Remove all refinements (disjunctive + conjunctive + excludes + numeric filters)\n   * @method\n   * @param {undefined|string|SearchParameters.clearCallback} [attribute] optional string or function\n   * - If not given, means to clear all the filters.\n   * - If `string`, means to clear all refinements for the `attribute` named filter.\n   * - If `function`, means to clear all the refinements that return truthy values.\n   * @return {SearchParameters} new instance with filters cleared\n   */\n  clearRefinements: function clearRefinements(attribute) {\n    var patch = {\n      numericRefinements: this._clearNumericRefinements(attribute),\n      facetsRefinements: RefinementList.clearRefinement(\n        this.facetsRefinements,\n        attribute,\n        'conjunctiveFacet'\n      ),\n      facetsExcludes: RefinementList.clearRefinement(\n        this.facetsExcludes,\n        attribute,\n        'exclude'\n      ),\n      disjunctiveFacetsRefinements: RefinementList.clearRefinement(\n        this.disjunctiveFacetsRefinements,\n        attribute,\n        'disjunctiveFacet'\n      ),\n      hierarchicalFacetsRefinements: RefinementList.clearRefinement(\n        this.hierarchicalFacetsRefinements,\n        attribute,\n        'hierarchicalFacet'\n      ),\n    };\n    if (\n      patch.numericRefinements === this.numericRefinements &&\n      patch.facetsRefinements === this.facetsRefinements &&\n      patch.facetsExcludes === this.facetsExcludes &&\n      patch.disjunctiveFacetsRefinements ===\n        this.disjunctiveFacetsRefinements &&\n      patch.hierarchicalFacetsRefinements === this.hierarchicalFacetsRefinements\n    ) {\n      return this;\n    }\n    return this.setQueryParameters(patch);\n  },\n  /**\n   * Remove all the refined tags from the SearchParameters\n   * @method\n   * @return {SearchParameters} new instance with tags cleared\n   */\n  clearTags: function clearTags() {\n    if (this.tagFilters === undefined && this.tagRefinements.length === 0)\n      return this;\n\n    return this.setQueryParameters({\n      tagFilters: undefined,\n      tagRefinements: [],\n    });\n  },\n  /**\n   * Set the index.\n   * @method\n   * @param {string} index the index name\n   * @return {SearchParameters} new instance\n   */\n  setIndex: function setIndex(index) {\n    if (index === this.index) return this;\n\n    return this.setQueryParameters({\n      index: index,\n    });\n  },\n  /**\n   * Query setter\n   * @method\n   * @param {string} newQuery value for the new query\n   * @return {SearchParameters} new instance\n   */\n  setQuery: function setQuery(newQuery) {\n    if (newQuery === this.query) return this;\n\n    return this.setQueryParameters({\n      query: newQuery,\n    });\n  },\n  /**\n   * Page setter\n   * @method\n   * @param {number} newPage new page number\n   * @return {SearchParameters} new instance\n   */\n  setPage: function setPage(newPage) {\n    if (newPage === this.page) return this;\n\n    return this.setQueryParameters({\n      page: newPage,\n    });\n  },\n  /**\n   * Facets setter\n   * The facets are the simple facets, used for conjunctive (and) faceting.\n   * @method\n   * @param {string[]} facets all the attributes of the algolia records used for conjunctive faceting\n   * @return {SearchParameters} new instance\n   */\n  setFacets: function setFacets(facets) {\n    return this.setQueryParameters({\n      facets: facets,\n    });\n  },\n  /**\n   * Disjunctive facets setter\n   * Change the list of disjunctive (or) facets the helper chan handle.\n   * @method\n   * @param {string[]} facets all the attributes of the algolia records used for disjunctive faceting\n   * @return {SearchParameters} new instance\n   */\n  setDisjunctiveFacets: function setDisjunctiveFacets(facets) {\n    return this.setQueryParameters({\n      disjunctiveFacets: facets,\n    });\n  },\n  /**\n   * HitsPerPage setter\n   * Hits per page represents the number of hits retrieved for this query\n   * @method\n   * @param {number} n number of hits retrieved per page of results\n   * @return {SearchParameters} new instance\n   */\n  setHitsPerPage: function setHitsPerPage(n) {\n    if (this.hitsPerPage === n) return this;\n\n    return this.setQueryParameters({\n      hitsPerPage: n,\n    });\n  },\n  /**\n   * typoTolerance setter\n   * Set the value of typoTolerance\n   * @method\n   * @param {string} typoTolerance new value of typoTolerance (\"true\", \"false\", \"min\" or \"strict\")\n   * @return {SearchParameters} new instance\n   */\n  setTypoTolerance: function setTypoTolerance(typoTolerance) {\n    if (this.typoTolerance === typoTolerance) return this;\n\n    return this.setQueryParameters({\n      typoTolerance: typoTolerance,\n    });\n  },\n  /**\n   * Add a numeric filter for a given attribute\n   * When value is an array, they are combined with OR\n   * When value is a single value, it will combined with AND\n   * @method\n   * @param {string} attribute attribute to set the filter on\n   * @param {string} operator operator of the filter (possible values: =, >, >=, <, <=, !=)\n   * @param {number | number[]} value value of the filter\n   * @return {SearchParameters} new instance\n   * @example\n   * // for price = 50 or 40\n   * state.addNumericRefinement('price', '=', [50, 40]);\n   * @example\n   * // for size = 38 and 40\n   * state.addNumericRefinement('size', '=', 38);\n   * state.addNumericRefinement('size', '=', 40);\n   */\n  addNumericRefinement: function (attribute, operator, value) {\n    var val = valToNumber(value);\n\n    if (this.isNumericRefined(attribute, operator, val)) return this;\n\n    var mod = merge({}, this.numericRefinements);\n\n    mod[attribute] = merge({}, mod[attribute]);\n\n    if (mod[attribute][operator]) {\n      // Array copy\n      mod[attribute][operator] = mod[attribute][operator].slice();\n      // Add the element. Concat can't be used here because value can be an array.\n      mod[attribute][operator].push(val);\n    } else {\n      mod[attribute][operator] = [val];\n    }\n\n    return this.setQueryParameters({\n      numericRefinements: mod,\n    });\n  },\n  /**\n   * Get the list of conjunctive refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {string[]} list of refinements\n   */\n  getConjunctiveRefinements: function (facetName) {\n    if (!this.isConjunctiveFacet(facetName)) {\n      return [];\n    }\n    return this.facetsRefinements[facetName] || [];\n  },\n  /**\n   * Get the list of disjunctive refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {string[]} list of refinements\n   */\n  getDisjunctiveRefinements: function (facetName) {\n    if (!this.isDisjunctiveFacet(facetName)) {\n      return [];\n    }\n    return this.disjunctiveFacetsRefinements[facetName] || [];\n  },\n  /**\n   * Get the list of hierarchical refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {string[]} list of refinements\n   */\n  getHierarchicalRefinement: function (facetName) {\n    // we send an array but we currently do not support multiple\n    // hierarchicalRefinements for a hierarchicalFacet\n    return this.hierarchicalFacetsRefinements[facetName] || [];\n  },\n  /**\n   * Get the list of exclude refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {string[]} list of refinements\n   */\n  getExcludeRefinements: function (facetName) {\n    if (!this.isConjunctiveFacet(facetName)) {\n      return [];\n    }\n    return this.facetsExcludes[facetName] || [];\n  },\n\n  /**\n   * Remove all the numeric filter for a given (attribute, operator)\n   * @method\n   * @param {string} attribute attribute to set the filter on\n   * @param {string} [operator] operator of the filter (possible values: =, >, >=, <, <=, !=)\n   * @param {number} [number] the value to be removed\n   * @return {SearchParameters} new instance\n   */\n  removeNumericRefinement: function (attribute, operator, number) {\n    var paramValue = number;\n    if (paramValue !== undefined) {\n      if (!this.isNumericRefined(attribute, operator, paramValue)) {\n        return this;\n      }\n      return this.setQueryParameters({\n        numericRefinements: this._clearNumericRefinements(function (\n          value,\n          key\n        ) {\n          return (\n            key === attribute &&\n            value.op === operator &&\n            isEqualNumericRefinement(value.val, valToNumber(paramValue))\n          );\n        }),\n      });\n    } else if (operator !== undefined) {\n      if (!this.isNumericRefined(attribute, operator)) return this;\n      return this.setQueryParameters({\n        numericRefinements: this._clearNumericRefinements(function (\n          value,\n          key\n        ) {\n          return key === attribute && value.op === operator;\n        }),\n      });\n    }\n\n    if (!this.isNumericRefined(attribute)) return this;\n    return this.setQueryParameters({\n      numericRefinements: this._clearNumericRefinements(function (value, key) {\n        return key === attribute;\n      }),\n    });\n  },\n  /**\n   * Get the list of numeric refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {SearchParameters.OperatorList} list of refinements\n   */\n  getNumericRefinements: function (facetName) {\n    return this.numericRefinements[facetName] || {};\n  },\n  /**\n   * Return the current refinement for the (attribute, operator)\n   * @param {string} attribute attribute in the record\n   * @param {string} operator operator applied on the refined values\n   * @return {Array.<number|number[]>} refined values\n   */\n  getNumericRefinement: function (attribute, operator) {\n    return (\n      this.numericRefinements[attribute] &&\n      this.numericRefinements[attribute][operator]\n    );\n  },\n  /**\n   * Clear numeric filters.\n   * @method\n   * @private\n   * @param {string|SearchParameters.clearCallback} [attribute] optional string or function\n   * - If not given, means to clear all the filters.\n   * - If `string`, means to clear all refinements for the `attribute` named filter.\n   * - If `function`, means to clear all the refinements that return truthy values.\n   * @return {Object.<string, OperatorList>} new numeric refinements\n   */\n  _clearNumericRefinements: function _clearNumericRefinements(attribute) {\n    if (attribute === undefined) {\n      if (!objectHasKeys(this.numericRefinements)) {\n        return this.numericRefinements;\n      }\n      return {};\n    } else if (typeof attribute === 'string') {\n      return omit(this.numericRefinements, [attribute]);\n    } else if (typeof attribute === 'function') {\n      var hasChanged = false;\n      var numericRefinements = this.numericRefinements;\n      var newNumericRefinements = Object.keys(numericRefinements).reduce(\n        function (memo, key) {\n          var operators = numericRefinements[key];\n          var operatorList = {};\n\n          operators = operators || {};\n          Object.keys(operators).forEach(function (operator) {\n            var values = operators[operator] || [];\n            var outValues = [];\n            values.forEach(function (value) {\n              var predicateResult = attribute(\n                { val: value, op: operator },\n                key,\n                'numeric'\n              );\n              if (!predicateResult) outValues.push(value);\n            });\n            if (outValues.length !== values.length) {\n              hasChanged = true;\n            }\n            operatorList[operator] = outValues;\n          });\n\n          memo[key] = operatorList;\n\n          return memo;\n        },\n        {}\n      );\n\n      if (hasChanged) return newNumericRefinements;\n      return this.numericRefinements;\n    }\n\n    // We return nothing if the attribute is not undefined, a string or a function,\n    // as it is not a valid value for a refinement\n    return undefined;\n  },\n  /**\n   * Add a facet to the facets attribute of the helper configuration, if it\n   * isn't already present.\n   * @method\n   * @param {string} facet facet name to add\n   * @return {SearchParameters} new instance\n   */\n  addFacet: function addFacet(facet) {\n    if (this.isConjunctiveFacet(facet)) {\n      return this;\n    }\n\n    return this.setQueryParameters({\n      facets: this.facets.concat([facet]),\n    });\n  },\n  /**\n   * Add a disjunctive facet to the disjunctiveFacets attribute of the helper\n   * configuration, if it isn't already present.\n   * @method\n   * @param {string} facet disjunctive facet name to add\n   * @return {SearchParameters} new instance\n   */\n  addDisjunctiveFacet: function addDisjunctiveFacet(facet) {\n    if (this.isDisjunctiveFacet(facet)) {\n      return this;\n    }\n\n    return this.setQueryParameters({\n      disjunctiveFacets: this.disjunctiveFacets.concat([facet]),\n    });\n  },\n  /**\n   * Add a hierarchical facet to the hierarchicalFacets attribute of the helper\n   * configuration.\n   * @method\n   * @param {object} hierarchicalFacet hierarchical facet to add\n   * @return {SearchParameters} new instance\n   * @throws will throw an error if a hierarchical facet with the same name was already declared\n   */\n  addHierarchicalFacet: function addHierarchicalFacet(hierarchicalFacet) {\n    if (this.isHierarchicalFacet(hierarchicalFacet.name)) {\n      throw new Error(\n        'Cannot declare two hierarchical facets with the same name: `' +\n          hierarchicalFacet.name +\n          '`'\n      );\n    }\n\n    return this.setQueryParameters({\n      hierarchicalFacets: this.hierarchicalFacets.concat([hierarchicalFacet]),\n    });\n  },\n  /**\n   * Add a refinement on a \"normal\" facet\n   * @method\n   * @param {string} facet attribute to apply the faceting on\n   * @param {string} value value of the attribute (will be converted to string)\n   * @return {SearchParameters} new instance\n   */\n  addFacetRefinement: function addFacetRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(\n        facet +\n          ' is not defined in the facets attribute of the helper configuration'\n      );\n    }\n    if (RefinementList.isRefined(this.facetsRefinements, facet, value))\n      return this;\n\n    return this.setQueryParameters({\n      facetsRefinements: RefinementList.addRefinement(\n        this.facetsRefinements,\n        facet,\n        value\n      ),\n    });\n  },\n  /**\n   * Exclude a value from a \"normal\" facet\n   * @method\n   * @param {string} facet attribute to apply the exclusion on\n   * @param {string} value value of the attribute (will be converted to string)\n   * @return {SearchParameters} new instance\n   */\n  addExcludeRefinement: function addExcludeRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(\n        facet +\n          ' is not defined in the facets attribute of the helper configuration'\n      );\n    }\n    if (RefinementList.isRefined(this.facetsExcludes, facet, value))\n      return this;\n\n    return this.setQueryParameters({\n      facetsExcludes: RefinementList.addRefinement(\n        this.facetsExcludes,\n        facet,\n        value\n      ),\n    });\n  },\n  /**\n   * Adds a refinement on a disjunctive facet.\n   * @method\n   * @param {string} facet attribute to apply the faceting on\n   * @param {string} value value of the attribute (will be converted to string)\n   * @return {SearchParameters} new instance\n   */\n  addDisjunctiveFacetRefinement: function addDisjunctiveFacetRefinement(\n    facet,\n    value\n  ) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      throw new Error(\n        facet +\n          ' is not defined in the disjunctiveFacets attribute of the helper configuration'\n      );\n    }\n\n    if (\n      RefinementList.isRefined(this.disjunctiveFacetsRefinements, facet, value)\n    )\n      return this;\n\n    return this.setQueryParameters({\n      disjunctiveFacetsRefinements: RefinementList.addRefinement(\n        this.disjunctiveFacetsRefinements,\n        facet,\n        value\n      ),\n    });\n  },\n  /**\n   * addTagRefinement adds a tag to the list used to filter the results\n   * @param {string} tag tag to be added\n   * @return {SearchParameters} new instance\n   */\n  addTagRefinement: function addTagRefinement(tag) {\n    if (this.isTagRefined(tag)) return this;\n\n    var modification = {\n      tagRefinements: this.tagRefinements.concat(tag),\n    };\n\n    return this.setQueryParameters(modification);\n  },\n  /**\n   * Remove a facet from the facets attribute of the helper configuration, if it\n   * is present.\n   * @method\n   * @param {string} facet facet name to remove\n   * @return {SearchParameters} new instance\n   */\n  removeFacet: function removeFacet(facet) {\n    if (!this.isConjunctiveFacet(facet)) {\n      return this;\n    }\n\n    return this.clearRefinements(facet).setQueryParameters({\n      facets: this.facets.filter(function (f) {\n        return f !== facet;\n      }),\n    });\n  },\n  /**\n   * Remove a disjunctive facet from the disjunctiveFacets attribute of the\n   * helper configuration, if it is present.\n   * @method\n   * @param {string} facet disjunctive facet name to remove\n   * @return {SearchParameters} new instance\n   */\n  removeDisjunctiveFacet: function removeDisjunctiveFacet(facet) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      return this;\n    }\n\n    return this.clearRefinements(facet).setQueryParameters({\n      disjunctiveFacets: this.disjunctiveFacets.filter(function (f) {\n        return f !== facet;\n      }),\n    });\n  },\n  /**\n   * Remove a hierarchical facet from the hierarchicalFacets attribute of the\n   * helper configuration, if it is present.\n   * @method\n   * @param {string} facet hierarchical facet name to remove\n   * @return {SearchParameters} new instance\n   */\n  removeHierarchicalFacet: function removeHierarchicalFacet(facet) {\n    if (!this.isHierarchicalFacet(facet)) {\n      return this;\n    }\n\n    return this.clearRefinements(facet).setQueryParameters({\n      hierarchicalFacets: this.hierarchicalFacets.filter(function (f) {\n        return f.name !== facet;\n      }),\n    });\n  },\n  /**\n   * Remove a refinement set on facet. If a value is provided, it will clear the\n   * refinement for the given value, otherwise it will clear all the refinement\n   * values for the faceted attribute.\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {string} [value] value used to filter\n   * @return {SearchParameters} new instance\n   */\n  removeFacetRefinement: function removeFacetRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(\n        facet +\n          ' is not defined in the facets attribute of the helper configuration'\n      );\n    }\n    if (!RefinementList.isRefined(this.facetsRefinements, facet, value))\n      return this;\n\n    return this.setQueryParameters({\n      facetsRefinements: RefinementList.removeRefinement(\n        this.facetsRefinements,\n        facet,\n        value\n      ),\n    });\n  },\n  /**\n   * Remove a negative refinement on a facet\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {string} value value used to filter\n   * @return {SearchParameters} new instance\n   */\n  removeExcludeRefinement: function removeExcludeRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(\n        facet +\n          ' is not defined in the facets attribute of the helper configuration'\n      );\n    }\n    if (!RefinementList.isRefined(this.facetsExcludes, facet, value))\n      return this;\n\n    return this.setQueryParameters({\n      facetsExcludes: RefinementList.removeRefinement(\n        this.facetsExcludes,\n        facet,\n        value\n      ),\n    });\n  },\n  /**\n   * Remove a refinement on a disjunctive facet\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {string} value value used to filter\n   * @return {SearchParameters} new instance\n   */\n  removeDisjunctiveFacetRefinement: function removeDisjunctiveFacetRefinement(\n    facet,\n    value\n  ) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      throw new Error(\n        facet +\n          ' is not defined in the disjunctiveFacets attribute of the helper configuration'\n      );\n    }\n    if (\n      !RefinementList.isRefined(this.disjunctiveFacetsRefinements, facet, value)\n    )\n      return this;\n\n    return this.setQueryParameters({\n      disjunctiveFacetsRefinements: RefinementList.removeRefinement(\n        this.disjunctiveFacetsRefinements,\n        facet,\n        value\n      ),\n    });\n  },\n  /**\n   * Remove a tag from the list of tag refinements\n   * @method\n   * @param {string} tag the tag to remove\n   * @return {SearchParameters} new instance\n   */\n  removeTagRefinement: function removeTagRefinement(tag) {\n    if (!this.isTagRefined(tag)) return this;\n\n    var modification = {\n      tagRefinements: this.tagRefinements.filter(function (t) {\n        return t !== tag;\n      }),\n    };\n\n    return this.setQueryParameters(modification);\n  },\n  /**\n   * Generic toggle refinement method to use with facet, disjunctive facets\n   * and hierarchical facets\n   * @param  {string} facet the facet to refine\n   * @param  {string} value the associated value\n   * @return {SearchParameters} new instance\n   * @throws will throw an error if the facet is not declared in the settings of the helper\n   * @deprecated since version 2.19.0, see {@link SearchParameters#toggleFacetRefinement}\n   */\n  toggleRefinement: function toggleRefinement(facet, value) {\n    return this.toggleFacetRefinement(facet, value);\n  },\n  /**\n   * Generic toggle refinement method to use with facet, disjunctive facets\n   * and hierarchical facets\n   * @param  {string} facet the facet to refine\n   * @param  {string} value the associated value\n   * @return {SearchParameters} new instance\n   * @throws will throw an error if the facet is not declared in the settings of the helper\n   */\n  toggleFacetRefinement: function toggleFacetRefinement(facet, value) {\n    if (this.isHierarchicalFacet(facet)) {\n      return this.toggleHierarchicalFacetRefinement(facet, value);\n    } else if (this.isConjunctiveFacet(facet)) {\n      return this.toggleConjunctiveFacetRefinement(facet, value);\n    } else if (this.isDisjunctiveFacet(facet)) {\n      return this.toggleDisjunctiveFacetRefinement(facet, value);\n    }\n\n    throw new Error(\n      'Cannot refine the undeclared facet ' +\n        facet +\n        '; it should be added to the helper options facets, disjunctiveFacets or hierarchicalFacets'\n    );\n  },\n  /**\n   * Switch the refinement applied over a facet/value\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {SearchParameters} new instance\n   */\n  toggleConjunctiveFacetRefinement: function toggleConjunctiveFacetRefinement(\n    facet,\n    value\n  ) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(\n        facet +\n          ' is not defined in the facets attribute of the helper configuration'\n      );\n    }\n\n    return this.setQueryParameters({\n      facetsRefinements: RefinementList.toggleRefinement(\n        this.facetsRefinements,\n        facet,\n        value\n      ),\n    });\n  },\n  /**\n   * Switch the refinement applied over a facet/value\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {SearchParameters} new instance\n   */\n  toggleExcludeFacetRefinement: function toggleExcludeFacetRefinement(\n    facet,\n    value\n  ) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(\n        facet +\n          ' is not defined in the facets attribute of the helper configuration'\n      );\n    }\n\n    return this.setQueryParameters({\n      facetsExcludes: RefinementList.toggleRefinement(\n        this.facetsExcludes,\n        facet,\n        value\n      ),\n    });\n  },\n  /**\n   * Switch the refinement applied over a facet/value\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {SearchParameters} new instance\n   */\n  toggleDisjunctiveFacetRefinement: function toggleDisjunctiveFacetRefinement(\n    facet,\n    value\n  ) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      throw new Error(\n        facet +\n          ' is not defined in the disjunctiveFacets attribute of the helper configuration'\n      );\n    }\n\n    return this.setQueryParameters({\n      disjunctiveFacetsRefinements: RefinementList.toggleRefinement(\n        this.disjunctiveFacetsRefinements,\n        facet,\n        value\n      ),\n    });\n  },\n  /**\n   * Switch the refinement applied over a facet/value\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {SearchParameters} new instance\n   */\n  toggleHierarchicalFacetRefinement: function toggleHierarchicalFacetRefinement(\n    facet,\n    value\n  ) {\n    if (!this.isHierarchicalFacet(facet)) {\n      throw new Error(\n        facet +\n          ' is not defined in the hierarchicalFacets attribute of the helper configuration'\n      );\n    }\n\n    var separator = this._getHierarchicalFacetSeparator(\n      this.getHierarchicalFacetByName(facet)\n    );\n\n    var mod = {};\n\n    var upOneOrMultipleLevel =\n      this.hierarchicalFacetsRefinements[facet] !== undefined &&\n      this.hierarchicalFacetsRefinements[facet].length > 0 &&\n      // remove current refinement:\n      // refinement was 'beer > IPA', call is toggleRefine('beer > IPA'), refinement should be `beer`\n      (this.hierarchicalFacetsRefinements[facet][0] === value ||\n        // remove a parent refinement of the current refinement:\n        //  - refinement was 'beer > IPA > Flying dog'\n        //  - call is toggleRefine('beer > IPA')\n        //  - refinement should be `beer`\n        this.hierarchicalFacetsRefinements[facet][0].indexOf(\n          value + separator\n        ) === 0);\n\n    if (upOneOrMultipleLevel) {\n      if (value.indexOf(separator) === -1) {\n        // go back to root level\n        mod[facet] = [];\n      } else {\n        mod[facet] = [value.slice(0, value.lastIndexOf(separator))];\n      }\n    } else {\n      mod[facet] = [value];\n    }\n\n    return this.setQueryParameters({\n      hierarchicalFacetsRefinements: defaultsPure(\n        mod,\n        this.hierarchicalFacetsRefinements\n      ),\n    });\n  },\n\n  /**\n   * Adds a refinement on a hierarchical facet.\n   * @param {string} facet the facet name\n   * @param {string} path the hierarchical facet path\n   * @return {SearchParameter} the new state\n   * @throws Error if the facet is not defined or if the facet is refined\n   */\n  addHierarchicalFacetRefinement: function (facet, path) {\n    if (this.isHierarchicalFacetRefined(facet)) {\n      throw new Error(facet + ' is already refined.');\n    }\n    if (!this.isHierarchicalFacet(facet)) {\n      throw new Error(\n        facet +\n          ' is not defined in the hierarchicalFacets attribute of the helper configuration.'\n      );\n    }\n    var mod = {};\n    mod[facet] = [path];\n    return this.setQueryParameters({\n      hierarchicalFacetsRefinements: defaultsPure(\n        mod,\n        this.hierarchicalFacetsRefinements\n      ),\n    });\n  },\n\n  /**\n   * Removes the refinement set on a hierarchical facet.\n   * @param {string} facet the facet name\n   * @return {SearchParameter} the new state\n   * @throws Error if the facet is not defined or if the facet is not refined\n   */\n  removeHierarchicalFacetRefinement: function (facet) {\n    if (!this.isHierarchicalFacetRefined(facet)) {\n      return this;\n    }\n    var mod = {};\n    mod[facet] = [];\n    return this.setQueryParameters({\n      hierarchicalFacetsRefinements: defaultsPure(\n        mod,\n        this.hierarchicalFacetsRefinements\n      ),\n    });\n  },\n  /**\n   * Switch the tag refinement\n   * @method\n   * @param {string} tag the tag to remove or add\n   * @return {SearchParameters} new instance\n   */\n  toggleTagRefinement: function toggleTagRefinement(tag) {\n    if (this.isTagRefined(tag)) {\n      return this.removeTagRefinement(tag);\n    }\n\n    return this.addTagRefinement(tag);\n  },\n  /**\n   * Test if the facet name is from one of the disjunctive facets\n   * @method\n   * @param {string} facet facet name to test\n   * @return {boolean} true if facet is a disjunctive facet\n   */\n  isDisjunctiveFacet: function (facet) {\n    return this.disjunctiveFacets.indexOf(facet) > -1;\n  },\n  /**\n   * Test if the facet name is from one of the hierarchical facets\n   * @method\n   * @param {string} facetName facet name to test\n   * @return {boolean} true if facetName is a hierarchical facet\n   */\n  isHierarchicalFacet: function (facetName) {\n    return this.getHierarchicalFacetByName(facetName) !== undefined;\n  },\n  /**\n   * Test if the facet name is from one of the conjunctive/normal facets\n   * @method\n   * @param {string} facet facet name to test\n   * @return {boolean} true if facet is a conjunctive facet\n   */\n  isConjunctiveFacet: function (facet) {\n    return this.facets.indexOf(facet) > -1;\n  },\n  /**\n   * Returns true if the facet is refined, either for a specific value or in\n   * general.\n   * @method\n   * @param {string} facet name of the attribute for used for faceting\n   * @param {string} value, optional value. If passed will test that this value\n   * is filtering the given facet.\n   * @return {boolean} returns true if refined\n   */\n  isFacetRefined: function isFacetRefined(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      return false;\n    }\n    return RefinementList.isRefined(this.facetsRefinements, facet, value);\n  },\n  /**\n   * Returns true if the facet contains exclusions or if a specific value is\n   * excluded.\n   *\n   * @method\n   * @param {string} facet name of the attribute for used for faceting\n   * @param {string} [value] optional value. If passed will test that this value\n   * is filtering the given facet.\n   * @return {boolean} returns true if refined\n   */\n  isExcludeRefined: function isExcludeRefined(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      return false;\n    }\n    return RefinementList.isRefined(this.facetsExcludes, facet, value);\n  },\n  /**\n   * Returns true if the facet contains a refinement, or if a value passed is a\n   * refinement for the facet.\n   * @method\n   * @param {string} facet name of the attribute for used for faceting\n   * @param {string} value optional, will test if the value is used for refinement\n   * if there is one, otherwise will test if the facet contains any refinement\n   * @return {boolean} true if the facet is refined\n   */\n  isDisjunctiveFacetRefined: function isDisjunctiveFacetRefined(facet, value) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      return false;\n    }\n    return RefinementList.isRefined(\n      this.disjunctiveFacetsRefinements,\n      facet,\n      value\n    );\n  },\n  /**\n   * Returns true if the facet contains a refinement, or if a value passed is a\n   * refinement for the facet.\n   * @method\n   * @param {string} facet name of the attribute for used for faceting\n   * @param {string} value optional, will test if the value is used for refinement\n   * if there is one, otherwise will test if the facet contains any refinement\n   * @return {boolean} true if the facet is refined\n   */\n  isHierarchicalFacetRefined: function isHierarchicalFacetRefined(\n    facet,\n    value\n  ) {\n    if (!this.isHierarchicalFacet(facet)) {\n      return false;\n    }\n\n    var refinements = this.getHierarchicalRefinement(facet);\n\n    if (!value) {\n      return refinements.length > 0;\n    }\n\n    return refinements.indexOf(value) !== -1;\n  },\n  /**\n   * Test if the triple (attribute, operator, value) is already refined.\n   * If only the attribute and the operator are provided, it tests if the\n   * contains any refinement value.\n   * @method\n   * @param {string} attribute attribute for which the refinement is applied\n   * @param {string} [operator] operator of the refinement\n   * @param {string} [value] value of the refinement\n   * @return {boolean} true if it is refined\n   */\n  isNumericRefined: function isNumericRefined(attribute, operator, value) {\n    if (value === undefined && operator === undefined) {\n      return Boolean(this.numericRefinements[attribute]);\n    }\n\n    var isOperatorDefined =\n      this.numericRefinements[attribute] &&\n      this.numericRefinements[attribute][operator] !== undefined;\n\n    if (value === undefined || !isOperatorDefined) {\n      return isOperatorDefined;\n    }\n\n    var parsedValue = valToNumber(value);\n    var isAttributeValueDefined =\n      findArray(this.numericRefinements[attribute][operator], parsedValue) !==\n      undefined;\n\n    return isOperatorDefined && isAttributeValueDefined;\n  },\n  /**\n   * Returns true if the tag refined, false otherwise\n   * @method\n   * @param {string} tag the tag to check\n   * @return {boolean} true if tag is refined\n   */\n  isTagRefined: function isTagRefined(tag) {\n    return this.tagRefinements.indexOf(tag) !== -1;\n  },\n  /**\n   * Returns the list of all disjunctive facets refined\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {string[]} returns the list of refinements\n   */\n  getRefinedDisjunctiveFacets: function getRefinedDisjunctiveFacets() {\n    // eslint-disable-next-line consistent-this\n    var self = this;\n\n    // attributes used for numeric filter can also be disjunctive\n    var disjunctiveNumericRefinedFacets = intersection(\n      Object.keys(this.numericRefinements).filter(function (facet) {\n        return Object.keys(self.numericRefinements[facet]).length > 0;\n      }),\n      this.disjunctiveFacets\n    );\n\n    return Object.keys(this.disjunctiveFacetsRefinements)\n      .filter(function (facet) {\n        return self.disjunctiveFacetsRefinements[facet].length > 0;\n      })\n      .concat(disjunctiveNumericRefinedFacets)\n      .concat(this.getRefinedHierarchicalFacets())\n      .sort();\n  },\n  /**\n   * Returns the list of all disjunctive facets refined\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {string[]} returns the list of refinements\n   */\n  getRefinedHierarchicalFacets: function getRefinedHierarchicalFacets() {\n    // eslint-disable-next-line consistent-this\n    var self = this;\n    return intersection(\n      // enforce the order between the two arrays,\n      // so that refinement name index === hierarchical facet index\n      this.hierarchicalFacets.map(function (facet) {\n        return facet.name;\n      }),\n      Object.keys(this.hierarchicalFacetsRefinements).filter(function (facet) {\n        return self.hierarchicalFacetsRefinements[facet].length > 0;\n      })\n    ).sort();\n  },\n  /**\n   * Returned the list of all disjunctive facets not refined\n   * @method\n   * @return {string[]} returns the list of facets that are not refined\n   */\n  getUnrefinedDisjunctiveFacets: function () {\n    var refinedFacets = this.getRefinedDisjunctiveFacets();\n\n    return this.disjunctiveFacets.filter(function (f) {\n      return refinedFacets.indexOf(f) === -1;\n    });\n  },\n\n  managedParameters: [\n    'index',\n\n    'facets',\n    'disjunctiveFacets',\n    'facetsRefinements',\n    'hierarchicalFacets',\n    'facetsExcludes',\n\n    'disjunctiveFacetsRefinements',\n    'numericRefinements',\n    'tagRefinements',\n    'hierarchicalFacetsRefinements',\n  ],\n\n  getQueryParams: function getQueryParams() {\n    var managedParameters = this.managedParameters;\n\n    var queryParams = {};\n\n    // eslint-disable-next-line consistent-this\n    var self = this;\n    Object.keys(this).forEach(function (paramName) {\n      var paramValue = self[paramName];\n      if (\n        managedParameters.indexOf(paramName) === -1 &&\n        paramValue !== undefined\n      ) {\n        queryParams[paramName] = paramValue;\n      }\n    });\n\n    return queryParams;\n  },\n  /**\n   * Let the user set a specific value for a given parameter. Will return the\n   * same instance if the parameter is invalid or if the value is the same as the\n   * previous one.\n   * @method\n   * @param {string} parameter the parameter name\n   * @param {any} value the value to be set, must be compliant with the definition\n   * of the attribute on the object\n   * @return {SearchParameters} the updated state\n   */\n  setQueryParameter: function setParameter(parameter, value) {\n    if (this[parameter] === value) return this;\n\n    var modification = {};\n\n    modification[parameter] = value;\n\n    return this.setQueryParameters(modification);\n  },\n  /**\n   * Let the user set any of the parameters with a plain object.\n   * @method\n   * @param {object} params all the keys and the values to be updated\n   * @return {SearchParameters} a new updated instance\n   */\n  setQueryParameters: function setQueryParameters(params) {\n    if (!params) return this;\n\n    var error = SearchParameters.validate(this, params);\n\n    if (error) {\n      throw error;\n    }\n\n    // eslint-disable-next-line consistent-this\n    var self = this;\n    var nextWithNumbers = SearchParameters._parseNumbers(params);\n    var previousPlainObject = Object.keys(this).reduce(function (acc, key) {\n      acc[key] = self[key];\n      return acc;\n    }, {});\n\n    var nextPlainObject = Object.keys(nextWithNumbers).reduce(function (\n      previous,\n      key\n    ) {\n      var isPreviousValueDefined = previous[key] !== undefined;\n      var isNextValueDefined = nextWithNumbers[key] !== undefined;\n\n      if (isPreviousValueDefined && !isNextValueDefined) {\n        return omit(previous, [key]);\n      }\n\n      if (isNextValueDefined) {\n        previous[key] = nextWithNumbers[key];\n      }\n\n      return previous;\n    },\n    previousPlainObject);\n\n    return new this.constructor(nextPlainObject);\n  },\n\n  /**\n   * Returns a new instance with the page reset. Two scenarios possible:\n   * the page is omitted -> return the given instance\n   * the page is set -> return a new instance with a page of 0\n   * @return {SearchParameters} a new updated instance\n   */\n  resetPage: function () {\n    if (this.page === undefined) {\n      return this;\n    }\n\n    return this.setPage(0);\n  },\n\n  /**\n   * Helper function to get the hierarchicalFacet separator or the default one (`>`)\n   * @param  {object} hierarchicalFacet the hierarchicalFacet object\n   * @return {string} returns the hierarchicalFacet.separator or `>` as default\n   */\n  _getHierarchicalFacetSortBy: function (hierarchicalFacet) {\n    return hierarchicalFacet.sortBy || ['isRefined:desc', 'name:asc'];\n  },\n\n  /**\n   * Helper function to get the hierarchicalFacet separator or the default one (`>`)\n   * @private\n   * @param  {object} hierarchicalFacet the hierarchicalFacet object\n   * @return {string} returns the hierarchicalFacet.separator or `>` as default\n   */\n  _getHierarchicalFacetSeparator: function (hierarchicalFacet) {\n    return hierarchicalFacet.separator || ' > ';\n  },\n\n  /**\n   * Helper function to get the hierarchicalFacet prefix path or null\n   * @private\n   * @param  {object} hierarchicalFacet the hierarchicalFacet object\n   * @return {string} returns the hierarchicalFacet.rootPath or null as default\n   */\n  _getHierarchicalRootPath: function (hierarchicalFacet) {\n    return hierarchicalFacet.rootPath || null;\n  },\n\n  /**\n   * Helper function to check if we show the parent level of the hierarchicalFacet\n   * @private\n   * @param  {object} hierarchicalFacet the hierarchicalFacet object\n   * @return {string} returns the hierarchicalFacet.showParentLevel or true as default\n   */\n  _getHierarchicalShowParentLevel: function (hierarchicalFacet) {\n    if (typeof hierarchicalFacet.showParentLevel === 'boolean') {\n      return hierarchicalFacet.showParentLevel;\n    }\n    return true;\n  },\n\n  /**\n   * Helper function to get the hierarchicalFacet by it's name\n   * @param  {string} hierarchicalFacetName the hierarchicalFacet name\n   * @return {object} a hierarchicalFacet\n   */\n  getHierarchicalFacetByName: function (hierarchicalFacetName) {\n    return find(this.hierarchicalFacets, function (f) {\n      return f.name === hierarchicalFacetName;\n    });\n  },\n\n  /**\n   * Get the current breadcrumb for a hierarchical facet, as an array\n   * @param  {string} facetName Hierarchical facet name\n   * @return {array.<string>} the path as an array of string\n   */\n  getHierarchicalFacetBreadcrumb: function (facetName) {\n    if (!this.isHierarchicalFacet(facetName)) {\n      return [];\n    }\n\n    var refinement = this.getHierarchicalRefinement(facetName)[0];\n    if (!refinement) return [];\n\n    var separator = this._getHierarchicalFacetSeparator(\n      this.getHierarchicalFacetByName(facetName)\n    );\n    var path = refinement.split(separator);\n    return path.map(function (part) {\n      return part.trim();\n    });\n  },\n\n  toString: function () {\n    return JSON.stringify(this, null, 2);\n  },\n};\n\n/**\n * Callback used for clearRefinement method\n * @callback SearchParameters.clearCallback\n * @param {OperatorList|FacetList} value the value of the filter\n * @param {string} key the current attribute name\n * @param {string} type `numeric`, `disjunctiveFacet`, `conjunctiveFacet`, `hierarchicalFacet` or `exclude`\n * depending on the type of facet\n * @return {boolean} `true` if the element should be removed. `false` otherwise.\n */\nmodule.exports = SearchParameters;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/algoliasearch-helper/src/SearchParameters/index.js\n");

/***/ }),

/***/ "./node_modules/algoliasearch-helper/src/SearchResults/generate-hierarchical-tree.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nmodule.exports = generateTrees;\n\nvar fv = __webpack_require__(\"./node_modules/algoliasearch-helper/src/functions/escapeFacetValue.js\");\nvar find = __webpack_require__(\"./node_modules/algoliasearch-helper/src/functions/find.js\");\nvar prepareHierarchicalFacetSortBy = __webpack_require__(\"./node_modules/algoliasearch-helper/src/functions/formatSort.js\");\nvar orderBy = __webpack_require__(\"./node_modules/algoliasearch-helper/src/functions/orderBy.js\");\nvar escapeFacetValue = fv.escapeFacetValue;\nvar unescapeFacetValue = fv.unescapeFacetValue;\n\nfunction generateTrees(state) {\n  return function generate(hierarchicalFacetResult, hierarchicalFacetIndex) {\n    var hierarchicalFacet = state.hierarchicalFacets[hierarchicalFacetIndex];\n    var hierarchicalFacetRefinement =\n      (state.hierarchicalFacetsRefinements[hierarchicalFacet.name] &&\n        state.hierarchicalFacetsRefinements[hierarchicalFacet.name][0]) ||\n      '';\n    var hierarchicalSeparator =\n      state._getHierarchicalFacetSeparator(hierarchicalFacet);\n    var hierarchicalRootPath =\n      state._getHierarchicalRootPath(hierarchicalFacet);\n    var hierarchicalShowParentLevel =\n      state._getHierarchicalShowParentLevel(hierarchicalFacet);\n    var sortBy = prepareHierarchicalFacetSortBy(\n      state._getHierarchicalFacetSortBy(hierarchicalFacet)\n    );\n\n    var rootExhaustive = hierarchicalFacetResult.every(function (facetResult) {\n      return facetResult.exhaustive;\n    });\n\n    var generateTreeFn = generateHierarchicalTree(\n      sortBy,\n      hierarchicalSeparator,\n      hierarchicalRootPath,\n      hierarchicalShowParentLevel,\n      hierarchicalFacetRefinement\n    );\n\n    var results = hierarchicalFacetResult;\n\n    if (hierarchicalRootPath) {\n      results = hierarchicalFacetResult.slice(\n        hierarchicalRootPath.split(hierarchicalSeparator).length\n      );\n    }\n\n    return results.reduce(generateTreeFn, {\n      name: state.hierarchicalFacets[hierarchicalFacetIndex].name,\n      count: null, // root level, no count\n      isRefined: true, // root level, always refined\n      path: null, // root level, no path\n      escapedValue: null,\n      exhaustive: rootExhaustive,\n      data: null,\n    });\n  };\n}\n\nfunction generateHierarchicalTree(\n  sortBy,\n  hierarchicalSeparator,\n  hierarchicalRootPath,\n  hierarchicalShowParentLevel,\n  currentRefinement\n) {\n  return function generateTree(\n    hierarchicalTree,\n    hierarchicalFacetResult,\n    currentHierarchicalLevel\n  ) {\n    var parent = hierarchicalTree;\n\n    if (currentHierarchicalLevel > 0) {\n      var level = 0;\n\n      parent = hierarchicalTree;\n\n      while (level < currentHierarchicalLevel) {\n        /**\n         * @type {object[]]} hierarchical data\n         */\n        var data = parent && Array.isArray(parent.data) ? parent.data : [];\n        parent = find(data, function (subtree) {\n          return subtree.isRefined;\n        });\n        level++;\n      }\n    }\n\n    // we found a refined parent, let's add current level data under it\n    if (parent) {\n      // filter values in case an object has multiple categories:\n      //   {\n      //     categories: {\n      //       level0: ['beers', 'bières'],\n      //       level1: ['beers > IPA', 'bières > Belges']\n      //     }\n      //   }\n      //\n      // If parent refinement is `beers`, then we do not want to have `bières > Belges`\n      // showing up\n\n      var picked = Object.keys(hierarchicalFacetResult.data)\n        .map(function (facetValue) {\n          return [facetValue, hierarchicalFacetResult.data[facetValue]];\n        })\n        .filter(function (tuple) {\n          var facetValue = tuple[0];\n          return onlyMatchingTree(\n            facetValue,\n            parent.path || hierarchicalRootPath,\n            currentRefinement,\n            hierarchicalSeparator,\n            hierarchicalRootPath,\n            hierarchicalShowParentLevel\n          );\n        });\n\n      parent.data = orderBy(\n        picked.map(function (tuple) {\n          var facetValue = tuple[0];\n          var facetCount = tuple[1];\n\n          return format(\n            facetCount,\n            facetValue,\n            hierarchicalSeparator,\n            unescapeFacetValue(currentRefinement),\n            hierarchicalFacetResult.exhaustive\n          );\n        }),\n        sortBy[0],\n        sortBy[1]\n      );\n    }\n\n    return hierarchicalTree;\n  };\n}\n\n// eslint-disable-next-line max-params\nfunction onlyMatchingTree(\n  facetValue,\n  parentPath,\n  currentRefinement,\n  hierarchicalSeparator,\n  hierarchicalRootPath,\n  hierarchicalShowParentLevel\n) {\n  // we want the facetValue is a child of hierarchicalRootPath\n  if (\n    hierarchicalRootPath &&\n    (facetValue.indexOf(hierarchicalRootPath) !== 0 ||\n      hierarchicalRootPath === facetValue)\n  ) {\n    return false;\n  }\n\n  // we always want root levels (only when there is no prefix path)\n  return (\n    (!hierarchicalRootPath &&\n      facetValue.indexOf(hierarchicalSeparator) === -1) ||\n    // if there is a rootPath, being root level mean 1 level under rootPath\n    (hierarchicalRootPath &&\n      facetValue.split(hierarchicalSeparator).length -\n        hierarchicalRootPath.split(hierarchicalSeparator).length ===\n        1) ||\n    // if current refinement is a root level and current facetValue is a root level,\n    // keep the facetValue\n    (facetValue.indexOf(hierarchicalSeparator) === -1 &&\n      currentRefinement.indexOf(hierarchicalSeparator) === -1) ||\n    // currentRefinement is a child of the facet value\n    currentRefinement.indexOf(facetValue) === 0 ||\n    // facetValue is a child of the current parent, add it\n    (facetValue.indexOf(parentPath + hierarchicalSeparator) === 0 &&\n      (hierarchicalShowParentLevel ||\n        facetValue.indexOf(currentRefinement) === 0))\n  );\n}\n\nfunction format(\n  facetCount,\n  facetValue,\n  hierarchicalSeparator,\n  currentRefinement,\n  exhaustive\n) {\n  var parts = facetValue.split(hierarchicalSeparator);\n  return {\n    name: parts[parts.length - 1].trim(),\n    path: facetValue,\n    escapedValue: escapeFacetValue(facetValue),\n    count: facetCount,\n    isRefined:\n      currentRefinement === facetValue ||\n      currentRefinement.indexOf(facetValue + hierarchicalSeparator) === 0,\n    exhaustive: exhaustive,\n    data: null,\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/algoliasearch-helper/src/SearchResults/generate-hierarchical-tree.js\n");

/***/ }),

/***/ "./node_modules/algoliasearch-helper/src/SearchResults/index.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar compact = __webpack_require__(\"./node_modules/algoliasearch-helper/src/functions/compact.js\");\nvar defaultsPure = __webpack_require__(\"./node_modules/algoliasearch-helper/src/functions/defaultsPure.js\");\nvar fv = __webpack_require__(\"./node_modules/algoliasearch-helper/src/functions/escapeFacetValue.js\");\nvar find = __webpack_require__(\"./node_modules/algoliasearch-helper/src/functions/find.js\");\nvar findIndex = __webpack_require__(\"./node_modules/algoliasearch-helper/src/functions/findIndex.js\");\nvar formatSort = __webpack_require__(\"./node_modules/algoliasearch-helper/src/functions/formatSort.js\");\nvar mergeNumericMax = __webpack_require__(\"./node_modules/algoliasearch-helper/src/functions/mergeNumericMax.js\");\nvar orderBy = __webpack_require__(\"./node_modules/algoliasearch-helper/src/functions/orderBy.js\");\nvar escapeFacetValue = fv.escapeFacetValue;\nvar unescapeFacetValue = fv.unescapeFacetValue;\n\nvar generateHierarchicalTree = __webpack_require__(\"./node_modules/algoliasearch-helper/src/SearchResults/generate-hierarchical-tree.js\");\n\n/**\n * @typedef SearchResults.Facet\n * @type {object}\n * @property {string} name name of the attribute in the record\n * @property {object} data the faceting data: value, number of entries\n * @property {object} stats undefined unless facet_stats is retrieved from algolia\n */\n\n/**\n * @typedef SearchResults.HierarchicalFacet\n * @type {object}\n * @property {string} name name of the current value given the hierarchical level, trimmed.\n * If root node, you get the facet name\n * @property {number} count number of objects matching this hierarchical value\n * @property {string} path the current hierarchical value full path\n * @property {boolean} isRefined `true` if the current value was refined, `false` otherwise\n * @property {HierarchicalFacet[]} data sub values for the current level\n */\n\n/**\n * @typedef SearchResults.FacetValue\n * @type {object}\n * @property {string} name the facet value itself\n * @property {number} count times this facet appears in the results\n * @property {boolean} isRefined is the facet currently selected\n * @property {boolean} isExcluded is the facet currently excluded (only for conjunctive facets)\n */\n\n/**\n * @typedef Refinement\n * @type {object}\n * @property {string} type the type of filter used:\n * `numeric`, `facet`, `exclude`, `disjunctive`, `hierarchical`\n * @property {string} attributeName name of the attribute used for filtering\n * @property {string} name the value of the filter\n * @property {number} numericValue the value as a number. Only for numeric filters.\n * @property {string} operator the operator used. Only for numeric filters.\n * @property {number} count the number of computed hits for this filter. Only on facets.\n * @property {boolean} exhaustive if the count is exhaustive\n */\n\n/**\n * Turn an array of attributes in an object of attributes with their position in the array as value\n * @param {string[]} attributes the list of attributes in the record\n * @return {object} the list of attributes indexed by attribute name\n */\nfunction getIndices(attributes) {\n  var indices = {};\n\n  attributes.forEach(function (val, idx) {\n    indices[val] = idx;\n  });\n\n  return indices;\n}\n\nfunction assignFacetStats(dest, facetStats, key) {\n  if (facetStats && facetStats[key]) {\n    dest.stats = facetStats[key];\n  }\n}\n\n/**\n * @typedef {Object} HierarchicalFacet\n * @property {string} name\n * @property {string[]} attributes\n */\n\n/**\n * @param {HierarchicalFacet[]} hierarchicalFacets All hierarchical facets\n * @param {string} hierarchicalAttributeName The name of the hierarchical attribute\n * @return {HierarchicalFacet} The hierarchical facet matching the attribute name\n */\nfunction findMatchingHierarchicalFacetFromAttributeName(\n  hierarchicalFacets,\n  hierarchicalAttributeName\n) {\n  return find(\n    hierarchicalFacets,\n    function facetKeyMatchesAttribute(hierarchicalFacet) {\n      var facetNames = hierarchicalFacet.attributes || [];\n      return facetNames.indexOf(hierarchicalAttributeName) > -1;\n    }\n  );\n}\n\n/**\n * Constructor for SearchResults\n * @class\n * @classdesc SearchResults contains the results of a query to Algolia using the\n * {@link AlgoliaSearchHelper}.\n * @param {SearchParameters} state state that led to the response\n * @param {array.<object>} results the results from algolia client\n * @param {object} options options to control results content\n * @example <caption>SearchResults of the first query in\n * <a href=\"http://demos.algolia.com/instant-search-demo\">the instant search demo</a></caption>\n{\n   \"hitsPerPage\": 10,\n   \"processingTimeMS\": 2,\n   \"facets\": [\n      {\n         \"name\": \"type\",\n         \"data\": {\n            \"HardGood\": 6627,\n            \"BlackTie\": 550,\n            \"Music\": 665,\n            \"Software\": 131,\n            \"Game\": 456,\n            \"Movie\": 1571\n         },\n         \"exhaustive\": false\n      },\n      {\n         \"exhaustive\": false,\n         \"data\": {\n            \"Free shipping\": 5507\n         },\n         \"name\": \"shipping\"\n      }\n  ],\n   \"hits\": [\n      {\n         \"thumbnailImage\": \"http://img.bbystatic.com/BestBuy_US/images/products/1688/1688832_54x108_s.gif\",\n         \"_highlightResult\": {\n            \"shortDescription\": {\n               \"matchLevel\": \"none\",\n               \"value\": \"Safeguard your PC, Mac, Android and iOS devices with comprehensive Internet protection\",\n               \"matchedWords\": []\n            },\n            \"category\": {\n               \"matchLevel\": \"none\",\n               \"value\": \"Computer Security Software\",\n               \"matchedWords\": []\n            },\n            \"manufacturer\": {\n               \"matchedWords\": [],\n               \"value\": \"Webroot\",\n               \"matchLevel\": \"none\"\n            },\n            \"name\": {\n               \"value\": \"Webroot SecureAnywhere Internet Security (3-Device) (1-Year Subscription) - Mac/Windows\",\n               \"matchedWords\": [],\n               \"matchLevel\": \"none\"\n            }\n         },\n         \"image\": \"http://img.bbystatic.com/BestBuy_US/images/products/1688/1688832_105x210_sc.jpg\",\n         \"shipping\": \"Free shipping\",\n         \"bestSellingRank\": 4,\n         \"shortDescription\": \"Safeguard your PC, Mac, Android and iOS devices with comprehensive Internet protection\",\n         \"url\": \"http://www.bestbuy.com/site/webroot-secureanywhere-internet-security-3-devi…d=1219060687969&skuId=1688832&cmp=RMX&ky=2d3GfEmNIzjA0vkzveHdZEBgpPCyMnLTJ\",\n         \"name\": \"Webroot SecureAnywhere Internet Security (3-Device) (1-Year Subscription) - Mac/Windows\",\n         \"category\": \"Computer Security Software\",\n         \"salePrice_range\": \"1 - 50\",\n         \"objectID\": \"1688832\",\n         \"type\": \"Software\",\n         \"customerReviewCount\": 5980,\n         \"salePrice\": 49.99,\n         \"manufacturer\": \"Webroot\"\n      },\n      ....\n  ],\n   \"nbHits\": 10000,\n   \"disjunctiveFacets\": [\n      {\n         \"exhaustive\": false,\n         \"data\": {\n            \"5\": 183,\n            \"12\": 112,\n            \"7\": 149,\n            ...\n         },\n         \"name\": \"customerReviewCount\",\n         \"stats\": {\n            \"max\": 7461,\n            \"avg\": 157.939,\n            \"min\": 1\n         }\n      },\n      {\n         \"data\": {\n            \"Printer Ink\": 142,\n            \"Wireless Speakers\": 60,\n            \"Point & Shoot Cameras\": 48,\n            ...\n         },\n         \"name\": \"category\",\n         \"exhaustive\": false\n      },\n      {\n         \"exhaustive\": false,\n         \"data\": {\n            \"> 5000\": 2,\n            \"1 - 50\": 6524,\n            \"501 - 2000\": 566,\n            \"201 - 500\": 1501,\n            \"101 - 200\": 1360,\n            \"2001 - 5000\": 47\n         },\n         \"name\": \"salePrice_range\"\n      },\n      {\n         \"data\": {\n            \"Dynex™\": 202,\n            \"Insignia™\": 230,\n            \"PNY\": 72,\n            ...\n         },\n         \"name\": \"manufacturer\",\n         \"exhaustive\": false\n      }\n  ],\n   \"query\": \"\",\n   \"nbPages\": 100,\n   \"page\": 0,\n   \"index\": \"bestbuy\"\n}\n **/\nfunction SearchResults(state, results, options) {\n  var mainSubResponse = results[0] || {};\n\n  this._rawResults = results;\n\n  // eslint-disable-next-line consistent-this\n  var self = this;\n\n  // https://www.algolia.com/doc/api-reference/api-methods/search/#response\n  Object.keys(mainSubResponse).forEach(function (key) {\n    self[key] = mainSubResponse[key];\n  });\n\n  // Make every key of the result options reachable from the instance\n  var opts = defaultsPure(options, {\n    persistHierarchicalRootCount: false,\n  });\n  Object.keys(opts).forEach(function (key) {\n    self[key] = opts[key];\n  });\n\n  /**\n   * query used to generate the results\n   * @name query\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * The query as parsed by the engine given all the rules.\n   * @name parsedQuery\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * all the records that match the search parameters. Each record is\n   * augmented with a new attribute `_highlightResult`\n   * which is an object keyed by attribute and with the following properties:\n   * - `value` : the value of the facet highlighted (html)\n   * - `matchLevel`: `full`, `partial` or `none`, depending on how the query terms match\n   * @name hits\n   * @member {object[]}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * index where the results come from\n   * @name index\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * number of hits per page requested\n   * @name hitsPerPage\n   * @member {number}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * total number of hits of this query on the index\n   * @name nbHits\n   * @member {number}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * total number of pages with respect to the number of hits per page and the total number of hits\n   * @name nbPages\n   * @member {number}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * current page\n   * @name page\n   * @member {number}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * The position if the position was guessed by IP.\n   * @name aroundLatLng\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   * @example \"48.8637,2.3615\",\n   */\n  /**\n   * The radius computed by Algolia.\n   * @name automaticRadius\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   * @example \"126792922\",\n   */\n  /**\n   * String identifying the server used to serve this request.\n   *\n   * getRankingInfo needs to be set to `true` for this to be returned\n   *\n   * @name serverUsed\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   * @example \"c7-use-2.algolia.net\",\n   */\n  /**\n   * Boolean that indicates if the computation of the counts did time out.\n   * @deprecated\n   * @name timeoutCounts\n   * @member {boolean}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * Boolean that indicates if the computation of the hits did time out.\n   * @deprecated\n   * @name timeoutHits\n   * @member {boolean}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * True if the counts of the facets is exhaustive\n   * @name exhaustiveFacetsCount\n   * @member {boolean}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * True if the number of hits is exhaustive\n   * @name exhaustiveNbHits\n   * @member {boolean}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * Contains the userData if they are set by a [query rule](https://www.algolia.com/doc/guides/query-rules/query-rules-overview/).\n   * @name userData\n   * @member {object[]}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * queryID is the unique identifier of the query used to generate the current search results.\n   * This value is only available if the `clickAnalytics` search parameter is set to `true`.\n   * @name queryID\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   */\n\n  /**\n   * sum of the processing time of all the queries\n   * @name processingTimeMS\n   * @member {number}\n   * @memberof SearchResults\n   * @instance\n   */\n  this.processingTimeMS = results.reduce(function (sum, result) {\n    return result.processingTimeMS === undefined\n      ? sum\n      : sum + result.processingTimeMS;\n  }, 0);\n\n  /**\n   * disjunctive facets results\n   * @member {SearchResults.Facet[]}\n   */\n  this.disjunctiveFacets = [];\n  /**\n   * disjunctive facets results\n   * @member {SearchResults.HierarchicalFacet[]}\n   */\n  this.hierarchicalFacets = state.hierarchicalFacets.map(\n    function initFutureTree() {\n      return [];\n    }\n  );\n  /**\n   * other facets results\n   * @member {SearchResults.Facet[]}\n   */\n  this.facets = [];\n\n  var disjunctiveFacets = state.getRefinedDisjunctiveFacets();\n\n  var facetsIndices = getIndices(state.facets);\n  var disjunctiveFacetsIndices = getIndices(state.disjunctiveFacets);\n  var nextDisjunctiveResult = 1;\n\n  // Since we send request only for disjunctive facets that have been refined,\n  // we get the facets information from the first, general, response.\n\n  var mainFacets = mainSubResponse.facets || {};\n\n  Object.keys(mainFacets).forEach(function (facetKey) {\n    var facetValueObject = mainFacets[facetKey];\n\n    var hierarchicalFacet = findMatchingHierarchicalFacetFromAttributeName(\n      state.hierarchicalFacets,\n      facetKey\n    );\n\n    if (hierarchicalFacet) {\n      // Place the hierarchicalFacet data at the correct index depending on\n      // the attributes order that was defined at the helper initialization\n      var facetIndex = hierarchicalFacet.attributes.indexOf(facetKey);\n      var idxAttributeName = findIndex(state.hierarchicalFacets, function (f) {\n        return f.name === hierarchicalFacet.name;\n      });\n      self.hierarchicalFacets[idxAttributeName][facetIndex] = {\n        attribute: facetKey,\n        data: facetValueObject,\n        exhaustive: mainSubResponse.exhaustiveFacetsCount,\n      };\n    } else {\n      var isFacetDisjunctive = state.disjunctiveFacets.indexOf(facetKey) !== -1;\n      var isFacetConjunctive = state.facets.indexOf(facetKey) !== -1;\n      var position;\n\n      if (isFacetDisjunctive) {\n        position = disjunctiveFacetsIndices[facetKey];\n        self.disjunctiveFacets[position] = {\n          name: facetKey,\n          data: facetValueObject,\n          exhaustive: mainSubResponse.exhaustiveFacetsCount,\n        };\n        assignFacetStats(\n          self.disjunctiveFacets[position],\n          mainSubResponse.facets_stats,\n          facetKey\n        );\n      }\n      if (isFacetConjunctive) {\n        position = facetsIndices[facetKey];\n        self.facets[position] = {\n          name: facetKey,\n          data: facetValueObject,\n          exhaustive: mainSubResponse.exhaustiveFacetsCount,\n        };\n        assignFacetStats(\n          self.facets[position],\n          mainSubResponse.facets_stats,\n          facetKey\n        );\n      }\n    }\n  });\n\n  // Make sure we do not keep holes within the hierarchical facets\n  this.hierarchicalFacets = compact(this.hierarchicalFacets);\n\n  // aggregate the refined disjunctive facets\n  disjunctiveFacets.forEach(function (disjunctiveFacet) {\n    var result = results[nextDisjunctiveResult];\n    var facets = result && result.facets ? result.facets : {};\n    var hierarchicalFacet = state.getHierarchicalFacetByName(disjunctiveFacet);\n\n    // There should be only item in facets.\n    Object.keys(facets).forEach(function (dfacet) {\n      var facetResults = facets[dfacet];\n\n      var position;\n\n      if (hierarchicalFacet) {\n        position = findIndex(state.hierarchicalFacets, function (f) {\n          return f.name === hierarchicalFacet.name;\n        });\n        var attributeIndex = findIndex(\n          self.hierarchicalFacets[position],\n          function (f) {\n            return f.attribute === dfacet;\n          }\n        );\n\n        // previous refinements and no results so not able to find it\n        if (attributeIndex === -1) {\n          return;\n        }\n\n        self.hierarchicalFacets[position][attributeIndex].data =\n          self.persistHierarchicalRootCount\n            ? mergeNumericMax(\n                self.hierarchicalFacets[position][attributeIndex].data,\n                facetResults\n              )\n            : defaultsPure(\n                facetResults,\n                self.hierarchicalFacets[position][attributeIndex].data\n              );\n      } else {\n        position = disjunctiveFacetsIndices[dfacet];\n\n        var dataFromMainRequest =\n          (mainSubResponse.facets && mainSubResponse.facets[dfacet]) || {};\n\n        self.disjunctiveFacets[position] = {\n          name: dfacet,\n          data: mergeNumericMax(dataFromMainRequest, facetResults),\n          exhaustive: result.exhaustiveFacetsCount,\n        };\n        assignFacetStats(\n          self.disjunctiveFacets[position],\n          result.facets_stats,\n          dfacet\n        );\n\n        if (state.disjunctiveFacetsRefinements[dfacet]) {\n          state.disjunctiveFacetsRefinements[dfacet].forEach(function (\n            refinementValue\n          ) {\n            // add the disjunctive refinements if it is no more retrieved\n            if (\n              !self.disjunctiveFacets[position].data[refinementValue] &&\n              state.disjunctiveFacetsRefinements[dfacet].indexOf(\n                unescapeFacetValue(refinementValue)\n              ) > -1\n            ) {\n              self.disjunctiveFacets[position].data[refinementValue] = 0;\n            }\n          });\n        }\n      }\n    });\n    nextDisjunctiveResult++;\n  });\n\n  // if we have some parent level values for hierarchical facets, merge them\n  state.getRefinedHierarchicalFacets().forEach(function (refinedFacet) {\n    var hierarchicalFacet = state.getHierarchicalFacetByName(refinedFacet);\n    var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n\n    var currentRefinement = state.getHierarchicalRefinement(refinedFacet);\n    // if we are already at a root refinement (or no refinement at all), there is no\n    // root level values request\n    if (\n      currentRefinement.length === 0 ||\n      currentRefinement[0].split(separator).length < 2\n    ) {\n      return;\n    }\n\n    results.slice(nextDisjunctiveResult).forEach(function (result) {\n      var facets = result && result.facets ? result.facets : {};\n\n      Object.keys(facets).forEach(function (dfacet) {\n        var facetResults = facets[dfacet];\n        var position = findIndex(state.hierarchicalFacets, function (f) {\n          return f.name === hierarchicalFacet.name;\n        });\n        var attributeIndex = findIndex(\n          self.hierarchicalFacets[position],\n          function (f) {\n            return f.attribute === dfacet;\n          }\n        );\n\n        // previous refinements and no results so not able to find it\n        if (attributeIndex === -1) {\n          return;\n        }\n\n        // when we always get root levels, if the hits refinement is `beers > IPA` (count: 5),\n        // then the disjunctive values will be `beers` (count: 100),\n        // but we do not want to display\n        //   | beers (100)\n        //     > IPA (5)\n        // We want\n        //   | beers (5)\n        //     > IPA (5)\n        // @MAJOR: remove this legacy behaviour in next major version\n        var defaultData = {};\n\n        if (\n          currentRefinement.length > 0 &&\n          !self.persistHierarchicalRootCount\n        ) {\n          var root = currentRefinement[0].split(separator)[0];\n          defaultData[root] =\n            self.hierarchicalFacets[position][attributeIndex].data[root];\n        }\n\n        self.hierarchicalFacets[position][attributeIndex].data = defaultsPure(\n          defaultData,\n          facetResults,\n          self.hierarchicalFacets[position][attributeIndex].data\n        );\n      });\n\n      nextDisjunctiveResult++;\n    });\n  });\n\n  // add the excludes\n  Object.keys(state.facetsExcludes).forEach(function (facetName) {\n    var excludes = state.facetsExcludes[facetName];\n    var position = facetsIndices[facetName];\n\n    self.facets[position] = {\n      name: facetName,\n      data: mainFacets[facetName],\n      exhaustive: mainSubResponse.exhaustiveFacetsCount,\n    };\n    excludes.forEach(function (facetValue) {\n      self.facets[position] = self.facets[position] || { name: facetName };\n      self.facets[position].data = self.facets[position].data || {};\n      self.facets[position].data[facetValue] = 0;\n    });\n  });\n\n  /**\n   * @type {Array}\n   */\n  this.hierarchicalFacets = this.hierarchicalFacets.map(\n    generateHierarchicalTree(state)\n  );\n\n  /**\n   * @type {Array}\n   */\n  this.facets = compact(this.facets);\n  /**\n   * @type {Array}\n   */\n  this.disjunctiveFacets = compact(this.disjunctiveFacets);\n\n  this._state = state;\n}\n\n/**\n * Get a facet object with its name\n * @deprecated\n * @param {string} name name of the faceted attribute\n * @return {SearchResults.Facet} the facet object\n */\nSearchResults.prototype.getFacetByName = function (name) {\n  function predicate(facet) {\n    return facet.name === name;\n  }\n\n  return (\n    find(this.facets, predicate) ||\n    find(this.disjunctiveFacets, predicate) ||\n    find(this.hierarchicalFacets, predicate)\n  );\n};\n\n/**\n * Get the facet values of a specified attribute from a SearchResults object.\n * @private\n * @param {SearchResults} results the search results to search in\n * @param {string} attribute name of the faceted attribute to search for\n * @return {array|object} facet values. For the hierarchical facets it is an object.\n */\nfunction extractNormalizedFacetValues(results, attribute) {\n  function predicate(facet) {\n    return facet.name === attribute;\n  }\n\n  if (results._state.isConjunctiveFacet(attribute)) {\n    var facet = find(results.facets, predicate);\n    if (!facet) return [];\n\n    return Object.keys(facet.data).map(function (name) {\n      var value = escapeFacetValue(name);\n      return {\n        name: name,\n        escapedValue: value,\n        count: facet.data[name],\n        isRefined: results._state.isFacetRefined(attribute, value),\n        isExcluded: results._state.isExcludeRefined(attribute, name),\n      };\n    });\n  } else if (results._state.isDisjunctiveFacet(attribute)) {\n    var disjunctiveFacet = find(results.disjunctiveFacets, predicate);\n    if (!disjunctiveFacet) return [];\n\n    return Object.keys(disjunctiveFacet.data).map(function (name) {\n      var value = escapeFacetValue(name);\n      return {\n        name: name,\n        escapedValue: value,\n        count: disjunctiveFacet.data[name],\n        isRefined: results._state.isDisjunctiveFacetRefined(attribute, value),\n      };\n    });\n  } else if (results._state.isHierarchicalFacet(attribute)) {\n    var hierarchicalFacetValues = find(results.hierarchicalFacets, predicate);\n    if (!hierarchicalFacetValues) return hierarchicalFacetValues;\n\n    var hierarchicalFacet =\n      results._state.getHierarchicalFacetByName(attribute);\n    var separator =\n      results._state._getHierarchicalFacetSeparator(hierarchicalFacet);\n    var currentRefinement = unescapeFacetValue(\n      results._state.getHierarchicalRefinement(attribute)[0] || ''\n    );\n\n    if (currentRefinement.indexOf(hierarchicalFacet.rootPath) === 0) {\n      currentRefinement = currentRefinement.replace(\n        hierarchicalFacet.rootPath + separator,\n        ''\n      );\n    }\n\n    var currentRefinementSplit = currentRefinement.split(separator);\n    currentRefinementSplit.unshift(attribute);\n\n    setIsRefined(hierarchicalFacetValues, currentRefinementSplit, 0);\n\n    return hierarchicalFacetValues;\n  }\n\n  return undefined;\n}\n\n/**\n * Set the isRefined of a hierarchical facet result based on the current state.\n * @param {SearchResults.HierarchicalFacet} item Hierarchical facet to fix\n * @param {string[]} currentRefinement array of parts of the current hierarchical refinement\n * @param {number} depth recursion depth in the currentRefinement\n * @return {undefined} function mutates the item\n */\nfunction setIsRefined(item, currentRefinement, depth) {\n  item.isRefined =\n    item.name === (currentRefinement[depth] && currentRefinement[depth].trim());\n  if (item.data) {\n    item.data.forEach(function (child) {\n      setIsRefined(child, currentRefinement, depth + 1);\n    });\n  }\n}\n\n/**\n * Sort nodes of a hierarchical or disjunctive facet results\n * @private\n * @param {function} sortFn sort function to apply\n * @param {HierarchicalFacet|Array} node node upon which we want to apply the sort\n * @param {string[]} names attribute names\n * @param {number} [level=0] current index in the names array\n * @return {HierarchicalFacet|Array} sorted node\n */\nfunction recSort(sortFn, node, names, level) {\n  level = level || 0;\n\n  if (Array.isArray(node)) {\n    return sortFn(node, names[level]);\n  }\n\n  if (!node.data || node.data.length === 0) {\n    return node;\n  }\n\n  var children = node.data.map(function (childNode) {\n    return recSort(sortFn, childNode, names, level + 1);\n  });\n  var sortedChildren = sortFn(children, names[level]);\n  var newNode = defaultsPure({ data: sortedChildren }, node);\n  return newNode;\n}\n\nSearchResults.DEFAULT_SORT = ['isRefined:desc', 'count:desc', 'name:asc'];\n\nfunction vanillaSortFn(order, data) {\n  return data.sort(order);\n}\n\n/**\n * @typedef FacetOrdering\n * @type {Object}\n * @property {string[]} [order]\n * @property {'count' | 'alpha' | 'hidden'} [sortRemainingBy]\n */\n\n/**\n * Sorts facet arrays via their facet ordering\n * @param {Array} facetValues the values\n * @param {FacetOrdering} facetOrdering the ordering\n * @returns {Array} the sorted facet values\n */\nfunction sortViaFacetOrdering(facetValues, facetOrdering) {\n  var orderedFacets = [];\n  var remainingFacets = [];\n  var hide = facetOrdering.hide || [];\n  var order = facetOrdering.order || [];\n\n  /**\n   * an object with the keys being the values in order, the values their index:\n   * ['one', 'two'] -> { one: 0, two: 1 }\n   */\n  var reverseOrder = order.reduce(function (acc, name, i) {\n    acc[name] = i;\n    return acc;\n  }, {});\n\n  facetValues.forEach(function (item) {\n    // hierarchical facets get sorted using their raw name\n    var name = item.path || item.name;\n    var hidden = hide.indexOf(name) > -1;\n    if (!hidden && reverseOrder[name] !== undefined) {\n      orderedFacets[reverseOrder[name]] = item;\n    } else if (!hidden) {\n      remainingFacets.push(item);\n    }\n  });\n\n  orderedFacets = orderedFacets.filter(function (facet) {\n    return facet;\n  });\n\n  var sortRemainingBy = facetOrdering.sortRemainingBy;\n  var ordering;\n  if (sortRemainingBy === 'hidden') {\n    return orderedFacets;\n  } else if (sortRemainingBy === 'alpha') {\n    ordering = [\n      ['path', 'name'],\n      ['asc', 'asc'],\n    ];\n  } else {\n    ordering = [['count'], ['desc']];\n  }\n\n  return orderedFacets.concat(\n    orderBy(remainingFacets, ordering[0], ordering[1])\n  );\n}\n\n/**\n * @param {SearchResults} results the search results class\n * @param {string} attribute the attribute to retrieve ordering of\n * @returns {FacetOrdering | undefined} the facet ordering\n */\nfunction getFacetOrdering(results, attribute) {\n  return (\n    results.renderingContent &&\n    results.renderingContent.facetOrdering &&\n    results.renderingContent.facetOrdering.values &&\n    results.renderingContent.facetOrdering.values[attribute]\n  );\n}\n\n/**\n * Get a the list of values for a given facet attribute. Those values are sorted\n * refinement first, descending count (bigger value on top), and name ascending\n * (alphabetical order). The sort formula can overridden using either string based\n * predicates or a function.\n *\n * This method will return all the values returned by the Algolia engine plus all\n * the values already refined. This means that it can happen that the\n * `maxValuesPerFacet` [configuration](https://www.algolia.com/doc/rest-api/search#param-maxValuesPerFacet)\n * might not be respected if you have facet values that are already refined.\n * @param {string} attribute attribute name\n * @param {object} opts configuration options.\n * @param {boolean} [opts.facetOrdering]\n * Force the use of facetOrdering from the result if a sortBy is present. If\n * sortBy isn't present, facetOrdering will be used automatically.\n * @param {Array.<string> | function} opts.sortBy\n * When using strings, it consists of\n * the name of the [FacetValue](#SearchResults.FacetValue) or the\n * [HierarchicalFacet](#SearchResults.HierarchicalFacet) attributes with the\n * order (`asc` or `desc`). For example to order the value by count, the\n * argument would be `['count:asc']`.\n *\n * If only the attribute name is specified, the ordering defaults to the one\n * specified in the default value for this attribute.\n *\n * When not specified, the order is\n * ascending.  This parameter can also be a function which takes two facet\n * values and should return a number, 0 if equal, 1 if the first argument is\n * bigger or -1 otherwise.\n *\n * The default value for this attribute `['isRefined:desc', 'count:desc', 'name:asc']`\n * @return {FacetValue[]|HierarchicalFacet|undefined} depending on the type of facet of\n * the attribute requested (hierarchical, disjunctive or conjunctive)\n * @example\n * helper.on('result', function(event){\n *   //get values ordered only by name ascending using the string predicate\n *   event.results.getFacetValues('city', {sortBy: ['name:asc']});\n *   //get values  ordered only by count ascending using a function\n *   event.results.getFacetValues('city', {\n *     // this is equivalent to ['count:asc']\n *     sortBy: function(a, b) {\n *       if (a.count === b.count) return 0;\n *       if (a.count > b.count)   return 1;\n *       if (b.count > a.count)   return -1;\n *     }\n *   });\n * });\n */\nSearchResults.prototype.getFacetValues = function (attribute, opts) {\n  var facetValues = extractNormalizedFacetValues(this, attribute);\n  if (!facetValues) {\n    return undefined;\n  }\n\n  var options = defaultsPure(opts, {\n    sortBy: SearchResults.DEFAULT_SORT,\n    // if no sortBy is given, attempt to sort based on facetOrdering\n    // if it is given, we still allow to sort via facet ordering first\n    facetOrdering: !(opts && opts.sortBy),\n  });\n\n  // eslint-disable-next-line consistent-this\n  var results = this;\n  var attributes;\n  if (Array.isArray(facetValues)) {\n    attributes = [attribute];\n  } else {\n    var config = results._state.getHierarchicalFacetByName(facetValues.name);\n    attributes = config.attributes;\n  }\n\n  return recSort(\n    function (data, facetName) {\n      if (options.facetOrdering) {\n        var facetOrdering = getFacetOrdering(results, facetName);\n        if (facetOrdering) {\n          return sortViaFacetOrdering(data, facetOrdering);\n        }\n      }\n\n      if (Array.isArray(options.sortBy)) {\n        var order = formatSort(options.sortBy, SearchResults.DEFAULT_SORT);\n        return orderBy(data, order[0], order[1]);\n      } else if (typeof options.sortBy === 'function') {\n        return vanillaSortFn(options.sortBy, data);\n      }\n      throw new Error(\n        'options.sortBy is optional but if defined it must be ' +\n          'either an array of string (predicates) or a sorting function'\n      );\n    },\n    facetValues,\n    attributes\n  );\n};\n\n/**\n * Returns the facet stats if attribute is defined and the facet contains some.\n * Otherwise returns undefined.\n * @param {string} attribute name of the faceted attribute\n * @return {object} The stats of the facet\n */\nSearchResults.prototype.getFacetStats = function (attribute) {\n  if (this._state.isConjunctiveFacet(attribute)) {\n    return getFacetStatsIfAvailable(this.facets, attribute);\n  } else if (this._state.isDisjunctiveFacet(attribute)) {\n    return getFacetStatsIfAvailable(this.disjunctiveFacets, attribute);\n  }\n\n  return undefined;\n};\n\n/**\n * @typedef {Object} FacetListItem\n * @property {string} name\n */\n\n/**\n * @param {FacetListItem[]} facetList (has more items, but enough for here)\n * @param {string} facetName The attribute to look for\n * @return {object|undefined} The stats of the facet\n */\nfunction getFacetStatsIfAvailable(facetList, facetName) {\n  var data = find(facetList, function (facet) {\n    return facet.name === facetName;\n  });\n  return data && data.stats;\n}\n\n/**\n * Returns all refinements for all filters + tags. It also provides\n * additional information: count and exhaustiveness for each filter.\n *\n * See the [refinement type](#Refinement) for an exhaustive view of the available\n * data.\n *\n * Note that for a numeric refinement, results are grouped per operator, this\n * means that it will return responses for operators which are empty.\n *\n * @return {Array.<Refinement>} all the refinements\n */\nSearchResults.prototype.getRefinements = function () {\n  var state = this._state;\n  // eslint-disable-next-line consistent-this\n  var results = this;\n  var res = [];\n\n  Object.keys(state.facetsRefinements).forEach(function (attributeName) {\n    state.facetsRefinements[attributeName].forEach(function (name) {\n      res.push(\n        getRefinement(state, 'facet', attributeName, name, results.facets)\n      );\n    });\n  });\n\n  Object.keys(state.facetsExcludes).forEach(function (attributeName) {\n    state.facetsExcludes[attributeName].forEach(function (name) {\n      res.push(\n        getRefinement(state, 'exclude', attributeName, name, results.facets)\n      );\n    });\n  });\n\n  Object.keys(state.disjunctiveFacetsRefinements).forEach(function (\n    attributeName\n  ) {\n    state.disjunctiveFacetsRefinements[attributeName].forEach(function (name) {\n      res.push(\n        getRefinement(\n          state,\n          'disjunctive',\n          attributeName,\n          name,\n          results.disjunctiveFacets\n        )\n      );\n    });\n  });\n\n  Object.keys(state.hierarchicalFacetsRefinements).forEach(function (\n    attributeName\n  ) {\n    state.hierarchicalFacetsRefinements[attributeName].forEach(function (name) {\n      res.push(\n        getHierarchicalRefinement(\n          state,\n          attributeName,\n          name,\n          results.hierarchicalFacets\n        )\n      );\n    });\n  });\n\n  Object.keys(state.numericRefinements).forEach(function (attributeName) {\n    var operators = state.numericRefinements[attributeName];\n    Object.keys(operators).forEach(function (operator) {\n      operators[operator].forEach(function (value) {\n        res.push({\n          type: 'numeric',\n          attributeName: attributeName,\n          name: value,\n          numericValue: value,\n          operator: operator,\n        });\n      });\n    });\n  });\n\n  state.tagRefinements.forEach(function (name) {\n    res.push({ type: 'tag', attributeName: '_tags', name: name });\n  });\n\n  return res;\n};\n\n/**\n * @typedef {Object} Facet\n * @property {string} name\n * @property {Object} data\n * @property {boolean} exhaustive\n */\n\n/**\n * @param {SearchParameters} state the current state\n * @param {string} type the type of the refinement\n * @param {string} attributeName The attribute of the facet\n * @param {*} name The name of the facet\n * @param {Facet[]} resultsFacets facets from the results\n * @return {Refinement} the refinement\n */\nfunction getRefinement(state, type, attributeName, name, resultsFacets) {\n  var facet = find(resultsFacets, function (f) {\n    return f.name === attributeName;\n  });\n  var count = facet && facet.data && facet.data[name] ? facet.data[name] : 0;\n  var exhaustive = (facet && facet.exhaustive) || false;\n\n  return {\n    type: type,\n    attributeName: attributeName,\n    name: name,\n    count: count,\n    exhaustive: exhaustive,\n  };\n}\n\n/**\n * @param {SearchParameters} state the current state\n * @param {string} attributeName the attribute of the hierarchical facet\n * @param {string} name the name of the facet\n * @param {Facet[]} resultsFacets facets from the results\n * @return {HierarchicalFacet} the hierarchical facet\n */\nfunction getHierarchicalRefinement(state, attributeName, name, resultsFacets) {\n  var facetDeclaration = state.getHierarchicalFacetByName(attributeName);\n  var separator = state._getHierarchicalFacetSeparator(facetDeclaration);\n  var split = name.split(separator);\n  var rootFacet = find(resultsFacets, function (facet) {\n    return facet.name === attributeName;\n  });\n\n  var facet = split.reduce(function (intermediateFacet, part) {\n    var newFacet =\n      intermediateFacet &&\n      find(intermediateFacet.data, function (f) {\n        return f.name === part;\n      });\n    return newFacet !== undefined ? newFacet : intermediateFacet;\n  }, rootFacet);\n\n  var count = (facet && facet.count) || 0;\n  var exhaustive = (facet && facet.exhaustive) || false;\n  var path = (facet && facet.path) || '';\n\n  return {\n    type: 'hierarchical',\n    attributeName: attributeName,\n    name: path,\n    count: count,\n    exhaustive: exhaustive,\n  };\n}\n\nmodule.exports = SearchResults;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL1NlYXJjaFJlc3VsdHMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lYXNpZmVtLWRvY3MvLi9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL1NlYXJjaFJlc3VsdHMvaW5kZXguanM/MGIzNCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBjb21wYWN0ID0gcmVxdWlyZSgnLi4vZnVuY3Rpb25zL2NvbXBhY3QnKTtcbnZhciBkZWZhdWx0c1B1cmUgPSByZXF1aXJlKCcuLi9mdW5jdGlvbnMvZGVmYXVsdHNQdXJlJyk7XG52YXIgZnYgPSByZXF1aXJlKCcuLi9mdW5jdGlvbnMvZXNjYXBlRmFjZXRWYWx1ZScpO1xudmFyIGZpbmQgPSByZXF1aXJlKCcuLi9mdW5jdGlvbnMvZmluZCcpO1xudmFyIGZpbmRJbmRleCA9IHJlcXVpcmUoJy4uL2Z1bmN0aW9ucy9maW5kSW5kZXgnKTtcbnZhciBmb3JtYXRTb3J0ID0gcmVxdWlyZSgnLi4vZnVuY3Rpb25zL2Zvcm1hdFNvcnQnKTtcbnZhciBtZXJnZU51bWVyaWNNYXggPSByZXF1aXJlKCcuLi9mdW5jdGlvbnMvbWVyZ2VOdW1lcmljTWF4Jyk7XG52YXIgb3JkZXJCeSA9IHJlcXVpcmUoJy4uL2Z1bmN0aW9ucy9vcmRlckJ5Jyk7XG52YXIgZXNjYXBlRmFjZXRWYWx1ZSA9IGZ2LmVzY2FwZUZhY2V0VmFsdWU7XG52YXIgdW5lc2NhcGVGYWNldFZhbHVlID0gZnYudW5lc2NhcGVGYWNldFZhbHVlO1xuXG52YXIgZ2VuZXJhdGVIaWVyYXJjaGljYWxUcmVlID0gcmVxdWlyZSgnLi9nZW5lcmF0ZS1oaWVyYXJjaGljYWwtdHJlZScpO1xuXG4vKipcbiAqIEB0eXBlZGVmIFNlYXJjaFJlc3VsdHMuRmFjZXRcbiAqIEB0eXBlIHtvYmplY3R9XG4gKiBAcHJvcGVydHkge3N0cmluZ30gbmFtZSBuYW1lIG9mIHRoZSBhdHRyaWJ1dGUgaW4gdGhlIHJlY29yZFxuICogQHByb3BlcnR5IHtvYmplY3R9IGRhdGEgdGhlIGZhY2V0aW5nIGRhdGE6IHZhbHVlLCBudW1iZXIgb2YgZW50cmllc1xuICogQHByb3BlcnR5IHtvYmplY3R9IHN0YXRzIHVuZGVmaW5lZCB1bmxlc3MgZmFjZXRfc3RhdHMgaXMgcmV0cmlldmVkIGZyb20gYWxnb2xpYVxuICovXG5cbi8qKlxuICogQHR5cGVkZWYgU2VhcmNoUmVzdWx0cy5IaWVyYXJjaGljYWxGYWNldFxuICogQHR5cGUge29iamVjdH1cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBuYW1lIG5hbWUgb2YgdGhlIGN1cnJlbnQgdmFsdWUgZ2l2ZW4gdGhlIGhpZXJhcmNoaWNhbCBsZXZlbCwgdHJpbW1lZC5cbiAqIElmIHJvb3Qgbm9kZSwgeW91IGdldCB0aGUgZmFjZXQgbmFtZVxuICogQHByb3BlcnR5IHtudW1iZXJ9IGNvdW50IG51bWJlciBvZiBvYmplY3RzIG1hdGNoaW5nIHRoaXMgaGllcmFyY2hpY2FsIHZhbHVlXG4gKiBAcHJvcGVydHkge3N0cmluZ30gcGF0aCB0aGUgY3VycmVudCBoaWVyYXJjaGljYWwgdmFsdWUgZnVsbCBwYXRoXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGlzUmVmaW5lZCBgdHJ1ZWAgaWYgdGhlIGN1cnJlbnQgdmFsdWUgd2FzIHJlZmluZWQsIGBmYWxzZWAgb3RoZXJ3aXNlXG4gKiBAcHJvcGVydHkge0hpZXJhcmNoaWNhbEZhY2V0W119IGRhdGEgc3ViIHZhbHVlcyBmb3IgdGhlIGN1cnJlbnQgbGV2ZWxcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIFNlYXJjaFJlc3VsdHMuRmFjZXRWYWx1ZVxuICogQHR5cGUge29iamVjdH1cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBuYW1lIHRoZSBmYWNldCB2YWx1ZSBpdHNlbGZcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBjb3VudCB0aW1lcyB0aGlzIGZhY2V0IGFwcGVhcnMgaW4gdGhlIHJlc3VsdHNcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gaXNSZWZpbmVkIGlzIHRoZSBmYWNldCBjdXJyZW50bHkgc2VsZWN0ZWRcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gaXNFeGNsdWRlZCBpcyB0aGUgZmFjZXQgY3VycmVudGx5IGV4Y2x1ZGVkIChvbmx5IGZvciBjb25qdW5jdGl2ZSBmYWNldHMpXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiBSZWZpbmVtZW50XG4gKiBAdHlwZSB7b2JqZWN0fVxuICogQHByb3BlcnR5IHtzdHJpbmd9IHR5cGUgdGhlIHR5cGUgb2YgZmlsdGVyIHVzZWQ6XG4gKiBgbnVtZXJpY2AsIGBmYWNldGAsIGBleGNsdWRlYCwgYGRpc2p1bmN0aXZlYCwgYGhpZXJhcmNoaWNhbGBcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBhdHRyaWJ1dGVOYW1lIG5hbWUgb2YgdGhlIGF0dHJpYnV0ZSB1c2VkIGZvciBmaWx0ZXJpbmdcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBuYW1lIHRoZSB2YWx1ZSBvZiB0aGUgZmlsdGVyXG4gKiBAcHJvcGVydHkge251bWJlcn0gbnVtZXJpY1ZhbHVlIHRoZSB2YWx1ZSBhcyBhIG51bWJlci4gT25seSBmb3IgbnVtZXJpYyBmaWx0ZXJzLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IG9wZXJhdG9yIHRoZSBvcGVyYXRvciB1c2VkLiBPbmx5IGZvciBudW1lcmljIGZpbHRlcnMuXG4gKiBAcHJvcGVydHkge251bWJlcn0gY291bnQgdGhlIG51bWJlciBvZiBjb21wdXRlZCBoaXRzIGZvciB0aGlzIGZpbHRlci4gT25seSBvbiBmYWNldHMuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGV4aGF1c3RpdmUgaWYgdGhlIGNvdW50IGlzIGV4aGF1c3RpdmVcbiAqL1xuXG4vKipcbiAqIFR1cm4gYW4gYXJyYXkgb2YgYXR0cmlidXRlcyBpbiBhbiBvYmplY3Qgb2YgYXR0cmlidXRlcyB3aXRoIHRoZWlyIHBvc2l0aW9uIGluIHRoZSBhcnJheSBhcyB2YWx1ZVxuICogQHBhcmFtIHtzdHJpbmdbXX0gYXR0cmlidXRlcyB0aGUgbGlzdCBvZiBhdHRyaWJ1dGVzIGluIHRoZSByZWNvcmRcbiAqIEByZXR1cm4ge29iamVjdH0gdGhlIGxpc3Qgb2YgYXR0cmlidXRlcyBpbmRleGVkIGJ5IGF0dHJpYnV0ZSBuYW1lXG4gKi9cbmZ1bmN0aW9uIGdldEluZGljZXMoYXR0cmlidXRlcykge1xuICB2YXIgaW5kaWNlcyA9IHt9O1xuXG4gIGF0dHJpYnV0ZXMuZm9yRWFjaChmdW5jdGlvbiAodmFsLCBpZHgpIHtcbiAgICBpbmRpY2VzW3ZhbF0gPSBpZHg7XG4gIH0pO1xuXG4gIHJldHVybiBpbmRpY2VzO1xufVxuXG5mdW5jdGlvbiBhc3NpZ25GYWNldFN0YXRzKGRlc3QsIGZhY2V0U3RhdHMsIGtleSkge1xuICBpZiAoZmFjZXRTdGF0cyAmJiBmYWNldFN0YXRzW2tleV0pIHtcbiAgICBkZXN0LnN0YXRzID0gZmFjZXRTdGF0c1trZXldO1xuICB9XG59XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gSGllcmFyY2hpY2FsRmFjZXRcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBuYW1lXG4gKiBAcHJvcGVydHkge3N0cmluZ1tdfSBhdHRyaWJ1dGVzXG4gKi9cblxuLyoqXG4gKiBAcGFyYW0ge0hpZXJhcmNoaWNhbEZhY2V0W119IGhpZXJhcmNoaWNhbEZhY2V0cyBBbGwgaGllcmFyY2hpY2FsIGZhY2V0c1xuICogQHBhcmFtIHtzdHJpbmd9IGhpZXJhcmNoaWNhbEF0dHJpYnV0ZU5hbWUgVGhlIG5hbWUgb2YgdGhlIGhpZXJhcmNoaWNhbCBhdHRyaWJ1dGVcbiAqIEByZXR1cm4ge0hpZXJhcmNoaWNhbEZhY2V0fSBUaGUgaGllcmFyY2hpY2FsIGZhY2V0IG1hdGNoaW5nIHRoZSBhdHRyaWJ1dGUgbmFtZVxuICovXG5mdW5jdGlvbiBmaW5kTWF0Y2hpbmdIaWVyYXJjaGljYWxGYWNldEZyb21BdHRyaWJ1dGVOYW1lKFxuICBoaWVyYXJjaGljYWxGYWNldHMsXG4gIGhpZXJhcmNoaWNhbEF0dHJpYnV0ZU5hbWVcbikge1xuICByZXR1cm4gZmluZChcbiAgICBoaWVyYXJjaGljYWxGYWNldHMsXG4gICAgZnVuY3Rpb24gZmFjZXRLZXlNYXRjaGVzQXR0cmlidXRlKGhpZXJhcmNoaWNhbEZhY2V0KSB7XG4gICAgICB2YXIgZmFjZXROYW1lcyA9IGhpZXJhcmNoaWNhbEZhY2V0LmF0dHJpYnV0ZXMgfHwgW107XG4gICAgICByZXR1cm4gZmFjZXROYW1lcy5pbmRleE9mKGhpZXJhcmNoaWNhbEF0dHJpYnV0ZU5hbWUpID4gLTE7XG4gICAgfVxuICApO1xufVxuXG4vKipcbiAqIENvbnN0cnVjdG9yIGZvciBTZWFyY2hSZXN1bHRzXG4gKiBAY2xhc3NcbiAqIEBjbGFzc2Rlc2MgU2VhcmNoUmVzdWx0cyBjb250YWlucyB0aGUgcmVzdWx0cyBvZiBhIHF1ZXJ5IHRvIEFsZ29saWEgdXNpbmcgdGhlXG4gKiB7QGxpbmsgQWxnb2xpYVNlYXJjaEhlbHBlcn0uXG4gKiBAcGFyYW0ge1NlYXJjaFBhcmFtZXRlcnN9IHN0YXRlIHN0YXRlIHRoYXQgbGVkIHRvIHRoZSByZXNwb25zZVxuICogQHBhcmFtIHthcnJheS48b2JqZWN0Pn0gcmVzdWx0cyB0aGUgcmVzdWx0cyBmcm9tIGFsZ29saWEgY2xpZW50XG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyBvcHRpb25zIHRvIGNvbnRyb2wgcmVzdWx0cyBjb250ZW50XG4gKiBAZXhhbXBsZSA8Y2FwdGlvbj5TZWFyY2hSZXN1bHRzIG9mIHRoZSBmaXJzdCBxdWVyeSBpblxuICogPGEgaHJlZj1cImh0dHA6Ly9kZW1vcy5hbGdvbGlhLmNvbS9pbnN0YW50LXNlYXJjaC1kZW1vXCI+dGhlIGluc3RhbnQgc2VhcmNoIGRlbW88L2E+PC9jYXB0aW9uPlxue1xuICAgXCJoaXRzUGVyUGFnZVwiOiAxMCxcbiAgIFwicHJvY2Vzc2luZ1RpbWVNU1wiOiAyLFxuICAgXCJmYWNldHNcIjogW1xuICAgICAge1xuICAgICAgICAgXCJuYW1lXCI6IFwidHlwZVwiLFxuICAgICAgICAgXCJkYXRhXCI6IHtcbiAgICAgICAgICAgIFwiSGFyZEdvb2RcIjogNjYyNyxcbiAgICAgICAgICAgIFwiQmxhY2tUaWVcIjogNTUwLFxuICAgICAgICAgICAgXCJNdXNpY1wiOiA2NjUsXG4gICAgICAgICAgICBcIlNvZnR3YXJlXCI6IDEzMSxcbiAgICAgICAgICAgIFwiR2FtZVwiOiA0NTYsXG4gICAgICAgICAgICBcIk1vdmllXCI6IDE1NzFcbiAgICAgICAgIH0sXG4gICAgICAgICBcImV4aGF1c3RpdmVcIjogZmFsc2VcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgICBcImV4aGF1c3RpdmVcIjogZmFsc2UsXG4gICAgICAgICBcImRhdGFcIjoge1xuICAgICAgICAgICAgXCJGcmVlIHNoaXBwaW5nXCI6IDU1MDdcbiAgICAgICAgIH0sXG4gICAgICAgICBcIm5hbWVcIjogXCJzaGlwcGluZ1wiXG4gICAgICB9XG4gIF0sXG4gICBcImhpdHNcIjogW1xuICAgICAge1xuICAgICAgICAgXCJ0aHVtYm5haWxJbWFnZVwiOiBcImh0dHA6Ly9pbWcuYmJ5c3RhdGljLmNvbS9CZXN0QnV5X1VTL2ltYWdlcy9wcm9kdWN0cy8xNjg4LzE2ODg4MzJfNTR4MTA4X3MuZ2lmXCIsXG4gICAgICAgICBcIl9oaWdobGlnaHRSZXN1bHRcIjoge1xuICAgICAgICAgICAgXCJzaG9ydERlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgICAgIFwibWF0Y2hMZXZlbFwiOiBcIm5vbmVcIixcbiAgICAgICAgICAgICAgIFwidmFsdWVcIjogXCJTYWZlZ3VhcmQgeW91ciBQQywgTWFjLCBBbmRyb2lkIGFuZCBpT1MgZGV2aWNlcyB3aXRoIGNvbXByZWhlbnNpdmUgSW50ZXJuZXQgcHJvdGVjdGlvblwiLFxuICAgICAgICAgICAgICAgXCJtYXRjaGVkV29yZHNcIjogW11cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImNhdGVnb3J5XCI6IHtcbiAgICAgICAgICAgICAgIFwibWF0Y2hMZXZlbFwiOiBcIm5vbmVcIixcbiAgICAgICAgICAgICAgIFwidmFsdWVcIjogXCJDb21wdXRlciBTZWN1cml0eSBTb2Z0d2FyZVwiLFxuICAgICAgICAgICAgICAgXCJtYXRjaGVkV29yZHNcIjogW11cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcIm1hbnVmYWN0dXJlclwiOiB7XG4gICAgICAgICAgICAgICBcIm1hdGNoZWRXb3Jkc1wiOiBbXSxcbiAgICAgICAgICAgICAgIFwidmFsdWVcIjogXCJXZWJyb290XCIsXG4gICAgICAgICAgICAgICBcIm1hdGNoTGV2ZWxcIjogXCJub25lXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcIm5hbWVcIjoge1xuICAgICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIldlYnJvb3QgU2VjdXJlQW55d2hlcmUgSW50ZXJuZXQgU2VjdXJpdHkgKDMtRGV2aWNlKSAoMS1ZZWFyIFN1YnNjcmlwdGlvbikgLSBNYWMvV2luZG93c1wiLFxuICAgICAgICAgICAgICAgXCJtYXRjaGVkV29yZHNcIjogW10sXG4gICAgICAgICAgICAgICBcIm1hdGNoTGV2ZWxcIjogXCJub25lXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgIH0sXG4gICAgICAgICBcImltYWdlXCI6IFwiaHR0cDovL2ltZy5iYnlzdGF0aWMuY29tL0Jlc3RCdXlfVVMvaW1hZ2VzL3Byb2R1Y3RzLzE2ODgvMTY4ODgzMl8xMDV4MjEwX3NjLmpwZ1wiLFxuICAgICAgICAgXCJzaGlwcGluZ1wiOiBcIkZyZWUgc2hpcHBpbmdcIixcbiAgICAgICAgIFwiYmVzdFNlbGxpbmdSYW5rXCI6IDQsXG4gICAgICAgICBcInNob3J0RGVzY3JpcHRpb25cIjogXCJTYWZlZ3VhcmQgeW91ciBQQywgTWFjLCBBbmRyb2lkIGFuZCBpT1MgZGV2aWNlcyB3aXRoIGNvbXByZWhlbnNpdmUgSW50ZXJuZXQgcHJvdGVjdGlvblwiLFxuICAgICAgICAgXCJ1cmxcIjogXCJodHRwOi8vd3d3LmJlc3RidXkuY29tL3NpdGUvd2Vicm9vdC1zZWN1cmVhbnl3aGVyZS1pbnRlcm5ldC1zZWN1cml0eS0zLWRldmnigKZkPTEyMTkwNjA2ODc5Njkmc2t1SWQ9MTY4ODgzMiZjbXA9Uk1YJmt5PTJkM0dmRW1OSXpqQTB2a3p2ZUhkWkVCZ3BQQ3lNbkxUSlwiLFxuICAgICAgICAgXCJuYW1lXCI6IFwiV2Vicm9vdCBTZWN1cmVBbnl3aGVyZSBJbnRlcm5ldCBTZWN1cml0eSAoMy1EZXZpY2UpICgxLVllYXIgU3Vic2NyaXB0aW9uKSAtIE1hYy9XaW5kb3dzXCIsXG4gICAgICAgICBcImNhdGVnb3J5XCI6IFwiQ29tcHV0ZXIgU2VjdXJpdHkgU29mdHdhcmVcIixcbiAgICAgICAgIFwic2FsZVByaWNlX3JhbmdlXCI6IFwiMSAtIDUwXCIsXG4gICAgICAgICBcIm9iamVjdElEXCI6IFwiMTY4ODgzMlwiLFxuICAgICAgICAgXCJ0eXBlXCI6IFwiU29mdHdhcmVcIixcbiAgICAgICAgIFwiY3VzdG9tZXJSZXZpZXdDb3VudFwiOiA1OTgwLFxuICAgICAgICAgXCJzYWxlUHJpY2VcIjogNDkuOTksXG4gICAgICAgICBcIm1hbnVmYWN0dXJlclwiOiBcIldlYnJvb3RcIlxuICAgICAgfSxcbiAgICAgIC4uLi5cbiAgXSxcbiAgIFwibmJIaXRzXCI6IDEwMDAwLFxuICAgXCJkaXNqdW5jdGl2ZUZhY2V0c1wiOiBbXG4gICAgICB7XG4gICAgICAgICBcImV4aGF1c3RpdmVcIjogZmFsc2UsXG4gICAgICAgICBcImRhdGFcIjoge1xuICAgICAgICAgICAgXCI1XCI6IDE4MyxcbiAgICAgICAgICAgIFwiMTJcIjogMTEyLFxuICAgICAgICAgICAgXCI3XCI6IDE0OSxcbiAgICAgICAgICAgIC4uLlxuICAgICAgICAgfSxcbiAgICAgICAgIFwibmFtZVwiOiBcImN1c3RvbWVyUmV2aWV3Q291bnRcIixcbiAgICAgICAgIFwic3RhdHNcIjoge1xuICAgICAgICAgICAgXCJtYXhcIjogNzQ2MSxcbiAgICAgICAgICAgIFwiYXZnXCI6IDE1Ny45MzksXG4gICAgICAgICAgICBcIm1pblwiOiAxXG4gICAgICAgICB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICAgXCJkYXRhXCI6IHtcbiAgICAgICAgICAgIFwiUHJpbnRlciBJbmtcIjogMTQyLFxuICAgICAgICAgICAgXCJXaXJlbGVzcyBTcGVha2Vyc1wiOiA2MCxcbiAgICAgICAgICAgIFwiUG9pbnQgJiBTaG9vdCBDYW1lcmFzXCI6IDQ4LFxuICAgICAgICAgICAgLi4uXG4gICAgICAgICB9LFxuICAgICAgICAgXCJuYW1lXCI6IFwiY2F0ZWdvcnlcIixcbiAgICAgICAgIFwiZXhoYXVzdGl2ZVwiOiBmYWxzZVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgIFwiZXhoYXVzdGl2ZVwiOiBmYWxzZSxcbiAgICAgICAgIFwiZGF0YVwiOiB7XG4gICAgICAgICAgICBcIj4gNTAwMFwiOiAyLFxuICAgICAgICAgICAgXCIxIC0gNTBcIjogNjUyNCxcbiAgICAgICAgICAgIFwiNTAxIC0gMjAwMFwiOiA1NjYsXG4gICAgICAgICAgICBcIjIwMSAtIDUwMFwiOiAxNTAxLFxuICAgICAgICAgICAgXCIxMDEgLSAyMDBcIjogMTM2MCxcbiAgICAgICAgICAgIFwiMjAwMSAtIDUwMDBcIjogNDdcbiAgICAgICAgIH0sXG4gICAgICAgICBcIm5hbWVcIjogXCJzYWxlUHJpY2VfcmFuZ2VcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgIFwiZGF0YVwiOiB7XG4gICAgICAgICAgICBcIkR5bmV44oSiXCI6IDIwMixcbiAgICAgICAgICAgIFwiSW5zaWduaWHihKJcIjogMjMwLFxuICAgICAgICAgICAgXCJQTllcIjogNzIsXG4gICAgICAgICAgICAuLi5cbiAgICAgICAgIH0sXG4gICAgICAgICBcIm5hbWVcIjogXCJtYW51ZmFjdHVyZXJcIixcbiAgICAgICAgIFwiZXhoYXVzdGl2ZVwiOiBmYWxzZVxuICAgICAgfVxuICBdLFxuICAgXCJxdWVyeVwiOiBcIlwiLFxuICAgXCJuYlBhZ2VzXCI6IDEwMCxcbiAgIFwicGFnZVwiOiAwLFxuICAgXCJpbmRleFwiOiBcImJlc3RidXlcIlxufVxuICoqL1xuZnVuY3Rpb24gU2VhcmNoUmVzdWx0cyhzdGF0ZSwgcmVzdWx0cywgb3B0aW9ucykge1xuICB2YXIgbWFpblN1YlJlc3BvbnNlID0gcmVzdWx0c1swXSB8fCB7fTtcblxuICB0aGlzLl9yYXdSZXN1bHRzID0gcmVzdWx0cztcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC10aGlzXG4gIHZhciBzZWxmID0gdGhpcztcblxuICAvLyBodHRwczovL3d3dy5hbGdvbGlhLmNvbS9kb2MvYXBpLXJlZmVyZW5jZS9hcGktbWV0aG9kcy9zZWFyY2gvI3Jlc3BvbnNlXG4gIE9iamVjdC5rZXlzKG1haW5TdWJSZXNwb25zZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgc2VsZltrZXldID0gbWFpblN1YlJlc3BvbnNlW2tleV07XG4gIH0pO1xuXG4gIC8vIE1ha2UgZXZlcnkga2V5IG9mIHRoZSByZXN1bHQgb3B0aW9ucyByZWFjaGFibGUgZnJvbSB0aGUgaW5zdGFuY2VcbiAgdmFyIG9wdHMgPSBkZWZhdWx0c1B1cmUob3B0aW9ucywge1xuICAgIHBlcnNpc3RIaWVyYXJjaGljYWxSb290Q291bnQ6IGZhbHNlLFxuICB9KTtcbiAgT2JqZWN0LmtleXMob3B0cykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgc2VsZltrZXldID0gb3B0c1trZXldO1xuICB9KTtcblxuICAvKipcbiAgICogcXVlcnkgdXNlZCB0byBnZW5lcmF0ZSB0aGUgcmVzdWx0c1xuICAgKiBAbmFtZSBxdWVyeVxuICAgKiBAbWVtYmVyIHtzdHJpbmd9XG4gICAqIEBtZW1iZXJvZiBTZWFyY2hSZXN1bHRzXG4gICAqIEBpbnN0YW5jZVxuICAgKi9cbiAgLyoqXG4gICAqIFRoZSBxdWVyeSBhcyBwYXJzZWQgYnkgdGhlIGVuZ2luZSBnaXZlbiBhbGwgdGhlIHJ1bGVzLlxuICAgKiBAbmFtZSBwYXJzZWRRdWVyeVxuICAgKiBAbWVtYmVyIHtzdHJpbmd9XG4gICAqIEBtZW1iZXJvZiBTZWFyY2hSZXN1bHRzXG4gICAqIEBpbnN0YW5jZVxuICAgKi9cbiAgLyoqXG4gICAqIGFsbCB0aGUgcmVjb3JkcyB0aGF0IG1hdGNoIHRoZSBzZWFyY2ggcGFyYW1ldGVycy4gRWFjaCByZWNvcmQgaXNcbiAgICogYXVnbWVudGVkIHdpdGggYSBuZXcgYXR0cmlidXRlIGBfaGlnaGxpZ2h0UmVzdWx0YFxuICAgKiB3aGljaCBpcyBhbiBvYmplY3Qga2V5ZWQgYnkgYXR0cmlidXRlIGFuZCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAgICogLSBgdmFsdWVgIDogdGhlIHZhbHVlIG9mIHRoZSBmYWNldCBoaWdobGlnaHRlZCAoaHRtbClcbiAgICogLSBgbWF0Y2hMZXZlbGA6IGBmdWxsYCwgYHBhcnRpYWxgIG9yIGBub25lYCwgZGVwZW5kaW5nIG9uIGhvdyB0aGUgcXVlcnkgdGVybXMgbWF0Y2hcbiAgICogQG5hbWUgaGl0c1xuICAgKiBAbWVtYmVyIHtvYmplY3RbXX1cbiAgICogQG1lbWJlcm9mIFNlYXJjaFJlc3VsdHNcbiAgICogQGluc3RhbmNlXG4gICAqL1xuICAvKipcbiAgICogaW5kZXggd2hlcmUgdGhlIHJlc3VsdHMgY29tZSBmcm9tXG4gICAqIEBuYW1lIGluZGV4XG4gICAqIEBtZW1iZXIge3N0cmluZ31cbiAgICogQG1lbWJlcm9mIFNlYXJjaFJlc3VsdHNcbiAgICogQGluc3RhbmNlXG4gICAqL1xuICAvKipcbiAgICogbnVtYmVyIG9mIGhpdHMgcGVyIHBhZ2UgcmVxdWVzdGVkXG4gICAqIEBuYW1lIGhpdHNQZXJQYWdlXG4gICAqIEBtZW1iZXIge251bWJlcn1cbiAgICogQG1lbWJlcm9mIFNlYXJjaFJlc3VsdHNcbiAgICogQGluc3RhbmNlXG4gICAqL1xuICAvKipcbiAgICogdG90YWwgbnVtYmVyIG9mIGhpdHMgb2YgdGhpcyBxdWVyeSBvbiB0aGUgaW5kZXhcbiAgICogQG5hbWUgbmJIaXRzXG4gICAqIEBtZW1iZXIge251bWJlcn1cbiAgICogQG1lbWJlcm9mIFNlYXJjaFJlc3VsdHNcbiAgICogQGluc3RhbmNlXG4gICAqL1xuICAvKipcbiAgICogdG90YWwgbnVtYmVyIG9mIHBhZ2VzIHdpdGggcmVzcGVjdCB0byB0aGUgbnVtYmVyIG9mIGhpdHMgcGVyIHBhZ2UgYW5kIHRoZSB0b3RhbCBudW1iZXIgb2YgaGl0c1xuICAgKiBAbmFtZSBuYlBhZ2VzXG4gICAqIEBtZW1iZXIge251bWJlcn1cbiAgICogQG1lbWJlcm9mIFNlYXJjaFJlc3VsdHNcbiAgICogQGluc3RhbmNlXG4gICAqL1xuICAvKipcbiAgICogY3VycmVudCBwYWdlXG4gICAqIEBuYW1lIHBhZ2VcbiAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgKiBAbWVtYmVyb2YgU2VhcmNoUmVzdWx0c1xuICAgKiBAaW5zdGFuY2VcbiAgICovXG4gIC8qKlxuICAgKiBUaGUgcG9zaXRpb24gaWYgdGhlIHBvc2l0aW9uIHdhcyBndWVzc2VkIGJ5IElQLlxuICAgKiBAbmFtZSBhcm91bmRMYXRMbmdcbiAgICogQG1lbWJlciB7c3RyaW5nfVxuICAgKiBAbWVtYmVyb2YgU2VhcmNoUmVzdWx0c1xuICAgKiBAaW5zdGFuY2VcbiAgICogQGV4YW1wbGUgXCI0OC44NjM3LDIuMzYxNVwiLFxuICAgKi9cbiAgLyoqXG4gICAqIFRoZSByYWRpdXMgY29tcHV0ZWQgYnkgQWxnb2xpYS5cbiAgICogQG5hbWUgYXV0b21hdGljUmFkaXVzXG4gICAqIEBtZW1iZXIge3N0cmluZ31cbiAgICogQG1lbWJlcm9mIFNlYXJjaFJlc3VsdHNcbiAgICogQGluc3RhbmNlXG4gICAqIEBleGFtcGxlIFwiMTI2NzkyOTIyXCIsXG4gICAqL1xuICAvKipcbiAgICogU3RyaW5nIGlkZW50aWZ5aW5nIHRoZSBzZXJ2ZXIgdXNlZCB0byBzZXJ2ZSB0aGlzIHJlcXVlc3QuXG4gICAqXG4gICAqIGdldFJhbmtpbmdJbmZvIG5lZWRzIHRvIGJlIHNldCB0byBgdHJ1ZWAgZm9yIHRoaXMgdG8gYmUgcmV0dXJuZWRcbiAgICpcbiAgICogQG5hbWUgc2VydmVyVXNlZFxuICAgKiBAbWVtYmVyIHtzdHJpbmd9XG4gICAqIEBtZW1iZXJvZiBTZWFyY2hSZXN1bHRzXG4gICAqIEBpbnN0YW5jZVxuICAgKiBAZXhhbXBsZSBcImM3LXVzZS0yLmFsZ29saWEubmV0XCIsXG4gICAqL1xuICAvKipcbiAgICogQm9vbGVhbiB0aGF0IGluZGljYXRlcyBpZiB0aGUgY29tcHV0YXRpb24gb2YgdGhlIGNvdW50cyBkaWQgdGltZSBvdXQuXG4gICAqIEBkZXByZWNhdGVkXG4gICAqIEBuYW1lIHRpbWVvdXRDb3VudHNcbiAgICogQG1lbWJlciB7Ym9vbGVhbn1cbiAgICogQG1lbWJlcm9mIFNlYXJjaFJlc3VsdHNcbiAgICogQGluc3RhbmNlXG4gICAqL1xuICAvKipcbiAgICogQm9vbGVhbiB0aGF0IGluZGljYXRlcyBpZiB0aGUgY29tcHV0YXRpb24gb2YgdGhlIGhpdHMgZGlkIHRpbWUgb3V0LlxuICAgKiBAZGVwcmVjYXRlZFxuICAgKiBAbmFtZSB0aW1lb3V0SGl0c1xuICAgKiBAbWVtYmVyIHtib29sZWFufVxuICAgKiBAbWVtYmVyb2YgU2VhcmNoUmVzdWx0c1xuICAgKiBAaW5zdGFuY2VcbiAgICovXG4gIC8qKlxuICAgKiBUcnVlIGlmIHRoZSBjb3VudHMgb2YgdGhlIGZhY2V0cyBpcyBleGhhdXN0aXZlXG4gICAqIEBuYW1lIGV4aGF1c3RpdmVGYWNldHNDb3VudFxuICAgKiBAbWVtYmVyIHtib29sZWFufVxuICAgKiBAbWVtYmVyb2YgU2VhcmNoUmVzdWx0c1xuICAgKiBAaW5zdGFuY2VcbiAgICovXG4gIC8qKlxuICAgKiBUcnVlIGlmIHRoZSBudW1iZXIgb2YgaGl0cyBpcyBleGhhdXN0aXZlXG4gICAqIEBuYW1lIGV4aGF1c3RpdmVOYkhpdHNcbiAgICogQG1lbWJlciB7Ym9vbGVhbn1cbiAgICogQG1lbWJlcm9mIFNlYXJjaFJlc3VsdHNcbiAgICogQGluc3RhbmNlXG4gICAqL1xuICAvKipcbiAgICogQ29udGFpbnMgdGhlIHVzZXJEYXRhIGlmIHRoZXkgYXJlIHNldCBieSBhIFtxdWVyeSBydWxlXShodHRwczovL3d3dy5hbGdvbGlhLmNvbS9kb2MvZ3VpZGVzL3F1ZXJ5LXJ1bGVzL3F1ZXJ5LXJ1bGVzLW92ZXJ2aWV3LykuXG4gICAqIEBuYW1lIHVzZXJEYXRhXG4gICAqIEBtZW1iZXIge29iamVjdFtdfVxuICAgKiBAbWVtYmVyb2YgU2VhcmNoUmVzdWx0c1xuICAgKiBAaW5zdGFuY2VcbiAgICovXG4gIC8qKlxuICAgKiBxdWVyeUlEIGlzIHRoZSB1bmlxdWUgaWRlbnRpZmllciBvZiB0aGUgcXVlcnkgdXNlZCB0byBnZW5lcmF0ZSB0aGUgY3VycmVudCBzZWFyY2ggcmVzdWx0cy5cbiAgICogVGhpcyB2YWx1ZSBpcyBvbmx5IGF2YWlsYWJsZSBpZiB0aGUgYGNsaWNrQW5hbHl0aWNzYCBzZWFyY2ggcGFyYW1ldGVyIGlzIHNldCB0byBgdHJ1ZWAuXG4gICAqIEBuYW1lIHF1ZXJ5SURcbiAgICogQG1lbWJlciB7c3RyaW5nfVxuICAgKiBAbWVtYmVyb2YgU2VhcmNoUmVzdWx0c1xuICAgKiBAaW5zdGFuY2VcbiAgICovXG5cbiAgLyoqXG4gICAqIHN1bSBvZiB0aGUgcHJvY2Vzc2luZyB0aW1lIG9mIGFsbCB0aGUgcXVlcmllc1xuICAgKiBAbmFtZSBwcm9jZXNzaW5nVGltZU1TXG4gICAqIEBtZW1iZXIge251bWJlcn1cbiAgICogQG1lbWJlcm9mIFNlYXJjaFJlc3VsdHNcbiAgICogQGluc3RhbmNlXG4gICAqL1xuICB0aGlzLnByb2Nlc3NpbmdUaW1lTVMgPSByZXN1bHRzLnJlZHVjZShmdW5jdGlvbiAoc3VtLCByZXN1bHQpIHtcbiAgICByZXR1cm4gcmVzdWx0LnByb2Nlc3NpbmdUaW1lTVMgPT09IHVuZGVmaW5lZFxuICAgICAgPyBzdW1cbiAgICAgIDogc3VtICsgcmVzdWx0LnByb2Nlc3NpbmdUaW1lTVM7XG4gIH0sIDApO1xuXG4gIC8qKlxuICAgKiBkaXNqdW5jdGl2ZSBmYWNldHMgcmVzdWx0c1xuICAgKiBAbWVtYmVyIHtTZWFyY2hSZXN1bHRzLkZhY2V0W119XG4gICAqL1xuICB0aGlzLmRpc2p1bmN0aXZlRmFjZXRzID0gW107XG4gIC8qKlxuICAgKiBkaXNqdW5jdGl2ZSBmYWNldHMgcmVzdWx0c1xuICAgKiBAbWVtYmVyIHtTZWFyY2hSZXN1bHRzLkhpZXJhcmNoaWNhbEZhY2V0W119XG4gICAqL1xuICB0aGlzLmhpZXJhcmNoaWNhbEZhY2V0cyA9IHN0YXRlLmhpZXJhcmNoaWNhbEZhY2V0cy5tYXAoXG4gICAgZnVuY3Rpb24gaW5pdEZ1dHVyZVRyZWUoKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICApO1xuICAvKipcbiAgICogb3RoZXIgZmFjZXRzIHJlc3VsdHNcbiAgICogQG1lbWJlciB7U2VhcmNoUmVzdWx0cy5GYWNldFtdfVxuICAgKi9cbiAgdGhpcy5mYWNldHMgPSBbXTtcblxuICB2YXIgZGlzanVuY3RpdmVGYWNldHMgPSBzdGF0ZS5nZXRSZWZpbmVkRGlzanVuY3RpdmVGYWNldHMoKTtcblxuICB2YXIgZmFjZXRzSW5kaWNlcyA9IGdldEluZGljZXMoc3RhdGUuZmFjZXRzKTtcbiAgdmFyIGRpc2p1bmN0aXZlRmFjZXRzSW5kaWNlcyA9IGdldEluZGljZXMoc3RhdGUuZGlzanVuY3RpdmVGYWNldHMpO1xuICB2YXIgbmV4dERpc2p1bmN0aXZlUmVzdWx0ID0gMTtcblxuICAvLyBTaW5jZSB3ZSBzZW5kIHJlcXVlc3Qgb25seSBmb3IgZGlzanVuY3RpdmUgZmFjZXRzIHRoYXQgaGF2ZSBiZWVuIHJlZmluZWQsXG4gIC8vIHdlIGdldCB0aGUgZmFjZXRzIGluZm9ybWF0aW9uIGZyb20gdGhlIGZpcnN0LCBnZW5lcmFsLCByZXNwb25zZS5cblxuICB2YXIgbWFpbkZhY2V0cyA9IG1haW5TdWJSZXNwb25zZS5mYWNldHMgfHwge307XG5cbiAgT2JqZWN0LmtleXMobWFpbkZhY2V0cykuZm9yRWFjaChmdW5jdGlvbiAoZmFjZXRLZXkpIHtcbiAgICB2YXIgZmFjZXRWYWx1ZU9iamVjdCA9IG1haW5GYWNldHNbZmFjZXRLZXldO1xuXG4gICAgdmFyIGhpZXJhcmNoaWNhbEZhY2V0ID0gZmluZE1hdGNoaW5nSGllcmFyY2hpY2FsRmFjZXRGcm9tQXR0cmlidXRlTmFtZShcbiAgICAgIHN0YXRlLmhpZXJhcmNoaWNhbEZhY2V0cyxcbiAgICAgIGZhY2V0S2V5XG4gICAgKTtcblxuICAgIGlmIChoaWVyYXJjaGljYWxGYWNldCkge1xuICAgICAgLy8gUGxhY2UgdGhlIGhpZXJhcmNoaWNhbEZhY2V0IGRhdGEgYXQgdGhlIGNvcnJlY3QgaW5kZXggZGVwZW5kaW5nIG9uXG4gICAgICAvLyB0aGUgYXR0cmlidXRlcyBvcmRlciB0aGF0IHdhcyBkZWZpbmVkIGF0IHRoZSBoZWxwZXIgaW5pdGlhbGl6YXRpb25cbiAgICAgIHZhciBmYWNldEluZGV4ID0gaGllcmFyY2hpY2FsRmFjZXQuYXR0cmlidXRlcy5pbmRleE9mKGZhY2V0S2V5KTtcbiAgICAgIHZhciBpZHhBdHRyaWJ1dGVOYW1lID0gZmluZEluZGV4KHN0YXRlLmhpZXJhcmNoaWNhbEZhY2V0cywgZnVuY3Rpb24gKGYpIHtcbiAgICAgICAgcmV0dXJuIGYubmFtZSA9PT0gaGllcmFyY2hpY2FsRmFjZXQubmFtZTtcbiAgICAgIH0pO1xuICAgICAgc2VsZi5oaWVyYXJjaGljYWxGYWNldHNbaWR4QXR0cmlidXRlTmFtZV1bZmFjZXRJbmRleF0gPSB7XG4gICAgICAgIGF0dHJpYnV0ZTogZmFjZXRLZXksXG4gICAgICAgIGRhdGE6IGZhY2V0VmFsdWVPYmplY3QsXG4gICAgICAgIGV4aGF1c3RpdmU6IG1haW5TdWJSZXNwb25zZS5leGhhdXN0aXZlRmFjZXRzQ291bnQsXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgaXNGYWNldERpc2p1bmN0aXZlID0gc3RhdGUuZGlzanVuY3RpdmVGYWNldHMuaW5kZXhPZihmYWNldEtleSkgIT09IC0xO1xuICAgICAgdmFyIGlzRmFjZXRDb25qdW5jdGl2ZSA9IHN0YXRlLmZhY2V0cy5pbmRleE9mKGZhY2V0S2V5KSAhPT0gLTE7XG4gICAgICB2YXIgcG9zaXRpb247XG5cbiAgICAgIGlmIChpc0ZhY2V0RGlzanVuY3RpdmUpIHtcbiAgICAgICAgcG9zaXRpb24gPSBkaXNqdW5jdGl2ZUZhY2V0c0luZGljZXNbZmFjZXRLZXldO1xuICAgICAgICBzZWxmLmRpc2p1bmN0aXZlRmFjZXRzW3Bvc2l0aW9uXSA9IHtcbiAgICAgICAgICBuYW1lOiBmYWNldEtleSxcbiAgICAgICAgICBkYXRhOiBmYWNldFZhbHVlT2JqZWN0LFxuICAgICAgICAgIGV4aGF1c3RpdmU6IG1haW5TdWJSZXNwb25zZS5leGhhdXN0aXZlRmFjZXRzQ291bnQsXG4gICAgICAgIH07XG4gICAgICAgIGFzc2lnbkZhY2V0U3RhdHMoXG4gICAgICAgICAgc2VsZi5kaXNqdW5jdGl2ZUZhY2V0c1twb3NpdGlvbl0sXG4gICAgICAgICAgbWFpblN1YlJlc3BvbnNlLmZhY2V0c19zdGF0cyxcbiAgICAgICAgICBmYWNldEtleVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKGlzRmFjZXRDb25qdW5jdGl2ZSkge1xuICAgICAgICBwb3NpdGlvbiA9IGZhY2V0c0luZGljZXNbZmFjZXRLZXldO1xuICAgICAgICBzZWxmLmZhY2V0c1twb3NpdGlvbl0gPSB7XG4gICAgICAgICAgbmFtZTogZmFjZXRLZXksXG4gICAgICAgICAgZGF0YTogZmFjZXRWYWx1ZU9iamVjdCxcbiAgICAgICAgICBleGhhdXN0aXZlOiBtYWluU3ViUmVzcG9uc2UuZXhoYXVzdGl2ZUZhY2V0c0NvdW50LFxuICAgICAgICB9O1xuICAgICAgICBhc3NpZ25GYWNldFN0YXRzKFxuICAgICAgICAgIHNlbGYuZmFjZXRzW3Bvc2l0aW9uXSxcbiAgICAgICAgICBtYWluU3ViUmVzcG9uc2UuZmFjZXRzX3N0YXRzLFxuICAgICAgICAgIGZhY2V0S2V5XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICAvLyBNYWtlIHN1cmUgd2UgZG8gbm90IGtlZXAgaG9sZXMgd2l0aGluIHRoZSBoaWVyYXJjaGljYWwgZmFjZXRzXG4gIHRoaXMuaGllcmFyY2hpY2FsRmFjZXRzID0gY29tcGFjdCh0aGlzLmhpZXJhcmNoaWNhbEZhY2V0cyk7XG5cbiAgLy8gYWdncmVnYXRlIHRoZSByZWZpbmVkIGRpc2p1bmN0aXZlIGZhY2V0c1xuICBkaXNqdW5jdGl2ZUZhY2V0cy5mb3JFYWNoKGZ1bmN0aW9uIChkaXNqdW5jdGl2ZUZhY2V0KSB7XG4gICAgdmFyIHJlc3VsdCA9IHJlc3VsdHNbbmV4dERpc2p1bmN0aXZlUmVzdWx0XTtcbiAgICB2YXIgZmFjZXRzID0gcmVzdWx0ICYmIHJlc3VsdC5mYWNldHMgPyByZXN1bHQuZmFjZXRzIDoge307XG4gICAgdmFyIGhpZXJhcmNoaWNhbEZhY2V0ID0gc3RhdGUuZ2V0SGllcmFyY2hpY2FsRmFjZXRCeU5hbWUoZGlzanVuY3RpdmVGYWNldCk7XG5cbiAgICAvLyBUaGVyZSBzaG91bGQgYmUgb25seSBpdGVtIGluIGZhY2V0cy5cbiAgICBPYmplY3Qua2V5cyhmYWNldHMpLmZvckVhY2goZnVuY3Rpb24gKGRmYWNldCkge1xuICAgICAgdmFyIGZhY2V0UmVzdWx0cyA9IGZhY2V0c1tkZmFjZXRdO1xuXG4gICAgICB2YXIgcG9zaXRpb247XG5cbiAgICAgIGlmIChoaWVyYXJjaGljYWxGYWNldCkge1xuICAgICAgICBwb3NpdGlvbiA9IGZpbmRJbmRleChzdGF0ZS5oaWVyYXJjaGljYWxGYWNldHMsIGZ1bmN0aW9uIChmKSB7XG4gICAgICAgICAgcmV0dXJuIGYubmFtZSA9PT0gaGllcmFyY2hpY2FsRmFjZXQubmFtZTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBhdHRyaWJ1dGVJbmRleCA9IGZpbmRJbmRleChcbiAgICAgICAgICBzZWxmLmhpZXJhcmNoaWNhbEZhY2V0c1twb3NpdGlvbl0sXG4gICAgICAgICAgZnVuY3Rpb24gKGYpIHtcbiAgICAgICAgICAgIHJldHVybiBmLmF0dHJpYnV0ZSA9PT0gZGZhY2V0O1xuICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgICAgICAvLyBwcmV2aW91cyByZWZpbmVtZW50cyBhbmQgbm8gcmVzdWx0cyBzbyBub3QgYWJsZSB0byBmaW5kIGl0XG4gICAgICAgIGlmIChhdHRyaWJ1dGVJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBzZWxmLmhpZXJhcmNoaWNhbEZhY2V0c1twb3NpdGlvbl1bYXR0cmlidXRlSW5kZXhdLmRhdGEgPVxuICAgICAgICAgIHNlbGYucGVyc2lzdEhpZXJhcmNoaWNhbFJvb3RDb3VudFxuICAgICAgICAgICAgPyBtZXJnZU51bWVyaWNNYXgoXG4gICAgICAgICAgICAgICAgc2VsZi5oaWVyYXJjaGljYWxGYWNldHNbcG9zaXRpb25dW2F0dHJpYnV0ZUluZGV4XS5kYXRhLFxuICAgICAgICAgICAgICAgIGZhY2V0UmVzdWx0c1xuICAgICAgICAgICAgICApXG4gICAgICAgICAgICA6IGRlZmF1bHRzUHVyZShcbiAgICAgICAgICAgICAgICBmYWNldFJlc3VsdHMsXG4gICAgICAgICAgICAgICAgc2VsZi5oaWVyYXJjaGljYWxGYWNldHNbcG9zaXRpb25dW2F0dHJpYnV0ZUluZGV4XS5kYXRhXG4gICAgICAgICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwb3NpdGlvbiA9IGRpc2p1bmN0aXZlRmFjZXRzSW5kaWNlc1tkZmFjZXRdO1xuXG4gICAgICAgIHZhciBkYXRhRnJvbU1haW5SZXF1ZXN0ID1cbiAgICAgICAgICAobWFpblN1YlJlc3BvbnNlLmZhY2V0cyAmJiBtYWluU3ViUmVzcG9uc2UuZmFjZXRzW2RmYWNldF0pIHx8IHt9O1xuXG4gICAgICAgIHNlbGYuZGlzanVuY3RpdmVGYWNldHNbcG9zaXRpb25dID0ge1xuICAgICAgICAgIG5hbWU6IGRmYWNldCxcbiAgICAgICAgICBkYXRhOiBtZXJnZU51bWVyaWNNYXgoZGF0YUZyb21NYWluUmVxdWVzdCwgZmFjZXRSZXN1bHRzKSxcbiAgICAgICAgICBleGhhdXN0aXZlOiByZXN1bHQuZXhoYXVzdGl2ZUZhY2V0c0NvdW50LFxuICAgICAgICB9O1xuICAgICAgICBhc3NpZ25GYWNldFN0YXRzKFxuICAgICAgICAgIHNlbGYuZGlzanVuY3RpdmVGYWNldHNbcG9zaXRpb25dLFxuICAgICAgICAgIHJlc3VsdC5mYWNldHNfc3RhdHMsXG4gICAgICAgICAgZGZhY2V0XG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKHN0YXRlLmRpc2p1bmN0aXZlRmFjZXRzUmVmaW5lbWVudHNbZGZhY2V0XSkge1xuICAgICAgICAgIHN0YXRlLmRpc2p1bmN0aXZlRmFjZXRzUmVmaW5lbWVudHNbZGZhY2V0XS5mb3JFYWNoKGZ1bmN0aW9uIChcbiAgICAgICAgICAgIHJlZmluZW1lbnRWYWx1ZVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgLy8gYWRkIHRoZSBkaXNqdW5jdGl2ZSByZWZpbmVtZW50cyBpZiBpdCBpcyBubyBtb3JlIHJldHJpZXZlZFxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAhc2VsZi5kaXNqdW5jdGl2ZUZhY2V0c1twb3NpdGlvbl0uZGF0YVtyZWZpbmVtZW50VmFsdWVdICYmXG4gICAgICAgICAgICAgIHN0YXRlLmRpc2p1bmN0aXZlRmFjZXRzUmVmaW5lbWVudHNbZGZhY2V0XS5pbmRleE9mKFxuICAgICAgICAgICAgICAgIHVuZXNjYXBlRmFjZXRWYWx1ZShyZWZpbmVtZW50VmFsdWUpXG4gICAgICAgICAgICAgICkgPiAtMVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIHNlbGYuZGlzanVuY3RpdmVGYWNldHNbcG9zaXRpb25dLmRhdGFbcmVmaW5lbWVudFZhbHVlXSA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBuZXh0RGlzanVuY3RpdmVSZXN1bHQrKztcbiAgfSk7XG5cbiAgLy8gaWYgd2UgaGF2ZSBzb21lIHBhcmVudCBsZXZlbCB2YWx1ZXMgZm9yIGhpZXJhcmNoaWNhbCBmYWNldHMsIG1lcmdlIHRoZW1cbiAgc3RhdGUuZ2V0UmVmaW5lZEhpZXJhcmNoaWNhbEZhY2V0cygpLmZvckVhY2goZnVuY3Rpb24gKHJlZmluZWRGYWNldCkge1xuICAgIHZhciBoaWVyYXJjaGljYWxGYWNldCA9IHN0YXRlLmdldEhpZXJhcmNoaWNhbEZhY2V0QnlOYW1lKHJlZmluZWRGYWNldCk7XG4gICAgdmFyIHNlcGFyYXRvciA9IHN0YXRlLl9nZXRIaWVyYXJjaGljYWxGYWNldFNlcGFyYXRvcihoaWVyYXJjaGljYWxGYWNldCk7XG5cbiAgICB2YXIgY3VycmVudFJlZmluZW1lbnQgPSBzdGF0ZS5nZXRIaWVyYXJjaGljYWxSZWZpbmVtZW50KHJlZmluZWRGYWNldCk7XG4gICAgLy8gaWYgd2UgYXJlIGFscmVhZHkgYXQgYSByb290IHJlZmluZW1lbnQgKG9yIG5vIHJlZmluZW1lbnQgYXQgYWxsKSwgdGhlcmUgaXMgbm9cbiAgICAvLyByb290IGxldmVsIHZhbHVlcyByZXF1ZXN0XG4gICAgaWYgKFxuICAgICAgY3VycmVudFJlZmluZW1lbnQubGVuZ3RoID09PSAwIHx8XG4gICAgICBjdXJyZW50UmVmaW5lbWVudFswXS5zcGxpdChzZXBhcmF0b3IpLmxlbmd0aCA8IDJcbiAgICApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByZXN1bHRzLnNsaWNlKG5leHREaXNqdW5jdGl2ZVJlc3VsdCkuZm9yRWFjaChmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICB2YXIgZmFjZXRzID0gcmVzdWx0ICYmIHJlc3VsdC5mYWNldHMgPyByZXN1bHQuZmFjZXRzIDoge307XG5cbiAgICAgIE9iamVjdC5rZXlzKGZhY2V0cykuZm9yRWFjaChmdW5jdGlvbiAoZGZhY2V0KSB7XG4gICAgICAgIHZhciBmYWNldFJlc3VsdHMgPSBmYWNldHNbZGZhY2V0XTtcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gZmluZEluZGV4KHN0YXRlLmhpZXJhcmNoaWNhbEZhY2V0cywgZnVuY3Rpb24gKGYpIHtcbiAgICAgICAgICByZXR1cm4gZi5uYW1lID09PSBoaWVyYXJjaGljYWxGYWNldC5uYW1lO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGF0dHJpYnV0ZUluZGV4ID0gZmluZEluZGV4KFxuICAgICAgICAgIHNlbGYuaGllcmFyY2hpY2FsRmFjZXRzW3Bvc2l0aW9uXSxcbiAgICAgICAgICBmdW5jdGlvbiAoZikge1xuICAgICAgICAgICAgcmV0dXJuIGYuYXR0cmlidXRlID09PSBkZmFjZXQ7XG4gICAgICAgICAgfVxuICAgICAgICApO1xuXG4gICAgICAgIC8vIHByZXZpb3VzIHJlZmluZW1lbnRzIGFuZCBubyByZXN1bHRzIHNvIG5vdCBhYmxlIHRvIGZpbmQgaXRcbiAgICAgICAgaWYgKGF0dHJpYnV0ZUluZGV4ID09PSAtMSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHdoZW4gd2UgYWx3YXlzIGdldCByb290IGxldmVscywgaWYgdGhlIGhpdHMgcmVmaW5lbWVudCBpcyBgYmVlcnMgPiBJUEFgIChjb3VudDogNSksXG4gICAgICAgIC8vIHRoZW4gdGhlIGRpc2p1bmN0aXZlIHZhbHVlcyB3aWxsIGJlIGBiZWVyc2AgKGNvdW50OiAxMDApLFxuICAgICAgICAvLyBidXQgd2UgZG8gbm90IHdhbnQgdG8gZGlzcGxheVxuICAgICAgICAvLyAgIHwgYmVlcnMgKDEwMClcbiAgICAgICAgLy8gICAgID4gSVBBICg1KVxuICAgICAgICAvLyBXZSB3YW50XG4gICAgICAgIC8vICAgfCBiZWVycyAoNSlcbiAgICAgICAgLy8gICAgID4gSVBBICg1KVxuICAgICAgICAvLyBATUFKT1I6IHJlbW92ZSB0aGlzIGxlZ2FjeSBiZWhhdmlvdXIgaW4gbmV4dCBtYWpvciB2ZXJzaW9uXG4gICAgICAgIHZhciBkZWZhdWx0RGF0YSA9IHt9O1xuXG4gICAgICAgIGlmIChcbiAgICAgICAgICBjdXJyZW50UmVmaW5lbWVudC5sZW5ndGggPiAwICYmXG4gICAgICAgICAgIXNlbGYucGVyc2lzdEhpZXJhcmNoaWNhbFJvb3RDb3VudFxuICAgICAgICApIHtcbiAgICAgICAgICB2YXIgcm9vdCA9IGN1cnJlbnRSZWZpbmVtZW50WzBdLnNwbGl0KHNlcGFyYXRvcilbMF07XG4gICAgICAgICAgZGVmYXVsdERhdGFbcm9vdF0gPVxuICAgICAgICAgICAgc2VsZi5oaWVyYXJjaGljYWxGYWNldHNbcG9zaXRpb25dW2F0dHJpYnV0ZUluZGV4XS5kYXRhW3Jvb3RdO1xuICAgICAgICB9XG5cbiAgICAgICAgc2VsZi5oaWVyYXJjaGljYWxGYWNldHNbcG9zaXRpb25dW2F0dHJpYnV0ZUluZGV4XS5kYXRhID0gZGVmYXVsdHNQdXJlKFxuICAgICAgICAgIGRlZmF1bHREYXRhLFxuICAgICAgICAgIGZhY2V0UmVzdWx0cyxcbiAgICAgICAgICBzZWxmLmhpZXJhcmNoaWNhbEZhY2V0c1twb3NpdGlvbl1bYXR0cmlidXRlSW5kZXhdLmRhdGFcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuXG4gICAgICBuZXh0RGlzanVuY3RpdmVSZXN1bHQrKztcbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gYWRkIHRoZSBleGNsdWRlc1xuICBPYmplY3Qua2V5cyhzdGF0ZS5mYWNldHNFeGNsdWRlcykuZm9yRWFjaChmdW5jdGlvbiAoZmFjZXROYW1lKSB7XG4gICAgdmFyIGV4Y2x1ZGVzID0gc3RhdGUuZmFjZXRzRXhjbHVkZXNbZmFjZXROYW1lXTtcbiAgICB2YXIgcG9zaXRpb24gPSBmYWNldHNJbmRpY2VzW2ZhY2V0TmFtZV07XG5cbiAgICBzZWxmLmZhY2V0c1twb3NpdGlvbl0gPSB7XG4gICAgICBuYW1lOiBmYWNldE5hbWUsXG4gICAgICBkYXRhOiBtYWluRmFjZXRzW2ZhY2V0TmFtZV0sXG4gICAgICBleGhhdXN0aXZlOiBtYWluU3ViUmVzcG9uc2UuZXhoYXVzdGl2ZUZhY2V0c0NvdW50LFxuICAgIH07XG4gICAgZXhjbHVkZXMuZm9yRWFjaChmdW5jdGlvbiAoZmFjZXRWYWx1ZSkge1xuICAgICAgc2VsZi5mYWNldHNbcG9zaXRpb25dID0gc2VsZi5mYWNldHNbcG9zaXRpb25dIHx8IHsgbmFtZTogZmFjZXROYW1lIH07XG4gICAgICBzZWxmLmZhY2V0c1twb3NpdGlvbl0uZGF0YSA9IHNlbGYuZmFjZXRzW3Bvc2l0aW9uXS5kYXRhIHx8IHt9O1xuICAgICAgc2VsZi5mYWNldHNbcG9zaXRpb25dLmRhdGFbZmFjZXRWYWx1ZV0gPSAwO1xuICAgIH0pO1xuICB9KTtcblxuICAvKipcbiAgICogQHR5cGUge0FycmF5fVxuICAgKi9cbiAgdGhpcy5oaWVyYXJjaGljYWxGYWNldHMgPSB0aGlzLmhpZXJhcmNoaWNhbEZhY2V0cy5tYXAoXG4gICAgZ2VuZXJhdGVIaWVyYXJjaGljYWxUcmVlKHN0YXRlKVxuICApO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7QXJyYXl9XG4gICAqL1xuICB0aGlzLmZhY2V0cyA9IGNvbXBhY3QodGhpcy5mYWNldHMpO1xuICAvKipcbiAgICogQHR5cGUge0FycmF5fVxuICAgKi9cbiAgdGhpcy5kaXNqdW5jdGl2ZUZhY2V0cyA9IGNvbXBhY3QodGhpcy5kaXNqdW5jdGl2ZUZhY2V0cyk7XG5cbiAgdGhpcy5fc3RhdGUgPSBzdGF0ZTtcbn1cblxuLyoqXG4gKiBHZXQgYSBmYWNldCBvYmplY3Qgd2l0aCBpdHMgbmFtZVxuICogQGRlcHJlY2F0ZWRcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIG5hbWUgb2YgdGhlIGZhY2V0ZWQgYXR0cmlidXRlXG4gKiBAcmV0dXJuIHtTZWFyY2hSZXN1bHRzLkZhY2V0fSB0aGUgZmFjZXQgb2JqZWN0XG4gKi9cblNlYXJjaFJlc3VsdHMucHJvdG90eXBlLmdldEZhY2V0QnlOYW1lID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgZnVuY3Rpb24gcHJlZGljYXRlKGZhY2V0KSB7XG4gICAgcmV0dXJuIGZhY2V0Lm5hbWUgPT09IG5hbWU7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIGZpbmQodGhpcy5mYWNldHMsIHByZWRpY2F0ZSkgfHxcbiAgICBmaW5kKHRoaXMuZGlzanVuY3RpdmVGYWNldHMsIHByZWRpY2F0ZSkgfHxcbiAgICBmaW5kKHRoaXMuaGllcmFyY2hpY2FsRmFjZXRzLCBwcmVkaWNhdGUpXG4gICk7XG59O1xuXG4vKipcbiAqIEdldCB0aGUgZmFjZXQgdmFsdWVzIG9mIGEgc3BlY2lmaWVkIGF0dHJpYnV0ZSBmcm9tIGEgU2VhcmNoUmVzdWx0cyBvYmplY3QuXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtTZWFyY2hSZXN1bHRzfSByZXN1bHRzIHRoZSBzZWFyY2ggcmVzdWx0cyB0byBzZWFyY2ggaW5cbiAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyaWJ1dGUgbmFtZSBvZiB0aGUgZmFjZXRlZCBhdHRyaWJ1dGUgdG8gc2VhcmNoIGZvclxuICogQHJldHVybiB7YXJyYXl8b2JqZWN0fSBmYWNldCB2YWx1ZXMuIEZvciB0aGUgaGllcmFyY2hpY2FsIGZhY2V0cyBpdCBpcyBhbiBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGV4dHJhY3ROb3JtYWxpemVkRmFjZXRWYWx1ZXMocmVzdWx0cywgYXR0cmlidXRlKSB7XG4gIGZ1bmN0aW9uIHByZWRpY2F0ZShmYWNldCkge1xuICAgIHJldHVybiBmYWNldC5uYW1lID09PSBhdHRyaWJ1dGU7XG4gIH1cblxuICBpZiAocmVzdWx0cy5fc3RhdGUuaXNDb25qdW5jdGl2ZUZhY2V0KGF0dHJpYnV0ZSkpIHtcbiAgICB2YXIgZmFjZXQgPSBmaW5kKHJlc3VsdHMuZmFjZXRzLCBwcmVkaWNhdGUpO1xuICAgIGlmICghZmFjZXQpIHJldHVybiBbXTtcblxuICAgIHJldHVybiBPYmplY3Qua2V5cyhmYWNldC5kYXRhKS5tYXAoZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGVzY2FwZUZhY2V0VmFsdWUobmFtZSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICBlc2NhcGVkVmFsdWU6IHZhbHVlLFxuICAgICAgICBjb3VudDogZmFjZXQuZGF0YVtuYW1lXSxcbiAgICAgICAgaXNSZWZpbmVkOiByZXN1bHRzLl9zdGF0ZS5pc0ZhY2V0UmVmaW5lZChhdHRyaWJ1dGUsIHZhbHVlKSxcbiAgICAgICAgaXNFeGNsdWRlZDogcmVzdWx0cy5fc3RhdGUuaXNFeGNsdWRlUmVmaW5lZChhdHRyaWJ1dGUsIG5hbWUpLFxuICAgICAgfTtcbiAgICB9KTtcbiAgfSBlbHNlIGlmIChyZXN1bHRzLl9zdGF0ZS5pc0Rpc2p1bmN0aXZlRmFjZXQoYXR0cmlidXRlKSkge1xuICAgIHZhciBkaXNqdW5jdGl2ZUZhY2V0ID0gZmluZChyZXN1bHRzLmRpc2p1bmN0aXZlRmFjZXRzLCBwcmVkaWNhdGUpO1xuICAgIGlmICghZGlzanVuY3RpdmVGYWNldCkgcmV0dXJuIFtdO1xuXG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKGRpc2p1bmN0aXZlRmFjZXQuZGF0YSkubWFwKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICB2YXIgdmFsdWUgPSBlc2NhcGVGYWNldFZhbHVlKG5hbWUpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgZXNjYXBlZFZhbHVlOiB2YWx1ZSxcbiAgICAgICAgY291bnQ6IGRpc2p1bmN0aXZlRmFjZXQuZGF0YVtuYW1lXSxcbiAgICAgICAgaXNSZWZpbmVkOiByZXN1bHRzLl9zdGF0ZS5pc0Rpc2p1bmN0aXZlRmFjZXRSZWZpbmVkKGF0dHJpYnV0ZSwgdmFsdWUpLFxuICAgICAgfTtcbiAgICB9KTtcbiAgfSBlbHNlIGlmIChyZXN1bHRzLl9zdGF0ZS5pc0hpZXJhcmNoaWNhbEZhY2V0KGF0dHJpYnV0ZSkpIHtcbiAgICB2YXIgaGllcmFyY2hpY2FsRmFjZXRWYWx1ZXMgPSBmaW5kKHJlc3VsdHMuaGllcmFyY2hpY2FsRmFjZXRzLCBwcmVkaWNhdGUpO1xuICAgIGlmICghaGllcmFyY2hpY2FsRmFjZXRWYWx1ZXMpIHJldHVybiBoaWVyYXJjaGljYWxGYWNldFZhbHVlcztcblxuICAgIHZhciBoaWVyYXJjaGljYWxGYWNldCA9XG4gICAgICByZXN1bHRzLl9zdGF0ZS5nZXRIaWVyYXJjaGljYWxGYWNldEJ5TmFtZShhdHRyaWJ1dGUpO1xuICAgIHZhciBzZXBhcmF0b3IgPVxuICAgICAgcmVzdWx0cy5fc3RhdGUuX2dldEhpZXJhcmNoaWNhbEZhY2V0U2VwYXJhdG9yKGhpZXJhcmNoaWNhbEZhY2V0KTtcbiAgICB2YXIgY3VycmVudFJlZmluZW1lbnQgPSB1bmVzY2FwZUZhY2V0VmFsdWUoXG4gICAgICByZXN1bHRzLl9zdGF0ZS5nZXRIaWVyYXJjaGljYWxSZWZpbmVtZW50KGF0dHJpYnV0ZSlbMF0gfHwgJydcbiAgICApO1xuXG4gICAgaWYgKGN1cnJlbnRSZWZpbmVtZW50LmluZGV4T2YoaGllcmFyY2hpY2FsRmFjZXQucm9vdFBhdGgpID09PSAwKSB7XG4gICAgICBjdXJyZW50UmVmaW5lbWVudCA9IGN1cnJlbnRSZWZpbmVtZW50LnJlcGxhY2UoXG4gICAgICAgIGhpZXJhcmNoaWNhbEZhY2V0LnJvb3RQYXRoICsgc2VwYXJhdG9yLFxuICAgICAgICAnJ1xuICAgICAgKTtcbiAgICB9XG5cbiAgICB2YXIgY3VycmVudFJlZmluZW1lbnRTcGxpdCA9IGN1cnJlbnRSZWZpbmVtZW50LnNwbGl0KHNlcGFyYXRvcik7XG4gICAgY3VycmVudFJlZmluZW1lbnRTcGxpdC51bnNoaWZ0KGF0dHJpYnV0ZSk7XG5cbiAgICBzZXRJc1JlZmluZWQoaGllcmFyY2hpY2FsRmFjZXRWYWx1ZXMsIGN1cnJlbnRSZWZpbmVtZW50U3BsaXQsIDApO1xuXG4gICAgcmV0dXJuIGhpZXJhcmNoaWNhbEZhY2V0VmFsdWVzO1xuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBTZXQgdGhlIGlzUmVmaW5lZCBvZiBhIGhpZXJhcmNoaWNhbCBmYWNldCByZXN1bHQgYmFzZWQgb24gdGhlIGN1cnJlbnQgc3RhdGUuXG4gKiBAcGFyYW0ge1NlYXJjaFJlc3VsdHMuSGllcmFyY2hpY2FsRmFjZXR9IGl0ZW0gSGllcmFyY2hpY2FsIGZhY2V0IHRvIGZpeFxuICogQHBhcmFtIHtzdHJpbmdbXX0gY3VycmVudFJlZmluZW1lbnQgYXJyYXkgb2YgcGFydHMgb2YgdGhlIGN1cnJlbnQgaGllcmFyY2hpY2FsIHJlZmluZW1lbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBkZXB0aCByZWN1cnNpb24gZGVwdGggaW4gdGhlIGN1cnJlbnRSZWZpbmVtZW50XG4gKiBAcmV0dXJuIHt1bmRlZmluZWR9IGZ1bmN0aW9uIG11dGF0ZXMgdGhlIGl0ZW1cbiAqL1xuZnVuY3Rpb24gc2V0SXNSZWZpbmVkKGl0ZW0sIGN1cnJlbnRSZWZpbmVtZW50LCBkZXB0aCkge1xuICBpdGVtLmlzUmVmaW5lZCA9XG4gICAgaXRlbS5uYW1lID09PSAoY3VycmVudFJlZmluZW1lbnRbZGVwdGhdICYmIGN1cnJlbnRSZWZpbmVtZW50W2RlcHRoXS50cmltKCkpO1xuICBpZiAoaXRlbS5kYXRhKSB7XG4gICAgaXRlbS5kYXRhLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICBzZXRJc1JlZmluZWQoY2hpbGQsIGN1cnJlbnRSZWZpbmVtZW50LCBkZXB0aCArIDEpO1xuICAgIH0pO1xuICB9XG59XG5cbi8qKlxuICogU29ydCBub2RlcyBvZiBhIGhpZXJhcmNoaWNhbCBvciBkaXNqdW5jdGl2ZSBmYWNldCByZXN1bHRzXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtmdW5jdGlvbn0gc29ydEZuIHNvcnQgZnVuY3Rpb24gdG8gYXBwbHlcbiAqIEBwYXJhbSB7SGllcmFyY2hpY2FsRmFjZXR8QXJyYXl9IG5vZGUgbm9kZSB1cG9uIHdoaWNoIHdlIHdhbnQgdG8gYXBwbHkgdGhlIHNvcnRcbiAqIEBwYXJhbSB7c3RyaW5nW119IG5hbWVzIGF0dHJpYnV0ZSBuYW1lc1xuICogQHBhcmFtIHtudW1iZXJ9IFtsZXZlbD0wXSBjdXJyZW50IGluZGV4IGluIHRoZSBuYW1lcyBhcnJheVxuICogQHJldHVybiB7SGllcmFyY2hpY2FsRmFjZXR8QXJyYXl9IHNvcnRlZCBub2RlXG4gKi9cbmZ1bmN0aW9uIHJlY1NvcnQoc29ydEZuLCBub2RlLCBuYW1lcywgbGV2ZWwpIHtcbiAgbGV2ZWwgPSBsZXZlbCB8fCAwO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KG5vZGUpKSB7XG4gICAgcmV0dXJuIHNvcnRGbihub2RlLCBuYW1lc1tsZXZlbF0pO1xuICB9XG5cbiAgaWYgKCFub2RlLmRhdGEgfHwgbm9kZS5kYXRhLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBub2RlO1xuICB9XG5cbiAgdmFyIGNoaWxkcmVuID0gbm9kZS5kYXRhLm1hcChmdW5jdGlvbiAoY2hpbGROb2RlKSB7XG4gICAgcmV0dXJuIHJlY1NvcnQoc29ydEZuLCBjaGlsZE5vZGUsIG5hbWVzLCBsZXZlbCArIDEpO1xuICB9KTtcbiAgdmFyIHNvcnRlZENoaWxkcmVuID0gc29ydEZuKGNoaWxkcmVuLCBuYW1lc1tsZXZlbF0pO1xuICB2YXIgbmV3Tm9kZSA9IGRlZmF1bHRzUHVyZSh7IGRhdGE6IHNvcnRlZENoaWxkcmVuIH0sIG5vZGUpO1xuICByZXR1cm4gbmV3Tm9kZTtcbn1cblxuU2VhcmNoUmVzdWx0cy5ERUZBVUxUX1NPUlQgPSBbJ2lzUmVmaW5lZDpkZXNjJywgJ2NvdW50OmRlc2MnLCAnbmFtZTphc2MnXTtcblxuZnVuY3Rpb24gdmFuaWxsYVNvcnRGbihvcmRlciwgZGF0YSkge1xuICByZXR1cm4gZGF0YS5zb3J0KG9yZGVyKTtcbn1cblxuLyoqXG4gKiBAdHlwZWRlZiBGYWNldE9yZGVyaW5nXG4gKiBAdHlwZSB7T2JqZWN0fVxuICogQHByb3BlcnR5IHtzdHJpbmdbXX0gW29yZGVyXVxuICogQHByb3BlcnR5IHsnY291bnQnIHwgJ2FscGhhJyB8ICdoaWRkZW4nfSBbc29ydFJlbWFpbmluZ0J5XVxuICovXG5cbi8qKlxuICogU29ydHMgZmFjZXQgYXJyYXlzIHZpYSB0aGVpciBmYWNldCBvcmRlcmluZ1xuICogQHBhcmFtIHtBcnJheX0gZmFjZXRWYWx1ZXMgdGhlIHZhbHVlc1xuICogQHBhcmFtIHtGYWNldE9yZGVyaW5nfSBmYWNldE9yZGVyaW5nIHRoZSBvcmRlcmluZ1xuICogQHJldHVybnMge0FycmF5fSB0aGUgc29ydGVkIGZhY2V0IHZhbHVlc1xuICovXG5mdW5jdGlvbiBzb3J0VmlhRmFjZXRPcmRlcmluZyhmYWNldFZhbHVlcywgZmFjZXRPcmRlcmluZykge1xuICB2YXIgb3JkZXJlZEZhY2V0cyA9IFtdO1xuICB2YXIgcmVtYWluaW5nRmFjZXRzID0gW107XG4gIHZhciBoaWRlID0gZmFjZXRPcmRlcmluZy5oaWRlIHx8IFtdO1xuICB2YXIgb3JkZXIgPSBmYWNldE9yZGVyaW5nLm9yZGVyIHx8IFtdO1xuXG4gIC8qKlxuICAgKiBhbiBvYmplY3Qgd2l0aCB0aGUga2V5cyBiZWluZyB0aGUgdmFsdWVzIGluIG9yZGVyLCB0aGUgdmFsdWVzIHRoZWlyIGluZGV4OlxuICAgKiBbJ29uZScsICd0d28nXSAtPiB7IG9uZTogMCwgdHdvOiAxIH1cbiAgICovXG4gIHZhciByZXZlcnNlT3JkZXIgPSBvcmRlci5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgbmFtZSwgaSkge1xuICAgIGFjY1tuYW1lXSA9IGk7XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xuXG4gIGZhY2V0VmFsdWVzLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAvLyBoaWVyYXJjaGljYWwgZmFjZXRzIGdldCBzb3J0ZWQgdXNpbmcgdGhlaXIgcmF3IG5hbWVcbiAgICB2YXIgbmFtZSA9IGl0ZW0ucGF0aCB8fCBpdGVtLm5hbWU7XG4gICAgdmFyIGhpZGRlbiA9IGhpZGUuaW5kZXhPZihuYW1lKSA+IC0xO1xuICAgIGlmICghaGlkZGVuICYmIHJldmVyc2VPcmRlcltuYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBvcmRlcmVkRmFjZXRzW3JldmVyc2VPcmRlcltuYW1lXV0gPSBpdGVtO1xuICAgIH0gZWxzZSBpZiAoIWhpZGRlbikge1xuICAgICAgcmVtYWluaW5nRmFjZXRzLnB1c2goaXRlbSk7XG4gICAgfVxuICB9KTtcblxuICBvcmRlcmVkRmFjZXRzID0gb3JkZXJlZEZhY2V0cy5maWx0ZXIoZnVuY3Rpb24gKGZhY2V0KSB7XG4gICAgcmV0dXJuIGZhY2V0O1xuICB9KTtcblxuICB2YXIgc29ydFJlbWFpbmluZ0J5ID0gZmFjZXRPcmRlcmluZy5zb3J0UmVtYWluaW5nQnk7XG4gIHZhciBvcmRlcmluZztcbiAgaWYgKHNvcnRSZW1haW5pbmdCeSA9PT0gJ2hpZGRlbicpIHtcbiAgICByZXR1cm4gb3JkZXJlZEZhY2V0cztcbiAgfSBlbHNlIGlmIChzb3J0UmVtYWluaW5nQnkgPT09ICdhbHBoYScpIHtcbiAgICBvcmRlcmluZyA9IFtcbiAgICAgIFsncGF0aCcsICduYW1lJ10sXG4gICAgICBbJ2FzYycsICdhc2MnXSxcbiAgICBdO1xuICB9IGVsc2Uge1xuICAgIG9yZGVyaW5nID0gW1snY291bnQnXSwgWydkZXNjJ11dO1xuICB9XG5cbiAgcmV0dXJuIG9yZGVyZWRGYWNldHMuY29uY2F0KFxuICAgIG9yZGVyQnkocmVtYWluaW5nRmFjZXRzLCBvcmRlcmluZ1swXSwgb3JkZXJpbmdbMV0pXG4gICk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtTZWFyY2hSZXN1bHRzfSByZXN1bHRzIHRoZSBzZWFyY2ggcmVzdWx0cyBjbGFzc1xuICogQHBhcmFtIHtzdHJpbmd9IGF0dHJpYnV0ZSB0aGUgYXR0cmlidXRlIHRvIHJldHJpZXZlIG9yZGVyaW5nIG9mXG4gKiBAcmV0dXJucyB7RmFjZXRPcmRlcmluZyB8IHVuZGVmaW5lZH0gdGhlIGZhY2V0IG9yZGVyaW5nXG4gKi9cbmZ1bmN0aW9uIGdldEZhY2V0T3JkZXJpbmcocmVzdWx0cywgYXR0cmlidXRlKSB7XG4gIHJldHVybiAoXG4gICAgcmVzdWx0cy5yZW5kZXJpbmdDb250ZW50ICYmXG4gICAgcmVzdWx0cy5yZW5kZXJpbmdDb250ZW50LmZhY2V0T3JkZXJpbmcgJiZcbiAgICByZXN1bHRzLnJlbmRlcmluZ0NvbnRlbnQuZmFjZXRPcmRlcmluZy52YWx1ZXMgJiZcbiAgICByZXN1bHRzLnJlbmRlcmluZ0NvbnRlbnQuZmFjZXRPcmRlcmluZy52YWx1ZXNbYXR0cmlidXRlXVxuICApO1xufVxuXG4vKipcbiAqIEdldCBhIHRoZSBsaXN0IG9mIHZhbHVlcyBmb3IgYSBnaXZlbiBmYWNldCBhdHRyaWJ1dGUuIFRob3NlIHZhbHVlcyBhcmUgc29ydGVkXG4gKiByZWZpbmVtZW50IGZpcnN0LCBkZXNjZW5kaW5nIGNvdW50IChiaWdnZXIgdmFsdWUgb24gdG9wKSwgYW5kIG5hbWUgYXNjZW5kaW5nXG4gKiAoYWxwaGFiZXRpY2FsIG9yZGVyKS4gVGhlIHNvcnQgZm9ybXVsYSBjYW4gb3ZlcnJpZGRlbiB1c2luZyBlaXRoZXIgc3RyaW5nIGJhc2VkXG4gKiBwcmVkaWNhdGVzIG9yIGEgZnVuY3Rpb24uXG4gKlxuICogVGhpcyBtZXRob2Qgd2lsbCByZXR1cm4gYWxsIHRoZSB2YWx1ZXMgcmV0dXJuZWQgYnkgdGhlIEFsZ29saWEgZW5naW5lIHBsdXMgYWxsXG4gKiB0aGUgdmFsdWVzIGFscmVhZHkgcmVmaW5lZC4gVGhpcyBtZWFucyB0aGF0IGl0IGNhbiBoYXBwZW4gdGhhdCB0aGVcbiAqIGBtYXhWYWx1ZXNQZXJGYWNldGAgW2NvbmZpZ3VyYXRpb25dKGh0dHBzOi8vd3d3LmFsZ29saWEuY29tL2RvYy9yZXN0LWFwaS9zZWFyY2gjcGFyYW0tbWF4VmFsdWVzUGVyRmFjZXQpXG4gKiBtaWdodCBub3QgYmUgcmVzcGVjdGVkIGlmIHlvdSBoYXZlIGZhY2V0IHZhbHVlcyB0aGF0IGFyZSBhbHJlYWR5IHJlZmluZWQuXG4gKiBAcGFyYW0ge3N0cmluZ30gYXR0cmlidXRlIGF0dHJpYnV0ZSBuYW1lXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0cyBjb25maWd1cmF0aW9uIG9wdGlvbnMuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLmZhY2V0T3JkZXJpbmddXG4gKiBGb3JjZSB0aGUgdXNlIG9mIGZhY2V0T3JkZXJpbmcgZnJvbSB0aGUgcmVzdWx0IGlmIGEgc29ydEJ5IGlzIHByZXNlbnQuIElmXG4gKiBzb3J0QnkgaXNuJ3QgcHJlc2VudCwgZmFjZXRPcmRlcmluZyB3aWxsIGJlIHVzZWQgYXV0b21hdGljYWxseS5cbiAqIEBwYXJhbSB7QXJyYXkuPHN0cmluZz4gfCBmdW5jdGlvbn0gb3B0cy5zb3J0QnlcbiAqIFdoZW4gdXNpbmcgc3RyaW5ncywgaXQgY29uc2lzdHMgb2ZcbiAqIHRoZSBuYW1lIG9mIHRoZSBbRmFjZXRWYWx1ZV0oI1NlYXJjaFJlc3VsdHMuRmFjZXRWYWx1ZSkgb3IgdGhlXG4gKiBbSGllcmFyY2hpY2FsRmFjZXRdKCNTZWFyY2hSZXN1bHRzLkhpZXJhcmNoaWNhbEZhY2V0KSBhdHRyaWJ1dGVzIHdpdGggdGhlXG4gKiBvcmRlciAoYGFzY2Agb3IgYGRlc2NgKS4gRm9yIGV4YW1wbGUgdG8gb3JkZXIgdGhlIHZhbHVlIGJ5IGNvdW50LCB0aGVcbiAqIGFyZ3VtZW50IHdvdWxkIGJlIGBbJ2NvdW50OmFzYyddYC5cbiAqXG4gKiBJZiBvbmx5IHRoZSBhdHRyaWJ1dGUgbmFtZSBpcyBzcGVjaWZpZWQsIHRoZSBvcmRlcmluZyBkZWZhdWx0cyB0byB0aGUgb25lXG4gKiBzcGVjaWZpZWQgaW4gdGhlIGRlZmF1bHQgdmFsdWUgZm9yIHRoaXMgYXR0cmlidXRlLlxuICpcbiAqIFdoZW4gbm90IHNwZWNpZmllZCwgdGhlIG9yZGVyIGlzXG4gKiBhc2NlbmRpbmcuICBUaGlzIHBhcmFtZXRlciBjYW4gYWxzbyBiZSBhIGZ1bmN0aW9uIHdoaWNoIHRha2VzIHR3byBmYWNldFxuICogdmFsdWVzIGFuZCBzaG91bGQgcmV0dXJuIGEgbnVtYmVyLCAwIGlmIGVxdWFsLCAxIGlmIHRoZSBmaXJzdCBhcmd1bWVudCBpc1xuICogYmlnZ2VyIG9yIC0xIG90aGVyd2lzZS5cbiAqXG4gKiBUaGUgZGVmYXVsdCB2YWx1ZSBmb3IgdGhpcyBhdHRyaWJ1dGUgYFsnaXNSZWZpbmVkOmRlc2MnLCAnY291bnQ6ZGVzYycsICduYW1lOmFzYyddYFxuICogQHJldHVybiB7RmFjZXRWYWx1ZVtdfEhpZXJhcmNoaWNhbEZhY2V0fHVuZGVmaW5lZH0gZGVwZW5kaW5nIG9uIHRoZSB0eXBlIG9mIGZhY2V0IG9mXG4gKiB0aGUgYXR0cmlidXRlIHJlcXVlc3RlZCAoaGllcmFyY2hpY2FsLCBkaXNqdW5jdGl2ZSBvciBjb25qdW5jdGl2ZSlcbiAqIEBleGFtcGxlXG4gKiBoZWxwZXIub24oJ3Jlc3VsdCcsIGZ1bmN0aW9uKGV2ZW50KXtcbiAqICAgLy9nZXQgdmFsdWVzIG9yZGVyZWQgb25seSBieSBuYW1lIGFzY2VuZGluZyB1c2luZyB0aGUgc3RyaW5nIHByZWRpY2F0ZVxuICogICBldmVudC5yZXN1bHRzLmdldEZhY2V0VmFsdWVzKCdjaXR5Jywge3NvcnRCeTogWyduYW1lOmFzYyddfSk7XG4gKiAgIC8vZ2V0IHZhbHVlcyAgb3JkZXJlZCBvbmx5IGJ5IGNvdW50IGFzY2VuZGluZyB1c2luZyBhIGZ1bmN0aW9uXG4gKiAgIGV2ZW50LnJlc3VsdHMuZ2V0RmFjZXRWYWx1ZXMoJ2NpdHknLCB7XG4gKiAgICAgLy8gdGhpcyBpcyBlcXVpdmFsZW50IHRvIFsnY291bnQ6YXNjJ11cbiAqICAgICBzb3J0Qnk6IGZ1bmN0aW9uKGEsIGIpIHtcbiAqICAgICAgIGlmIChhLmNvdW50ID09PSBiLmNvdW50KSByZXR1cm4gMDtcbiAqICAgICAgIGlmIChhLmNvdW50ID4gYi5jb3VudCkgICByZXR1cm4gMTtcbiAqICAgICAgIGlmIChiLmNvdW50ID4gYS5jb3VudCkgICByZXR1cm4gLTE7XG4gKiAgICAgfVxuICogICB9KTtcbiAqIH0pO1xuICovXG5TZWFyY2hSZXN1bHRzLnByb3RvdHlwZS5nZXRGYWNldFZhbHVlcyA9IGZ1bmN0aW9uIChhdHRyaWJ1dGUsIG9wdHMpIHtcbiAgdmFyIGZhY2V0VmFsdWVzID0gZXh0cmFjdE5vcm1hbGl6ZWRGYWNldFZhbHVlcyh0aGlzLCBhdHRyaWJ1dGUpO1xuICBpZiAoIWZhY2V0VmFsdWVzKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIHZhciBvcHRpb25zID0gZGVmYXVsdHNQdXJlKG9wdHMsIHtcbiAgICBzb3J0Qnk6IFNlYXJjaFJlc3VsdHMuREVGQVVMVF9TT1JULFxuICAgIC8vIGlmIG5vIHNvcnRCeSBpcyBnaXZlbiwgYXR0ZW1wdCB0byBzb3J0IGJhc2VkIG9uIGZhY2V0T3JkZXJpbmdcbiAgICAvLyBpZiBpdCBpcyBnaXZlbiwgd2Ugc3RpbGwgYWxsb3cgdG8gc29ydCB2aWEgZmFjZXQgb3JkZXJpbmcgZmlyc3RcbiAgICBmYWNldE9yZGVyaW5nOiAhKG9wdHMgJiYgb3B0cy5zb3J0QnkpLFxuICB9KTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC10aGlzXG4gIHZhciByZXN1bHRzID0gdGhpcztcbiAgdmFyIGF0dHJpYnV0ZXM7XG4gIGlmIChBcnJheS5pc0FycmF5KGZhY2V0VmFsdWVzKSkge1xuICAgIGF0dHJpYnV0ZXMgPSBbYXR0cmlidXRlXTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgY29uZmlnID0gcmVzdWx0cy5fc3RhdGUuZ2V0SGllcmFyY2hpY2FsRmFjZXRCeU5hbWUoZmFjZXRWYWx1ZXMubmFtZSk7XG4gICAgYXR0cmlidXRlcyA9IGNvbmZpZy5hdHRyaWJ1dGVzO1xuICB9XG5cbiAgcmV0dXJuIHJlY1NvcnQoXG4gICAgZnVuY3Rpb24gKGRhdGEsIGZhY2V0TmFtZSkge1xuICAgICAgaWYgKG9wdGlvbnMuZmFjZXRPcmRlcmluZykge1xuICAgICAgICB2YXIgZmFjZXRPcmRlcmluZyA9IGdldEZhY2V0T3JkZXJpbmcocmVzdWx0cywgZmFjZXROYW1lKTtcbiAgICAgICAgaWYgKGZhY2V0T3JkZXJpbmcpIHtcbiAgICAgICAgICByZXR1cm4gc29ydFZpYUZhY2V0T3JkZXJpbmcoZGF0YSwgZmFjZXRPcmRlcmluZyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkob3B0aW9ucy5zb3J0QnkpKSB7XG4gICAgICAgIHZhciBvcmRlciA9IGZvcm1hdFNvcnQob3B0aW9ucy5zb3J0QnksIFNlYXJjaFJlc3VsdHMuREVGQVVMVF9TT1JUKTtcbiAgICAgICAgcmV0dXJuIG9yZGVyQnkoZGF0YSwgb3JkZXJbMF0sIG9yZGVyWzFdKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMuc29ydEJ5ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiB2YW5pbGxhU29ydEZuKG9wdGlvbnMuc29ydEJ5LCBkYXRhKTtcbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ29wdGlvbnMuc29ydEJ5IGlzIG9wdGlvbmFsIGJ1dCBpZiBkZWZpbmVkIGl0IG11c3QgYmUgJyArXG4gICAgICAgICAgJ2VpdGhlciBhbiBhcnJheSBvZiBzdHJpbmcgKHByZWRpY2F0ZXMpIG9yIGEgc29ydGluZyBmdW5jdGlvbidcbiAgICAgICk7XG4gICAgfSxcbiAgICBmYWNldFZhbHVlcyxcbiAgICBhdHRyaWJ1dGVzXG4gICk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGZhY2V0IHN0YXRzIGlmIGF0dHJpYnV0ZSBpcyBkZWZpbmVkIGFuZCB0aGUgZmFjZXQgY29udGFpbnMgc29tZS5cbiAqIE90aGVyd2lzZSByZXR1cm5zIHVuZGVmaW5lZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyaWJ1dGUgbmFtZSBvZiB0aGUgZmFjZXRlZCBhdHRyaWJ1dGVcbiAqIEByZXR1cm4ge29iamVjdH0gVGhlIHN0YXRzIG9mIHRoZSBmYWNldFxuICovXG5TZWFyY2hSZXN1bHRzLnByb3RvdHlwZS5nZXRGYWNldFN0YXRzID0gZnVuY3Rpb24gKGF0dHJpYnV0ZSkge1xuICBpZiAodGhpcy5fc3RhdGUuaXNDb25qdW5jdGl2ZUZhY2V0KGF0dHJpYnV0ZSkpIHtcbiAgICByZXR1cm4gZ2V0RmFjZXRTdGF0c0lmQXZhaWxhYmxlKHRoaXMuZmFjZXRzLCBhdHRyaWJ1dGUpO1xuICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlLmlzRGlzanVuY3RpdmVGYWNldChhdHRyaWJ1dGUpKSB7XG4gICAgcmV0dXJuIGdldEZhY2V0U3RhdHNJZkF2YWlsYWJsZSh0aGlzLmRpc2p1bmN0aXZlRmFjZXRzLCBhdHRyaWJ1dGUpO1xuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gRmFjZXRMaXN0SXRlbVxuICogQHByb3BlcnR5IHtzdHJpbmd9IG5hbWVcbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7RmFjZXRMaXN0SXRlbVtdfSBmYWNldExpc3QgKGhhcyBtb3JlIGl0ZW1zLCBidXQgZW5vdWdoIGZvciBoZXJlKVxuICogQHBhcmFtIHtzdHJpbmd9IGZhY2V0TmFtZSBUaGUgYXR0cmlidXRlIHRvIGxvb2sgZm9yXG4gKiBAcmV0dXJuIHtvYmplY3R8dW5kZWZpbmVkfSBUaGUgc3RhdHMgb2YgdGhlIGZhY2V0XG4gKi9cbmZ1bmN0aW9uIGdldEZhY2V0U3RhdHNJZkF2YWlsYWJsZShmYWNldExpc3QsIGZhY2V0TmFtZSkge1xuICB2YXIgZGF0YSA9IGZpbmQoZmFjZXRMaXN0LCBmdW5jdGlvbiAoZmFjZXQpIHtcbiAgICByZXR1cm4gZmFjZXQubmFtZSA9PT0gZmFjZXROYW1lO1xuICB9KTtcbiAgcmV0dXJuIGRhdGEgJiYgZGF0YS5zdGF0cztcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGFsbCByZWZpbmVtZW50cyBmb3IgYWxsIGZpbHRlcnMgKyB0YWdzLiBJdCBhbHNvIHByb3ZpZGVzXG4gKiBhZGRpdGlvbmFsIGluZm9ybWF0aW9uOiBjb3VudCBhbmQgZXhoYXVzdGl2ZW5lc3MgZm9yIGVhY2ggZmlsdGVyLlxuICpcbiAqIFNlZSB0aGUgW3JlZmluZW1lbnQgdHlwZV0oI1JlZmluZW1lbnQpIGZvciBhbiBleGhhdXN0aXZlIHZpZXcgb2YgdGhlIGF2YWlsYWJsZVxuICogZGF0YS5cbiAqXG4gKiBOb3RlIHRoYXQgZm9yIGEgbnVtZXJpYyByZWZpbmVtZW50LCByZXN1bHRzIGFyZSBncm91cGVkIHBlciBvcGVyYXRvciwgdGhpc1xuICogbWVhbnMgdGhhdCBpdCB3aWxsIHJldHVybiByZXNwb25zZXMgZm9yIG9wZXJhdG9ycyB3aGljaCBhcmUgZW1wdHkuXG4gKlxuICogQHJldHVybiB7QXJyYXkuPFJlZmluZW1lbnQ+fSBhbGwgdGhlIHJlZmluZW1lbnRzXG4gKi9cblNlYXJjaFJlc3VsdHMucHJvdG90eXBlLmdldFJlZmluZW1lbnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9zdGF0ZTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtdGhpc1xuICB2YXIgcmVzdWx0cyA9IHRoaXM7XG4gIHZhciByZXMgPSBbXTtcblxuICBPYmplY3Qua2V5cyhzdGF0ZS5mYWNldHNSZWZpbmVtZW50cykuZm9yRWFjaChmdW5jdGlvbiAoYXR0cmlidXRlTmFtZSkge1xuICAgIHN0YXRlLmZhY2V0c1JlZmluZW1lbnRzW2F0dHJpYnV0ZU5hbWVdLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIHJlcy5wdXNoKFxuICAgICAgICBnZXRSZWZpbmVtZW50KHN0YXRlLCAnZmFjZXQnLCBhdHRyaWJ1dGVOYW1lLCBuYW1lLCByZXN1bHRzLmZhY2V0cylcbiAgICAgICk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIE9iamVjdC5rZXlzKHN0YXRlLmZhY2V0c0V4Y2x1ZGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChhdHRyaWJ1dGVOYW1lKSB7XG4gICAgc3RhdGUuZmFjZXRzRXhjbHVkZXNbYXR0cmlidXRlTmFtZV0uZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgcmVzLnB1c2goXG4gICAgICAgIGdldFJlZmluZW1lbnQoc3RhdGUsICdleGNsdWRlJywgYXR0cmlidXRlTmFtZSwgbmFtZSwgcmVzdWx0cy5mYWNldHMpXG4gICAgICApO1xuICAgIH0pO1xuICB9KTtcblxuICBPYmplY3Qua2V5cyhzdGF0ZS5kaXNqdW5jdGl2ZUZhY2V0c1JlZmluZW1lbnRzKS5mb3JFYWNoKGZ1bmN0aW9uIChcbiAgICBhdHRyaWJ1dGVOYW1lXG4gICkge1xuICAgIHN0YXRlLmRpc2p1bmN0aXZlRmFjZXRzUmVmaW5lbWVudHNbYXR0cmlidXRlTmFtZV0uZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgcmVzLnB1c2goXG4gICAgICAgIGdldFJlZmluZW1lbnQoXG4gICAgICAgICAgc3RhdGUsXG4gICAgICAgICAgJ2Rpc2p1bmN0aXZlJyxcbiAgICAgICAgICBhdHRyaWJ1dGVOYW1lLFxuICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgcmVzdWx0cy5kaXNqdW5jdGl2ZUZhY2V0c1xuICAgICAgICApXG4gICAgICApO1xuICAgIH0pO1xuICB9KTtcblxuICBPYmplY3Qua2V5cyhzdGF0ZS5oaWVyYXJjaGljYWxGYWNldHNSZWZpbmVtZW50cykuZm9yRWFjaChmdW5jdGlvbiAoXG4gICAgYXR0cmlidXRlTmFtZVxuICApIHtcbiAgICBzdGF0ZS5oaWVyYXJjaGljYWxGYWNldHNSZWZpbmVtZW50c1thdHRyaWJ1dGVOYW1lXS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICByZXMucHVzaChcbiAgICAgICAgZ2V0SGllcmFyY2hpY2FsUmVmaW5lbWVudChcbiAgICAgICAgICBzdGF0ZSxcbiAgICAgICAgICBhdHRyaWJ1dGVOYW1lLFxuICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgcmVzdWx0cy5oaWVyYXJjaGljYWxGYWNldHNcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgT2JqZWN0LmtleXMoc3RhdGUubnVtZXJpY1JlZmluZW1lbnRzKS5mb3JFYWNoKGZ1bmN0aW9uIChhdHRyaWJ1dGVOYW1lKSB7XG4gICAgdmFyIG9wZXJhdG9ycyA9IHN0YXRlLm51bWVyaWNSZWZpbmVtZW50c1thdHRyaWJ1dGVOYW1lXTtcbiAgICBPYmplY3Qua2V5cyhvcGVyYXRvcnMpLmZvckVhY2goZnVuY3Rpb24gKG9wZXJhdG9yKSB7XG4gICAgICBvcGVyYXRvcnNbb3BlcmF0b3JdLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHJlcy5wdXNoKHtcbiAgICAgICAgICB0eXBlOiAnbnVtZXJpYycsXG4gICAgICAgICAgYXR0cmlidXRlTmFtZTogYXR0cmlidXRlTmFtZSxcbiAgICAgICAgICBuYW1lOiB2YWx1ZSxcbiAgICAgICAgICBudW1lcmljVmFsdWU6IHZhbHVlLFxuICAgICAgICAgIG9wZXJhdG9yOiBvcGVyYXRvcixcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgc3RhdGUudGFnUmVmaW5lbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgIHJlcy5wdXNoKHsgdHlwZTogJ3RhZycsIGF0dHJpYnV0ZU5hbWU6ICdfdGFncycsIG5hbWU6IG5hbWUgfSk7XG4gIH0pO1xuXG4gIHJldHVybiByZXM7XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IEZhY2V0XG4gKiBAcHJvcGVydHkge3N0cmluZ30gbmFtZVxuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGFcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gZXhoYXVzdGl2ZVxuICovXG5cbi8qKlxuICogQHBhcmFtIHtTZWFyY2hQYXJhbWV0ZXJzfSBzdGF0ZSB0aGUgY3VycmVudCBzdGF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgdGhlIHR5cGUgb2YgdGhlIHJlZmluZW1lbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyaWJ1dGVOYW1lIFRoZSBhdHRyaWJ1dGUgb2YgdGhlIGZhY2V0XG4gKiBAcGFyYW0geyp9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIGZhY2V0XG4gKiBAcGFyYW0ge0ZhY2V0W119IHJlc3VsdHNGYWNldHMgZmFjZXRzIGZyb20gdGhlIHJlc3VsdHNcbiAqIEByZXR1cm4ge1JlZmluZW1lbnR9IHRoZSByZWZpbmVtZW50XG4gKi9cbmZ1bmN0aW9uIGdldFJlZmluZW1lbnQoc3RhdGUsIHR5cGUsIGF0dHJpYnV0ZU5hbWUsIG5hbWUsIHJlc3VsdHNGYWNldHMpIHtcbiAgdmFyIGZhY2V0ID0gZmluZChyZXN1bHRzRmFjZXRzLCBmdW5jdGlvbiAoZikge1xuICAgIHJldHVybiBmLm5hbWUgPT09IGF0dHJpYnV0ZU5hbWU7XG4gIH0pO1xuICB2YXIgY291bnQgPSBmYWNldCAmJiBmYWNldC5kYXRhICYmIGZhY2V0LmRhdGFbbmFtZV0gPyBmYWNldC5kYXRhW25hbWVdIDogMDtcbiAgdmFyIGV4aGF1c3RpdmUgPSAoZmFjZXQgJiYgZmFjZXQuZXhoYXVzdGl2ZSkgfHwgZmFsc2U7XG5cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiB0eXBlLFxuICAgIGF0dHJpYnV0ZU5hbWU6IGF0dHJpYnV0ZU5hbWUsXG4gICAgbmFtZTogbmFtZSxcbiAgICBjb3VudDogY291bnQsXG4gICAgZXhoYXVzdGl2ZTogZXhoYXVzdGl2ZSxcbiAgfTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1NlYXJjaFBhcmFtZXRlcnN9IHN0YXRlIHRoZSBjdXJyZW50IHN0YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gYXR0cmlidXRlTmFtZSB0aGUgYXR0cmlidXRlIG9mIHRoZSBoaWVyYXJjaGljYWwgZmFjZXRcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIHRoZSBuYW1lIG9mIHRoZSBmYWNldFxuICogQHBhcmFtIHtGYWNldFtdfSByZXN1bHRzRmFjZXRzIGZhY2V0cyBmcm9tIHRoZSByZXN1bHRzXG4gKiBAcmV0dXJuIHtIaWVyYXJjaGljYWxGYWNldH0gdGhlIGhpZXJhcmNoaWNhbCBmYWNldFxuICovXG5mdW5jdGlvbiBnZXRIaWVyYXJjaGljYWxSZWZpbmVtZW50KHN0YXRlLCBhdHRyaWJ1dGVOYW1lLCBuYW1lLCByZXN1bHRzRmFjZXRzKSB7XG4gIHZhciBmYWNldERlY2xhcmF0aW9uID0gc3RhdGUuZ2V0SGllcmFyY2hpY2FsRmFjZXRCeU5hbWUoYXR0cmlidXRlTmFtZSk7XG4gIHZhciBzZXBhcmF0b3IgPSBzdGF0ZS5fZ2V0SGllcmFyY2hpY2FsRmFjZXRTZXBhcmF0b3IoZmFjZXREZWNsYXJhdGlvbik7XG4gIHZhciBzcGxpdCA9IG5hbWUuc3BsaXQoc2VwYXJhdG9yKTtcbiAgdmFyIHJvb3RGYWNldCA9IGZpbmQocmVzdWx0c0ZhY2V0cywgZnVuY3Rpb24gKGZhY2V0KSB7XG4gICAgcmV0dXJuIGZhY2V0Lm5hbWUgPT09IGF0dHJpYnV0ZU5hbWU7XG4gIH0pO1xuXG4gIHZhciBmYWNldCA9IHNwbGl0LnJlZHVjZShmdW5jdGlvbiAoaW50ZXJtZWRpYXRlRmFjZXQsIHBhcnQpIHtcbiAgICB2YXIgbmV3RmFjZXQgPVxuICAgICAgaW50ZXJtZWRpYXRlRmFjZXQgJiZcbiAgICAgIGZpbmQoaW50ZXJtZWRpYXRlRmFjZXQuZGF0YSwgZnVuY3Rpb24gKGYpIHtcbiAgICAgICAgcmV0dXJuIGYubmFtZSA9PT0gcGFydDtcbiAgICAgIH0pO1xuICAgIHJldHVybiBuZXdGYWNldCAhPT0gdW5kZWZpbmVkID8gbmV3RmFjZXQgOiBpbnRlcm1lZGlhdGVGYWNldDtcbiAgfSwgcm9vdEZhY2V0KTtcblxuICB2YXIgY291bnQgPSAoZmFjZXQgJiYgZmFjZXQuY291bnQpIHx8IDA7XG4gIHZhciBleGhhdXN0aXZlID0gKGZhY2V0ICYmIGZhY2V0LmV4aGF1c3RpdmUpIHx8IGZhbHNlO1xuICB2YXIgcGF0aCA9IChmYWNldCAmJiBmYWNldC5wYXRoKSB8fCAnJztcblxuICByZXR1cm4ge1xuICAgIHR5cGU6ICdoaWVyYXJjaGljYWwnLFxuICAgIGF0dHJpYnV0ZU5hbWU6IGF0dHJpYnV0ZU5hbWUsXG4gICAgbmFtZTogcGF0aCxcbiAgICBjb3VudDogY291bnQsXG4gICAgZXhoYXVzdGl2ZTogZXhoYXVzdGl2ZSxcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTZWFyY2hSZXN1bHRzO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/algoliasearch-helper/src/SearchResults/index.js\n");

/***/ }),

/***/ "./node_modules/algoliasearch-helper/src/algoliasearch.helper.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar EventEmitter = __webpack_require__(\"./node_modules/@algolia/events/events.js\");\n\nvar DerivedHelper = __webpack_require__(\"./node_modules/algoliasearch-helper/src/DerivedHelper/index.js\");\nvar escapeFacetValue = (__webpack_require__(\"./node_modules/algoliasearch-helper/src/functions/escapeFacetValue.js\").escapeFacetValue);\nvar inherits = __webpack_require__(\"./node_modules/algoliasearch-helper/src/functions/inherits.js\");\nvar merge = __webpack_require__(\"./node_modules/algoliasearch-helper/src/functions/merge.js\");\nvar objectHasKeys = __webpack_require__(\"./node_modules/algoliasearch-helper/src/functions/objectHasKeys.js\");\nvar omit = __webpack_require__(\"./node_modules/algoliasearch-helper/src/functions/omit.js\");\nvar RecommendParameters = __webpack_require__(\"./node_modules/algoliasearch-helper/src/RecommendParameters/index.js\");\nvar RecommendResults = __webpack_require__(\"./node_modules/algoliasearch-helper/src/RecommendResults/index.js\");\nvar requestBuilder = __webpack_require__(\"./node_modules/algoliasearch-helper/src/requestBuilder.js\");\nvar SearchParameters = __webpack_require__(\"./node_modules/algoliasearch-helper/src/SearchParameters/index.js\");\nvar SearchResults = __webpack_require__(\"./node_modules/algoliasearch-helper/src/SearchResults/index.js\");\nvar sortAndMergeRecommendations = __webpack_require__(\"./node_modules/algoliasearch-helper/src/utils/sortAndMergeRecommendations.js\");\nvar version = __webpack_require__(\"./node_modules/algoliasearch-helper/src/version.js\");\n\n/**\n * Event triggered when a parameter is set or updated\n * @event AlgoliaSearchHelper#event:change\n * @property {object} event\n * @property {SearchParameters} event.state the current parameters with the latest changes applied\n * @property {SearchResults} event.results the previous results received from Algolia. `null` before the first request\n * @example\n * helper.on('change', function(event) {\n *   console.log('The parameters have changed');\n * });\n */\n\n/**\n * Event triggered when a main search is sent to Algolia\n * @event AlgoliaSearchHelper#event:search\n * @property {object} event\n * @property {SearchParameters} event.state the parameters used for this search\n * @property {SearchResults} event.results the results from the previous search. `null` if it is the first search.\n * @example\n * helper.on('search', function(event) {\n *   console.log('Search sent');\n * });\n */\n\n/**\n * Event triggered when a search using `searchForFacetValues` is sent to Algolia\n * @event AlgoliaSearchHelper#event:searchForFacetValues\n * @property {object} event\n * @property {SearchParameters} event.state the parameters used for this search it is the first search.\n * @property {string} event.facet the facet searched into\n * @property {string} event.query the query used to search in the facets\n * @example\n * helper.on('searchForFacetValues', function(event) {\n *   console.log('searchForFacetValues sent');\n * });\n */\n\n/**\n * Event triggered when a search using `searchOnce` is sent to Algolia\n * @event AlgoliaSearchHelper#event:searchOnce\n * @property {object} event\n * @property {SearchParameters} event.state the parameters used for this search it is the first search.\n * @example\n * helper.on('searchOnce', function(event) {\n *   console.log('searchOnce sent');\n * });\n */\n\n/**\n * Event triggered when the results are retrieved from Algolia\n * @event AlgoliaSearchHelper#event:result\n * @property {object} event\n * @property {SearchResults} event.results the results received from Algolia\n * @property {SearchParameters} event.state the parameters used to query Algolia. Those might be different from the one in the helper instance (for example if the network is unreliable).\n * @example\n * helper.on('result', function(event) {\n *   console.log('Search results received');\n * });\n */\n\n/**\n * Event triggered when Algolia sends back an error. For example, if an unknown parameter is\n * used, the error can be caught using this event.\n * @event AlgoliaSearchHelper#event:error\n * @property {object} event\n * @property {Error} event.error the error returned by the Algolia.\n * @example\n * helper.on('error', function(event) {\n *   console.log('Houston we got a problem.');\n * });\n */\n\n/**\n * Event triggered when the queue of queries have been depleted (with any result or outdated queries)\n * @event AlgoliaSearchHelper#event:searchQueueEmpty\n * @example\n * helper.on('searchQueueEmpty', function() {\n *   console.log('No more search pending');\n *   // This is received before the result event if we're not expecting new results\n * });\n *\n * helper.search();\n */\n\n/**\n * Initialize a new AlgoliaSearchHelper\n * @class\n * @classdesc The AlgoliaSearchHelper is a class that ease the management of the\n * search. It provides an event based interface for search callbacks:\n *  - change: when the internal search state is changed.\n *    This event contains a {@link SearchParameters} object and the\n *    {@link SearchResults} of the last result if any.\n *  - search: when a search is triggered using the `search()` method.\n *  - result: when the response is retrieved from Algolia and is processed.\n *    This event contains a {@link SearchResults} object and the\n *    {@link SearchParameters} corresponding to this answer.\n *  - error: when the response is an error. This event contains the error returned by the server.\n * @param  {AlgoliaSearch} client an AlgoliaSearch client\n * @param  {string} index the index name to query\n * @param  {SearchParameters | object} options an object defining the initial\n * config of the search. It doesn't have to be a {SearchParameters},\n * just an object containing the properties you need from it.\n * @param {SearchResultsOptions|object} searchResultsOptions an object defining the options to use when creating the search results.\n */\nfunction AlgoliaSearchHelper(client, index, options, searchResultsOptions) {\n  if (typeof client.addAlgoliaAgent === 'function') {\n    client.addAlgoliaAgent('JS Helper (' + version + ')');\n  }\n\n  this.setClient(client);\n  var opts = options || {};\n  opts.index = index;\n  this.state = SearchParameters.make(opts);\n  this.recommendState = new RecommendParameters({\n    params: opts.recommendState,\n  });\n  this.lastResults = null;\n  this.lastRecommendResults = null;\n  this._queryId = 0;\n  this._recommendQueryId = 0;\n  this._lastQueryIdReceived = -1;\n  this._lastRecommendQueryIdReceived = -1;\n  this.derivedHelpers = [];\n  this._currentNbQueries = 0;\n  this._currentNbRecommendQueries = 0;\n  this._searchResultsOptions = searchResultsOptions;\n  this._recommendCache = {};\n}\n\ninherits(AlgoliaSearchHelper, EventEmitter);\n\n/**\n * Start the search with the parameters set in the state. When the\n * method is called, it triggers a `search` event. The results will\n * be available through the `result` event. If an error occurs, an\n * `error` will be fired instead.\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires search\n * @fires result\n * @fires error\n * @chainable\n */\nAlgoliaSearchHelper.prototype.search = function () {\n  this._search({ onlyWithDerivedHelpers: false });\n  return this;\n};\n\nAlgoliaSearchHelper.prototype.searchOnlyWithDerivedHelpers = function () {\n  this._search({ onlyWithDerivedHelpers: true });\n  return this;\n};\n\nAlgoliaSearchHelper.prototype.searchWithComposition = function () {\n  this._runComposition({ onlyWithDerivedHelpers: true });\n  return this;\n};\n/**\n * Sends the recommendation queries set in the state. When the method is\n * called, it triggers a `fetch` event. The results will be available through\n * the `result` event. If an error occurs, an `error` will be fired instead.\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires fetch\n * @fires result\n * @fires error\n * @chainable\n */\nAlgoliaSearchHelper.prototype.recommend = function () {\n  this._recommend();\n  return this;\n};\n\n/**\n * Gets the search query parameters that would be sent to the Algolia Client\n * for the hits\n * @return {object} Query Parameters\n */\nAlgoliaSearchHelper.prototype.getQuery = function () {\n  var state = this.state;\n  return requestBuilder._getHitsSearchParams(state);\n};\n\n/**\n * Start a search using a modified version of the current state. This method does\n * not trigger the helper lifecycle and does not modify the state kept internally\n * by the helper. This second aspect means that the next search call will be the\n * same as a search call before calling searchOnce.\n * @param {object} options can contain all the parameters that can be set to SearchParameters\n * plus the index\n * @param {function} [cb] optional callback executed when the response from the\n * server is back.\n * @return {promise|undefined} if a callback is passed the method returns undefined\n * otherwise it returns a promise containing an object with two keys :\n *  - content with a SearchResults\n *  - state with the state used for the query as a SearchParameters\n * @example\n * // Changing the number of records returned per page to 1\n * // This example uses the callback API\n * var state = helper.searchOnce({hitsPerPage: 1},\n *   function(error, content, state) {\n *     // if an error occurred it will be passed in error, otherwise its value is null\n *     // content contains the results formatted as a SearchResults\n *     // state is the instance of SearchParameters used for this search\n *   });\n * @example\n * // Changing the number of records returned per page to 1\n * // This example uses the promise API\n * var state1 = helper.searchOnce({hitsPerPage: 1})\n *                 .then(promiseHandler);\n *\n * function promiseHandler(res) {\n *   // res contains\n *   // {\n *   //   content : SearchResults\n *   //   state   : SearchParameters (the one used for this specific search)\n *   // }\n * }\n */\nAlgoliaSearchHelper.prototype.searchOnce = function (options, cb) {\n  var tempState = !options\n    ? this.state\n    : this.state.setQueryParameters(options);\n  var queries = requestBuilder._getQueries(tempState.index, tempState);\n  // eslint-disable-next-line consistent-this\n  var self = this;\n\n  this._currentNbQueries++;\n\n  this.emit('searchOnce', {\n    state: tempState,\n  });\n\n  if (cb) {\n    this.client\n      .search(queries)\n      .then(function (content) {\n        self._currentNbQueries--;\n        if (self._currentNbQueries === 0) {\n          self.emit('searchQueueEmpty');\n        }\n\n        cb(null, new SearchResults(tempState, content.results), tempState);\n      })\n      .catch(function (err) {\n        self._currentNbQueries--;\n        if (self._currentNbQueries === 0) {\n          self.emit('searchQueueEmpty');\n        }\n\n        cb(err, null, tempState);\n      });\n\n    return undefined;\n  }\n\n  return this.client.search(queries).then(\n    function (content) {\n      self._currentNbQueries--;\n      if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n      return {\n        content: new SearchResults(tempState, content.results),\n        state: tempState,\n        _originalResponse: content,\n      };\n    },\n    function (e) {\n      self._currentNbQueries--;\n      if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n      throw e;\n    }\n  );\n};\n\n/**\n * Start the search for answers with the parameters set in the state.\n * This method returns a promise.\n * @param {Object} options - the options for answers API call\n * @param {string[]} options.attributesForPrediction - Attributes to use for predictions. If empty, `searchableAttributes` is used instead.\n * @param {string[]} options.queryLanguages - The languages in the query. Currently only supports ['en'].\n * @param {number} options.nbHits - Maximum number of answers to retrieve from the Answers Engine. Cannot be greater than 1000.\n *\n * @return {promise} the answer results\n * @deprecated answers is deprecated and will be replaced with new initiatives\n */\nAlgoliaSearchHelper.prototype.findAnswers = function (options) {\n  // eslint-disable-next-line no-console\n  console.warn('[algoliasearch-helper] answers is no longer supported');\n  var state = this.state;\n  var derivedHelper = this.derivedHelpers[0];\n  if (!derivedHelper) {\n    return Promise.resolve([]);\n  }\n  var derivedState = derivedHelper.getModifiedState(state);\n  var data = merge(\n    {\n      attributesForPrediction: options.attributesForPrediction,\n      nbHits: options.nbHits,\n    },\n    {\n      params: omit(requestBuilder._getHitsSearchParams(derivedState), [\n        'attributesToSnippet',\n        'hitsPerPage',\n        'restrictSearchableAttributes',\n        'snippetEllipsisText',\n      ]),\n    }\n  );\n\n  var errorMessage =\n    'search for answers was called, but this client does not have a function client.initIndex(index).findAnswers';\n  if (typeof this.client.initIndex !== 'function') {\n    throw new Error(errorMessage);\n  }\n  var index = this.client.initIndex(derivedState.index);\n  if (typeof index.findAnswers !== 'function') {\n    throw new Error(errorMessage);\n  }\n  return index.findAnswers(derivedState.query, options.queryLanguages, data);\n};\n\n/**\n * Structure of each result when using\n * [`searchForFacetValues()`](reference.html#AlgoliaSearchHelper#searchForFacetValues)\n * @typedef FacetSearchHit\n * @type {object}\n * @property {string} value the facet value\n * @property {string} highlighted the facet value highlighted with the query string\n * @property {number} count number of occurrence of this facet value\n * @property {boolean} isRefined true if the value is already refined\n */\n\n/**\n * Structure of the data resolved by the\n * [`searchForFacetValues()`](reference.html#AlgoliaSearchHelper#searchForFacetValues)\n * promise.\n * @typedef FacetSearchResult\n * @type {object}\n * @property {FacetSearchHit} facetHits the results for this search for facet values\n * @property {number} processingTimeMS time taken by the query inside the engine\n */\n\n/**\n * Search for facet values based on an query and the name of a faceted attribute. This\n * triggers a search and will return a promise. On top of using the query, it also sends\n * the parameters from the state so that the search is narrowed down to only the possible values.\n *\n * See the description of [FacetSearchResult](reference.html#FacetSearchResult)\n * @param {string} facet the name of the faceted attribute\n * @param {string} query the string query for the search\n * @param {number} [maxFacetHits] the maximum number values returned. Should be > 0 and <= 100\n * @param {object} [userState] the set of custom parameters to use on top of the current state. Setting a property to `undefined` removes\n * it in the generated query.\n * @return {promise.<FacetSearchResult>} the results of the search\n */\nAlgoliaSearchHelper.prototype.searchForFacetValues = function (\n  facet,\n  query,\n  maxFacetHits,\n  userState\n) {\n  var clientHasSFFV =\n    typeof this.client.searchForFacetValues === 'function' &&\n    // v5 has a wrong sffv signature\n    typeof this.client.searchForFacets !== 'function';\n  var clientHasInitIndex = typeof this.client.initIndex === 'function';\n  if (\n    !clientHasSFFV &&\n    !clientHasInitIndex &&\n    typeof this.client.search !== 'function'\n  ) {\n    throw new Error(\n      'search for facet values (searchable) was called, but this client does not have a function client.searchForFacetValues or client.initIndex(index).searchForFacetValues'\n    );\n  }\n\n  var state = this.state.setQueryParameters(userState || {});\n  var isDisjunctive = state.isDisjunctiveFacet(facet);\n  var algoliaQuery = requestBuilder.getSearchForFacetQuery(\n    facet,\n    query,\n    maxFacetHits,\n    state\n  );\n\n  this._currentNbQueries++;\n  // eslint-disable-next-line consistent-this\n  var self = this;\n  var searchForFacetValuesPromise;\n  // newer algoliasearch ^3.27.1 - ~4.0.0\n  if (clientHasSFFV) {\n    searchForFacetValuesPromise = this.client.searchForFacetValues([\n      { indexName: state.index, params: algoliaQuery },\n    ]);\n    // algoliasearch < 3.27.1\n  } else if (clientHasInitIndex) {\n    searchForFacetValuesPromise = this.client\n      .initIndex(state.index)\n      .searchForFacetValues(algoliaQuery);\n    // algoliasearch ~5.0.0\n  } else {\n    // @MAJOR only use client.search\n    delete algoliaQuery.facetName;\n    searchForFacetValuesPromise = this.client\n      .search([\n        {\n          type: 'facet',\n          facet: facet,\n          indexName: state.index,\n          params: algoliaQuery,\n        },\n      ])\n      .then(function processResponse(response) {\n        return response.results[0];\n      });\n  }\n\n  this.emit('searchForFacetValues', {\n    state: state,\n    facet: facet,\n    query: query,\n  });\n\n  return searchForFacetValuesPromise.then(\n    function addIsRefined(content) {\n      self._currentNbQueries--;\n      if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n\n      content = Array.isArray(content) ? content[0] : content;\n\n      content.facetHits.forEach(function (f) {\n        f.escapedValue = escapeFacetValue(f.value);\n        f.isRefined = isDisjunctive\n          ? state.isDisjunctiveFacetRefined(facet, f.escapedValue)\n          : state.isFacetRefined(facet, f.escapedValue);\n      });\n\n      return content;\n    },\n    function (e) {\n      self._currentNbQueries--;\n      if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n      throw e;\n    }\n  );\n};\n\n/**\n * Search for facet values using the Composition API & based on a query and the name of a faceted attribute.\n * This triggers a search and will return a promise. On top of using the query, it also sends\n * the parameters from the state so that the search is narrowed down to only the possible values.\n *\n * See the description of [FacetSearchResult](reference.html#FacetSearchResult)\n * @param {string} facet the name of the faceted attribute\n * @param {string} query the string query for the search\n * @param {number} [maxFacetHits] the maximum number values returned. Should be > 0 and <= 100\n * @param {object} [userState] the set of custom parameters to use on top of the current state. Setting a property to `undefined` removes\n * it in the generated query.\n * @return {promise.<FacetSearchResult>} the results of the search\n */\nAlgoliaSearchHelper.prototype.searchForCompositionFacetValues = function (\n  facet,\n  query,\n  maxFacetHits,\n  userState\n) {\n  if (typeof this.client.searchForFacetValues !== 'function') {\n    throw new Error(\n      'search for facet values (searchable) was called, but this client does not have a function client.searchForFacetValues'\n    );\n  }\n\n  var state = this.state.setQueryParameters(userState || {});\n  var isDisjunctive = state.isDisjunctiveFacet(facet);\n\n  this._currentNbQueries++;\n  // eslint-disable-next-line consistent-this\n  var self = this;\n  var searchForFacetValuesPromise;\n\n  searchForFacetValuesPromise = this.client.searchForFacetValues({\n    compositionID: state.index,\n    facetName: facet,\n    searchForFacetValuesRequest: {\n      params: {\n        query: query,\n        maxFacetHits: maxFacetHits,\n        searchQuery: requestBuilder._getCompositionHitsSearchParams(state),\n      },\n    },\n  });\n\n  this.emit('searchForFacetValues', {\n    state: state,\n    facet: facet,\n    query: query,\n  });\n\n  return searchForFacetValuesPromise.then(\n    function addIsRefined(content) {\n      self._currentNbQueries--;\n      if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n\n      content = content.results[0];\n\n      content.facetHits.forEach(function (f) {\n        f.escapedValue = escapeFacetValue(f.value);\n        f.isRefined = isDisjunctive\n          ? state.isDisjunctiveFacetRefined(facet, f.escapedValue)\n          : state.isFacetRefined(facet, f.escapedValue);\n      });\n\n      return content;\n    },\n    function (e) {\n      self._currentNbQueries--;\n      if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n      throw e;\n    }\n  );\n};\n\n/**\n * Sets the text query used for the search.\n *\n * This method resets the current page to 0.\n * @param  {string} q the user query\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.setQuery = function (q) {\n  this._change({\n    state: this.state.resetPage().setQuery(q),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n/**\n * Remove all the types of refinements except tags. A string can be provided to remove\n * only the refinements of a specific attribute. For more advanced use case, you can\n * provide a function instead. This function should follow the\n * [clearCallback definition](#SearchParameters.clearCallback).\n *\n * This method resets the current page to 0.\n * @param {string} [name] optional name of the facet / attribute on which we want to remove all refinements\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n * @example\n * // Removing all the refinements\n * helper.clearRefinements().search();\n * @example\n * // Removing all the filters on a the category attribute.\n * helper.clearRefinements('category').search();\n * @example\n * // Removing only the exclude filters on the category facet.\n * helper.clearRefinements(function(value, attribute, type) {\n *   return type === 'exclude' && attribute === 'category';\n * }).search();\n */\nAlgoliaSearchHelper.prototype.clearRefinements = function (name) {\n  this._change({\n    state: this.state.resetPage().clearRefinements(name),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n/**\n * Remove all the tag filters.\n *\n * This method resets the current page to 0.\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.clearTags = function () {\n  this._change({\n    state: this.state.resetPage().clearTags(),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n/**\n * Adds a disjunctive filter to a faceted attribute with the `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value (will be converted to string)\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addDisjunctiveFacetRefinement = function (\n  facet,\n  value\n) {\n  this._change({\n    state: this.state.resetPage().addDisjunctiveFacetRefinement(facet, value),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#addDisjunctiveFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.addDisjunctiveRefine = function () {\n  return this.addDisjunctiveFacetRefinement.apply(this, arguments);\n};\n\n/**\n * Adds a refinement on a hierarchical facet. It will throw\n * an exception if the facet is not defined or if the facet\n * is already refined.\n *\n * This method resets the current page to 0.\n * @param {string} facet the facet name\n * @param {string} path the hierarchical facet path\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @throws Error if the facet is not defined or if the facet is refined\n * @chainable\n * @fires change\n */\nAlgoliaSearchHelper.prototype.addHierarchicalFacetRefinement = function (\n  facet,\n  path\n) {\n  this._change({\n    state: this.state.resetPage().addHierarchicalFacetRefinement(facet, path),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n/**\n * Adds a an numeric filter to an attribute with the `operator` and `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} attribute the attribute on which the numeric filter applies\n * @param  {string} operator the operator of the filter\n * @param  {number} value the value of the filter\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addNumericRefinement = function (\n  attribute,\n  operator,\n  value\n) {\n  this._change({\n    state: this.state\n      .resetPage()\n      .addNumericRefinement(attribute, operator, value),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n/**\n * Adds a filter to a faceted attribute with the `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value (will be converted to string)\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addFacetRefinement = function (facet, value) {\n  this._change({\n    state: this.state.resetPage().addFacetRefinement(facet, value),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#addFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.addRefine = function () {\n  return this.addFacetRefinement.apply(this, arguments);\n};\n\n/**\n * Adds a an exclusion filter to a faceted attribute with the `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value (will be converted to string)\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addFacetExclusion = function (facet, value) {\n  this._change({\n    state: this.state.resetPage().addExcludeRefinement(facet, value),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#addFacetExclusion}\n */\nAlgoliaSearchHelper.prototype.addExclude = function () {\n  return this.addFacetExclusion.apply(this, arguments);\n};\n\n/**\n * Adds a tag filter with the `tag` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param {string} tag the tag to add to the filter\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addTag = function (tag) {\n  this._change({\n    state: this.state.resetPage().addTagRefinement(tag),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n/**\n * Adds a \"frequently bought together\" recommendation query.\n *\n * @param {FrequentlyBoughtTogetherQuery} params the parameters for the recommendation\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addFrequentlyBoughtTogether = function (params) {\n  this._recommendChange({\n    state: this.recommendState.addFrequentlyBoughtTogether(params),\n  });\n\n  return this;\n};\n\n/**\n * Adds a \"related products\" recommendation query.\n *\n * @param {RelatedProductsQuery} params the parameters for the recommendation\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addRelatedProducts = function (params) {\n  this._recommendChange({\n    state: this.recommendState.addRelatedProducts(params),\n  });\n\n  return this;\n};\n\n/**\n * Adds a \"trending items\" recommendation query.\n *\n * @param {TrendingItemsQuery} params the parameters for the recommendation\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addTrendingItems = function (params) {\n  this._recommendChange({\n    state: this.recommendState.addTrendingItems(params),\n  });\n\n  return this;\n};\n\n/**\n * Adds a \"trending facets\" recommendation query.\n *\n * @param {TrendingFacetsQuery} params the parameters for the recommendation\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addTrendingFacets = function (params) {\n  this._recommendChange({\n    state: this.recommendState.addTrendingFacets(params),\n  });\n\n  return this;\n};\n\n/**\n * Adds a \"looking similar\" recommendation query.\n *\n * @param {LookingSimilarQuery} params the parameters for the recommendation\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addLookingSimilar = function (params) {\n  this._recommendChange({\n    state: this.recommendState.addLookingSimilar(params),\n  });\n\n  return this;\n};\n\n/**\n * Removes an numeric filter to an attribute with the `operator` and `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * Some parameters are optional, triggering different behavior:\n *  - if the value is not provided, then all the numeric value will be removed for the\n *  specified attribute/operator couple.\n *  - if the operator is not provided either, then all the numeric filter on this attribute\n *  will be removed.\n *\n * This method resets the current page to 0.\n * @param  {string} attribute the attribute on which the numeric filter applies\n * @param  {string} [operator] the operator of the filter\n * @param  {number} [value] the value of the filter\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeNumericRefinement = function (\n  attribute,\n  operator,\n  value\n) {\n  this._change({\n    state: this.state\n      .resetPage()\n      .removeNumericRefinement(attribute, operator, value),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n/**\n * Removes a disjunctive filter to a faceted attribute with the `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * If the value is omitted, then this method will remove all the filters for the\n * attribute.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} [value] the associated value\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeDisjunctiveFacetRefinement = function (\n  facet,\n  value\n) {\n  this._change({\n    state: this.state\n      .resetPage()\n      .removeDisjunctiveFacetRefinement(facet, value),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#removeDisjunctiveFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.removeDisjunctiveRefine = function () {\n  return this.removeDisjunctiveFacetRefinement.apply(this, arguments);\n};\n\n/**\n * Removes the refinement set on a hierarchical facet.\n * @param {string} facet the facet name\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @throws Error if the facet is not defined or if the facet is not refined\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeHierarchicalFacetRefinement = function (\n  facet\n) {\n  this._change({\n    state: this.state.resetPage().removeHierarchicalFacetRefinement(facet),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n/**\n * Removes a filter to a faceted attribute with the `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * If the value is omitted, then this method will remove all the filters for the\n * attribute.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} [value] the associated value\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeFacetRefinement = function (facet, value) {\n  this._change({\n    state: this.state.resetPage().removeFacetRefinement(facet, value),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#removeFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.removeRefine = function () {\n  return this.removeFacetRefinement.apply(this, arguments);\n};\n\n/**\n * Removes an exclusion filter to a faceted attribute with the `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * If the value is omitted, then this method will remove all the filters for the\n * attribute.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} [value] the associated value\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeFacetExclusion = function (facet, value) {\n  this._change({\n    state: this.state.resetPage().removeExcludeRefinement(facet, value),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#removeFacetExclusion}\n */\nAlgoliaSearchHelper.prototype.removeExclude = function () {\n  return this.removeFacetExclusion.apply(this, arguments);\n};\n\n/**\n * Removes a tag filter with the `tag` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param {string} tag tag to remove from the filter\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeTag = function (tag) {\n  this._change({\n    state: this.state.resetPage().removeTagRefinement(tag),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n/**\n * Removes a \"frequently bought together\" recommendation query.\n *\n * @param {number} id identifier of the recommendation widget\n * @returns {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeFrequentlyBoughtTogether = function (id) {\n  this._recommendChange({\n    state: this.recommendState.removeParams(id),\n  });\n\n  return this;\n};\n\n/**\n * Removes a \"related products\" recommendation query.\n *\n * @param {number} id identifier of the recommendation widget\n * @returns {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeRelatedProducts = function (id) {\n  this._recommendChange({\n    state: this.recommendState.removeParams(id),\n  });\n\n  return this;\n};\n\n/**\n * Removes a \"trending items\" recommendation query.\n *\n * @param {number} id identifier of the recommendation widget\n * @returns {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeTrendingItems = function (id) {\n  this._recommendChange({\n    state: this.recommendState.removeParams(id),\n  });\n\n  return this;\n};\n\n/**\n * Removes a \"trending facets\" recommendation query.\n *\n * @param {number} id identifier of the recommendation widget\n * @returns {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeTrendingFacets = function (id) {\n  this._recommendChange({\n    state: this.recommendState.removeParams(id),\n  });\n\n  return this;\n};\n\n/**\n * Removes a \"looking similar\" recommendation query.\n *\n * @param {number} id identifier of the recommendation widget\n * @returns {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeLookingSimilar = function (id) {\n  this._recommendChange({\n    state: this.recommendState.removeParams(id),\n  });\n\n  return this;\n};\n\n/**\n * Adds or removes an exclusion filter to a faceted attribute with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.toggleFacetExclusion = function (facet, value) {\n  this._change({\n    state: this.state.resetPage().toggleExcludeFacetRefinement(facet, value),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#toggleFacetExclusion}\n */\nAlgoliaSearchHelper.prototype.toggleExclude = function () {\n  return this.toggleFacetExclusion.apply(this, arguments);\n};\n\n/**\n * Adds or removes a filter to a faceted attribute with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method can be used for conjunctive, disjunctive and hierarchical filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @throws Error will throw an error if the facet is not declared in the settings of the helper\n * @fires change\n * @chainable\n * @deprecated since version 2.19.0, see {@link AlgoliaSearchHelper#toggleFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.toggleRefinement = function (facet, value) {\n  return this.toggleFacetRefinement(facet, value);\n};\n\n/**\n * Adds or removes a filter to a faceted attribute with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method can be used for conjunctive, disjunctive and hierarchical filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @throws Error will throw an error if the facet is not declared in the settings of the helper\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.toggleFacetRefinement = function (facet, value) {\n  this._change({\n    state: this.state.resetPage().toggleFacetRefinement(facet, value),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#toggleFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.toggleRefine = function () {\n  return this.toggleFacetRefinement.apply(this, arguments);\n};\n\n/**\n * Adds or removes a tag filter with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method resets the current page to 0.\n * @param {string} tag tag to remove or add\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.toggleTag = function (tag) {\n  this._change({\n    state: this.state.resetPage().toggleTagRefinement(tag),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n/**\n * Increments the page number by one.\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n * @example\n * helper.setPage(0).nextPage().getPage();\n * // returns 1\n */\nAlgoliaSearchHelper.prototype.nextPage = function () {\n  var page = this.state.page || 0;\n  return this.setPage(page + 1);\n};\n\n/**\n * Decrements the page number by one.\n * @fires change\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @chainable\n * @example\n * helper.setPage(1).previousPage().getPage();\n * // returns 0\n */\nAlgoliaSearchHelper.prototype.previousPage = function () {\n  var page = this.state.page || 0;\n  return this.setPage(page - 1);\n};\n\n/**\n * @private\n * @param {number} page The page number\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @chainable\n * @fires change\n */\nfunction setCurrentPage(page) {\n  if (page < 0) throw new Error('Page requested below 0.');\n\n  this._change({\n    state: this.state.setPage(page),\n    isPageReset: false,\n  });\n\n  return this;\n}\n\n/**\n * Change the current page\n * @deprecated\n * @param  {number} page The page number\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.setCurrentPage = setCurrentPage;\n\n/**\n * Updates the current page.\n * @function\n * @param  {number} page The page number\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.setPage = setCurrentPage;\n\n/**\n * Updates the name of the index that will be targeted by the query.\n *\n * This method resets the current page to 0.\n * @param {string} name the index name\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.setIndex = function (name) {\n  this._change({\n    state: this.state.resetPage().setIndex(name),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n/**\n * Update a parameter of the search. This method reset the page\n *\n * The complete list of parameters is available on the\n * [Algolia website](https://www.algolia.com/doc/rest#query-an-index).\n * The most commonly used parameters have their own [shortcuts](#query-parameters-shortcuts)\n * or benefit from higher-level APIs (all the kind of filters and facets have their own API)\n *\n * This method resets the current page to 0.\n * @param {string} parameter name of the parameter to update\n * @param {any} value new value of the parameter\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n * @example\n * helper.setQueryParameter('hitsPerPage', 20).search();\n */\nAlgoliaSearchHelper.prototype.setQueryParameter = function (parameter, value) {\n  this._change({\n    state: this.state.resetPage().setQueryParameter(parameter, value),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n/**\n * Set the whole state (warning: will erase previous state)\n * @param {SearchParameters} newState the whole new state\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.setState = function (newState) {\n  this._change({\n    state: SearchParameters.make(newState),\n    isPageReset: false,\n  });\n\n  return this;\n};\n\n/**\n * Override the current state without triggering a change event.\n * Do not use this method unless you know what you are doing. (see the example\n * for a legit use case)\n * @param {SearchParameters} newState the whole new state\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @example\n *  helper.on('change', function(state){\n *    // In this function you might want to find a way to store the state in the url/history\n *    updateYourURL(state)\n *  })\n *  window.onpopstate = function(event){\n *    // This is naive though as you should check if the state is really defined etc.\n *    helper.overrideStateWithoutTriggeringChangeEvent(event.state).search()\n *  }\n * @chainable\n */\nAlgoliaSearchHelper.prototype.overrideStateWithoutTriggeringChangeEvent =\n  function (newState) {\n    this.state = new SearchParameters(newState);\n    return this;\n  };\n\n/**\n * Check if an attribute has any numeric, conjunctive, disjunctive or hierarchical filters.\n * @param {string} attribute the name of the attribute\n * @return {boolean} true if the attribute is filtered by at least one value\n * @example\n * // hasRefinements works with numeric, conjunctive, disjunctive and hierarchical filters\n * helper.hasRefinements('price'); // false\n * helper.addNumericRefinement('price', '>', 100);\n * helper.hasRefinements('price'); // true\n *\n * helper.hasRefinements('color'); // false\n * helper.addFacetRefinement('color', 'blue');\n * helper.hasRefinements('color'); // true\n *\n * helper.hasRefinements('material'); // false\n * helper.addDisjunctiveFacetRefinement('material', 'plastic');\n * helper.hasRefinements('material'); // true\n *\n * helper.hasRefinements('categories'); // false\n * helper.toggleFacetRefinement('categories', 'kitchen > knife');\n * helper.hasRefinements('categories'); // true\n *\n */\nAlgoliaSearchHelper.prototype.hasRefinements = function (attribute) {\n  if (objectHasKeys(this.state.getNumericRefinements(attribute))) {\n    return true;\n  } else if (this.state.isConjunctiveFacet(attribute)) {\n    return this.state.isFacetRefined(attribute);\n  } else if (this.state.isDisjunctiveFacet(attribute)) {\n    return this.state.isDisjunctiveFacetRefined(attribute);\n  } else if (this.state.isHierarchicalFacet(attribute)) {\n    return this.state.isHierarchicalFacetRefined(attribute);\n  }\n\n  // there's currently no way to know that the user did call `addNumericRefinement` at some point\n  // thus we cannot distinguish if there once was a numeric refinement that was cleared\n  // so we will return false in every other situations to be consistent\n  // while what we should do here is throw because we did not find the attribute in any type\n  // of refinement\n  return false;\n};\n\n/**\n * Check if a value is excluded for a specific faceted attribute. If the value\n * is omitted then the function checks if there is any excluding refinements.\n *\n * @param  {string}  facet name of the attribute for used for faceting\n * @param  {string}  [value] optional value. If passed will test that this value\n * is filtering the given facet.\n * @return {boolean} true if refined\n * @example\n * helper.isExcludeRefined('color'); // false\n * helper.isExcludeRefined('color', 'blue') // false\n * helper.isExcludeRefined('color', 'red') // false\n *\n * helper.addFacetExclusion('color', 'red');\n *\n * helper.isExcludeRefined('color'); // true\n * helper.isExcludeRefined('color', 'blue') // false\n * helper.isExcludeRefined('color', 'red') // true\n */\nAlgoliaSearchHelper.prototype.isExcluded = function (facet, value) {\n  return this.state.isExcludeRefined(facet, value);\n};\n\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since 2.4.0, see {@link AlgoliaSearchHelper#hasRefinements}\n */\nAlgoliaSearchHelper.prototype.isDisjunctiveRefined = function (facet, value) {\n  return this.state.isDisjunctiveFacetRefined(facet, value);\n};\n\n/**\n * Check if the string is a currently filtering tag.\n * @param {string} tag tag to check\n * @return {boolean} true if the tag is currently refined\n */\nAlgoliaSearchHelper.prototype.hasTag = function (tag) {\n  return this.state.isTagRefined(tag);\n};\n\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since 2.4.0, see {@link AlgoliaSearchHelper#hasTag}\n */\nAlgoliaSearchHelper.prototype.isTagRefined = function () {\n  return this.hasTagRefinements.apply(this, arguments);\n};\n\n/**\n * Get the name of the currently used index.\n * @return {string} name of the index\n * @example\n * helper.setIndex('highestPrice_products').getIndex();\n * // returns 'highestPrice_products'\n */\nAlgoliaSearchHelper.prototype.getIndex = function () {\n  return this.state.index;\n};\n\nfunction getCurrentPage() {\n  return this.state.page;\n}\n\n/**\n * Get the currently selected page\n * @deprecated\n * @return {number} the current page\n */\nAlgoliaSearchHelper.prototype.getCurrentPage = getCurrentPage;\n/**\n * Get the currently selected page\n * @function\n * @return {number} the current page\n */\nAlgoliaSearchHelper.prototype.getPage = getCurrentPage;\n\n/**\n * Get all the tags currently set to filters the results.\n *\n * @return {string[]} The list of tags currently set.\n */\nAlgoliaSearchHelper.prototype.getTags = function () {\n  return this.state.tagRefinements;\n};\n\n/**\n * Get the list of refinements for a given attribute. This method works with\n * conjunctive, disjunctive, excluding and numerical filters.\n *\n * See also SearchResults#getRefinements\n *\n * @param {string} facetName attribute name used for faceting\n * @return {Array.<FacetRefinement|NumericRefinement>} All Refinement are objects that contain a value, and\n * a type. Numeric also contains an operator.\n * @example\n * helper.addNumericRefinement('price', '>', 100);\n * helper.getRefinements('price');\n * // [\n * //   {\n * //     \"value\": [\n * //       100\n * //     ],\n * //     \"operator\": \">\",\n * //     \"type\": \"numeric\"\n * //   }\n * // ]\n * @example\n * helper.addFacetRefinement('color', 'blue');\n * helper.addFacetExclusion('color', 'red');\n * helper.getRefinements('color');\n * // [\n * //   {\n * //     \"value\": \"blue\",\n * //     \"type\": \"conjunctive\"\n * //   },\n * //   {\n * //     \"value\": \"red\",\n * //     \"type\": \"exclude\"\n * //   }\n * // ]\n * @example\n * helper.addDisjunctiveFacetRefinement('material', 'plastic');\n * // [\n * //   {\n * //     \"value\": \"plastic\",\n * //     \"type\": \"disjunctive\"\n * //   }\n * // ]\n */\nAlgoliaSearchHelper.prototype.getRefinements = function (facetName) {\n  var refinements = [];\n\n  if (this.state.isConjunctiveFacet(facetName)) {\n    var conjRefinements = this.state.getConjunctiveRefinements(facetName);\n\n    conjRefinements.forEach(function (r) {\n      refinements.push({\n        value: r,\n        type: 'conjunctive',\n      });\n    });\n\n    var excludeRefinements = this.state.getExcludeRefinements(facetName);\n\n    excludeRefinements.forEach(function (r) {\n      refinements.push({\n        value: r,\n        type: 'exclude',\n      });\n    });\n  } else if (this.state.isDisjunctiveFacet(facetName)) {\n    var disjunctiveRefinements =\n      this.state.getDisjunctiveRefinements(facetName);\n\n    disjunctiveRefinements.forEach(function (r) {\n      refinements.push({\n        value: r,\n        type: 'disjunctive',\n      });\n    });\n  }\n\n  var numericRefinements = this.state.getNumericRefinements(facetName);\n\n  Object.keys(numericRefinements).forEach(function (operator) {\n    var value = numericRefinements[operator];\n\n    refinements.push({\n      value: value,\n      operator: operator,\n      type: 'numeric',\n    });\n  });\n\n  return refinements;\n};\n\n/**\n * Return the current refinement for the (attribute, operator)\n * @param {string} attribute attribute in the record\n * @param {string} operator operator applied on the refined values\n * @return {Array.<number|number[]>} refined values\n */\nAlgoliaSearchHelper.prototype.getNumericRefinement = function (\n  attribute,\n  operator\n) {\n  return this.state.getNumericRefinement(attribute, operator);\n};\n\n/**\n * Get the current breadcrumb for a hierarchical facet, as an array\n * @param  {string} facetName Hierarchical facet name\n * @return {array.<string>} the path as an array of string\n */\nAlgoliaSearchHelper.prototype.getHierarchicalFacetBreadcrumb = function (\n  facetName\n) {\n  return this.state.getHierarchicalFacetBreadcrumb(facetName);\n};\n\n// /////////// PRIVATE\n\n/**\n * Perform the underlying queries\n * @private\n * @param {object} options options for the query\n * @param {boolean} [options.onlyWithDerivedHelpers=false] if true, only the derived helpers will be queried\n * @return {undefined} does not return anything\n * @fires search\n * @fires result\n * @fires error\n */\nAlgoliaSearchHelper.prototype._search = function (options) {\n  var state = this.state;\n  var states = [];\n  var mainQueries = [];\n\n  if (!options.onlyWithDerivedHelpers) {\n    mainQueries = requestBuilder._getQueries(state.index, state);\n\n    states.push({\n      state: state,\n      queriesCount: mainQueries.length,\n      helper: this,\n    });\n\n    this.emit('search', {\n      state: state,\n      results: this.lastResults,\n    });\n  }\n\n  var derivedQueries = this.derivedHelpers.map(function (derivedHelper) {\n    var derivedState = derivedHelper.getModifiedState(state);\n    var derivedStateQueries = derivedState.index\n      ? requestBuilder._getQueries(derivedState.index, derivedState)\n      : [];\n\n    states.push({\n      state: derivedState,\n      queriesCount: derivedStateQueries.length,\n      helper: derivedHelper,\n    });\n\n    derivedHelper.emit('search', {\n      state: derivedState,\n      results: derivedHelper.lastResults,\n    });\n\n    return derivedStateQueries;\n  });\n\n  var queries = Array.prototype.concat.apply(mainQueries, derivedQueries);\n\n  var queryId = this._queryId++;\n  this._currentNbQueries++;\n\n  if (!queries.length) {\n    return Promise.resolve({ results: [] }).then(\n      this._dispatchAlgoliaResponse.bind(this, states, queryId)\n    );\n  }\n\n  try {\n    this.client\n      .search(queries)\n      .then(this._dispatchAlgoliaResponse.bind(this, states, queryId))\n      .catch(this._dispatchAlgoliaError.bind(this, queryId));\n  } catch (error) {\n    // If we reach this part, we're in an internal error state\n    this.emit('error', {\n      error: error,\n    });\n  }\n\n  return undefined;\n};\n\n/**\n * Perform the underlying queries\n * @private\n * @param {boolean} [options.onlyWithDerivedHelpers=false] if true, only the derived helpers will be queried\n * @return {undefined} does not return anything\n * @fires search\n * @fires result\n * @fires error\n */\nAlgoliaSearchHelper.prototype._runComposition = function () {\n  var state = this.state;\n  var states = [];\n  var mainQueries = [];\n\n  var derivedQueries = this.derivedHelpers.map(function (derivedHelper) {\n    var derivedState = derivedHelper.getModifiedState(state);\n    var derivedStateQueries =\n      requestBuilder._getCompositionQueries(derivedState);\n\n    states.push({\n      state: derivedState,\n      queriesCount: derivedStateQueries.length,\n      helper: derivedHelper,\n    });\n\n    derivedHelper.emit('search', {\n      state: derivedState,\n      results: derivedHelper.lastResults,\n    });\n\n    return derivedStateQueries;\n  });\n\n  var queries = Array.prototype.concat.apply(mainQueries, derivedQueries);\n\n  var queryId = this._queryId++;\n  this._currentNbQueries++;\n\n  if (!queries.length) {\n    return Promise.resolve({ results: [] }).then(\n      this._dispatchAlgoliaResponse.bind(this, states, queryId)\n    );\n  }\n\n  if (queries.length > 1) {\n    throw new Error('Only one query is allowed when using a composition.');\n  }\n\n  var query = queries[0];\n\n  try {\n    this.client\n      .search(query)\n      .then(this._dispatchAlgoliaResponse.bind(this, states, queryId))\n      .catch(this._dispatchAlgoliaError.bind(this, queryId));\n  } catch (error) {\n    // If we reach this part, we're in an internal error state\n    this.emit('error', {\n      error: error,\n    });\n  }\n\n  return undefined;\n};\n\nAlgoliaSearchHelper.prototype._recommend = function () {\n  var searchState = this.state;\n  var recommendState = this.recommendState;\n  var index = this.getIndex();\n  var states = [{ state: recommendState, index: index, helper: this }];\n  var ids = recommendState.params.map(function (param) {\n    return param.$$id;\n  });\n\n  this.emit('fetch', {\n    recommend: {\n      state: recommendState,\n      results: this.lastRecommendResults,\n    },\n  });\n\n  var cache = this._recommendCache;\n\n  var derivedQueries = this.derivedHelpers.map(function (derivedHelper) {\n    var derivedIndex = derivedHelper.getModifiedState(searchState).index;\n    if (!derivedIndex) {\n      return [];\n    }\n\n    // Contrary to what is done when deriving the search state, we don't want to\n    // provide the current recommend state to the derived helper, as it would\n    // inherit unwanted queries. We instead provide an empty recommend state.\n    var derivedState = derivedHelper.getModifiedRecommendState(\n      new RecommendParameters()\n    );\n    states.push({\n      state: derivedState,\n      index: derivedIndex,\n      helper: derivedHelper,\n    });\n\n    ids = Array.prototype.concat.apply(\n      ids,\n      derivedState.params.map(function (param) {\n        return param.$$id;\n      })\n    );\n\n    derivedHelper.emit('fetch', {\n      recommend: {\n        state: derivedState,\n        results: derivedHelper.lastRecommendResults,\n      },\n    });\n\n    return derivedState._buildQueries(derivedIndex, cache);\n  });\n\n  var queries = Array.prototype.concat.apply(\n    this.recommendState._buildQueries(index, cache),\n    derivedQueries\n  );\n\n  if (queries.length === 0) {\n    return;\n  }\n\n  if (\n    queries.length > 0 &&\n    typeof this.client.getRecommendations === 'undefined'\n  ) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      'Please update algoliasearch/lite to the latest version in order to use recommend widgets.'\n    );\n    return;\n  }\n\n  var queryId = this._recommendQueryId++;\n  this._currentNbRecommendQueries++;\n\n  try {\n    this.client\n      .getRecommendations(queries)\n      .then(this._dispatchRecommendResponse.bind(this, queryId, states, ids))\n      .catch(this._dispatchRecommendError.bind(this, queryId));\n  } catch (error) {\n    // If we reach this part, we're in an internal error state\n    this.emit('error', {\n      error: error,\n    });\n  }\n\n  return;\n};\n\n/**\n * Transform the responses as sent by the server and transform them into a user\n * usable object that merge the results of all the batch requests. It will dispatch\n * over the different helper + derived helpers (when there are some).\n * @private\n * @param {array.<{SearchParameters, AlgoliaQueries, AlgoliaSearchHelper}>} states state used to generate the request\n * @param {number} queryId id of the current request\n * @param {object} content content of the response\n * @return {undefined}\n */\nAlgoliaSearchHelper.prototype._dispatchAlgoliaResponse = function (\n  states,\n  queryId,\n  content\n) {\n  // eslint-disable-next-line consistent-this\n  var self = this;\n\n  // @TODO remove the number of outdated queries discarded instead of just one\n\n  if (queryId < this._lastQueryIdReceived) {\n    // Outdated answer\n    return;\n  }\n\n  this._currentNbQueries -= queryId - this._lastQueryIdReceived;\n  this._lastQueryIdReceived = queryId;\n\n  if (this._currentNbQueries === 0) this.emit('searchQueueEmpty');\n\n  var results = content.results.slice();\n  var rawContent = Object.keys(content).reduce(function (value, key) {\n    if (key !== 'results') value[key] = content[key];\n    return value;\n  }, {});\n\n  if (Object.keys(rawContent).length <= 0) {\n    rawContent = undefined;\n  }\n\n  states.forEach(function (s) {\n    var state = s.state;\n    var queriesCount = s.queriesCount;\n    var helper = s.helper;\n    var specificResults = results.splice(0, queriesCount);\n\n    if (!state.index) {\n      helper.emit('result', {\n        results: null,\n        state: state,\n      });\n      return;\n    }\n\n    helper.lastResults = new SearchResults(\n      state,\n      specificResults,\n      self._searchResultsOptions\n    );\n    if (rawContent !== undefined) helper.lastResults._rawContent = rawContent;\n\n    helper.emit('result', {\n      results: helper.lastResults,\n      state: state,\n    });\n  });\n};\n\nAlgoliaSearchHelper.prototype._dispatchRecommendResponse = function (\n  queryId,\n  states,\n  ids,\n  content\n) {\n  // @TODO remove the number of outdated queries discarded instead of just one\n\n  if (queryId < this._lastRecommendQueryIdReceived) {\n    // Outdated answer\n    return;\n  }\n\n  this._currentNbRecommendQueries -=\n    queryId - this._lastRecommendQueryIdReceived;\n  this._lastRecommendQueryIdReceived = queryId;\n\n  if (this._currentNbRecommendQueries === 0) this.emit('recommendQueueEmpty');\n\n  var cache = this._recommendCache;\n\n  var idsMap = {};\n  ids\n    .filter(function (id) {\n      return cache[id] === undefined;\n    })\n    .forEach(function (id, index) {\n      if (!idsMap[id]) idsMap[id] = [];\n\n      idsMap[id].push(index);\n    });\n\n  Object.keys(idsMap).forEach(function (id) {\n    var indices = idsMap[id];\n    var firstResult = content.results[indices[0]];\n    if (indices.length === 1) {\n      cache[id] = firstResult;\n      return;\n    }\n    cache[id] = Object.assign({}, firstResult, {\n      hits: sortAndMergeRecommendations(\n        ids,\n        indices.map(function (idx) {\n          return content.results[idx].hits;\n        })\n      ),\n    });\n  });\n\n  var results = {};\n  ids.forEach(function (id) {\n    results[id] = cache[id];\n  });\n\n  states.forEach(function (s) {\n    var state = s.state;\n    var helper = s.helper;\n\n    if (!s.index) {\n      // eslint-disable-next-line no-warning-comments\n      // TODO: emit \"result\" event when events for Recommend are implemented\n      helper.emit('recommend:result', {\n        results: null,\n        state: state,\n      });\n      return;\n    }\n\n    helper.lastRecommendResults = new RecommendResults(state, results);\n\n    // eslint-disable-next-line no-warning-comments\n    // TODO: emit \"result\" event when events for Recommend are implemented\n    helper.emit('recommend:result', {\n      recommend: {\n        results: helper.lastRecommendResults,\n        state: state,\n      },\n    });\n  });\n};\n\nAlgoliaSearchHelper.prototype._dispatchAlgoliaError = function (\n  queryId,\n  error\n) {\n  if (queryId < this._lastQueryIdReceived) {\n    // Outdated answer\n    return;\n  }\n\n  this._currentNbQueries -= queryId - this._lastQueryIdReceived;\n  this._lastQueryIdReceived = queryId;\n\n  this.emit('error', {\n    error: error,\n  });\n\n  if (this._currentNbQueries === 0) this.emit('searchQueueEmpty');\n};\n\nAlgoliaSearchHelper.prototype._dispatchRecommendError = function (\n  queryId,\n  error\n) {\n  if (queryId < this._lastRecommendQueryIdReceived) {\n    // Outdated answer\n    return;\n  }\n\n  this._currentNbRecommendQueries -=\n    queryId - this._lastRecommendQueryIdReceived;\n  this._lastRecommendQueryIdReceived = queryId;\n\n  this.emit('error', {\n    error: error,\n  });\n\n  if (this._currentNbRecommendQueries === 0) this.emit('recommendQueueEmpty');\n};\n\nAlgoliaSearchHelper.prototype.containsRefinement = function (\n  query,\n  facetFilters,\n  numericFilters,\n  tagFilters\n) {\n  return (\n    query ||\n    facetFilters.length !== 0 ||\n    numericFilters.length !== 0 ||\n    tagFilters.length !== 0\n  );\n};\n\n/**\n * Test if there are some disjunctive refinements on the facet\n * @private\n * @param {string} facet the attribute to test\n * @return {boolean} true if there are refinements on this attribute\n */\nAlgoliaSearchHelper.prototype._hasDisjunctiveRefinements = function (facet) {\n  return (\n    this.state.disjunctiveRefinements[facet] &&\n    this.state.disjunctiveRefinements[facet].length > 0\n  );\n};\n\nAlgoliaSearchHelper.prototype._change = function (event) {\n  var state = event.state;\n  var isPageReset = event.isPageReset;\n\n  if (state !== this.state) {\n    this.state = state;\n\n    this.emit('change', {\n      state: this.state,\n      results: this.lastResults,\n      isPageReset: isPageReset,\n    });\n  }\n};\n\nAlgoliaSearchHelper.prototype._recommendChange = function (event) {\n  var state = event.state;\n\n  if (state !== this.recommendState) {\n    this.recommendState = state;\n\n    // eslint-disable-next-line no-warning-comments\n    // TODO: emit \"change\" event when events for Recommend are implemented\n    this.emit('recommend:change', {\n      search: {\n        results: this.lastResults,\n        state: this.state,\n      },\n      recommend: {\n        results: this.lastRecommendResults,\n        state: this.recommendState,\n      },\n    });\n  }\n};\n\n/**\n * Clears the cache of the underlying Algolia client.\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n */\nAlgoliaSearchHelper.prototype.clearCache = function () {\n  if (this.client.clearCache) this.client.clearCache();\n  return this;\n};\n\n/**\n * Updates the internal client instance. If the reference of the clients\n * are equal then no update is actually done.\n * @param  {AlgoliaSearch} newClient an AlgoliaSearch client\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n */\nAlgoliaSearchHelper.prototype.setClient = function (newClient) {\n  if (this.client === newClient) return this;\n\n  if (typeof newClient.addAlgoliaAgent === 'function') {\n    newClient.addAlgoliaAgent('JS Helper (' + version + ')');\n  }\n  this.client = newClient;\n\n  return this;\n};\n\n/**\n * Gets the instance of the currently used client.\n * @return {AlgoliaSearch} the currently used client\n */\nAlgoliaSearchHelper.prototype.getClient = function () {\n  return this.client;\n};\n\n/**\n * Creates an derived instance of the Helper. A derived helper\n * is a way to request other indices synchronised with the lifecycle\n * of the main Helper. This mechanism uses the multiqueries feature\n * of Algolia to aggregate all the requests in a single network call.\n *\n * This method takes a function that is used to create a new SearchParameter\n * that will be used to create requests to Algolia. Those new requests\n * are created just before the `search` event. The signature of the function\n * is `SearchParameters -> SearchParameters`.\n *\n * This method returns a new DerivedHelper which is an EventEmitter\n * that fires the same `search`, `result` and `error` events. Those\n * events, however, will receive data specific to this DerivedHelper\n * and the SearchParameters that is returned by the call of the\n * parameter function.\n * @param {function} fn SearchParameters -> SearchParameters\n * @param {function} recommendFn RecommendParameters -> RecommendParameters\n * @return {DerivedHelper} a new DerivedHelper\n */\nAlgoliaSearchHelper.prototype.derive = function (fn, recommendFn) {\n  var derivedHelper = new DerivedHelper(this, fn, recommendFn);\n  this.derivedHelpers.push(derivedHelper);\n  return derivedHelper;\n};\n\n/**\n * This method detaches a derived Helper from the main one. Prefer using the one from the\n * derived helper itself, to remove the event listeners too.\n * @private\n * @param  {DerivedHelper} derivedHelper the derived helper to detach\n * @return {undefined} nothing is returned\n * @throws Error\n */\nAlgoliaSearchHelper.prototype.detachDerivedHelper = function (derivedHelper) {\n  var pos = this.derivedHelpers.indexOf(derivedHelper);\n  if (pos === -1) throw new Error('Derived helper already detached');\n  this.derivedHelpers.splice(pos, 1);\n};\n\n/**\n * This method returns true if there is currently at least one on-going search.\n * @return {boolean} true if there is a search pending\n */\nAlgoliaSearchHelper.prototype.hasPendingRequests = function () {\n  return this._currentNbQueries > 0;\n};\n\n/**\n * @typedef AlgoliaSearchHelper.NumericRefinement\n * @type {object}\n * @property {number[]} value the numbers that are used for filtering this attribute with\n * the operator specified.\n * @property {string} operator the faceting data: value, number of entries\n * @property {string} type will be 'numeric'\n */\n\n/**\n * @typedef AlgoliaSearchHelper.FacetRefinement\n * @type {object}\n * @property {string} value the string use to filter the attribute\n * @property {string} type the type of filter: 'conjunctive', 'disjunctive', 'exclude'\n */\n\nmodule.exports = AlgoliaSearchHelper;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/algoliasearch-helper/src/algoliasearch.helper.js\n");

/***/ }),

/***/ "./node_modules/algoliasearch-helper/src/functions/compact.js":
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = function compact(array) {\n  if (!Array.isArray(array)) {\n    return [];\n  }\n\n  return array.filter(Boolean);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL2Z1bmN0aW9ucy9jb21wYWN0LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Vhc2lmZW0tZG9jcy8uL25vZGVfbW9kdWxlcy9hbGdvbGlhc2VhcmNoLWhlbHBlci9zcmMvZnVuY3Rpb25zL2NvbXBhY3QuanM/ZGY5OCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY29tcGFjdChhcnJheSkge1xuICBpZiAoIUFycmF5LmlzQXJyYXkoYXJyYXkpKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgcmV0dXJuIGFycmF5LmZpbHRlcihCb29sZWFuKTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/algoliasearch-helper/src/functions/compact.js\n");

/***/ }),

/***/ "./node_modules/algoliasearch-helper/src/functions/defaultsPure.js":
/***/ ((module) => {

"use strict";
eval("\n\n// NOTE: this behaves like lodash/defaults, but doesn't mutate the target\n// it also preserve keys order\nmodule.exports = function defaultsPure() {\n  var sources = Array.prototype.slice.call(arguments);\n\n  return sources.reduceRight(function (acc, source) {\n    Object.keys(Object(source)).forEach(function (key) {\n      if (source[key] === undefined) {\n        return;\n      }\n      if (acc[key] !== undefined) {\n        // remove if already added, so that we can add it in correct order\n        delete acc[key];\n      }\n      acc[key] = source[key];\n    });\n    return acc;\n  }, {});\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL2Z1bmN0aW9ucy9kZWZhdWx0c1B1cmUuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWFzaWZlbS1kb2NzLy4vbm9kZV9tb2R1bGVzL2FsZ29saWFzZWFyY2gtaGVscGVyL3NyYy9mdW5jdGlvbnMvZGVmYXVsdHNQdXJlLmpzPzRhNzMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vLyBOT1RFOiB0aGlzIGJlaGF2ZXMgbGlrZSBsb2Rhc2gvZGVmYXVsdHMsIGJ1dCBkb2Vzbid0IG11dGF0ZSB0aGUgdGFyZ2V0XG4vLyBpdCBhbHNvIHByZXNlcnZlIGtleXMgb3JkZXJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGVmYXVsdHNQdXJlKCkge1xuICB2YXIgc291cmNlcyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG5cbiAgcmV0dXJuIHNvdXJjZXMucmVkdWNlUmlnaHQoZnVuY3Rpb24gKGFjYywgc291cmNlKSB7XG4gICAgT2JqZWN0LmtleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgaWYgKHNvdXJjZVtrZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGFjY1trZXldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gcmVtb3ZlIGlmIGFscmVhZHkgYWRkZWQsIHNvIHRoYXQgd2UgY2FuIGFkZCBpdCBpbiBjb3JyZWN0IG9yZGVyXG4gICAgICAgIGRlbGV0ZSBhY2Nba2V5XTtcbiAgICAgIH1cbiAgICAgIGFjY1trZXldID0gc291cmNlW2tleV07XG4gICAgfSk7XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/algoliasearch-helper/src/functions/defaultsPure.js\n");

/***/ }),

/***/ "./node_modules/algoliasearch-helper/src/functions/escapeFacetValue.js":
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * Replaces a leading - with \\-\n * @private\n * @param {any} value the facet value to replace\n * @returns {any} the escaped facet value or the value if it was not a string\n */\nfunction escapeFacetValue(value) {\n  if (typeof value !== 'string') return value;\n\n  return String(value).replace(/^-/, '\\\\-');\n}\n\n/**\n * Replaces a leading \\- with -\n * @private\n * @param {any} value the escaped facet value\n * @returns {any} the unescaped facet value or the value if it was not a string\n */\nfunction unescapeFacetValue(value) {\n  if (typeof value !== 'string') return value;\n\n  return value.replace(/^\\\\-/, '-');\n}\n\nmodule.exports = {\n  escapeFacetValue: escapeFacetValue,\n  unescapeFacetValue: unescapeFacetValue,\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL2Z1bmN0aW9ucy9lc2NhcGVGYWNldFZhbHVlLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Vhc2lmZW0tZG9jcy8uL25vZGVfbW9kdWxlcy9hbGdvbGlhc2VhcmNoLWhlbHBlci9zcmMvZnVuY3Rpb25zL2VzY2FwZUZhY2V0VmFsdWUuanM/ZTc2NyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogUmVwbGFjZXMgYSBsZWFkaW5nIC0gd2l0aCBcXC1cbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge2FueX0gdmFsdWUgdGhlIGZhY2V0IHZhbHVlIHRvIHJlcGxhY2VcbiAqIEByZXR1cm5zIHthbnl9IHRoZSBlc2NhcGVkIGZhY2V0IHZhbHVlIG9yIHRoZSB2YWx1ZSBpZiBpdCB3YXMgbm90IGEgc3RyaW5nXG4gKi9cbmZ1bmN0aW9uIGVzY2FwZUZhY2V0VmFsdWUodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHJldHVybiB2YWx1ZTtcblxuICByZXR1cm4gU3RyaW5nKHZhbHVlKS5yZXBsYWNlKC9eLS8sICdcXFxcLScpO1xufVxuXG4vKipcbiAqIFJlcGxhY2VzIGEgbGVhZGluZyBcXC0gd2l0aCAtXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHthbnl9IHZhbHVlIHRoZSBlc2NhcGVkIGZhY2V0IHZhbHVlXG4gKiBAcmV0dXJucyB7YW55fSB0aGUgdW5lc2NhcGVkIGZhY2V0IHZhbHVlIG9yIHRoZSB2YWx1ZSBpZiBpdCB3YXMgbm90IGEgc3RyaW5nXG4gKi9cbmZ1bmN0aW9uIHVuZXNjYXBlRmFjZXRWYWx1ZSh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykgcmV0dXJuIHZhbHVlO1xuXG4gIHJldHVybiB2YWx1ZS5yZXBsYWNlKC9eXFxcXC0vLCAnLScpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZXNjYXBlRmFjZXRWYWx1ZTogZXNjYXBlRmFjZXRWYWx1ZSxcbiAgdW5lc2NhcGVGYWNldFZhbHVlOiB1bmVzY2FwZUZhY2V0VmFsdWUsXG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/algoliasearch-helper/src/functions/escapeFacetValue.js\n");

/***/ }),

/***/ "./node_modules/algoliasearch-helper/src/functions/find.js":
/***/ ((module) => {

"use strict";
eval("\n\n// @MAJOR can be replaced by native Array#find when we change support\nmodule.exports = function find(array, comparator) {\n  if (!Array.isArray(array)) {\n    return undefined;\n  }\n\n  for (var i = 0; i < array.length; i++) {\n    if (comparator(array[i])) {\n      return array[i];\n    }\n  }\n\n  return undefined;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL2Z1bmN0aW9ucy9maW5kLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWFzaWZlbS1kb2NzLy4vbm9kZV9tb2R1bGVzL2FsZ29saWFzZWFyY2gtaGVscGVyL3NyYy9mdW5jdGlvbnMvZmluZC5qcz9mMmFkIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLy8gQE1BSk9SIGNhbiBiZSByZXBsYWNlZCBieSBuYXRpdmUgQXJyYXkjZmluZCB3aGVuIHdlIGNoYW5nZSBzdXBwb3J0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZpbmQoYXJyYXksIGNvbXBhcmF0b3IpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGFycmF5KSkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGNvbXBhcmF0b3IoYXJyYXlbaV0pKSB7XG4gICAgICByZXR1cm4gYXJyYXlbaV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/algoliasearch-helper/src/functions/find.js\n");

/***/ }),

/***/ "./node_modules/algoliasearch-helper/src/functions/findIndex.js":
/***/ ((module) => {

"use strict";
eval("\n\n// @MAJOR can be replaced by native Array#findIndex when we change support\nmodule.exports = function find(array, comparator) {\n  if (!Array.isArray(array)) {\n    return -1;\n  }\n\n  for (var i = 0; i < array.length; i++) {\n    if (comparator(array[i])) {\n      return i;\n    }\n  }\n  return -1;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL2Z1bmN0aW9ucy9maW5kSW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWFzaWZlbS1kb2NzLy4vbm9kZV9tb2R1bGVzL2FsZ29saWFzZWFyY2gtaGVscGVyL3NyYy9mdW5jdGlvbnMvZmluZEluZGV4LmpzPzMwOTEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vLyBATUFKT1IgY2FuIGJlIHJlcGxhY2VkIGJ5IG5hdGl2ZSBBcnJheSNmaW5kSW5kZXggd2hlbiB3ZSBjaGFuZ2Ugc3VwcG9ydFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmaW5kKGFycmF5LCBjb21wYXJhdG9yKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShhcnJheSkpIHtcbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGNvbXBhcmF0b3IoYXJyYXlbaV0pKSB7XG4gICAgICByZXR1cm4gaTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/algoliasearch-helper/src/functions/findIndex.js\n");

/***/ }),

/***/ "./node_modules/algoliasearch-helper/src/functions/flat.js":
/***/ ((module) => {

eval("// @MAJOR: remove this function and use Array.prototype.flat\nmodule.exports = function flat(arr) {\n  return arr.reduce(function (acc, val) {\n    return acc.concat(val);\n  }, []);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL2Z1bmN0aW9ucy9mbGF0LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Vhc2lmZW0tZG9jcy8uL25vZGVfbW9kdWxlcy9hbGdvbGlhc2VhcmNoLWhlbHBlci9zcmMvZnVuY3Rpb25zL2ZsYXQuanM/ZmZlZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBATUFKT1I6IHJlbW92ZSB0aGlzIGZ1bmN0aW9uIGFuZCB1c2UgQXJyYXkucHJvdG90eXBlLmZsYXRcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZmxhdChhcnIpIHtcbiAgcmV0dXJuIGFyci5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgdmFsKSB7XG4gICAgcmV0dXJuIGFjYy5jb25jYXQodmFsKTtcbiAgfSwgW10pO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/algoliasearch-helper/src/functions/flat.js\n");

/***/ }),

/***/ "./node_modules/algoliasearch-helper/src/functions/formatSort.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar find = __webpack_require__(\"./node_modules/algoliasearch-helper/src/functions/find.js\");\n\n/**\n * Transform sort format from user friendly notation to lodash format\n * @param {string[]} sortBy array of predicate of the form \"attribute:order\"\n * @param {string[]} [defaults] array of predicate of the form \"attribute:order\"\n * @return {array.<string[]>} array containing 2 elements : attributes, orders\n */\nmodule.exports = function formatSort(sortBy, defaults) {\n  var defaultInstructions = (defaults || []).map(function (sort) {\n    return sort.split(':');\n  });\n\n  return sortBy.reduce(\n    function preparePredicate(out, sort) {\n      var sortInstruction = sort.split(':');\n\n      var matchingDefault = find(\n        defaultInstructions,\n        function (defaultInstruction) {\n          return defaultInstruction[0] === sortInstruction[0];\n        }\n      );\n\n      if (sortInstruction.length > 1 || !matchingDefault) {\n        out[0].push(sortInstruction[0]);\n        out[1].push(sortInstruction[1]);\n        return out;\n      }\n\n      out[0].push(matchingDefault[0]);\n      out[1].push(matchingDefault[1]);\n      return out;\n    },\n    [[], []]\n  );\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL2Z1bmN0aW9ucy9mb3JtYXRTb3J0LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Vhc2lmZW0tZG9jcy8uL25vZGVfbW9kdWxlcy9hbGdvbGlhc2VhcmNoLWhlbHBlci9zcmMvZnVuY3Rpb25zL2Zvcm1hdFNvcnQuanM/MTVmOCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBmaW5kID0gcmVxdWlyZSgnLi9maW5kJyk7XG5cbi8qKlxuICogVHJhbnNmb3JtIHNvcnQgZm9ybWF0IGZyb20gdXNlciBmcmllbmRseSBub3RhdGlvbiB0byBsb2Rhc2ggZm9ybWF0XG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBzb3J0QnkgYXJyYXkgb2YgcHJlZGljYXRlIG9mIHRoZSBmb3JtIFwiYXR0cmlidXRlOm9yZGVyXCJcbiAqIEBwYXJhbSB7c3RyaW5nW119IFtkZWZhdWx0c10gYXJyYXkgb2YgcHJlZGljYXRlIG9mIHRoZSBmb3JtIFwiYXR0cmlidXRlOm9yZGVyXCJcbiAqIEByZXR1cm4ge2FycmF5LjxzdHJpbmdbXT59IGFycmF5IGNvbnRhaW5pbmcgMiBlbGVtZW50cyA6IGF0dHJpYnV0ZXMsIG9yZGVyc1xuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZvcm1hdFNvcnQoc29ydEJ5LCBkZWZhdWx0cykge1xuICB2YXIgZGVmYXVsdEluc3RydWN0aW9ucyA9IChkZWZhdWx0cyB8fCBbXSkubWFwKGZ1bmN0aW9uIChzb3J0KSB7XG4gICAgcmV0dXJuIHNvcnQuc3BsaXQoJzonKTtcbiAgfSk7XG5cbiAgcmV0dXJuIHNvcnRCeS5yZWR1Y2UoXG4gICAgZnVuY3Rpb24gcHJlcGFyZVByZWRpY2F0ZShvdXQsIHNvcnQpIHtcbiAgICAgIHZhciBzb3J0SW5zdHJ1Y3Rpb24gPSBzb3J0LnNwbGl0KCc6Jyk7XG5cbiAgICAgIHZhciBtYXRjaGluZ0RlZmF1bHQgPSBmaW5kKFxuICAgICAgICBkZWZhdWx0SW5zdHJ1Y3Rpb25zLFxuICAgICAgICBmdW5jdGlvbiAoZGVmYXVsdEluc3RydWN0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuIGRlZmF1bHRJbnN0cnVjdGlvblswXSA9PT0gc29ydEluc3RydWN0aW9uWzBdO1xuICAgICAgICB9XG4gICAgICApO1xuXG4gICAgICBpZiAoc29ydEluc3RydWN0aW9uLmxlbmd0aCA+IDEgfHwgIW1hdGNoaW5nRGVmYXVsdCkge1xuICAgICAgICBvdXRbMF0ucHVzaChzb3J0SW5zdHJ1Y3Rpb25bMF0pO1xuICAgICAgICBvdXRbMV0ucHVzaChzb3J0SW5zdHJ1Y3Rpb25bMV0pO1xuICAgICAgICByZXR1cm4gb3V0O1xuICAgICAgfVxuXG4gICAgICBvdXRbMF0ucHVzaChtYXRjaGluZ0RlZmF1bHRbMF0pO1xuICAgICAgb3V0WzFdLnB1c2gobWF0Y2hpbmdEZWZhdWx0WzFdKTtcbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfSxcbiAgICBbW10sIFtdXVxuICApO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/algoliasearch-helper/src/functions/formatSort.js\n");

/***/ }),

/***/ "./node_modules/algoliasearch-helper/src/functions/inherits.js":
/***/ ((module) => {

"use strict";
eval("\n\nfunction inherits(ctor, superCtor) {\n  ctor.prototype = Object.create(superCtor.prototype, {\n    constructor: {\n      value: ctor,\n      enumerable: false,\n      writable: true,\n      configurable: true,\n    },\n  });\n}\n\nmodule.exports = inherits;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL2Z1bmN0aW9ucy9pbmhlcml0cy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWFzaWZlbS1kb2NzLy4vbm9kZV9tb2R1bGVzL2FsZ29saWFzZWFyY2gtaGVscGVyL3NyYy9mdW5jdGlvbnMvaW5oZXJpdHMuanM/YTY1NSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICBjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDdG9yLnByb3RvdHlwZSwge1xuICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICB2YWx1ZTogY3RvcixcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgfSxcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5oZXJpdHM7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/algoliasearch-helper/src/functions/inherits.js\n");

/***/ }),

/***/ "./node_modules/algoliasearch-helper/src/functions/intersection.js":
/***/ ((module) => {

"use strict";
eval("\n\nfunction intersection(arr1, arr2) {\n  return arr1.filter(function (value, index) {\n    return (\n      arr2.indexOf(value) > -1 &&\n      arr1.indexOf(value) === index /* skips duplicates */\n    );\n  });\n}\n\nmodule.exports = intersection;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL2Z1bmN0aW9ucy9pbnRlcnNlY3Rpb24uanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWFzaWZlbS1kb2NzLy4vbm9kZV9tb2R1bGVzL2FsZ29saWFzZWFyY2gtaGVscGVyL3NyYy9mdW5jdGlvbnMvaW50ZXJzZWN0aW9uLmpzP2UwMTciXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBpbnRlcnNlY3Rpb24oYXJyMSwgYXJyMikge1xuICByZXR1cm4gYXJyMS5maWx0ZXIoZnVuY3Rpb24gKHZhbHVlLCBpbmRleCkge1xuICAgIHJldHVybiAoXG4gICAgICBhcnIyLmluZGV4T2YodmFsdWUpID4gLTEgJiZcbiAgICAgIGFycjEuaW5kZXhPZih2YWx1ZSkgPT09IGluZGV4IC8qIHNraXBzIGR1cGxpY2F0ZXMgKi9cbiAgICApO1xuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnRlcnNlY3Rpb247XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/algoliasearch-helper/src/functions/intersection.js\n");

/***/ }),

/***/ "./node_modules/algoliasearch-helper/src/functions/merge.js":
/***/ ((module) => {

"use strict";
eval("\n\nfunction clone(value) {\n  if (typeof value === 'object' && value !== null) {\n    return _merge(Array.isArray(value) ? [] : {}, value);\n  }\n  return value;\n}\n\nfunction isObjectOrArrayOrFunction(value) {\n  return (\n    typeof value === 'function' ||\n    Array.isArray(value) ||\n    Object.prototype.toString.call(value) === '[object Object]'\n  );\n}\n\nfunction _merge(target, source) {\n  if (target === source) {\n    return target;\n  }\n\n  // eslint-disable-next-line no-restricted-syntax\n  for (var key in source) {\n    if (\n      !Object.prototype.hasOwnProperty.call(source, key) ||\n      key === '__proto__' ||\n      key === 'constructor'\n    ) {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    var sourceVal = source[key];\n    var targetVal = target[key];\n\n    if (typeof targetVal !== 'undefined' && typeof sourceVal === 'undefined') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (\n      isObjectOrArrayOrFunction(targetVal) &&\n      isObjectOrArrayOrFunction(sourceVal)\n    ) {\n      target[key] = _merge(targetVal, sourceVal);\n    } else {\n      target[key] = clone(sourceVal);\n    }\n  }\n  return target;\n}\n\n/**\n * This method is like Object.assign, but recursively merges own and inherited\n * enumerable keyed properties of source objects into the destination object.\n *\n * NOTE: this behaves like lodash/merge, but:\n * - does mutate functions if they are a source\n * - treats non-plain objects as plain\n * - does not work for circular objects\n * - treats sparse arrays as sparse\n * - does not convert Array-like objects (Arguments, NodeLists, etc.) to arrays\n *\n * @param {Object} target The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n */\nfunction merge(target) {\n  if (!isObjectOrArrayOrFunction(target)) {\n    target = {};\n  }\n\n  for (var i = 1, l = arguments.length; i < l; i++) {\n    var source = arguments[i];\n\n    if (isObjectOrArrayOrFunction(source)) {\n      _merge(target, source);\n    }\n  }\n  return target;\n}\n\nmodule.exports = merge;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL2Z1bmN0aW9ucy9tZXJnZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lYXNpZmVtLWRvY3MvLi9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL2Z1bmN0aW9ucy9tZXJnZS5qcz9iYjI4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2xvbmUodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgIT09IG51bGwpIHtcbiAgICByZXR1cm4gX21lcmdlKEFycmF5LmlzQXJyYXkodmFsdWUpID8gW10gOiB7fSwgdmFsdWUpO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gaXNPYmplY3RPckFycmF5T3JGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gKFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyB8fFxuICAgIEFycmF5LmlzQXJyYXkodmFsdWUpIHx8XG4gICAgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSdcbiAgKTtcbn1cblxuZnVuY3Rpb24gX21lcmdlKHRhcmdldCwgc291cmNlKSB7XG4gIGlmICh0YXJnZXQgPT09IHNvdXJjZSkge1xuICAgIHJldHVybiB0YXJnZXQ7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXhcbiAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgIGlmIChcbiAgICAgICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpIHx8XG4gICAgICBrZXkgPT09ICdfX3Byb3RvX18nIHx8XG4gICAgICBrZXkgPT09ICdjb25zdHJ1Y3RvcidcbiAgICApIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250aW51ZVxuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgdmFyIHNvdXJjZVZhbCA9IHNvdXJjZVtrZXldO1xuICAgIHZhciB0YXJnZXRWYWwgPSB0YXJnZXRba2V5XTtcblxuICAgIGlmICh0eXBlb2YgdGFyZ2V0VmFsICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygc291cmNlVmFsID09PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRpbnVlXG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICBpc09iamVjdE9yQXJyYXlPckZ1bmN0aW9uKHRhcmdldFZhbCkgJiZcbiAgICAgIGlzT2JqZWN0T3JBcnJheU9yRnVuY3Rpb24oc291cmNlVmFsKVxuICAgICkge1xuICAgICAgdGFyZ2V0W2tleV0gPSBfbWVyZ2UodGFyZ2V0VmFsLCBzb3VyY2VWYWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0YXJnZXRba2V5XSA9IGNsb25lKHNvdXJjZVZhbCk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbi8qKlxuICogVGhpcyBtZXRob2QgaXMgbGlrZSBPYmplY3QuYXNzaWduLCBidXQgcmVjdXJzaXZlbHkgbWVyZ2VzIG93biBhbmQgaW5oZXJpdGVkXG4gKiBlbnVtZXJhYmxlIGtleWVkIHByb3BlcnRpZXMgb2Ygc291cmNlIG9iamVjdHMgaW50byB0aGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICpcbiAqIE5PVEU6IHRoaXMgYmVoYXZlcyBsaWtlIGxvZGFzaC9tZXJnZSwgYnV0OlxuICogLSBkb2VzIG11dGF0ZSBmdW5jdGlvbnMgaWYgdGhleSBhcmUgYSBzb3VyY2VcbiAqIC0gdHJlYXRzIG5vbi1wbGFpbiBvYmplY3RzIGFzIHBsYWluXG4gKiAtIGRvZXMgbm90IHdvcmsgZm9yIGNpcmN1bGFyIG9iamVjdHNcbiAqIC0gdHJlYXRzIHNwYXJzZSBhcnJheXMgYXMgc3BhcnNlXG4gKiAtIGRvZXMgbm90IGNvbnZlcnQgQXJyYXktbGlrZSBvYmplY3RzIChBcmd1bWVudHMsIE5vZGVMaXN0cywgZXRjLikgdG8gYXJyYXlzXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHRhcmdldCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBtZXJnZSh0YXJnZXQpIHtcbiAgaWYgKCFpc09iamVjdE9yQXJyYXlPckZ1bmN0aW9uKHRhcmdldCkpIHtcbiAgICB0YXJnZXQgPSB7fTtcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAxLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICBpZiAoaXNPYmplY3RPckFycmF5T3JGdW5jdGlvbihzb3VyY2UpKSB7XG4gICAgICBfbWVyZ2UodGFyZ2V0LCBzb3VyY2UpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1lcmdlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/algoliasearch-helper/src/functions/merge.js\n");

/***/ }),

/***/ "./node_modules/algoliasearch-helper/src/functions/mergeNumericMax.js":
/***/ ((module) => {

"use strict";
eval("\n\n// NOTE: this behaves like lodash/defaults, but doesn't mutate the target\n// it also preserve keys order and keep the highest numeric value\nfunction mergeNumericMax() {\n  var sources = Array.prototype.slice.call(arguments);\n\n  return sources.reduceRight(function (acc, source) {\n    Object.keys(Object(source)).forEach(function (key) {\n      var accValue = typeof acc[key] === 'number' ? acc[key] : 0;\n      var sourceValue = source[key];\n\n      if (sourceValue === undefined) {\n        return;\n      }\n\n      if (sourceValue >= accValue) {\n        if (acc[key] !== undefined) {\n          // remove if already added, so that we can add it in correct order\n          delete acc[key];\n        }\n        acc[key] = sourceValue;\n      }\n    });\n    return acc;\n  }, {});\n}\n\nmodule.exports = mergeNumericMax;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL2Z1bmN0aW9ucy9tZXJnZU51bWVyaWNNYXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Vhc2lmZW0tZG9jcy8uL25vZGVfbW9kdWxlcy9hbGdvbGlhc2VhcmNoLWhlbHBlci9zcmMvZnVuY3Rpb25zL21lcmdlTnVtZXJpY01heC5qcz84YTMwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLy8gTk9URTogdGhpcyBiZWhhdmVzIGxpa2UgbG9kYXNoL2RlZmF1bHRzLCBidXQgZG9lc24ndCBtdXRhdGUgdGhlIHRhcmdldFxuLy8gaXQgYWxzbyBwcmVzZXJ2ZSBrZXlzIG9yZGVyIGFuZCBrZWVwIHRoZSBoaWdoZXN0IG51bWVyaWMgdmFsdWVcbmZ1bmN0aW9uIG1lcmdlTnVtZXJpY01heCgpIHtcbiAgdmFyIHNvdXJjZXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuXG4gIHJldHVybiBzb3VyY2VzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uIChhY2MsIHNvdXJjZSkge1xuICAgIE9iamVjdC5rZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHZhciBhY2NWYWx1ZSA9IHR5cGVvZiBhY2Nba2V5XSA9PT0gJ251bWJlcicgPyBhY2Nba2V5XSA6IDA7XG4gICAgICB2YXIgc291cmNlVmFsdWUgPSBzb3VyY2Vba2V5XTtcblxuICAgICAgaWYgKHNvdXJjZVZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoc291cmNlVmFsdWUgPj0gYWNjVmFsdWUpIHtcbiAgICAgICAgaWYgKGFjY1trZXldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAvLyByZW1vdmUgaWYgYWxyZWFkeSBhZGRlZCwgc28gdGhhdCB3ZSBjYW4gYWRkIGl0IGluIGNvcnJlY3Qgb3JkZXJcbiAgICAgICAgICBkZWxldGUgYWNjW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgYWNjW2tleV0gPSBzb3VyY2VWYWx1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWVyZ2VOdW1lcmljTWF4O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/algoliasearch-helper/src/functions/mergeNumericMax.js\n");

/***/ }),

/***/ "./node_modules/algoliasearch-helper/src/functions/objectHasKeys.js":
/***/ ((module) => {

"use strict";
eval("\n\nfunction objectHasKeys(obj) {\n  return obj && Object.keys(obj).length > 0;\n}\n\nmodule.exports = objectHasKeys;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL2Z1bmN0aW9ucy9vYmplY3RIYXNLZXlzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWFzaWZlbS1kb2NzLy4vbm9kZV9tb2R1bGVzL2FsZ29saWFzZWFyY2gtaGVscGVyL3NyYy9mdW5jdGlvbnMvb2JqZWN0SGFzS2V5cy5qcz8zMmE0Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gb2JqZWN0SGFzS2V5cyhvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBPYmplY3Qua2V5cyhvYmopLmxlbmd0aCA+IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gb2JqZWN0SGFzS2V5cztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/algoliasearch-helper/src/functions/objectHasKeys.js\n");

/***/ }),

/***/ "./node_modules/algoliasearch-helper/src/functions/omit.js":
/***/ ((module) => {

"use strict";
eval("\n\n// https://github.com/babel/babel/blob/3aaafae053fa75febb3aa45d45b6f00646e30ba4/packages/babel-helpers/src/helpers.js#L604-L620\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source === null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key;\n  var i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    // eslint-disable-next-line no-continue\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\n\nmodule.exports = _objectWithoutPropertiesLoose;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL2Z1bmN0aW9ucy9vbWl0LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWFzaWZlbS1kb2NzLy4vbm9kZV9tb2R1bGVzL2FsZ29saWFzZWFyY2gtaGVscGVyL3NyYy9mdW5jdGlvbnMvb21pdC5qcz82ZjFkIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2JhYmVsL2JhYmVsL2Jsb2IvM2FhYWZhZTA1M2ZhNzVmZWJiM2FhNDVkNDViNmYwMDY0NmUzMGJhNC9wYWNrYWdlcy9iYWJlbC1oZWxwZXJzL3NyYy9oZWxwZXJzLmpzI0w2MDQtTDYyMFxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5O1xuICB2YXIgaTtcbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250aW51ZVxuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/algoliasearch-helper/src/functions/omit.js\n");

/***/ }),

/***/ "./node_modules/algoliasearch-helper/src/functions/orderBy.js":
/***/ ((module) => {

"use strict";
eval("\n\nfunction compareAscending(value, other) {\n  if (value !== other) {\n    var valIsDefined = value !== undefined;\n    var valIsNull = value === null;\n\n    var othIsDefined = other !== undefined;\n    var othIsNull = other === null;\n\n    if (\n      (!othIsNull && value > other) ||\n      (valIsNull && othIsDefined) ||\n      !valIsDefined\n    ) {\n      return 1;\n    }\n    if (\n      (!valIsNull && value < other) ||\n      (othIsNull && valIsDefined) ||\n      !othIsDefined\n    ) {\n      return -1;\n    }\n  }\n  return 0;\n}\n\n/**\n * @param {Array<object>} collection object with keys in attributes\n * @param {Array<string>} iteratees attributes\n * @param {Array<string>} orders asc | desc\n * @return {Array<object>} sorted collection\n */\nfunction orderBy(collection, iteratees, orders) {\n  if (!Array.isArray(collection)) {\n    return [];\n  }\n\n  if (!Array.isArray(orders)) {\n    orders = [];\n  }\n\n  var result = collection.map(function (value, index) {\n    return {\n      criteria: iteratees.map(function (iteratee) {\n        return value[iteratee];\n      }),\n      index: index,\n      value: value,\n    };\n  });\n\n  result.sort(function comparer(object, other) {\n    var index = -1;\n\n    while (++index < object.criteria.length) {\n      var res = compareAscending(object.criteria[index], other.criteria[index]);\n      if (res) {\n        if (index >= orders.length) {\n          return res;\n        }\n        if (orders[index] === 'desc') {\n          return -res;\n        }\n        return res;\n      }\n    }\n\n    // This ensures a stable sort in V8 and other engines.\n    // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n    return object.index - other.index;\n  });\n\n  return result.map(function (res) {\n    return res.value;\n  });\n}\n\nmodule.exports = orderBy;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL2Z1bmN0aW9ucy9vcmRlckJ5LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lYXNpZmVtLWRvY3MvLi9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL2Z1bmN0aW9ucy9vcmRlckJ5LmpzPzkyMmQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjb21wYXJlQXNjZW5kaW5nKHZhbHVlLCBvdGhlcikge1xuICBpZiAodmFsdWUgIT09IG90aGVyKSB7XG4gICAgdmFyIHZhbElzRGVmaW5lZCA9IHZhbHVlICE9PSB1bmRlZmluZWQ7XG4gICAgdmFyIHZhbElzTnVsbCA9IHZhbHVlID09PSBudWxsO1xuXG4gICAgdmFyIG90aElzRGVmaW5lZCA9IG90aGVyICE9PSB1bmRlZmluZWQ7XG4gICAgdmFyIG90aElzTnVsbCA9IG90aGVyID09PSBudWxsO1xuXG4gICAgaWYgKFxuICAgICAgKCFvdGhJc051bGwgJiYgdmFsdWUgPiBvdGhlcikgfHxcbiAgICAgICh2YWxJc051bGwgJiYgb3RoSXNEZWZpbmVkKSB8fFxuICAgICAgIXZhbElzRGVmaW5lZFxuICAgICkge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIGlmIChcbiAgICAgICghdmFsSXNOdWxsICYmIHZhbHVlIDwgb3RoZXIpIHx8XG4gICAgICAob3RoSXNOdWxsICYmIHZhbElzRGVmaW5lZCkgfHxcbiAgICAgICFvdGhJc0RlZmluZWRcbiAgICApIHtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIDA7XG59XG5cbi8qKlxuICogQHBhcmFtIHtBcnJheTxvYmplY3Q+fSBjb2xsZWN0aW9uIG9iamVjdCB3aXRoIGtleXMgaW4gYXR0cmlidXRlc1xuICogQHBhcmFtIHtBcnJheTxzdHJpbmc+fSBpdGVyYXRlZXMgYXR0cmlidXRlc1xuICogQHBhcmFtIHtBcnJheTxzdHJpbmc+fSBvcmRlcnMgYXNjIHwgZGVzY1xuICogQHJldHVybiB7QXJyYXk8b2JqZWN0Pn0gc29ydGVkIGNvbGxlY3Rpb25cbiAqL1xuZnVuY3Rpb24gb3JkZXJCeShjb2xsZWN0aW9uLCBpdGVyYXRlZXMsIG9yZGVycykge1xuICBpZiAoIUFycmF5LmlzQXJyYXkoY29sbGVjdGlvbikpIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICBpZiAoIUFycmF5LmlzQXJyYXkob3JkZXJzKSkge1xuICAgIG9yZGVycyA9IFtdO1xuICB9XG5cbiAgdmFyIHJlc3VsdCA9IGNvbGxlY3Rpb24ubWFwKGZ1bmN0aW9uICh2YWx1ZSwgaW5kZXgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY3JpdGVyaWE6IGl0ZXJhdGVlcy5tYXAoZnVuY3Rpb24gKGl0ZXJhdGVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZVtpdGVyYXRlZV07XG4gICAgICB9KSxcbiAgICAgIGluZGV4OiBpbmRleCxcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICB9O1xuICB9KTtcblxuICByZXN1bHQuc29ydChmdW5jdGlvbiBjb21wYXJlcihvYmplY3QsIG90aGVyKSB7XG4gICAgdmFyIGluZGV4ID0gLTE7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IG9iamVjdC5jcml0ZXJpYS5sZW5ndGgpIHtcbiAgICAgIHZhciByZXMgPSBjb21wYXJlQXNjZW5kaW5nKG9iamVjdC5jcml0ZXJpYVtpbmRleF0sIG90aGVyLmNyaXRlcmlhW2luZGV4XSk7XG4gICAgICBpZiAocmVzKSB7XG4gICAgICAgIGlmIChpbmRleCA+PSBvcmRlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfVxuICAgICAgICBpZiAob3JkZXJzW2luZGV4XSA9PT0gJ2Rlc2MnKSB7XG4gICAgICAgICAgcmV0dXJuIC1yZXM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUaGlzIGVuc3VyZXMgYSBzdGFibGUgc29ydCBpbiBWOCBhbmQgb3RoZXIgZW5naW5lcy5cbiAgICAvLyBTZWUgaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9OTAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICByZXR1cm4gb2JqZWN0LmluZGV4IC0gb3RoZXIuaW5kZXg7XG4gIH0pO1xuXG4gIHJldHVybiByZXN1bHQubWFwKGZ1bmN0aW9uIChyZXMpIHtcbiAgICByZXR1cm4gcmVzLnZhbHVlO1xuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBvcmRlckJ5O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/algoliasearch-helper/src/functions/orderBy.js\n");

/***/ }),

/***/ "./node_modules/algoliasearch-helper/src/functions/valToNumber.js":
/***/ ((module) => {

"use strict";
eval("\n\nfunction valToNumber(v) {\n  if (typeof v === 'number') {\n    return v;\n  } else if (typeof v === 'string') {\n    return parseFloat(v);\n  } else if (Array.isArray(v)) {\n    return v.map(valToNumber);\n  }\n\n  throw new Error(\n    'The value should be a number, a parsable string or an array of those.'\n  );\n}\n\nmodule.exports = valToNumber;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL2Z1bmN0aW9ucy92YWxUb051bWJlci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWFzaWZlbS1kb2NzLy4vbm9kZV9tb2R1bGVzL2FsZ29saWFzZWFyY2gtaGVscGVyL3NyYy9mdW5jdGlvbnMvdmFsVG9OdW1iZXIuanM/YTRkNSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIHZhbFRvTnVtYmVyKHYpIHtcbiAgaWYgKHR5cGVvZiB2ID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiB2O1xuICB9IGVsc2UgaWYgKHR5cGVvZiB2ID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBwYXJzZUZsb2F0KHYpO1xuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodikpIHtcbiAgICByZXR1cm4gdi5tYXAodmFsVG9OdW1iZXIpO1xuICB9XG5cbiAgdGhyb3cgbmV3IEVycm9yKFxuICAgICdUaGUgdmFsdWUgc2hvdWxkIGJlIGEgbnVtYmVyLCBhIHBhcnNhYmxlIHN0cmluZyBvciBhbiBhcnJheSBvZiB0aG9zZS4nXG4gICk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdmFsVG9OdW1iZXI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/algoliasearch-helper/src/functions/valToNumber.js\n");

/***/ }),

/***/ "./node_modules/algoliasearch-helper/src/requestBuilder.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar merge = __webpack_require__(\"./node_modules/algoliasearch-helper/src/functions/merge.js\");\n\nfunction sortObject(obj) {\n  return Object.keys(obj)\n    .sort()\n    .reduce(function (acc, curr) {\n      acc[curr] = obj[curr];\n      return acc;\n    }, {});\n}\n\nvar requestBuilder = {\n  /**\n   * Get all the queries to send to the client, those queries can used directly\n   * with the Algolia client.\n   * @private\n   * @param  {string} index The name of the index\n   * @param  {SearchParameters} state The state from which to get the queries\n   * @return {object[]} The queries\n   */\n  _getQueries: function getQueries(index, state) {\n    var queries = [];\n\n    // One query for the hits\n    queries.push({\n      indexName: index,\n      params: requestBuilder._getHitsSearchParams(state),\n    });\n\n    // One for each disjunctive facets\n    state.getRefinedDisjunctiveFacets().forEach(function (refinedFacet) {\n      queries.push({\n        indexName: index,\n        params: requestBuilder._getDisjunctiveFacetSearchParams(\n          state,\n          refinedFacet\n        ),\n      });\n    });\n\n    // More to get the parent levels of the hierarchical facets when refined\n    state.getRefinedHierarchicalFacets().forEach(function (refinedFacet) {\n      var hierarchicalFacet = state.getHierarchicalFacetByName(refinedFacet);\n      var currentRefinement = state.getHierarchicalRefinement(refinedFacet);\n      var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n\n      // If we are deeper than level 0 (starting from `beer > IPA`)\n      // we want to get all parent values\n      if (\n        currentRefinement.length > 0 &&\n        currentRefinement[0].split(separator).length > 1\n      ) {\n        // We generate a map of the filters we will use for our facet values queries\n        var filtersMap = currentRefinement[0]\n          .split(separator)\n          .slice(0, -1)\n          .reduce(function createFiltersMap(map, segment, level) {\n            return map.concat({\n              attribute: hierarchicalFacet.attributes[level],\n              value:\n                level === 0\n                  ? segment\n                  : [map[map.length - 1].value, segment].join(separator),\n            });\n          }, []);\n\n        filtersMap.forEach(function (filter, level) {\n          var params = requestBuilder._getDisjunctiveFacetSearchParams(\n            state,\n            filter.attribute,\n            level === 0\n          );\n\n          // Keep facet filters unrelated to current hierarchical attributes\n          function hasHierarchicalFacetFilter(value) {\n            return hierarchicalFacet.attributes.some(function (attribute) {\n              return attribute === value.split(':')[0];\n            });\n          }\n\n          var filteredFacetFilters = (params.facetFilters || []).reduce(\n            function (acc, facetFilter) {\n              if (Array.isArray(facetFilter)) {\n                var filtered = facetFilter.filter(function (filterValue) {\n                  return !hasHierarchicalFacetFilter(filterValue);\n                });\n\n                if (filtered.length > 0) {\n                  acc.push(filtered);\n                }\n              }\n\n              if (\n                typeof facetFilter === 'string' &&\n                !hasHierarchicalFacetFilter(facetFilter)\n              ) {\n                acc.push(facetFilter);\n              }\n\n              return acc;\n            },\n            []\n          );\n\n          var parent = filtersMap[level - 1];\n          if (level > 0) {\n            params.facetFilters = filteredFacetFilters.concat(\n              parent.attribute + ':' + parent.value\n            );\n          } else if (filteredFacetFilters.length > 0) {\n            params.facetFilters = filteredFacetFilters;\n          } else {\n            delete params.facetFilters;\n          }\n\n          queries.push({ indexName: index, params: params });\n        });\n      }\n    });\n\n    return queries;\n  },\n\n  /**\n   * Get all the queries to send to the client, those queries can used directly\n   * with the Algolia client.\n   * @private\n   * @param  {SearchParameters} state The state from which to get the queries\n   * @return {object[]} The queries\n   */\n  _getCompositionQueries: function getQueries(state) {\n    return [\n      {\n        compositionID: state.index,\n        requestBody: {\n          params: requestBuilder._getCompositionHitsSearchParams(state),\n        },\n      },\n    ];\n  },\n\n  /**\n   * Build search parameters used to fetch hits\n   * @private\n   * @param  {SearchParameters} state The state from which to get the queries\n   * @return {object.<string, any>} The search parameters for hits\n   */\n  _getHitsSearchParams: function (state) {\n    var facets = state.facets\n      .concat(state.disjunctiveFacets)\n      .concat(requestBuilder._getHitsHierarchicalFacetsAttributes(state))\n      .sort();\n\n    var facetFilters = requestBuilder._getFacetFilters(state);\n    var numericFilters = requestBuilder._getNumericFilters(state);\n    var tagFilters = requestBuilder._getTagFilters(state);\n    var additionalParams = {};\n\n    if (facets.length > 0) {\n      additionalParams.facets = facets.indexOf('*') > -1 ? ['*'] : facets;\n    }\n\n    if (tagFilters.length > 0) {\n      additionalParams.tagFilters = tagFilters;\n    }\n\n    if (facetFilters.length > 0) {\n      additionalParams.facetFilters = facetFilters;\n    }\n\n    if (numericFilters.length > 0) {\n      additionalParams.numericFilters = numericFilters;\n    }\n\n    return sortObject(merge({}, state.getQueryParams(), additionalParams));\n  },\n\n  /**\n   * Build search parameters used to fetch hits\n   * @private\n   * @param  {SearchParameters} state The state from which to get the queries\n   * @return {object.<string, any>} The search parameters for hits\n   */\n  _getCompositionHitsSearchParams: function (state) {\n    var facets = state.facets\n      .concat(\n        state.disjunctiveFacets.map(function (value) {\n          if (\n            state.disjunctiveFacetsRefinements &&\n            state.disjunctiveFacetsRefinements[value] &&\n            state.disjunctiveFacetsRefinements[value].length > 0\n          ) {\n            // only tag a disjunctiveFacet as disjunctive if it has a value selected\n            // this helps avoid hitting the limit of 20 disjunctive facets in the Composition API\n            return 'disjunctive(' + value + ')';\n          }\n          return value;\n        })\n      )\n      .concat(requestBuilder._getHitsHierarchicalFacetsAttributes(state))\n      .sort();\n\n    var facetFilters = requestBuilder._getFacetFilters(state);\n    var numericFilters = requestBuilder._getNumericFilters(state);\n    var tagFilters = requestBuilder._getTagFilters(state);\n    var additionalParams = {};\n\n    if (facets.length > 0) {\n      additionalParams.facets = facets.indexOf('*') > -1 ? ['*'] : facets;\n    }\n\n    if (tagFilters.length > 0) {\n      additionalParams.tagFilters = tagFilters;\n    }\n\n    if (facetFilters.length > 0) {\n      additionalParams.facetFilters = facetFilters;\n    }\n\n    if (numericFilters.length > 0) {\n      additionalParams.numericFilters = numericFilters;\n    }\n\n    var params = state.getQueryParams();\n\n    delete params.highlightPreTag;\n    delete params.highlightPostTag;\n    // not a valid search parameter, it is handled in _getCompositionQueries\n    delete params.index;\n\n    return sortObject(merge({}, params, additionalParams));\n  },\n\n  /**\n   * Build search parameters used to fetch a disjunctive facet\n   * @private\n   * @param  {SearchParameters} state The state from which to get the queries\n   * @param  {string} facet the associated facet name\n   * @param  {boolean} hierarchicalRootLevel ?? FIXME\n   * @return {object} The search parameters for a disjunctive facet\n   */\n  _getDisjunctiveFacetSearchParams: function (\n    state,\n    facet,\n    hierarchicalRootLevel\n  ) {\n    var facetFilters = requestBuilder._getFacetFilters(\n      state,\n      facet,\n      hierarchicalRootLevel\n    );\n    var numericFilters = requestBuilder._getNumericFilters(state, facet);\n    var tagFilters = requestBuilder._getTagFilters(state);\n    var additionalParams = {\n      hitsPerPage: 0,\n      page: 0,\n      analytics: false,\n      clickAnalytics: false,\n    };\n\n    if (tagFilters.length > 0) {\n      additionalParams.tagFilters = tagFilters;\n    }\n\n    var hierarchicalFacet = state.getHierarchicalFacetByName(facet);\n\n    if (hierarchicalFacet) {\n      additionalParams.facets =\n        requestBuilder._getDisjunctiveHierarchicalFacetAttribute(\n          state,\n          hierarchicalFacet,\n          hierarchicalRootLevel\n        );\n    } else {\n      additionalParams.facets = facet;\n    }\n\n    if (numericFilters.length > 0) {\n      additionalParams.numericFilters = numericFilters;\n    }\n\n    if (facetFilters.length > 0) {\n      additionalParams.facetFilters = facetFilters;\n    }\n\n    return sortObject(merge({}, state.getQueryParams(), additionalParams));\n  },\n\n  /**\n   * Return the numeric filters in an algolia request fashion\n   * @private\n   * @param {SearchParameters} state the state from which to get the filters\n   * @param {string} [facetName] the name of the attribute for which the filters should be excluded\n   * @return {string[]} the numeric filters in the algolia format\n   */\n  _getNumericFilters: function (state, facetName) {\n    if (state.numericFilters) {\n      return state.numericFilters;\n    }\n\n    var numericFilters = [];\n\n    Object.keys(state.numericRefinements).forEach(function (attribute) {\n      var operators = state.numericRefinements[attribute] || {};\n      Object.keys(operators).forEach(function (operator) {\n        var values = operators[operator] || [];\n        if (facetName !== attribute) {\n          values.forEach(function (value) {\n            if (Array.isArray(value)) {\n              var vs = value.map(function (v) {\n                return attribute + operator + v;\n              });\n              numericFilters.push(vs);\n            } else {\n              numericFilters.push(attribute + operator + value);\n            }\n          });\n        }\n      });\n    });\n\n    return numericFilters;\n  },\n\n  /**\n   * Return the tags filters depending on which format is used, either tagFilters or tagRefinements\n   * @private\n   * @param {SearchParameters} state the state from which to get the filters\n   * @return {string} Tag filters in a single string\n   */\n  _getTagFilters: function (state) {\n    if (state.tagFilters) {\n      return state.tagFilters;\n    }\n\n    return state.tagRefinements.join(',');\n  },\n\n  /**\n   * Build facetFilters parameter based on current refinements. The array returned\n   * contains strings representing the facet filters in the algolia format.\n   * @private\n   * @param  {SearchParameters} state The state from which to get the queries\n   * @param  {string} [facet] if set, the current disjunctive facet\n   * @param  {boolean} [hierarchicalRootLevel] ?? FIXME\n   * @return {array.<string>} The facet filters in the algolia format\n   */\n  _getFacetFilters: function (state, facet, hierarchicalRootLevel) {\n    var facetFilters = [];\n\n    var facetsRefinements = state.facetsRefinements || {};\n    Object.keys(facetsRefinements)\n      .sort()\n      .forEach(function (facetName) {\n        var facetValues = facetsRefinements[facetName] || [];\n        facetValues\n          .slice()\n          .sort()\n          .forEach(function (facetValue) {\n            facetFilters.push(facetName + ':' + facetValue);\n          });\n      });\n\n    var facetsExcludes = state.facetsExcludes || {};\n    Object.keys(facetsExcludes)\n      .sort()\n      .forEach(function (facetName) {\n        var facetValues = facetsExcludes[facetName] || [];\n        facetValues.sort().forEach(function (facetValue) {\n          facetFilters.push(facetName + ':-' + facetValue);\n        });\n      });\n\n    var disjunctiveFacetsRefinements = state.disjunctiveFacetsRefinements || {};\n    Object.keys(disjunctiveFacetsRefinements)\n      .sort()\n      .forEach(function (facetName) {\n        var facetValues = disjunctiveFacetsRefinements[facetName] || [];\n        if (facetName === facet || !facetValues || facetValues.length === 0) {\n          return;\n        }\n        var orFilters = [];\n\n        facetValues\n          .slice()\n          .sort()\n          .forEach(function (facetValue) {\n            orFilters.push(facetName + ':' + facetValue);\n          });\n\n        facetFilters.push(orFilters);\n      });\n\n    var hierarchicalFacetsRefinements =\n      state.hierarchicalFacetsRefinements || {};\n    Object.keys(hierarchicalFacetsRefinements)\n      .sort()\n      .forEach(function (facetName) {\n        var facetValues = hierarchicalFacetsRefinements[facetName] || [];\n        var facetValue = facetValues[0];\n\n        if (facetValue === undefined) {\n          return;\n        }\n\n        var hierarchicalFacet = state.getHierarchicalFacetByName(facetName);\n        var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n        var rootPath = state._getHierarchicalRootPath(hierarchicalFacet);\n        var attributeToRefine;\n        var attributesIndex;\n\n        // we ask for parent facet values only when the `facet` is the current hierarchical facet\n        if (facet === facetName) {\n          // if we are at the root level already, no need to ask for facet values, we get them from\n          // the hits query\n          if (\n            facetValue.indexOf(separator) === -1 ||\n            (!rootPath && hierarchicalRootLevel === true) ||\n            (rootPath &&\n              rootPath.split(separator).length ===\n                facetValue.split(separator).length)\n          ) {\n            return;\n          }\n\n          if (!rootPath) {\n            attributesIndex = facetValue.split(separator).length - 2;\n            facetValue = facetValue.slice(0, facetValue.lastIndexOf(separator));\n          } else {\n            attributesIndex = rootPath.split(separator).length - 1;\n            facetValue = rootPath;\n          }\n\n          attributeToRefine = hierarchicalFacet.attributes[attributesIndex];\n        } else {\n          attributesIndex = facetValue.split(separator).length - 1;\n\n          attributeToRefine = hierarchicalFacet.attributes[attributesIndex];\n        }\n\n        if (attributeToRefine) {\n          facetFilters.push([attributeToRefine + ':' + facetValue]);\n        }\n      });\n\n    return facetFilters;\n  },\n\n  _getHitsHierarchicalFacetsAttributes: function (state) {\n    var out = [];\n\n    return state.hierarchicalFacets.reduce(\n      // ask for as much levels as there's hierarchical refinements\n      function getHitsAttributesForHierarchicalFacet(\n        allAttributes,\n        hierarchicalFacet\n      ) {\n        var hierarchicalRefinement = state.getHierarchicalRefinement(\n          hierarchicalFacet.name\n        )[0];\n\n        // if no refinement, ask for root level\n        if (!hierarchicalRefinement) {\n          allAttributes.push(hierarchicalFacet.attributes[0]);\n          return allAttributes;\n        }\n\n        var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n        var level = hierarchicalRefinement.split(separator).length;\n        var newAttributes = hierarchicalFacet.attributes.slice(0, level + 1);\n\n        return allAttributes.concat(newAttributes);\n      },\n      out\n    );\n  },\n\n  _getDisjunctiveHierarchicalFacetAttribute: function (\n    state,\n    hierarchicalFacet,\n    rootLevel\n  ) {\n    var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n    if (rootLevel === true) {\n      var rootPath = state._getHierarchicalRootPath(hierarchicalFacet);\n      var attributeIndex = 0;\n\n      if (rootPath) {\n        attributeIndex = rootPath.split(separator).length;\n      }\n      return [hierarchicalFacet.attributes[attributeIndex]];\n    }\n\n    var hierarchicalRefinement =\n      state.getHierarchicalRefinement(hierarchicalFacet.name)[0] || '';\n    // if refinement is 'beers > IPA > Flying dog',\n    // then we want `facets: ['beers > IPA']` as disjunctive facet (parent level values)\n\n    var parentLevel = hierarchicalRefinement.split(separator).length - 1;\n    return hierarchicalFacet.attributes.slice(0, parentLevel + 1);\n  },\n\n  getSearchForFacetQuery: function (facetName, query, maxFacetHits, state) {\n    var stateForSearchForFacetValues = state.isDisjunctiveFacet(facetName)\n      ? state.clearRefinements(facetName)\n      : state;\n    var searchForFacetSearchParameters = {\n      facetQuery: query,\n      facetName: facetName,\n    };\n    if (typeof maxFacetHits === 'number') {\n      searchForFacetSearchParameters.maxFacetHits = maxFacetHits;\n    }\n    return sortObject(\n      merge(\n        {},\n        requestBuilder._getHitsSearchParams(stateForSearchForFacetValues),\n        searchForFacetSearchParameters\n      )\n    );\n  },\n};\n\nmodule.exports = requestBuilder;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/algoliasearch-helper/src/requestBuilder.js\n");

/***/ }),

/***/ "./node_modules/algoliasearch-helper/src/utils/isValidUserToken.js":
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = function isValidUserToken(userToken) {\n  if (userToken === null) {\n    return false;\n  }\n  return /^[a-zA-Z0-9_-]{1,64}$/.test(userToken);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL3V0aWxzL2lzVmFsaWRVc2VyVG9rZW4uanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Vhc2lmZW0tZG9jcy8uL25vZGVfbW9kdWxlcy9hbGdvbGlhc2VhcmNoLWhlbHBlci9zcmMvdXRpbHMvaXNWYWxpZFVzZXJUb2tlbi5qcz9hOThhIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc1ZhbGlkVXNlclRva2VuKHVzZXJUb2tlbikge1xuICBpZiAodXNlclRva2VuID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiAvXlthLXpBLVowLTlfLV17MSw2NH0kLy50ZXN0KHVzZXJUb2tlbik7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/algoliasearch-helper/src/utils/isValidUserToken.js\n");

/***/ }),

/***/ "./node_modules/algoliasearch-helper/src/utils/sortAndMergeRecommendations.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar find = __webpack_require__(\"./node_modules/algoliasearch-helper/src/functions/find.js\");\nvar flat = __webpack_require__(\"./node_modules/algoliasearch-helper/src/functions/flat.js\");\n\nfunction getAverageIndices(indexTracker, nrOfObjs) {\n  var avgIndices = [];\n\n  Object.keys(indexTracker).forEach(function (key) {\n    if (indexTracker[key].count < 2) {\n      indexTracker[key].indexSum += 100;\n    }\n    avgIndices.push({\n      objectID: key,\n      avgOfIndices: indexTracker[key].indexSum / nrOfObjs,\n    });\n  });\n\n  return avgIndices.sort(function (a, b) {\n    return a.avgOfIndices > b.avgOfIndices ? 1 : -1;\n  });\n}\n\nfunction sortAndMergeRecommendations(objectIDs, results) {\n  var indexTracker = {};\n\n  results.forEach(function (hits) {\n    hits.forEach(function (hit, index) {\n      if (objectIDs.includes(hit.objectID)) return;\n\n      if (!indexTracker[hit.objectID]) {\n        indexTracker[hit.objectID] = { indexSum: index, count: 1 };\n      } else {\n        indexTracker[hit.objectID] = {\n          indexSum: indexTracker[hit.objectID].indexSum + index,\n          count: indexTracker[hit.objectID].count + 1,\n        };\n      }\n    });\n  });\n\n  var sortedAverageIndices = getAverageIndices(indexTracker, results.length);\n\n  var finalOrder = sortedAverageIndices.reduce(function (\n    orderedHits,\n    avgIndexRef\n  ) {\n    var result = find(flat(results), function (hit) {\n      return hit.objectID === avgIndexRef.objectID;\n    });\n    return result ? orderedHits.concat(result) : orderedHits;\n  },\n  []);\n\n  return finalOrder;\n}\n\nmodule.exports = sortAndMergeRecommendations;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL3V0aWxzL3NvcnRBbmRNZXJnZVJlY29tbWVuZGF0aW9ucy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Vhc2lmZW0tZG9jcy8uL25vZGVfbW9kdWxlcy9hbGdvbGlhc2VhcmNoLWhlbHBlci9zcmMvdXRpbHMvc29ydEFuZE1lcmdlUmVjb21tZW5kYXRpb25zLmpzPzM4ZWQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZmluZCA9IHJlcXVpcmUoJy4uL2Z1bmN0aW9ucy9maW5kJyk7XG52YXIgZmxhdCA9IHJlcXVpcmUoJy4uL2Z1bmN0aW9ucy9mbGF0Jyk7XG5cbmZ1bmN0aW9uIGdldEF2ZXJhZ2VJbmRpY2VzKGluZGV4VHJhY2tlciwgbnJPZk9ianMpIHtcbiAgdmFyIGF2Z0luZGljZXMgPSBbXTtcblxuICBPYmplY3Qua2V5cyhpbmRleFRyYWNrZXIpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGlmIChpbmRleFRyYWNrZXJba2V5XS5jb3VudCA8IDIpIHtcbiAgICAgIGluZGV4VHJhY2tlcltrZXldLmluZGV4U3VtICs9IDEwMDtcbiAgICB9XG4gICAgYXZnSW5kaWNlcy5wdXNoKHtcbiAgICAgIG9iamVjdElEOiBrZXksXG4gICAgICBhdmdPZkluZGljZXM6IGluZGV4VHJhY2tlcltrZXldLmluZGV4U3VtIC8gbnJPZk9ianMsXG4gICAgfSk7XG4gIH0pO1xuXG4gIHJldHVybiBhdmdJbmRpY2VzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gYS5hdmdPZkluZGljZXMgPiBiLmF2Z09mSW5kaWNlcyA/IDEgOiAtMTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHNvcnRBbmRNZXJnZVJlY29tbWVuZGF0aW9ucyhvYmplY3RJRHMsIHJlc3VsdHMpIHtcbiAgdmFyIGluZGV4VHJhY2tlciA9IHt9O1xuXG4gIHJlc3VsdHMuZm9yRWFjaChmdW5jdGlvbiAoaGl0cykge1xuICAgIGhpdHMuZm9yRWFjaChmdW5jdGlvbiAoaGl0LCBpbmRleCkge1xuICAgICAgaWYgKG9iamVjdElEcy5pbmNsdWRlcyhoaXQub2JqZWN0SUQpKSByZXR1cm47XG5cbiAgICAgIGlmICghaW5kZXhUcmFja2VyW2hpdC5vYmplY3RJRF0pIHtcbiAgICAgICAgaW5kZXhUcmFja2VyW2hpdC5vYmplY3RJRF0gPSB7IGluZGV4U3VtOiBpbmRleCwgY291bnQ6IDEgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluZGV4VHJhY2tlcltoaXQub2JqZWN0SURdID0ge1xuICAgICAgICAgIGluZGV4U3VtOiBpbmRleFRyYWNrZXJbaGl0Lm9iamVjdElEXS5pbmRleFN1bSArIGluZGV4LFxuICAgICAgICAgIGNvdW50OiBpbmRleFRyYWNrZXJbaGl0Lm9iamVjdElEXS5jb3VudCArIDEsXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuXG4gIHZhciBzb3J0ZWRBdmVyYWdlSW5kaWNlcyA9IGdldEF2ZXJhZ2VJbmRpY2VzKGluZGV4VHJhY2tlciwgcmVzdWx0cy5sZW5ndGgpO1xuXG4gIHZhciBmaW5hbE9yZGVyID0gc29ydGVkQXZlcmFnZUluZGljZXMucmVkdWNlKGZ1bmN0aW9uIChcbiAgICBvcmRlcmVkSGl0cyxcbiAgICBhdmdJbmRleFJlZlxuICApIHtcbiAgICB2YXIgcmVzdWx0ID0gZmluZChmbGF0KHJlc3VsdHMpLCBmdW5jdGlvbiAoaGl0KSB7XG4gICAgICByZXR1cm4gaGl0Lm9iamVjdElEID09PSBhdmdJbmRleFJlZi5vYmplY3RJRDtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0ID8gb3JkZXJlZEhpdHMuY29uY2F0KHJlc3VsdCkgOiBvcmRlcmVkSGl0cztcbiAgfSxcbiAgW10pO1xuXG4gIHJldHVybiBmaW5hbE9yZGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNvcnRBbmRNZXJnZVJlY29tbWVuZGF0aW9ucztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/algoliasearch-helper/src/utils/sortAndMergeRecommendations.js\n");

/***/ }),

/***/ "./node_modules/algoliasearch-helper/src/version.js":
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = '3.25.0';\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL3ZlcnNpb24uanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWFzaWZlbS1kb2NzLy4vbm9kZV9tb2R1bGVzL2FsZ29saWFzZWFyY2gtaGVscGVyL3NyYy92ZXJzaW9uLmpzPzQ4MzUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICczLjI1LjAnO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/algoliasearch-helper/src/version.js\n");

/***/ })

}]);