"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkeasifem_docs"] = globalThis["webpackChunkeasifem_docs"] || []).push([["content---docs-api-csr-sparsity-set-sparsity-709-1b3"],{

/***/ "./docs/docs-api/CSRSparsity/SetSparsity.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  assets: () => (/* binding */ assets),\n  contentTitle: () => (/* binding */ SetSparsity_contentTitle),\n  \"default\": () => (/* binding */ SetSparsity_MDXContent),\n  frontMatter: () => (/* binding */ SetSparsity_frontMatter),\n  metadata: () => (/* reexport */ site_docs_docs_api_csr_sparsity_set_sparsity_md_709_namespaceObject),\n  toc: () => (/* binding */ SetSparsity_toc)\n});\n\n;// ./.docusaurus/docusaurus-plugin-content-docs/docs-api/site-docs-docs-api-csr-sparsity-set-sparsity-md-709.json\nconst site_docs_docs_api_csr_sparsity_set_sparsity_md_709_namespaceObject = /*#__PURE__*/JSON.parse('{\"id\":\"CSRSparsity/SetSparsity\",\"title\":\"SetSparsity\",\"description\":\"This subroutine sets the sparsity pattern in the CSRSparsity object.\",\"source\":\"@site/docs/docs-api/CSRSparsity/SetSparsity.md\",\"sourceDirName\":\"CSRSparsity\",\"slug\":\"/CSRSparsity/SetSparsity\",\"permalink\":\"/docs-api/CSRSparsity/SetSparsity\",\"draft\":false,\"unlisted\":false,\"editUrl\":\"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/CSRSparsity/SetSparsity.md\",\"tags\":[],\"version\":\"current\",\"lastUpdatedAt\":1539502055000,\"frontMatter\":{},\"sidebar\":\"tutorialSidebar\",\"previous\":{\"title\":\"Initiate\",\"permalink\":\"/docs-api/CSRSparsity/Initiate\"},\"next\":{\"title\":\"Shape\",\"permalink\":\"/docs-api/CSRSparsity/Shape\"}}');\n// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n// EXTERNAL MODULE: ./node_modules/@mdx-js/react/lib/index.js\nvar lib = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n;// ./docs/docs-api/CSRSparsity/examples/_SetSparsity_test_2.md\n\n\nconst frontMatter = {};\nconst contentTitle = undefined;\n\n\n\n\n\nconst toc = [{\n  \"value\": \"Example 4\",\n  \"id\": \"example-4\",\n  \"level\": 3\n}];\nfunction _createMdxContent(props) {\n  const _components = {\n    admonition: \"admonition\",\n    code: \"code\",\n    h3: \"h3\",\n    mdxAdmonitionTitle: \"mdxAdmonitionTitle\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.h3, {\n      id: \"example-4\",\n      children: \"Example 4\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"This example shows how to set sparsity pattern in an instance of \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"CSRSparsity_\"\n      }), \".\"]\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"The storage pattern is \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"FMT_NODES\"\n      }), \", and matrix is not a block matrix.\"]\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.admonition, {\n      type: \"note\",\n      children: [(0,jsx_runtime.jsx)(_components.mdxAdmonitionTitle, {\n        children: (0,jsx_runtime.jsx)(_components.code, {\n          children: \"setSparsity\"\n        })\n      }), (0,jsx_runtime.jsxs)(_components.p, {\n        children: [\"Setting sparsity pattern. The \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"row\"\n        }), \" and \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"col\"\n        }), \" are the row and column number of the matrix.\"]\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\nUSE easifemBase\\nIMPLICIT NONE\\n\\n  TYPE( CSRSparsity_ ) :: obj\\n  TYPE( DOF_ ) :: dofobj\\n  INTEGER( I4B ) :: i\\n\\n  CALL Initiate( &\\n    & obj=dofobj, &\\n    & tNodes=[12], &\\n    & names=['K'], &\\n    & spaceCompo=[1], &\\n    & timeCompo=[1], &\\n    & storageFMT=NODES_FMT )\\n\\n  CALL Initiate( &\\n    & obj, &\\n    & ncol=(.tnodes. dofobj),  &\\n    & nrow=(.tnodes. dofobj), &\\n    & idof=dofobj, &\\n    & jdof=dofobj )\\n\\nCALL Setsparsity( obj, row=1, col=[1,2,6,5] )\\nCALL Setsparsity( obj, row=2, col=[2,1,3,5,6,7] )\\nCALL Setsparsity( obj, row=3, col=[3,2,4,6,7,8] )\\nCALL Setsparsity( obj, row=4, col=[4,3,7,8] )\\nCALL Setsparsity( obj, row=5, col=[5,1,9,2,6,10] )\\nCALL Setsparsity( obj, row=6, col=[6,2,10,1,5,9,3,7,11] )\\nCALL Setsparsity( obj, row=7, col=[7,6,8,2,3,4,10,11,12] )\\nCALL Setsparsity( obj, row=8, col=[8,4,12,3,7,11] )\\nCALL Setsparsity( obj, row=9, col=[9,5,6,10] )\\nCALL Setsparsity( obj, row=10, col=[10,9,11,5,6,7] )\\nCALL Setsparsity( obj, row=11, col=[11,10,12,6,7,8] )\\nCALL Setsparsity( obj, row=12, col=[12,7,8,11] )\\n\\nCALL setSparsity( obj )\\n\\nCALL Display( obj, \\\"obj=\\\" )\\n\\n  CALL Deallocate( dofobj )\\n  CALL Deallocate( obj )\\nEND PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/CSRSparsity/examples/_SetSparsity_test_3.md\n\n\nconst _SetSparsity_test_3_frontMatter = {};\nconst _SetSparsity_test_3_contentTitle = undefined;\n\n\n\n\n\nconst _SetSparsity_test_3_toc = [{\n  \"value\": \"Example 5\",\n  \"id\": \"example-5\",\n  \"level\": 3\n}];\nfunction _SetSparsity_test_3_createMdxContent(props) {\n  const _components = {\n    admonition: \"admonition\",\n    code: \"code\",\n    h3: \"h3\",\n    mdxAdmonitionTitle: \"mdxAdmonitionTitle\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.h3, {\n      id: \"example-5\",\n      children: \"Example 5\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"This example shows how to set sparsity pattern in an instance of \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"CSRSparsity_\"\n      }), \".\"]\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"The storage pattern is \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"FMT_DOF\"\n      }), \", and matrix is not a block matrix.\"]\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.admonition, {\n      type: \"info\",\n      children: [(0,jsx_runtime.jsx)(_components.mdxAdmonitionTitle, {\n        children: (0,jsx_runtime.jsx)(_components.code, {\n          children: \"SetSparsity\"\n        })\n      }), (0,jsx_runtime.jsxs)(_components.p, {\n        children: [\"Setting sparsity pattern. The \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"row\"\n        }), \" and \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"col\"\n        }), \" are the row and column number of the matrix.\"]\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\nUSE easifemBase\\nIMPLICIT NONE\\nTYPE( CSRSparsity_ ) :: obj\\nTYPE( DOF_ ) :: dofobj\\nINTEGER( i4b ) :: i\\n\\nCALL Initiate( &\\n  & obj=dofobj, &\\n  & tNodes=[12], &\\n  & names=['K'], &\\n  & spaceCompo=[3], &\\n  & timeCompo=[2], &\\n  & storageFMT=DOF_FMT )\\n\\nCALL Initiate( obj, ncol=.tNodes. dofobj, nrow=.tNodes. dofobj, idof=dofobj, &\\n    & jdof=dofobj )\\n\\nCALL SetSparsity( obj, 1, [1,2,6,5] )\\nCALL SetSparsity( obj, 2, [2,1,3,5,6,7] )\\nCALL SetSparsity( obj, 3, [3,2,4,6,7,8] )\\nCALL SetSparsity( obj, 4, [4,3,7,8] )\\nCALL SetSparsity( obj, 5, [5,1,9,2,6,10] )\\nCALL SetSparsity( obj, 6, [6,2,10,1,5,9,3,7,11] )\\nCALL SetSparsity( obj, 7, [7,6,8,2,3,4,10,11,12] )\\nCALL SetSparsity( obj, 8, [8,4,12,3,7,11] )\\nCALL SetSparsity( obj, 9, [9,5,6,10] )\\nCALL SetSparsity( obj, 10, [10,9,11,5,6,7] )\\nCALL SetSparsity( obj, 11, [11,10,12,6,7,8] )\\nCALL SetSparsity( obj, 12, [12,7,8,11] )\\n\\nCALL SetSparsity(obj)\\n\\nCALL Display( obj, \\\"obj=\\\" )\\n\\nCALL Deallocate( dofobj )\\nCALL Deallocate( obj )\\nEND PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction _SetSparsity_test_3_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_SetSparsity_test_3_createMdxContent, {\n      ...props\n    })\n  }) : _SetSparsity_test_3_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/CSRSparsity/examples/_SetSparsity_test_1.md\n\n\nconst _SetSparsity_test_1_frontMatter = {};\nconst _SetSparsity_test_1_contentTitle = undefined;\n\n\n\n\n\nconst _SetSparsity_test_1_toc = [{\n  \"value\": \"Example 3\",\n  \"id\": \"example-3\",\n  \"level\": 3\n}, {\n  \"value\": \"Usage\",\n  \"id\": \"usage\",\n  \"level\": 2\n}];\nfunction _SetSparsity_test_1_createMdxContent(props) {\n  const _components = {\n    admonition: \"admonition\",\n    code: \"code\",\n    h2: \"h2\",\n    h3: \"h3\",\n    li: \"li\",\n    mdxAdmonitionTitle: \"mdxAdmonitionTitle\",\n    p: \"p\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.h3, {\n      id: \"example-3\",\n      children: \"Example 3\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"This example shows how to Set sparsity pattern in an instance of \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"CSRSparsity_\"\n      }), \". The storage pattern is \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"FMT_DOF\"\n      }), \", and matrix is block matrix.\"]\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"Make an instance of \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"DOF_\"\n        }), \" which contains the storage pattern.\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"Initiate an instance of \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"CSRSparsity_\"\n        }), \".\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.admonition, {\n      type: \"note\",\n      children: [(0,jsx_runtime.jsx)(_components.mdxAdmonitionTitle, {\n        children: (0,jsx_runtime.jsx)(_components.code, {\n          children: \"SetSparsity\"\n        })\n      }), (0,jsx_runtime.jsxs)(_components.p, {\n        children: [\"In this example we will set sparsity pattern in each block. The block address is given by\\nivar and jvar. \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"row\"\n        }), \" and \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"col\"\n        }), \" are the row and column number in that\\nblock.\"]\n      }), (0,jsx_runtime.jsxs)(_components.p, {\n        children: [\"We should now call \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"SetSparsity()\"\n        }), \" to indicate that setting of sparsity pattern is finished. This step will compact the storage.\"]\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"usage\",\n      children: \"Usage\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\nUSE easifemBase\\nIMPLICIT NONE\\n\\n  TYPE( CSRSparsity_ ) :: obj\\n  TYPE( DOF_ ) :: dofobj\\n  INTEGER( I4B ) :: i\\n\\n  CALL Initiate( &\\n    & obj=dofobj, &\\n    & tNodes=[6, 3], &\\n    & names=['V', 'P'], &\\n    & spaceCompo=[3, 1], &\\n    & timeCompo=[1, 1], &\\n    & storageFMT=FMT_DOF )\\n\\n  CALL Initiate( &\\n    & obj, &\\n    & ncol=(.tnodes. dofobj), &\\n    & nrow=(.tNodes. dofobj),  &\\n    & idof=dofobj, &\\n    & jdof=dofobj )\\n\\n!Block 1,1 ( V, V )\\n\\nCALL SetSparsity( obj=obj, row=1, col=[1,2,3,4,5,6], ivar=1, jvar=1 )\\nCALL SetSparsity( obj=obj, row=2, col=[1,2,3,4,5,6], ivar=1, jvar=1 )\\nCALL SetSparsity( obj=obj, row=3, col=[1,2,3,4,5,6], ivar=1, jvar=1 )\\nCALL SetSparsity( obj=obj, row=4, col=[1,2,3,4,5,6], ivar=1, jvar=1 )\\nCALL SetSparsity( obj=obj, row=5, col=[1,2,3,4,5,6], ivar=1, jvar=1 )\\nCALL SetSparsity( obj=obj, row=6, col=[1,2,3,4,5,6], ivar=1, jvar=1 )\\n\\n!Block 1,2 (V, P)\\n\\nCALL SetSparsity( obj=obj, row=1, col=[1,2,3], ivar=1, jvar=2 )\\nCALL SetSparsity( obj=obj, row=2, col=[1,2,3], ivar=1, jvar=2 )\\nCALL SetSparsity( obj=obj, row=3, col=[1,2,3], ivar=1, jvar=2 )\\nCALL SetSparsity( obj=obj, row=4, col=[1,2,3], ivar=1, jvar=2 )\\nCALL SetSparsity( obj=obj, row=5, col=[1,2,3], ivar=1, jvar=2 )\\nCALL SetSparsity( obj=obj, row=6, col=[1,2,3], ivar=1, jvar=2 )\\n\\n!Block 2,1 (P,V)\\n\\nCALL SetSparsity( obj=obj, row=1, col=[1,2,3,4,5,6], ivar=2, jvar=1 )\\nCALL SetSparsity( obj=obj, row=2, col=[1,2,3,4,5,6], ivar=2, jvar=1 )\\nCALL SetSparsity( obj=obj, row=3, col=[1,2,3,4,5,6], ivar=2, jvar=1 )\\n\\n!Block 2,2 (P,P)\\n\\nCALL SetSparsity( obj=obj, row=1, col=[1,2,3], ivar=2, jvar=2 )\\nCALL SetSparsity( obj=obj, row=2, col=[1,2,3], ivar=2, jvar=2 )\\nCALL SetSparsity( obj=obj, row=3, col=[1,2,3], ivar=2, jvar=2 )\\n\\nCALL SetSparsity( obj )\\n\\nCALL Display( obj, \\\"\\\" )\\n\\nCALL Deallocate( dofobj )\\nCALL Deallocate( obj )\\nEND PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction _SetSparsity_test_1_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_SetSparsity_test_1_createMdxContent, {\n      ...props\n    })\n  }) : _SetSparsity_test_1_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/CSRSparsity/examples/_SetSparsity_test_5.md\n\n\nconst _SetSparsity_test_5_frontMatter = {};\nconst _SetSparsity_test_5_contentTitle = undefined;\n\n\n\n\n\nconst _SetSparsity_test_5_toc = [{\n  \"value\": \"example 7\",\n  \"id\": \"example-7\",\n  \"level\": 3\n}];\nfunction _SetSparsity_test_5_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    h3: \"h3\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.h3, {\n      id: \"example-7\",\n      children: \"example 7\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This example shows how to set sparsity pattern by using a graph matrix. A graph matrix is a two-d array of 1 and 0. If graph( i, j ) is 1 then row-i and row-j are connected.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\nUSE easifemBase\\nIMPLICIT NONE\\nTYPE( CSRSparsity_) :: obj\\nINTEGER( I4B ), PARAMETER :: nrow=5, ncol=5\\nINTEGER( I4B ) :: i, graph( 5, 5 )\\n\\ngraph = 0\\ngraph( 1,2 ) = 1\\ngraph( 2,3 ) = 1\\ngraph( 2,4 ) = 1\\ngraph( 2,5 ) = 1\\n\\nCALL Initiate( obj=obj, nrow=nrow, ncol=ncol )\\n\\nCALL SetSparsity(obj, graph=graph)\\nCALL SetSparsity(obj)\\n\\nCALL Display( obj, \\\"obj\\\" )\\n\\nCALL Deallocate( obj )\\nEND PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction _SetSparsity_test_5_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_SetSparsity_test_5_createMdxContent, {\n      ...props\n    })\n  }) : _SetSparsity_test_5_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/CSRSparsity/examples/_SetSparsity_test_6.md\n\n\nconst _SetSparsity_test_6_frontMatter = {};\nconst _SetSparsity_test_6_contentTitle = undefined;\n\n\n\n\n\nconst _SetSparsity_test_6_toc = [{\n  \"value\": \"example 8\",\n  \"id\": \"example-8\",\n  \"level\": 3\n}];\nfunction _SetSparsity_test_6_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    h3: \"h3\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.h3, {\n      id: \"example-8\",\n      children: \"example 8\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This example shows how to set sparsity pattern by using a graph matrix. A graph matrix is a two-d array of true and false. if graph( i, j ) is true then row-i and row-j are connected.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\nUSE easifemBase\\nIMPLICIT NONE\\nTYPE( CSRSparsity_) :: obj\\nINTEGER( I4B ), PARAMETER :: nrow=5, ncol=5\\nINTEGER( I4B ) :: i\\nLOGICAL( LGT ) :: graph( nrow, ncol )\\n\\ngraph = .FALSE.\\ngraph( 1,2 ) = .TRUE.\\ngraph( 2,3 ) = .TRUE.\\ngraph( 2,4 ) = .TRUE.\\ngraph( 2,5 ) = .TRUE.\\n\\nCALL Initiate( obj=obj, nrow=nrow, ncol=ncol )\\n\\nCALL SetSparsity(obj, graph=graph)\\nCALL SetSparsity(obj)\\n\\nCALL Display( obj, \\\"obj\\\" )\\n\\nCALL Deallocate( obj )\\nEND PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction _SetSparsity_test_6_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_SetSparsity_test_6_createMdxContent, {\n      ...props\n    })\n  }) : _SetSparsity_test_6_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/CSRSparsity/SetSparsity.md\n\n\nconst SetSparsity_frontMatter = {};\nconst SetSparsity_contentTitle = 'SetSparsity';\n\nconst assets = {\n\n};\n\n\n\n\n\n\n\n\nconst SetSparsity_toc = [{\n  \"value\": \"Interface 1 (Sparsity by row and column)\",\n  \"id\": \"interface-1-sparsity-by-row-and-column\",\n  \"level\": 2\n}, ...toc, {\n  \"value\": \"Interface 2 (Sparsity by row and cols)\",\n  \"id\": \"interface-2-sparsity-by-row-and-cols\",\n  \"level\": 2\n}, ..._SetSparsity_test_3_toc, {\n  \"value\": \"Interface 3 (Sparsity for block matrix)\",\n  \"id\": \"interface-3-sparsity-for-block-matrix\",\n  \"level\": 2\n}, ..._SetSparsity_test_1_toc, {\n  \"value\": \"Interface 4 (Sparsity for block matrix)\",\n  \"id\": \"interface-4-sparsity-for-block-matrix\",\n  \"level\": 2\n}, {\n  \"value\": \"Interface 5 (Sparsity by graph)\",\n  \"id\": \"interface-5-sparsity-by-graph\",\n  \"level\": 2\n}, ..._SetSparsity_test_5_toc, ..._SetSparsity_test_6_toc];\nfunction SetSparsity_createMdxContent(props) {\n  const _components = {\n    admonition: \"admonition\",\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    header: \"header\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  }, {TabItem, Tabs} = _components;\n  if (!TabItem) _missingMdxReference(\"TabItem\", true);\n  if (!Tabs) _missingMdxReference(\"Tabs\", true);\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.header, {\n      children: (0,jsx_runtime.jsx)(_components.h1, {\n        id: \"setsparsity\",\n        children: \"SetSparsity\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"This subroutine sets the sparsity pattern in the \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"CSRSparsity\"\n      }), \" object.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.admonition, {\n      title: \"SetSparsity\",\n      type: \"info\",\n      children: (0,jsx_runtime.jsxs)(_components.p, {\n        children: [\"When you are done setting the sparsity pattern, you must call \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"SetSparsity()\"\n        }), \" without arguments. This subroutine then creates a compact data inside the instance of \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"CSRSparsity_\"\n        }), \".\"]\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-1-sparsity-by-row-and-column\",\n      children: \"Interface 1 (Sparsity by row and column)\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs, {\n      children: [(0,jsx_runtime.jsxs)(TabItem, {\n        value: \"interface\",\n        label: \"Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"MODULE SUBROUTINE SetSparsity( obj, Row, Col )\\n  TYPE( CSRSparsity_ ), INTENT( INOUT ) :: obj\\n  INTEGER( I4B ), INTENT( IN ) :: Row\\n  INTEGER( I4B ), INTENT( IN ) :: Col( : )\\nEND SUBROUTINE SetSparsity\\n\"\n          })\n        }), (0,jsx_runtime.jsx)(_components.admonition, {\n          type: \"info\",\n          children: (0,jsx_runtime.jsxs)(_components.p, {\n            children: [\"This subroutine sets the sparsity pattern of a given row. If \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"obj%tdof\"\n            }), \" is equal to 1, then \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"Col\"\n            }), \" is sorted in increasing order and appended to \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"obj%Row(Row)\"\n            }), \". If \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"obj%tdof\"\n            }), \" is not equal to 1, then based on the storage format and \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"Col\"\n            }), \", connectivity information is generated. The second interface is similar to the first one, however, this times several rows can be given.\"]\n          })\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem, {\n        value: \"example\",\n        label: \"example\",\n        children: (0,jsx_runtime.jsx)(MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem, {\n        value: \"close\",\n        label: \"↢ close\"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-2-sparsity-by-row-and-cols\",\n      children: \"Interface 2 (Sparsity by row and cols)\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs, {\n      children: [(0,jsx_runtime.jsx)(TabItem, {\n        value: \"interface\",\n        label: \"Interface\",\n        default: true,\n        children: (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"MODULE SUBROUTINE SetSparsity( obj, Row, Col )\\n  TYPE( CSRSparsity_ ), INTENT( INOUT ) :: obj\\n  INTEGER( I4B ), INTENT( IN ) :: Row( : )\\n    !! row number\\n  TYPE( IntVector_ ), INTENT( IN ) :: Col( : )\\n    !! column number\\nEND SUBROUTINE SetSparsity\\n\"\n          })\n        })\n      }), (0,jsx_runtime.jsx)(TabItem, {\n        value: \"example\",\n        label: \"example\",\n        children: (0,jsx_runtime.jsx)(_SetSparsity_test_3_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem, {\n        value: \"close\",\n        label: \"↢ close\"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-3-sparsity-for-block-matrix\",\n      children: \"Interface 3 (Sparsity for block matrix)\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"To handle the block sparsity we can use following routines.\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs, {\n      children: [(0,jsx_runtime.jsxs)(TabItem, {\n        value: \"interface\",\n        label: \"Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE SetSparsity\\n  MODULE SUBROUTINE obj_SetSparsity3(obj, row, col, ivar, jvar)\\n    TYPE(CSRSparsity_), INTENT(INOUT) :: obj\\n    INTEGER(I4B), INTENT(IN) :: row\\n    !! row number\\n    INTEGER(I4B), INTENT(IN) :: col(:)\\n    !! sparsity of row, column numbers\\n    INTEGER(I4B), INTENT(IN) :: ivar\\n    !! block address (row index)\\n    INTEGER(I4B), INTENT(IN) :: jvar\\n    !! block address (col index)\\n  END SUBROUTINE obj_SetSparsity3\\nEND INTERFACE SetSparsity\\n\"\n          })\n        }), (0,jsx_runtime.jsx)(_components.admonition, {\n          type: \"note\",\n          children: (0,jsx_runtime.jsxs)(_components.p, {\n            children: [\"While calling \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"SetSparsity()\"\n            }), \" user has to deal with the mesh node numbers only, because this routine reads the information stored inside the \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"DOF_\"\n            }), \" object field, and take care of sparsity patterns for all degrees of freedom.\"]\n          })\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem, {\n        value: \"example\",\n        label: \"example\",\n        children: (0,jsx_runtime.jsx)(_SetSparsity_test_1_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem, {\n        value: \"close\",\n        label: \"↢ close\"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-4-sparsity-for-block-matrix\",\n      children: \"Interface 4 (Sparsity for block matrix)\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE SetSparsity\\n  MODULE SUBROUTINE obj_SetSparsity4(obj, Row, Col, iVar, jVar)\\n    TYPE(CSRSparsity_), INTENT(INOUT) :: obj\\n    INTEGER(I4B), INTENT(IN) :: Row(:)\\n    !! several row numbers\\n    TYPE(IntVector_), INTENT(IN) :: Col(:)\\n    !! column index for each row number\\n    INTEGER(I4B), INTENT(IN) :: iVar\\n    !! block address (row index)\\n    INTEGER(I4B), INTENT(IN) :: jVar\\n    !! block address (col index)\\n  END SUBROUTINE obj_SetSparsity4\\nEND INTERFACE SetSparsity\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-5-sparsity-by-graph\",\n      children: \"Interface 5 (Sparsity by graph)\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs, {\n      children: [(0,jsx_runtime.jsxs)(TabItem, {\n        value: \"interface\",\n        label: \"Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE SetSparsity\\n  MODULE SUBROUTINE obj_SetSparsity5(obj, graph)\\n    TYPE(CSRSparsity_), INTENT(INOUT) :: obj\\n    INTEGER(I4B), INTENT(IN) :: graph(:, :)\\n  !! graph of sparsity\\n  !! If graph( i, j ) .EQ. 0, then i and j are not connected\\n  !! else they are connected.\\n  END SUBROUTINE obj_SetSparsity5\\nEND INTERFACE SetSparsity\\n\"\n          })\n        }), (0,jsx_runtime.jsx)(_components.p, {\n          children: \"This subroutine Sets the sparsity pattern by using the graph.\\ngraph( i, j ) is either 0 or 1, if zero then there is not connection\\nbetween row-i and row-j\"\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem, {\n        value: \"interface2\",\n        label: \"Interface 2\",\n        children: (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE SetSparsity\\n  MODULE SUBROUTINE obj_SetSparsity6(obj, graph)\\n    TYPE(CSRSparsity_), INTENT(INOUT) :: obj\\n    LOGICAL(LGT), INTENT(IN) :: graph(:, :)\\n  !! graph of sparsity\\n  !! If graph( i, j ) .EQ. FALSE, then i and j are not connected\\n  !! else they are connected.\\n  END SUBROUTINE obj_SetSparsity6\\nEND INTERFACE SetSparsity\\n\"\n          })\n        })\n      }), (0,jsx_runtime.jsx)(TabItem, {\n        value: \"example\",\n        label: \"example\",\n        children: (0,jsx_runtime.jsx)(_SetSparsity_test_5_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem, {\n        value: \"example2\",\n        label: \"example 2\",\n        children: (0,jsx_runtime.jsx)(_SetSparsity_test_6_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem, {\n        value: \"close\",\n        label: \"↢ close\"\n      })]\n    })]\n  });\n}\nfunction SetSparsity_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(SetSparsity_createMdxContent, {\n      ...props\n    })\n  }) : SetSparsity_createMdxContent(props);\n}\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./docs/docs-api/CSRSparsity/SetSparsity.md\n");

/***/ }),

/***/ "./node_modules/@mdx-js/react/lib/index.js":
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MDXProvider: () => (/* binding */ MDXProvider),\n/* harmony export */   useMDXComponents: () => (/* binding */ useMDXComponents)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/react/index.js\");\n/**\n * @import {MDXComponents} from 'mdx/types.js'\n * @import {Component, ReactElement, ReactNode} from 'react'\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\n\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nfunction useMDXComponents(components) {\n  const contextComponents = react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {ReactElement}\n *   Element.\n * @satisfies {Component}\n */\nfunction MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Vhc2lmZW0tZG9jcy8uL25vZGVfbW9kdWxlcy9AbWR4LWpzL3JlYWN0L2xpYi9pbmRleC5qcz9hZjEyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGltcG9ydCB7TURYQ29tcG9uZW50c30gZnJvbSAnbWR4L3R5cGVzLmpzJ1xuICogQGltcG9ydCB7Q29tcG9uZW50LCBSZWFjdEVsZW1lbnQsIFJlYWN0Tm9kZX0gZnJvbSAncmVhY3QnXG4gKi9cblxuLyoqXG4gKiBAY2FsbGJhY2sgTWVyZ2VDb21wb25lbnRzXG4gKiAgIEN1c3RvbSBtZXJnZSBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7UmVhZG9ubHk8TURYQ29tcG9uZW50cz59IGN1cnJlbnRDb21wb25lbnRzXG4gKiAgIEN1cnJlbnQgY29tcG9uZW50cyBmcm9tIHRoZSBjb250ZXh0LlxuICogQHJldHVybnMge01EWENvbXBvbmVudHN9XG4gKiAgIEFkZGl0aW9uYWwgY29tcG9uZW50cy5cbiAqXG4gKiBAdHlwZWRlZiBQcm9wc1xuICogICBDb25maWd1cmF0aW9uIGZvciBgTURYUHJvdmlkZXJgLlxuICogQHByb3BlcnR5IHtSZWFjdE5vZGUgfCBudWxsIHwgdW5kZWZpbmVkfSBbY2hpbGRyZW5dXG4gKiAgIENoaWxkcmVuIChvcHRpb25hbCkuXG4gKiBAcHJvcGVydHkge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+IHwgTWVyZ2VDb21wb25lbnRzIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2NvbXBvbmVudHNdXG4gKiAgIEFkZGl0aW9uYWwgY29tcG9uZW50cyB0byB1c2Ugb3IgYSBmdW5jdGlvbiB0aGF0IGNyZWF0ZXMgdGhlbSAob3B0aW9uYWwpLlxuICogQHByb3BlcnR5IHtib29sZWFuIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2Rpc2FibGVQYXJlbnRDb250ZXh0PWZhbHNlXVxuICogICBUdXJuIG9mZiBvdXRlciBjb21wb25lbnQgY29udGV4dCAoZGVmYXVsdDogYGZhbHNlYCkuXG4gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuXG4vKiogQHR5cGUge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+fSAqL1xuY29uc3QgZW1wdHlDb21wb25lbnRzID0ge31cblxuY29uc3QgTURYQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoZW1wdHlDb21wb25lbnRzKVxuXG4vKipcbiAqIEdldCBjdXJyZW50IGNvbXBvbmVudHMgZnJvbSB0aGUgTURYIENvbnRleHQuXG4gKlxuICogQHBhcmFtIHtSZWFkb25seTxNRFhDb21wb25lbnRzPiB8IE1lcmdlQ29tcG9uZW50cyB8IG51bGwgfCB1bmRlZmluZWR9IFtjb21wb25lbnRzXVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMgdG8gdXNlIG9yIGEgZnVuY3Rpb24gdGhhdCBjcmVhdGVzIHRoZW0gKG9wdGlvbmFsKS5cbiAqIEByZXR1cm5zIHtNRFhDb21wb25lbnRzfVxuICogICBDdXJyZW50IGNvbXBvbmVudHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VNRFhDb21wb25lbnRzKGNvbXBvbmVudHMpIHtcbiAgY29uc3QgY29udGV4dENvbXBvbmVudHMgPSBSZWFjdC51c2VDb250ZXh0KE1EWENvbnRleHQpXG5cbiAgLy8gTWVtb2l6ZSB0byBhdm9pZCB1bm5lY2Vzc2FyeSB0b3AtbGV2ZWwgY29udGV4dCBjaGFuZ2VzXG4gIHJldHVybiBSZWFjdC51c2VNZW1vKFxuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIEN1c3RvbSBtZXJnZSB2aWEgYSBmdW5jdGlvbiBwcm9wXG4gICAgICBpZiAodHlwZW9mIGNvbXBvbmVudHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGNvbXBvbmVudHMoY29udGV4dENvbXBvbmVudHMpXG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7Li4uY29udGV4dENvbXBvbmVudHMsIC4uLmNvbXBvbmVudHN9XG4gICAgfSxcbiAgICBbY29udGV4dENvbXBvbmVudHMsIGNvbXBvbmVudHNdXG4gIClcbn1cblxuLyoqXG4gKiBQcm92aWRlciBmb3IgTURYIGNvbnRleHQuXG4gKlxuICogQHBhcmFtIHtSZWFkb25seTxQcm9wcz59IHByb3BlcnRpZXNcbiAqICAgUHJvcGVydGllcy5cbiAqIEByZXR1cm5zIHtSZWFjdEVsZW1lbnR9XG4gKiAgIEVsZW1lbnQuXG4gKiBAc2F0aXNmaWVzIHtDb21wb25lbnR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBNRFhQcm92aWRlcihwcm9wZXJ0aWVzKSB7XG4gIC8qKiBAdHlwZSB7UmVhZG9ubHk8TURYQ29tcG9uZW50cz59ICovXG4gIGxldCBhbGxDb21wb25lbnRzXG5cbiAgaWYgKHByb3BlcnRpZXMuZGlzYWJsZVBhcmVudENvbnRleHQpIHtcbiAgICBhbGxDb21wb25lbnRzID1cbiAgICAgIHR5cGVvZiBwcm9wZXJ0aWVzLmNvbXBvbmVudHMgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBwcm9wZXJ0aWVzLmNvbXBvbmVudHMoZW1wdHlDb21wb25lbnRzKVxuICAgICAgICA6IHByb3BlcnRpZXMuY29tcG9uZW50cyB8fCBlbXB0eUNvbXBvbmVudHNcbiAgfSBlbHNlIHtcbiAgICBhbGxDb21wb25lbnRzID0gdXNlTURYQ29tcG9uZW50cyhwcm9wZXJ0aWVzLmNvbXBvbmVudHMpXG4gIH1cblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICBNRFhDb250ZXh0LlByb3ZpZGVyLFxuICAgIHt2YWx1ZTogYWxsQ29tcG9uZW50c30sXG4gICAgcHJvcGVydGllcy5jaGlsZHJlblxuICApXG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@mdx-js/react/lib/index.js\n");

/***/ })

}]);