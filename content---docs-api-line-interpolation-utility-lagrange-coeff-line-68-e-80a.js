"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkeasifem_docs"] = globalThis["webpackChunkeasifem_docs"] || []).push([["content---docs-api-line-interpolation-utility-lagrange-coeff-line-68-e-80a"],{

/***/ "./docs/docs-api/LineInterpolationUtility/LagrangeCoeff_Line.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  assets: () => (/* binding */ assets),\n  contentTitle: () => (/* binding */ LagrangeCoeff_Line_contentTitle),\n  \"default\": () => (/* binding */ LagrangeCoeff_Line_MDXContent),\n  frontMatter: () => (/* binding */ LagrangeCoeff_Line_frontMatter),\n  metadata: () => (/* reexport */ site_docs_docs_api_line_interpolation_utility_lagrange_coeff_line_md_68e_namespaceObject),\n  toc: () => (/* binding */ LagrangeCoeff_Line_toc)\n});\n\n;// ./.docusaurus/docusaurus-plugin-content-docs/docs-api/site-docs-docs-api-line-interpolation-utility-lagrange-coeff-line-md-68e.json\nconst site_docs_docs_api_line_interpolation_utility_lagrange_coeff_line_md_68e_namespaceObject = /*#__PURE__*/JSON.parse('{\"id\":\"LineInterpolationUtility/LagrangeCoeff_Line\",\"title\":\"LagrangeCoeff_Line\",\"description\":\"Interface 1\",\"source\":\"@site/docs/docs-api/LineInterpolationUtility/LagrangeCoeff_Line.md\",\"sourceDirName\":\"LineInterpolationUtility\",\"slug\":\"/LineInterpolationUtility/LagrangeCoeff_Line\",\"permalink\":\"/docs-api/LineInterpolationUtility/LagrangeCoeff_Line\",\"draft\":false,\"unlisted\":false,\"editUrl\":\"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/LineInterpolationUtility/LagrangeCoeff_Line.md\",\"tags\":[],\"version\":\"current\",\"lastUpdatedAt\":1539502055000,\"frontMatter\":{\"sidebar_label\":\"LagrangeCoeff\"},\"sidebar\":\"tutorialSidebar\",\"previous\":{\"title\":\"InterpolationPoint\",\"permalink\":\"/docs-api/LineInterpolationUtility/InterpolationPoint_Line\"},\"next\":{\"title\":\"LagrangeDOF\",\"permalink\":\"/docs-api/LineInterpolationUtility/LagrangeDOF_Line\"}}');\n// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n// EXTERNAL MODULE: ./node_modules/@mdx-js/react/lib/index.js\nvar lib = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js + 2 modules\nvar Tabs = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js + 1 modules\nvar TabItem = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js\");\n;// ./docs/docs-api/LineInterpolationUtility/_LagrangeCoeff_Line_test_1.md\n\n\nconst frontMatter = {};\nconst contentTitle = undefined;\n\n\n\n\n\nconst toc = [];\nfunction _createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"program main\\n  use easifemBase\\n  implicit none\\n  integer(i4b) :: order\\n  real(dfp), parameter :: tol = 1.0E-10\\n  real(dfp), allocatable :: x(:), coeff(:,:), ans(:), xij(:,:)\\n  character( len = * ), parameter :: layout=\\\"VEFC\\\" \\n  integer(i4b) :: ipType\\n  !! \\\"INCREASING\\\"\\n  x = [0,1]\\n  order = 4_I4B\\n  iptype = Equidistance\\n  xij = reshape(InterpolationPoint_Line(order=order, iptype=iptype, layout=layout, xij=x), [1, order+1])\\n  call display(xij, \\\"xij: \\\")\\n  ans = LagrangeCoeff_Line(order, 1, xij)\\n  call display(ans, \\\"ans: \\\") \\nend program main\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"  ans:  \\n--------\\n  1.0000\\n -8.3333\\n 23.3333\\n-26.6667\\n 10.6667\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/LineInterpolationUtility/_LagrangeCoeff_Line_test_2.md\n\n\nconst _LagrangeCoeff_Line_test_2_frontMatter = {};\nconst _LagrangeCoeff_Line_test_2_contentTitle = undefined;\n\n\n\n\n\nconst _LagrangeCoeff_Line_test_2_toc = [];\nfunction _LagrangeCoeff_Line_test_2_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"program main\\n  use easifemBase\\n  implicit none\\n  integer(i4b) :: order\\n  real(dfp), parameter :: tol = 1.0E-10\\n  real(dfp), allocatable :: x(:), coeff(:,:), ans(:), xij(:,:)\\n  character( len = * ), parameter :: layout=\\\"VEFC\\\" \\n  integer(i4b) :: ipType\\n  !! \\\"INCREASING\\\"\\n  x = [0,1]\\n  order = 4_I4B\\n  iptype = Equidistance\\n  xij = reshape(InterpolationPoint_Line(order=order, iptype=iptype, layout=layout, xij=x), [1, order+1])\\n  call display(xij, \\\"xij: \\\")\\n  coeff = LagrangeCoeff_Line(order, xij)\\n  call display(coeff, \\\"ans: \\\") \\nend program main\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"                      ans:                      \\n------------------------------------------------\\n   1.000    -0.000     0.000     0.000     0.000\\n  -8.333    -1.000    16.000   -12.000     5.333\\n  23.333     7.333   -69.333    76.000   -37.333\\n -26.667   -16.000    96.000  -128.000    74.667\\n  10.667    10.667   -42.667    64.000   -42.667\\n\"\n      })\n    })]\n  });\n}\nfunction _LagrangeCoeff_Line_test_2_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_LagrangeCoeff_Line_test_2_createMdxContent, {\n      ...props\n    })\n  }) : _LagrangeCoeff_Line_test_2_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/LineInterpolationUtility/_LagrangeCoeff_Line_test_3.md\n\n\nconst _LagrangeCoeff_Line_test_3_frontMatter = {};\nconst _LagrangeCoeff_Line_test_3_contentTitle = undefined;\n\n\n\n\n\nconst _LagrangeCoeff_Line_test_3_toc = [];\nfunction _LagrangeCoeff_Line_test_3_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"program main\\n  use easifemBase\\n  implicit none\\n  integer(i4b) :: order\\n  real(dfp), parameter :: tol = 1.0E-10\\n  real(dfp), allocatable :: x(:), coeff(:,:), ans(:), xij(:,:)\\n  character( len = * ), parameter :: layout=\\\"VEFC\\\" \\n  integer(i4b) :: ipType, orthopol\\n  !! \\\"INCREASING\\\"\\n  x = [0,1]\\n  order = 4_I4B\\n  iptype = Equidistance\\n  xij = reshape(InterpolationPoint_Line(order=order, iptype=iptype, layout=layout, xij=x), [1, order+1])\\n  call display(xij, \\\"xij: \\\")\\n  orthopol= Monomial\\n  coeff = LagrangeCoeff_Line(order=order, xij=xij, orthopol=orthopol)\\n  call display(coeff, \\\"ans: \\\") \\nend program main\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"                      ans:                      \\n------------------------------------------------\\n   1.000    -0.000     0.000     0.000     0.000\\n  -8.333    -1.000    16.000   -12.000     5.333\\n  23.333     7.333   -69.333    76.000   -37.333\\n -26.667   -16.000    96.000  -128.000    74.667\\n  10.667    10.667   -42.667    64.000   -42.667\\n\"\n      })\n    })]\n  });\n}\nfunction _LagrangeCoeff_Line_test_3_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_LagrangeCoeff_Line_test_3_createMdxContent, {\n      ...props\n    })\n  }) : _LagrangeCoeff_Line_test_3_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/LineInterpolationUtility/_LagrangeCoeff_Line_test_4.md\n\n\nconst _LagrangeCoeff_Line_test_4_frontMatter = {};\nconst _LagrangeCoeff_Line_test_4_contentTitle = undefined;\n\n\n\n\n\nconst _LagrangeCoeff_Line_test_4_toc = [];\nfunction _LagrangeCoeff_Line_test_4_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"program main\\n  use easifemBase\\n  implicit none\\n  integer(i4b) :: order\\n  real(dfp), parameter :: tol = 1.0E-10\\n  real(dfp), allocatable :: x(:), coeff(:,:), ans(:), xij(:,:)\\n  character( len = * ), parameter :: layout=\\\"VEFC\\\" \\n  integer(i4b) :: ipType, orthopol\\n  x = [0,1]\\n  order = 4_I4B\\n  iptype = Equidistance\\n  xij = reshape(InterpolationPoint_Line(order=order, iptype=iptype, layout=layout, xij=x), [1, order+1])\\n  call display(xij, \\\"xij: \\\")\\n  orthopol= Legendre\\n  coeff = LagrangeCoeff_Line(order=order, xij=xij, orthopol=orthopol)\\n  call display(coeff, \\\"ans: \\\") \\nend program main\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"                      ans:                      \\n------------------------------------------------\\n 10.9111    4.5778  -31.6444   38.1333  -20.9778\\n-24.3333  -10.6000   73.6000  -88.8000   50.1333\\n 21.6508   10.9841  -70.6032   87.2381  -49.2698\\n-10.6667   -6.4000   38.4000  -51.2000   29.8667\\n  2.4381    2.4381   -9.7524   14.6286   -9.7524\\n\"\n      })\n    })]\n  });\n}\nfunction _LagrangeCoeff_Line_test_4_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_LagrangeCoeff_Line_test_4_createMdxContent, {\n      ...props\n    })\n  }) : _LagrangeCoeff_Line_test_4_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/LineInterpolationUtility/_LagrangeCoeff_Line_test_5.md\n\n\nconst _LagrangeCoeff_Line_test_5_frontMatter = {};\nconst _LagrangeCoeff_Line_test_5_contentTitle = undefined;\n\n\n\n\n\nconst _LagrangeCoeff_Line_test_5_toc = [];\nfunction _LagrangeCoeff_Line_test_5_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"program main\\n  use easifemBase\\n  implicit none\\n  integer(i4b) :: order\\n  real(dfp), parameter :: tol = 1.0E-10\\n  real(dfp), allocatable :: x(:), coeff(:,:), ans(:), xij(:,:)\\n  character( len = * ), parameter :: layout=\\\"VEFC\\\" \\n  integer(i4b) :: ipType, orthopol\\n  x = [0,1]\\n  order = 4_I4B\\n  iptype = Equidistance\\n  xij = reshape(InterpolationPoint_Line(order=order, iptype=iptype, layout=layout, xij=x), [1, order+1])\\n  call display(xij, \\\"xij: \\\")\\n  orthopol= Chebyshev\\n  coeff = LagrangeCoeff_Line(order=order, xij=xij, orthopol=orthopol)\\n  call display(coeff, \\\"ans: \\\") \\nend program main\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"                      ans:                      \\n------------------------------------------------\\n  16.667     7.667   -50.667    62.000   -34.667\\n -28.333   -13.000    88.000  -108.000    61.333\\n  17.000     9.000   -56.000    70.000   -40.000\\n  -6.667    -4.000    24.000   -32.000    18.667\\n   1.333     1.333    -5.333     8.000    -5.333\\n\"\n      })\n    })]\n  });\n}\nfunction _LagrangeCoeff_Line_test_5_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_LagrangeCoeff_Line_test_5_createMdxContent, {\n      ...props\n    })\n  }) : _LagrangeCoeff_Line_test_5_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/LineInterpolationUtility/LagrangeCoeff_Line.md\n\n\nconst LagrangeCoeff_Line_frontMatter = {\n\tsidebar_label: 'LagrangeCoeff'\n};\nconst LagrangeCoeff_Line_contentTitle = 'LagrangeCoeff_Line';\n\nconst assets = {\n\n};\n\n\n\n\n\n\n\n\n\n\nconst LagrangeCoeff_Line_toc = [{\n  \"value\": \"Interface 1\",\n  \"id\": \"interface-1\",\n  \"level\": 2\n}, ...toc, {\n  \"value\": \"Interface 2\",\n  \"id\": \"interface-2\",\n  \"level\": 2\n}, {\n  \"value\": \"Interface 3\",\n  \"id\": \"interface-3\",\n  \"level\": 2\n}, {\n  \"value\": \"Interface 4\",\n  \"id\": \"interface-4\",\n  \"level\": 2\n}, ..._LagrangeCoeff_Line_test_2_toc, {\n  \"value\": \"Interace 5\",\n  \"id\": \"interace-5\",\n  \"level\": 2\n}, ..._LagrangeCoeff_Line_test_3_toc, ..._LagrangeCoeff_Line_test_4_toc, ..._LagrangeCoeff_Line_test_5_toc];\nfunction LagrangeCoeff_Line_createMdxContent(props) {\n  const _components = {\n    admonition: \"admonition\",\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    header: \"header\",\n    input: \"input\",\n    li: \"li\",\n    mdxAdmonitionTitle: \"mdxAdmonitionTitle\",\n    p: \"p\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.header, {\n      children: (0,jsx_runtime.jsx)(_components.h1, {\n        id: \"lagrangecoeff_line\",\n        children: \"LagrangeCoeff_Line\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-1\",\n      children: \"Interface 1\"\n    }), \"\\n\", \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE FUNCTION LagrangeCoeff_Line(order, i, xij) RESULT(ans)\\n    INTEGER(I4B), INTENT(IN) :: order\\n    !! order of polynomial, it should be SIZE(xij,2)-1\\n    INTEGER(I4B), INTENT(IN) :: i\\n    !! ith coefficients for lagrange polynomial\\n    REAL(DFP), INTENT(IN) :: xij(:, :)\\n    !! points in xij format, size(xij,2) = order+1\\n    REAL(DFP) :: ans(order + 1)\\n    !! coefficients\\n  END FUNCTION LagrangeCoeff_Line\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.admonition, {\n          type: \"note\",\n          children: [(0,jsx_runtime.jsx)(_components.mdxAdmonitionTitle, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"order\"\n            })\n          }), (0,jsx_runtime.jsx)(_components.p, {\n            children: \"order of polynomial space.\"\n          })]\n        }), (0,jsx_runtime.jsxs)(_components.admonition, {\n          type: \"note\",\n          children: [(0,jsx_runtime.jsx)(_components.mdxAdmonitionTitle, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"i\"\n            })\n          }), (0,jsx_runtime.jsx)(_components.p, {\n            children: \"ith polynomial\"\n          })]\n        }), (0,jsx_runtime.jsxs)(_components.admonition, {\n          type: \"note\",\n          children: [(0,jsx_runtime.jsx)(_components.mdxAdmonitionTitle, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"xij\"\n            })\n          }), (0,jsx_runtime.jsxs)(_components.ul, {\n            children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n              children: \"Interpolation points\"\n            }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n              children: \"SIZE(xij,1) is equal to 1\"\n            }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n              children: \"SIZE(xij,2) is equal to order+1\"\n            }), \"\\n\"]\n          })]\n        }), (0,jsx_runtime.jsxs)(_components.admonition, {\n          type: \"note\",\n          children: [(0,jsx_runtime.jsx)(_components.mdxAdmonitionTitle, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"ans\"\n            })\n          }), (0,jsx_runtime.jsxs)(_components.p, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"order+1\"\n            }), \" coefficients of ith Lagrange polynomial.\"]\n          })]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-2\",\n      children: \"Interface 2\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE FUNCTION LagrangeCoeff_Line(order, i, v, isVandermonde) RESULT(ans)\\n    INTEGER(I4B), INTENT(IN) :: order\\n    !! order of polynomial, it should be SIZE(v,2)-1\\n    INTEGER(I4B), INTENT(IN) :: i\\n    !! coefficient for ith lagrange polynomial\\n    REAL(DFP), INTENT(IN) :: v(:, :)\\n    !! vandermonde matrix size should be (order+1,order+1)\\n    LOGICAL(LGT), INTENT(IN) :: isVandermonde\\n    !! This is just to resolve interface issue\\n    REAL(DFP) :: ans(order + 1)\\n    !! coefficients\\n  END FUNCTION LagrangeCoeff_Line\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.admonition, {\n          type: \"note\",\n          children: [(0,jsx_runtime.jsx)(_components.mdxAdmonitionTitle, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"order\"\n            })\n          }), (0,jsx_runtime.jsx)(_components.p, {\n            children: \"order of polynomial space.\"\n          })]\n        }), (0,jsx_runtime.jsxs)(_components.admonition, {\n          type: \"note\",\n          children: [(0,jsx_runtime.jsx)(_components.mdxAdmonitionTitle, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"i\"\n            })\n          }), (0,jsx_runtime.jsx)(_components.p, {\n            children: \"ith polynomial\"\n          })]\n        }), (0,jsx_runtime.jsxs)(_components.admonition, {\n          type: \"note\",\n          children: [(0,jsx_runtime.jsx)(_components.mdxAdmonitionTitle, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"v\"\n            })\n          }), (0,jsx_runtime.jsxs)(_components.ul, {\n            children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n              children: \"Vandermonde matrix\"\n            }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n              children: \"The jth col of v denotes the values of basis function on interpolation points.\"\n            }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n              children: \"The ith row of v denotes the values of all basis function on ith interpolation points.\"\n            }), \"\\n\"]\n          })]\n        }), (0,jsx_runtime.jsxs)(_components.admonition, {\n          type: \"note\",\n          children: [(0,jsx_runtime.jsx)(_components.mdxAdmonitionTitle, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"ans\"\n            })\n          }), (0,jsx_runtime.jsxs)(_components.p, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"order+1\"\n            }), \" coefficients of ith Lagrange polynomial.\"]\n          })]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\"\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-3\",\n      children: \"Interface 3\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE FUNCTION LagrangeCoeff_Line(order, i, v, ipiv) RESULT(ans)\\n    INTEGER(I4B), INTENT(IN) :: order\\n    !! order of polynomial, it should be SIZE(x,2)-1\\n    INTEGER(I4B), INTENT(IN) :: i\\n    !! ith coefficients for lagrange polynomial\\n    REAL(DFP), INTENT(INOUT) :: v(:, :)\\n    !! LU decomposition of vandermonde matrix\\n    INTEGER(I4B), INTENT(IN) :: ipiv(:)\\n    !! inverse pivoting mapping, compes from LU decomposition\\n    REAL(DFP) :: ans(order + 1)\\n    !! coefficients\\n  END FUNCTION LagrangeCoeff_Line\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.admonition, {\n          type: \"note\",\n          children: [(0,jsx_runtime.jsx)(_components.mdxAdmonitionTitle, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"order\"\n            })\n          }), (0,jsx_runtime.jsx)(_components.p, {\n            children: \"order of polynomial space.\"\n          })]\n        }), (0,jsx_runtime.jsxs)(_components.admonition, {\n          type: \"note\",\n          children: [(0,jsx_runtime.jsx)(_components.mdxAdmonitionTitle, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"i\"\n            })\n          }), (0,jsx_runtime.jsx)(_components.p, {\n            children: \"ith polynomial\"\n          })]\n        }), (0,jsx_runtime.jsxs)(_components.admonition, {\n          type: \"note\",\n          children: [(0,jsx_runtime.jsx)(_components.mdxAdmonitionTitle, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"v\"\n            })\n          }), (0,jsx_runtime.jsxs)(_components.ul, {\n            children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n              children: \"LU decomposition of Vandermonde matrix\"\n            }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n              children: \"The jth col of v denotes the values of basis function on interpolation points.\"\n            }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n              children: \"The ith row of v denotes the values of all basis function on ith interpolation points.\"\n            }), \"\\n\"]\n          })]\n        }), (0,jsx_runtime.jsxs)(_components.admonition, {\n          type: \"note\",\n          children: [(0,jsx_runtime.jsx)(_components.mdxAdmonitionTitle, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"ipiv\"\n            })\n          }), (0,jsx_runtime.jsxs)(_components.p, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"ipiv\"\n            }), \" is returned by Lapack when performing \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"LU\"\n            }), \" decomposition.\"]\n          })]\n        }), (0,jsx_runtime.jsxs)(_components.admonition, {\n          type: \"note\",\n          children: [(0,jsx_runtime.jsx)(_components.mdxAdmonitionTitle, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"ans\"\n            })\n          }), (0,jsx_runtime.jsxs)(_components.p, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"order+1\"\n            }), \" coefficients of ith Lagrange polynomial.\"]\n          })]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\"\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-4\",\n      children: \"Interface 4\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE FUNCTION LagrangeCoeff_Line(order, xij) RESULT(ans)\\n    INTEGER(I4B), INTENT(IN) :: order\\n    !! order of polynomial, it should be SIZE(xij,2)-1\\n    REAL(DFP), INTENT(IN) :: xij(:, :)\\n    !! points in xij format, size(xij,2) = order+1\\n    REAL(DFP) :: ans(order + 1, order + 1)\\n    !! coefficients\\n    !! jth column of ans corresponds to the coeff of lagrange polynomial\\n    !! at the jth point\\n  END FUNCTION LagrangeCoeff_Line\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.admonition, {\n          type: \"note\",\n          children: [(0,jsx_runtime.jsx)(_components.mdxAdmonitionTitle, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"xij\"\n            })\n          }), (0,jsx_runtime.jsx)(_components.p, {\n            children: \"Interpolation points. SIZE(xij, 1) is 1. SIZE(xij, 2) should be equal to order+1.\"\n          })]\n        }), (0,jsx_runtime.jsxs)(_components.admonition, {\n          type: \"note\",\n          children: [(0,jsx_runtime.jsx)(_components.mdxAdmonitionTitle, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"order\"\n            })\n          }), (0,jsx_runtime.jsx)(_components.p, {\n            children: \"order denotes the order of polynomial space.\"\n          })]\n        }), (0,jsx_runtime.jsxs)(_components.admonition, {\n          type: \"note\",\n          children: [(0,jsx_runtime.jsx)(_components.mdxAdmonitionTitle, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"ans\"\n            })\n          }), (0,jsx_runtime.jsxs)(_components.p, {\n            children: [\"The jth col of \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"ans\"\n            }), \" denotes the \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"order+1\"\n            }), \" coefficents of jth polynomial.\"]\n          })]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_LagrangeCoeff_Line_test_2_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interace-5\",\n      children: \"Interace 5\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE LagrangeCoeff_Line\\n  MODULE FUNCTION LagrangeCoeff_Line5(order, xij, orthopol, alpha, &\\n    & beta, lambda) RESULT(ans)\\n    INTEGER(I4B), INTENT(IN) :: order\\n    !! order of polynomial, it should be SIZE(xij,2)-1\\n    REAL(DFP), INTENT(IN) :: xij(:, :)\\n    !! points in xij format, size(xij,2) = order+1\\n    INTEGER(I4B), INTENT(IN) :: orthopol\\n    !! Monomial\\n    !! Jacobi\\n    !! Legendre\\n    !! Chebyshev\\n    !! Lobatto\\n    !! UnscaledLobatto\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: alpha\\n    !! Jacobi polynomial parameter\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: beta\\n    !! Jacobi polynomial parameter\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: lambda\\n    !! Ultraspherical parameter\\n    REAL(DFP) :: ans(order + 1, order + 1)\\n    !! coefficients\\n    !! jth column of ans corresponds to the coeff of lagrange polynomial\\n    !! at the jth point\\n  END FUNCTION LagrangeCoeff_Line5\\nEND INTERFACE LagrangeCoeff_Line\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.admonition, {\n          type: \"note\",\n          children: [(0,jsx_runtime.jsx)(_components.mdxAdmonitionTitle, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"xij\"\n            })\n          }), (0,jsx_runtime.jsx)(_components.p, {\n            children: \"Interpolation points. SIZE(xij, 1) is 1. SIZE(xij, 2) should be equal to order+1.\"\n          })]\n        }), (0,jsx_runtime.jsxs)(_components.admonition, {\n          type: \"note\",\n          children: [(0,jsx_runtime.jsx)(_components.mdxAdmonitionTitle, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"order\"\n            })\n          }), (0,jsx_runtime.jsx)(_components.p, {\n            children: \"order denotes the order of polynomial space.\"\n          })]\n        }), (0,jsx_runtime.jsxs)(_components.admonition, {\n          type: \"note\",\n          children: [(0,jsx_runtime.jsx)(_components.mdxAdmonitionTitle, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"orthopol\"\n            })\n          }), (0,jsx_runtime.jsx)(_components.p, {\n            children: \"Currently, we can specify following types of orthogonal polynomials:\"\n          }), (0,jsx_runtime.jsxs)(_components.ul, {\n            className: \"contains-task-list\",\n            children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n              className: \"task-list-item\",\n              children: [(0,jsx_runtime.jsx)(_components.input, {\n                type: \"checkbox\",\n                checked: true,\n                disabled: true\n              }), \" \", \"Jacobi\"]\n            }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n              className: \"task-list-item\",\n              children: [(0,jsx_runtime.jsx)(_components.input, {\n                type: \"checkbox\",\n                checked: true,\n                disabled: true\n              }), \" \", \"Ultraspherical\"]\n            }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n              className: \"task-list-item\",\n              children: [(0,jsx_runtime.jsx)(_components.input, {\n                type: \"checkbox\",\n                checked: true,\n                disabled: true\n              }), \" \", \"Legendre\"]\n            }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n              className: \"task-list-item\",\n              children: [(0,jsx_runtime.jsx)(_components.input, {\n                type: \"checkbox\",\n                checked: true,\n                disabled: true\n              }), \" \", \"Chebyshev\"]\n            }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n              className: \"task-list-item\",\n              children: [(0,jsx_runtime.jsx)(_components.input, {\n                type: \"checkbox\",\n                checked: true,\n                disabled: true\n              }), \" \", \"Lobatto\"]\n            }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n              className: \"task-list-item\",\n              children: [(0,jsx_runtime.jsx)(_components.input, {\n                type: \"checkbox\",\n                checked: true,\n                disabled: true\n              }), \" \", \"UnscaledLobatto\"]\n            }), \"\\n\"]\n          })]\n        }), (0,jsx_runtime.jsxs)(_components.admonition, {\n          type: \"note\",\n          children: [(0,jsx_runtime.jsx)(_components.mdxAdmonitionTitle, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"alpha, beta\"\n            })\n          }), (0,jsx_runtime.jsxs)(_components.p, {\n            children: [\"alpha and beta are parameters of Jacobi Polynomials. They should be present when \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"orthopol\"\n            }), \" is equal to \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"Jacobi\"\n            })]\n          })]\n        }), (0,jsx_runtime.jsxs)(_components.admonition, {\n          type: \"note\",\n          children: [(0,jsx_runtime.jsx)(_components.mdxAdmonitionTitle, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"lambda\"\n            })\n          }), (0,jsx_runtime.jsxs)(_components.p, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"lambda\"\n            }), \" is parameter for Ultraspherical polynomials. They should be present when \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"orthopol\"\n            }), \" is equal to the \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"Ultraspherical\"\n            })]\n          })]\n        }), (0,jsx_runtime.jsxs)(_components.admonition, {\n          type: \"note\",\n          children: [(0,jsx_runtime.jsx)(_components.mdxAdmonitionTitle, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"ans\"\n            })\n          }), (0,jsx_runtime.jsxs)(_components.p, {\n            children: [\"The jth col of \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"ans\"\n            }), \" denotes the \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"order+1\"\n            }), \" coefficents of jth polynomial.\"]\n          })]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_LagrangeCoeff_Line_test_3_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example2\",\n        label: \"Example 2\",\n        children: (0,jsx_runtime.jsx)(_LagrangeCoeff_Line_test_4_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example3\",\n        label: \"Example 3\",\n        children: (0,jsx_runtime.jsx)(_LagrangeCoeff_Line_test_5_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    })]\n  });\n}\nfunction LagrangeCoeff_Line_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(LagrangeCoeff_Line_createMdxContent, {\n      ...props\n    })\n  }) : LagrangeCoeff_Line_createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./docs/docs-api/LineInterpolationUtility/LagrangeCoeff_Line.md\n");

/***/ })

}]);