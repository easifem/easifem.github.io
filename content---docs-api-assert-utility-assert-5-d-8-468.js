"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkeasifem_docs"] = globalThis["webpackChunkeasifem_docs"] || []).push([["content---docs-api-assert-utility-assert-5-d-8-468"],{

/***/ "./docs/docs-api/AssertUtility/Assert.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  assets: () => (/* binding */ assets),\n  contentTitle: () => (/* binding */ Assert_contentTitle),\n  \"default\": () => (/* binding */ Assert_MDXContent),\n  frontMatter: () => (/* binding */ Assert_frontMatter),\n  metadata: () => (/* reexport */ site_docs_docs_api_assert_utility_assert_md_5d8_namespaceObject),\n  toc: () => (/* binding */ Assert_toc)\n});\n\n;// ./.docusaurus/docusaurus-plugin-content-docs/docs-api/site-docs-docs-api-assert-utility-assert-md-5d8.json\nconst site_docs_docs_api_assert_utility_assert_md_5d8_namespaceObject = /*#__PURE__*/JSON.parse('{\"id\":\"AssertUtility/Assert\",\"title\":\"Assert\",\"description\":\"Assertion related methods.\",\"source\":\"@site/docs/docs-api/AssertUtility/Assert.md\",\"sourceDirName\":\"AssertUtility\",\"slug\":\"/AssertUtility/Assert\",\"permalink\":\"/docs-api/AssertUtility/Assert\",\"draft\":false,\"unlisted\":false,\"editUrl\":\"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/AssertUtility/Assert.md\",\"tags\":[],\"version\":\"current\",\"lastUpdatedAt\":1539502055000,\"frontMatter\":{},\"sidebar\":\"tutorialSidebar\",\"previous\":{\"title\":\"AssertUtility\",\"permalink\":\"/docs-api/AssertUtility/\"},\"next\":{\"title\":\"BLAS95\",\"permalink\":\"/docs-api/BLAS95/\"}}');\n// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n// EXTERNAL MODULE: ./node_modules/@mdx-js/react/lib/index.js\nvar lib = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js + 2 modules\nvar Tabs = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js + 1 modules\nvar TabItem = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js\");\n;// ./docs/docs-api/AssertUtility/_Assert_test_1.md\n\n\nconst frontMatter = {};\nconst contentTitle = undefined;\n\n\n\n\n\nconst toc = [];\nfunction _createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsx)(_components.pre, {\n    children: (0,jsx_runtime.jsx)(_components.code, {\n      className: \"language-fortran\",\n      children: \"program main\\nuse easifemBase\\nimplicit none\\n\\nreal(dfp) :: mat(4,4)\\n\\nCALL Assert( &\\n  & mat=mat, &\\n  & s=[4,4], &\\n  & msg=\\\"shape of mat is not same as [4,4]\\\", &\\n  & line=__LINE__, &\\n  & file=__FILE__, &\\n  & routine=\\\"main()\\\")\\n\\nCALL Assert( &\\n  & mat=mat, &\\n  & s=[5,5], &\\n  & msg=\\\"shape of mat is not same as [5,5]\\\", &\\n  & line=__LINE__, &\\n  & file=__FILE__, &\\n  & routine=\\\"main()\\\")\\n\\nend program main\\n\"\n    })\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/AssertUtility/_Assert_test_2.md\n\n\nconst _Assert_test_2_frontMatter = {};\nconst _Assert_test_2_contentTitle = undefined;\n\n\n\n\n\nconst _Assert_test_2_toc = [];\nfunction _Assert_test_2_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsx)(_components.pre, {\n    children: (0,jsx_runtime.jsx)(_components.code, {\n      className: \"language-fortran\",\n      children: \"program main\\nuse easifemBase\\nimplicit none\\n\\nreal(dfp) :: mat(4,4,2)\\n\\nCALL Assert( &\\n  & mat=mat, &\\n  & s=[4,4,2], &\\n  & msg=\\\"shape of mat is not same as [4,4,2]\\\", &\\n  & line=__LINE__, &\\n  & file=__FILE__, &\\n  & routine=\\\"main()\\\")\\n\\nCALL Assert( &\\n  & mat=mat, &\\n  & s=[5,5,2], &\\n  & msg=\\\"shape of mat is not same as [5,5,2]\\\", &\\n  & line=__LINE__, &\\n  & file=__FILE__, &\\n  & routine=\\\"main()\\\")\\n\\nend program main\\n\"\n    })\n  });\n}\nfunction _Assert_test_2_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_Assert_test_2_createMdxContent, {\n      ...props\n    })\n  }) : _Assert_test_2_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/AssertUtility/_Assert_test_3.md\n\n\nconst _Assert_test_3_frontMatter = {};\nconst _Assert_test_3_contentTitle = undefined;\n\n\n\n\n\nconst _Assert_test_3_toc = [];\nfunction _Assert_test_3_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsx)(_components.pre, {\n    children: (0,jsx_runtime.jsx)(_components.code, {\n      className: \"language-fortran\",\n      children: \"program main\\nuse easifemBase\\nimplicit none\\n\\nreal(dfp) :: mat(4,4,2,2)\\n\\nCALL Assert( &\\n  & mat=mat, &\\n  & s=[4,4,2,2], &\\n  & msg=\\\"shape of mat is not same as [4,4,2,2]\\\", &\\n  & line=__LINE__, &\\n  & file=__FILE__, &\\n  & routine=\\\"main()\\\")\\n\\nCALL Assert( &\\n  & mat=mat, &\\n  & s=[5,5,2,2], &\\n  & msg=\\\"shape of mat is not same as [5,5,2,2]\\\", &\\n  & line=__LINE__, &\\n  & file=__FILE__, &\\n  & routine=\\\"main()\\\")\\n\\nend program main\\n\"\n    })\n  });\n}\nfunction _Assert_test_3_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_Assert_test_3_createMdxContent, {\n      ...props\n    })\n  }) : _Assert_test_3_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/AssertUtility/_Assert_test_4.md\n\n\nconst _Assert_test_4_frontMatter = {};\nconst _Assert_test_4_contentTitle = undefined;\n\n\n\n\n\nconst _Assert_test_4_toc = [];\nfunction _Assert_test_4_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsx)(_components.pre, {\n    children: (0,jsx_runtime.jsx)(_components.code, {\n      className: \"language-fortran\",\n      children: \"program main\\nuse easifemBase\\nimplicit none\\n\\nCALL Assert( &\\n  & n1 = 1, n2 = 2, &\\n  & msg=\\\"n1 and n2 are not same\\\", &\\n  & line=__LINE__, &\\n  & file=__FILE__, &\\n  & routine=\\\"main()\\\")\\n\\nCALL Assert( &\\n  & n1 = 1, n2 = 1, n3=1, &\\n  & msg=\\\"n1, n2, n3 are not same\\\", &\\n  & line=__LINE__, &\\n  & file=__FILE__, &\\n  & routine=\\\"main()\\\")\\n\\nCALL Assert( &\\n  & n1 = 1, n2 = 1, n3=1, n4=1, &\\n  & msg=\\\"n1, n2, n3, n4 are not same\\\", &\\n  & line=__LINE__, &\\n  & file=__FILE__, &\\n  & routine=\\\"main()\\\")\\n\\nend program main\\n\"\n    })\n  });\n}\nfunction _Assert_test_4_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_Assert_test_4_createMdxContent, {\n      ...props\n    })\n  }) : _Assert_test_4_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/AssertUtility/Assert.md\n\n\nconst Assert_frontMatter = {};\nconst Assert_contentTitle = 'Assert';\n\nconst assets = {\n\n};\n\n\n\n\n\n\n\n\n\nconst Assert_toc = [{\n  \"value\": \"Interface 1\",\n  \"id\": \"interface-1\",\n  \"level\": 2\n}, ...toc, {\n  \"value\": \"Interface 2\",\n  \"id\": \"interface-2\",\n  \"level\": 2\n}, ..._Assert_test_2_toc, {\n  \"value\": \"Interface 3\",\n  \"id\": \"interface-3\",\n  \"level\": 2\n}, ..._Assert_test_3_toc, {\n  \"value\": \"Interface 4\",\n  \"id\": \"interface-4\",\n  \"level\": 2\n}, ..._Assert_test_4_toc];\nfunction Assert_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    header: \"header\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.header, {\n      children: (0,jsx_runtime.jsx)(_components.h1, {\n        id: \"assert\",\n        children: \"Assert\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Assertion related methods.\"\n    }), \"\\n\", \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-1\",\n      children: \"Interface 1\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \" INTERFACE\\n  MODULE SUBROUTINE Assert(Mat, s, msg, file, line, routine)\\n    REAL(DFP), INTENT(IN) :: Mat(:, :)\\n    INTEGER(I4B), INTENT(IN) :: s(2)\\n    INTEGER(I4B), INTENT(IN) :: line\\n    CHARACTER(*), INTENT(IN) :: msg, file, routine\\n  END SUBROUTINE\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.p, {\n          children: [\"If shape of \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"Mat\"\n          }), \" is not same as \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"s\"\n          }), \", then this routine prints error and stop program.\"]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-2\",\n      children: \"Interface 2\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE SUBROUTINE Assert(Mat, s, msg, file, line, routine)\\n    REAL(DFP), INTENT(IN) :: Mat(:, :, :)\\n    INTEGER(I4B), INTENT(IN) :: s(3)\\n    INTEGER(I4B), INTENT(IN) :: line\\n    CHARACTER(*), INTENT(IN) :: msg, file, routine\\n  END SUBROUTINE\\nEND INTERFACE\\n\"\n          })\n        })\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_Assert_test_2_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-3\",\n      children: \"Interface 3\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE SUBROUTINE Assert(Mat, s, msg, file, line, routine)\\n    REAL(DFP), INTENT(IN) :: Mat(:, :, :, :)\\n    INTEGER(I4B), INTENT(IN) :: s(4)\\n    INTEGER(I4B), INTENT(IN) :: line\\n    CHARACTER(*), INTENT(IN) :: msg, file, routine\\n  END SUBROUTINE\\nEND INTERFACE\\n\"\n          })\n        })\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_Assert_test_3_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-4\",\n      children: \"Interface 4\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"MODULE SUBROUTINE Assert(n1, n2, msg, file, line, routine)\\n  INTEGER(I4B), INTENT(IN) :: n1, n2\\n  INTEGER(I4B), INTENT(IN) :: line\\n  CHARACTER(*), INTENT(IN) :: msg, file, routine\\nEND SUBROUTINE Assert\\n\"\n          })\n        })\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"interface2\",\n        label: \"܀ Interface\",\n        children: (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"MODULE SUBROUTINE Assert(n1, n2, n3, msg, file, line, routine)\\n  INTEGER(I4B), INTENT(IN) :: n1, n2, n3\\n  INTEGER(I4B), INTENT(IN) :: line\\n  CHARACTER(*), INTENT(IN) :: msg, file, routine\\nEND SUBROUTINE Assert\\n\"\n          })\n        })\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"interface3\",\n        label: \"܀ Interface\",\n        children: (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"MODULE SUBROUTINE Assert(n1, n2, n3, n4, msg, file, line, routine)\\n  INTEGER(I4B), INTENT(IN) :: n1, n2, n3, n4\\n  INTEGER(I4B), INTENT(IN) :: line\\n  CHARACTER(*), INTENT(IN) :: msg, file, routine\\nEND SUBROUTINE Assert\\n\"\n          })\n        })\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"interface4\",\n        label: \"܀ interface\",\n        children: (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"MODULE SUBROUTINE Assert(nn, msg, file, line, routine)\\n  INTEGER(I4B), DIMENSION(:), INTENT(IN) :: nn\\n  INTEGER(I4B), INTENT(IN) :: line\\n  CHARACTER(*), INTENT(IN) :: msg, file, routine\\nEND SUBROUTINE Assert\\n\"\n          })\n        })\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_Assert_test_4_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    })]\n  });\n}\nfunction Assert_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(Assert_createMdxContent, {\n      ...props\n    })\n  }) : Assert_createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./docs/docs-api/AssertUtility/Assert.md\n");

/***/ })

}]);