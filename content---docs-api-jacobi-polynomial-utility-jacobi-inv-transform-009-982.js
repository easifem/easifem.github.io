"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkeasifem_docs"] = globalThis["webpackChunkeasifem_docs"] || []).push([["content---docs-api-jacobi-polynomial-utility-jacobi-inv-transform-009-982"],{

/***/ "./docs/docs-api/JacobiPolynomialUtility/JacobiInvTransform.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  assets: () => (/* binding */ assets),\n  contentTitle: () => (/* binding */ JacobiInvTransform_contentTitle),\n  \"default\": () => (/* binding */ JacobiInvTransform_MDXContent),\n  frontMatter: () => (/* binding */ JacobiInvTransform_frontMatter),\n  metadata: () => (/* reexport */ site_docs_docs_api_jacobi_polynomial_utility_jacobi_inv_transform_md_009_namespaceObject),\n  toc: () => (/* binding */ JacobiInvTransform_toc)\n});\n\n;// ./.docusaurus/docusaurus-plugin-content-docs/docs-api/site-docs-docs-api-jacobi-polynomial-utility-jacobi-inv-transform-md-009.json\nconst site_docs_docs_api_jacobi_polynomial_utility_jacobi_inv_transform_md_009_namespaceObject = /*#__PURE__*/JSON.parse('{\"id\":\"JacobiPolynomialUtility/JacobiInvTransform\",\"title\":\"JacobiInvTransform\",\"description\":\"Discrete Inverse Jacobi transform.\",\"source\":\"@site/docs/docs-api/JacobiPolynomialUtility/JacobiInvTransform.md\",\"sourceDirName\":\"JacobiPolynomialUtility\",\"slug\":\"/JacobiPolynomialUtility/JacobiInvTransform\",\"permalink\":\"/docs-api/JacobiPolynomialUtility/JacobiInvTransform\",\"draft\":false,\"unlisted\":false,\"editUrl\":\"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/JacobiPolynomialUtility/JacobiInvTransform.md\",\"tags\":[],\"version\":\"current\",\"lastUpdatedAt\":1539502055000,\"frontMatter\":{},\"sidebar\":\"tutorialSidebar\",\"previous\":{\"title\":\"JacobiGradientEvalSum\",\"permalink\":\"/docs-api/JacobiPolynomialUtility/JacobiGradientEvalSum\"},\"next\":{\"title\":\"JacobiJacobiLobattoMatrix\",\"permalink\":\"/docs-api/JacobiPolynomialUtility/JacobiJacobiLobattoMatrix\"}}');\n// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n// EXTERNAL MODULE: ./node_modules/@mdx-js/react/lib/index.js\nvar lib = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js + 2 modules\nvar Tabs = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js + 1 modules\nvar TabItem = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js\");\n;// ./docs/docs-api/JacobiPolynomialUtility/_JacobiInvTransform_test_1.md\n\n\nconst frontMatter = {};\nconst contentTitle = undefined;\n\n\n\n\n\nconst toc = [];\nfunction _createMdxContent(props) {\n  const _components = {\n    annotation: \"annotation\",\n    blockquote: \"blockquote\",\n    code: \"code\",\n    math: \"math\",\n    mi: \"mi\",\n    mn: \"mn\",\n    mo: \"mo\",\n    mrow: \"mrow\",\n    p: \"p\",\n    pre: \"pre\",\n    semantics: \"semantics\",\n    span: \"span\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"This example shows the usage of \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"JacobiInvTransform\"\n      }), \" method.\\nThis routine performs the inverse Jacobi transform at a single point.\"]\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.blockquote, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n        children: [\"In this example \", (0,jsx_runtime.jsxs)(_components.span, {\n          className: \"katex\",\n          children: [(0,jsx_runtime.jsx)(_components.span, {\n            className: \"katex-mathml\",\n            children: (0,jsx_runtime.jsx)(_components.math, {\n              xmlns: \"http://www.w3.org/1998/Math/MathML\",\n              children: (0,jsx_runtime.jsxs)(_components.semantics, {\n                children: [(0,jsx_runtime.jsxs)(_components.mrow, {\n                  children: [(0,jsx_runtime.jsx)(_components.mi, {\n                    children: \"α\"\n                  }), (0,jsx_runtime.jsx)(_components.mo, {\n                    children: \"=\"\n                  }), (0,jsx_runtime.jsx)(_components.mi, {\n                    children: \"β\"\n                  }), (0,jsx_runtime.jsx)(_components.mo, {\n                    children: \"=\"\n                  }), (0,jsx_runtime.jsx)(_components.mn, {\n                    children: \"0.0\"\n                  })]\n                }), (0,jsx_runtime.jsx)(_components.annotation, {\n                  encoding: \"application/x-tex\",\n                  children: \"\\\\alpha=\\\\beta=0.0\"\n                })]\n              })\n            })\n          }), (0,jsx_runtime.jsxs)(_components.span, {\n            className: \"katex-html\",\n            \"aria-hidden\": \"true\",\n            children: [(0,jsx_runtime.jsxs)(_components.span, {\n              className: \"base\",\n              children: [(0,jsx_runtime.jsx)(_components.span, {\n                className: \"strut\",\n                style: {\n                  height: \"0.4306em\"\n                }\n              }), (0,jsx_runtime.jsx)(_components.span, {\n                className: \"mord mathnormal\",\n                style: {\n                  marginRight: \"0.0037em\"\n                },\n                children: \"α\"\n              }), (0,jsx_runtime.jsx)(_components.span, {\n                className: \"mspace\",\n                style: {\n                  marginRight: \"0.2778em\"\n                }\n              }), (0,jsx_runtime.jsx)(_components.span, {\n                className: \"mrel\",\n                children: \"=\"\n              }), (0,jsx_runtime.jsx)(_components.span, {\n                className: \"mspace\",\n                style: {\n                  marginRight: \"0.2778em\"\n                }\n              })]\n            }), (0,jsx_runtime.jsxs)(_components.span, {\n              className: \"base\",\n              children: [(0,jsx_runtime.jsx)(_components.span, {\n                className: \"strut\",\n                style: {\n                  height: \"0.8889em\",\n                  verticalAlign: \"-0.1944em\"\n                }\n              }), (0,jsx_runtime.jsx)(_components.span, {\n                className: \"mord mathnormal\",\n                style: {\n                  marginRight: \"0.05278em\"\n                },\n                children: \"β\"\n              }), (0,jsx_runtime.jsx)(_components.span, {\n                className: \"mspace\",\n                style: {\n                  marginRight: \"0.2778em\"\n                }\n              }), (0,jsx_runtime.jsx)(_components.span, {\n                className: \"mrel\",\n                children: \"=\"\n              }), (0,jsx_runtime.jsx)(_components.span, {\n                className: \"mspace\",\n                style: {\n                  marginRight: \"0.2778em\"\n                }\n              })]\n            }), (0,jsx_runtime.jsxs)(_components.span, {\n              className: \"base\",\n              children: [(0,jsx_runtime.jsx)(_components.span, {\n                className: \"strut\",\n                style: {\n                  height: \"0.6444em\"\n                }\n              }), (0,jsx_runtime.jsx)(_components.span, {\n                className: \"mord\",\n                children: \"0.0\"\n              })]\n            })]\n          })]\n        }), \" (that is, proportional to Legendre polynomial)\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"program main\\n  use easifembase\\n  use easifemclasses\\n  implicit none\\n  integer( i4b ) :: n\\n  real(dfp), allocatable :: uhat(:), u( : ), pt( : ), wt(:)\\n  real( dfp ), parameter :: alpha=0.0_DFP, beta=0.0_DFP, tol=1.0E-10\\n  type(string) :: astr\\n  integer( i4b ), parameter :: quadType = GaussLobatto, maxN=50\\n  real( dfp ) :: x, ans, exact\\n  type(csvfile_) :: afile\\n  character( len=* ), parameter :: fname = \\\"./results/test17\\\"\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL afile%initiate(filename=fname // \\\".csv\\\", &\\n  & status=\\\"NEW\\\", action=\\\"WRITE\\\")\\nCALL afile%open()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"do n = 1, maxN\\n!!n = 10\\ncall reallocate( pt, n+1, wt, n+1 )\\ncall JacobiQuadrature( n=n+1, alpha=alpha, beta=beta, &\\n  & pt=pt, wt=wt, quadType=quadType )\\nu = SIN(4.0_DFP * pi * pt)\\nuhat = JacobiTransform(n=n, alpha=alpha, beta=beta, coeff=u, &\\n  & x=pt, w=wt, quadType=quadType)\\nx = 0.1\\nexact = SIN(4.0_DFP * pi * x)\\nans = JacobiInvTransform(n=n, alpha=alpha, beta=beta, &\\n  & x=x, coeff=uhat)\\nCALL afile%write( val=n, advance=\\\"NO\\\")\\nCALL afile%write( val=ABS(exact-ans), advance=\\\"YES\\\")\\nend do\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL afile%deallocate()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"end program main\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/JacobiPolynomialUtility/_JacobiInvTransform_test_2.md\n\n\nconst _JacobiInvTransform_test_2_frontMatter = {};\nconst _JacobiInvTransform_test_2_contentTitle = undefined;\n\n\n\n\n\nconst _JacobiInvTransform_test_2_toc = [];\nfunction _JacobiInvTransform_test_2_createMdxContent(props) {\n  const _components = {\n    annotation: \"annotation\",\n    blockquote: \"blockquote\",\n    code: \"code\",\n    math: \"math\",\n    mi: \"mi\",\n    mn: \"mn\",\n    mo: \"mo\",\n    mrow: \"mrow\",\n    p: \"p\",\n    pre: \"pre\",\n    semantics: \"semantics\",\n    span: \"span\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"This example shows the usage of \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"JacobiInvTransform\"\n      }), \" method.\"]\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.blockquote, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n        children: [\"In this example \", (0,jsx_runtime.jsxs)(_components.span, {\n          className: \"katex\",\n          children: [(0,jsx_runtime.jsx)(_components.span, {\n            className: \"katex-mathml\",\n            children: (0,jsx_runtime.jsx)(_components.math, {\n              xmlns: \"http://www.w3.org/1998/Math/MathML\",\n              children: (0,jsx_runtime.jsxs)(_components.semantics, {\n                children: [(0,jsx_runtime.jsxs)(_components.mrow, {\n                  children: [(0,jsx_runtime.jsx)(_components.mi, {\n                    children: \"α\"\n                  }), (0,jsx_runtime.jsx)(_components.mo, {\n                    children: \"=\"\n                  }), (0,jsx_runtime.jsx)(_components.mi, {\n                    children: \"β\"\n                  }), (0,jsx_runtime.jsx)(_components.mo, {\n                    children: \"=\"\n                  }), (0,jsx_runtime.jsx)(_components.mn, {\n                    children: \"0.0\"\n                  })]\n                }), (0,jsx_runtime.jsx)(_components.annotation, {\n                  encoding: \"application/x-tex\",\n                  children: \"\\\\alpha=\\\\beta=0.0\"\n                })]\n              })\n            })\n          }), (0,jsx_runtime.jsxs)(_components.span, {\n            className: \"katex-html\",\n            \"aria-hidden\": \"true\",\n            children: [(0,jsx_runtime.jsxs)(_components.span, {\n              className: \"base\",\n              children: [(0,jsx_runtime.jsx)(_components.span, {\n                className: \"strut\",\n                style: {\n                  height: \"0.4306em\"\n                }\n              }), (0,jsx_runtime.jsx)(_components.span, {\n                className: \"mord mathnormal\",\n                style: {\n                  marginRight: \"0.0037em\"\n                },\n                children: \"α\"\n              }), (0,jsx_runtime.jsx)(_components.span, {\n                className: \"mspace\",\n                style: {\n                  marginRight: \"0.2778em\"\n                }\n              }), (0,jsx_runtime.jsx)(_components.span, {\n                className: \"mrel\",\n                children: \"=\"\n              }), (0,jsx_runtime.jsx)(_components.span, {\n                className: \"mspace\",\n                style: {\n                  marginRight: \"0.2778em\"\n                }\n              })]\n            }), (0,jsx_runtime.jsxs)(_components.span, {\n              className: \"base\",\n              children: [(0,jsx_runtime.jsx)(_components.span, {\n                className: \"strut\",\n                style: {\n                  height: \"0.8889em\",\n                  verticalAlign: \"-0.1944em\"\n                }\n              }), (0,jsx_runtime.jsx)(_components.span, {\n                className: \"mord mathnormal\",\n                style: {\n                  marginRight: \"0.05278em\"\n                },\n                children: \"β\"\n              }), (0,jsx_runtime.jsx)(_components.span, {\n                className: \"mspace\",\n                style: {\n                  marginRight: \"0.2778em\"\n                }\n              }), (0,jsx_runtime.jsx)(_components.span, {\n                className: \"mrel\",\n                children: \"=\"\n              }), (0,jsx_runtime.jsx)(_components.span, {\n                className: \"mspace\",\n                style: {\n                  marginRight: \"0.2778em\"\n                }\n              })]\n            }), (0,jsx_runtime.jsxs)(_components.span, {\n              className: \"base\",\n              children: [(0,jsx_runtime.jsx)(_components.span, {\n                className: \"strut\",\n                style: {\n                  height: \"0.6444em\"\n                }\n              }), (0,jsx_runtime.jsx)(_components.span, {\n                className: \"mord\",\n                children: \"0.0\"\n              })]\n            })]\n          })]\n        }), \" (that is, proportional to Legendre polynomial)\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"program main\\n  use easifembase\\n  use easifemclasses\\n  implicit none\\n  integer( i4b ) :: ii, n\\n  real(dfp), allocatable :: uhat(:), u( : ), pt( : ), wt(:), &\\n    & x(:), ans(:), exact(:)\\n  real( dfp ), parameter :: alpha=0.0_DFP, beta=0.0_DFP, tol=1.0E-10\\n  type(string) :: astr\\n  integer( i4b ), parameter :: quadType = GaussLobatto\\n  type(csvfile_) :: afile\\n  type(PlPlot_) :: aplot\\n  character( len=* ), parameter :: fname = \\\"./results/test18\\\"\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title \\\"Open file\\\"\",\n        children: \"CALL afile%initiate(filename=fname // \\\".csv\\\", &\\n  & status=\\\"NEW\\\", action=\\\"WRITE\\\")\\nCALL afile%open()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title \\\"Plot settings\\\"\",\n        children: \"CALL aplot%Initiate()\\nCALL aplot%Set( &\\n  & device=\\\"svg\\\", &\\n  & filename=fname//\\\"-%n.svg\\\")\\nCALL aplot%figure()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title \\\"Test\\\"\",\n        children: \"x = linspace(-1.0_DFP, 1.0_DFP, 101_I4B)\\nii = 0\\ndo n = 5,25,5\\n  ii = ii + 1\\n  CALL aplot%subplot(5,1,ii)\\n  CALL aplot%setXYLim([-1.0_DFP, 1.0_DFP], [ -2.0_DFP, 2.0_DFP])\\n  CALL aplot%setTicks()\\n  call reallocate( pt, n+1, wt, n+1 )\\n  call JacobiQuadrature( n=n+1, alpha=alpha, beta=beta, &\\n    & pt=pt, wt=wt, quadType=quadType )\\n  u = SIN(4.0_DFP * pi * pt)\\n  uhat = JacobiTransform(n=n, alpha=alpha, beta=beta, coeff=u, &\\n    & x=pt, w=wt, quadType=quadType)\\n  exact = SIN(4.0_DFP * pi * x)\\n  ans = JacobiInvTransform(n=n, alpha=alpha, beta=beta, &\\n    & x=x, coeff=uhat)\\n  CALL afile%write( val=n, advance=\\\"NO\\\")\\n  CALL afile%write( val=MAXVAL(ABS(exact-ans)), advance=\\\"YES\\\")\\n  CALL aplot%plot2D( x=x,y=ans)\\n  CALL aplot%plot2D( x=x,y=exact, pointType=PS_DOT, lineWidth=0.0_DFP )\\n  CALL aplot%setLabels(\\\"x\\\",\\\"u(x)\\\",\\\"n=\\\"//tostring(n))\\nend do\\nCALL aplot%Show()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL afile%deallocate()\\nCALL aplot%deallocate()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"end program main\\n\"\n      })\n    })]\n  });\n}\nfunction _JacobiInvTransform_test_2_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_JacobiInvTransform_test_2_createMdxContent, {\n      ...props\n    })\n  }) : _JacobiInvTransform_test_2_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/JacobiPolynomialUtility/JacobiInvTransform.md\n\n\nconst JacobiInvTransform_frontMatter = {};\nconst JacobiInvTransform_contentTitle = 'JacobiInvTransform';\n\nconst assets = {\n\n};\n\n\n\n\n\n\n\nconst JacobiInvTransform_toc = [{\n  \"value\": \"Interface\",\n  \"id\": \"interface\",\n  \"level\": 2\n}, {\n  \"value\": \"Interface 2\",\n  \"id\": \"interface-2\",\n  \"level\": 2\n}, {\n  \"value\": \"Examples\",\n  \"id\": \"examples\",\n  \"level\": 2\n}, ...toc, ..._JacobiInvTransform_test_2_toc];\nfunction JacobiInvTransform_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    header: \"header\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.header, {\n      children: (0,jsx_runtime.jsx)(_components.h1, {\n        id: \"jacobiinvtransform\",\n        children: \"JacobiInvTransform\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Discrete Inverse Jacobi transform.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface\",\n      children: \"Interface\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n  MODULE PURE FUNCTION JacobiInvTransform(n, alpha, beta, coeff, x) &\\n        & RESULT(ans)\\n    INTEGER(I4B), INTENT(IN) :: n\\n    !! order of Jacobi polynomial\\n    REAL(DFP), INTENT(IN) :: alpha\\n    !! alpha of Jacobi polynomial > -1.0_DFP\\n    REAL(DFP), INTENT(IN) :: beta\\n    !! beta of Jacobi polynomial > -1.0_DFP\\n    REAL(DFP), INTENT(IN) :: coeff(0:n)\\n    !! n+1  coefficient (modal values)\\n    REAL(DFP), INTENT(IN) :: x\\n    !! x point in physical space\\n    REAL(DFP) :: ans\\n    !! value in physical space\\n  END FUNCTION JacobiInvTransform\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-2\",\n      children: \"Interface 2\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n  MODULE PURE FUNCTION JacobiInvTransform(n, alpha, beta, coeff, x) &\\n        & RESULT(ans)\\n    INTEGER(I4B), INTENT(IN) :: n\\n    !! order of Jacobi polynomial\\n    REAL(DFP), INTENT(IN) :: alpha\\n    !! alpha of Jacobi polynomial > -1.0_DFP\\n    REAL(DFP), INTENT(IN) :: beta\\n    !! beta of Jacobi polynomial > -1.0_DFP\\n    REAL(DFP), INTENT(IN) :: coeff(0:n)\\n    !! n+1  coefficient (modal values)\\n    REAL(DFP), INTENT(IN) :: x(:)\\n    !! x point in physical space\\n    REAL(DFP) :: ans(SIZE(x))\\n    !! value in physical space\\n  END FUNCTION JacobiInvTransform\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"examples\",\n      children: \"Examples\"\n    }), \"\\n\", \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \",\n        default: true\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_JacobiInvTransform_test_2_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \",\n        default: true\n      })]\n    })]\n  });\n}\nfunction JacobiInvTransform_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(JacobiInvTransform_createMdxContent, {\n      ...props\n    })\n  }) : JacobiInvTransform_createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./docs/docs-api/JacobiPolynomialUtility/JacobiInvTransform.md\n");

/***/ })

}]);