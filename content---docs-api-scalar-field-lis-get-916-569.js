"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkeasifem_docs"] = globalThis["webpackChunkeasifem_docs"] || []).push([["content---docs-api-scalar-field-lis-get-916-569"],{

/***/ "./docs/docs-api/ScalarFieldLis/Get.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  assets: () => (/* binding */ assets),\n  contentTitle: () => (/* binding */ Get_contentTitle),\n  \"default\": () => (/* binding */ Get_MDXContent),\n  frontMatter: () => (/* binding */ Get_frontMatter),\n  metadata: () => (/* reexport */ site_docs_docs_api_scalar_field_lis_get_md_916_namespaceObject),\n  toc: () => (/* binding */ Get_toc)\n});\n\n;// ./.docusaurus/docusaurus-plugin-content-docs/docs-api/site-docs-docs-api-scalar-field-lis-get-md-916.json\nconst site_docs_docs_api_scalar_field_lis_get_md_916_namespaceObject = /*#__PURE__*/JSON.parse('{\"id\":\"ScalarFieldLis/Get\",\"title\":\"Get\",\"description\":\"Get the entries from scalar field.\",\"source\":\"@site/docs/docs-api/ScalarFieldLis/Get.md\",\"sourceDirName\":\"ScalarFieldLis\",\"slug\":\"/ScalarFieldLis/Get\",\"permalink\":\"/docs-api/ScalarFieldLis/Get\",\"draft\":false,\"unlisted\":false,\"editUrl\":\"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/ScalarFieldLis/Get.md\",\"tags\":[],\"version\":\"current\",\"lastUpdatedAt\":1539502055000,\"frontMatter\":{},\"sidebar\":\"tutorialSidebar\",\"previous\":{\"title\":\"Export\",\"permalink\":\"/docs-api/ScalarFieldLis/Export\"},\"next\":{\"title\":\"GetPointer\",\"permalink\":\"/docs-api/ScalarFieldLis/GetPointer\"}}');\n// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n// EXTERNAL MODULE: ./node_modules/@mdx-js/react/lib/index.js\nvar lib = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js + 2 modules\nvar Tabs = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js + 1 modules\nvar TabItem = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js\");\n;// ./docs/docs-api/ScalarFieldLis/_ScalarField_test_11.md\n\n\nconst frontMatter = {};\nconst contentTitle = undefined;\n\n\n\n\n\nconst toc = [];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"In this example we test \", (0,jsx_runtime.jsx)(_components.a, {\n        href: \"/docs-api/ScalarFieldLis/Get\",\n        children: \"Get\"\n      }), \" method.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Get single entry.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n  USE easifemBase\\n  USE easifemClasses\\n  TYPE( Domain_ ) :: dom\\n  TYPE( ScalarFieldLis_ ) :: obj\\n  TYPE( HDF5File_ ) :: meshfile, resultFile\\n  TYPE( ParameterList_ ) :: param\\n  INTEGER( I4B ) :: ierr\\n  REAL( DFP ), ALLOCATABLE :: realVec( : )\\n  REAL( DFP ) :: avar\\n  CHARACTER( LEN = * ), PARAMETER :: engine = \\\"LIS_OMP\\\"\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Open file for import\\\"\",\n        children: \"CALL FPL_INIT()\\nCALL param%initiate()\\nCALL resultFile%initiate( filename=\\\"./result.h5\\\", mode=\\\"READ\\\" )\\nCALL resultFile%open()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"read domain\\\"\",\n        children: \"!> start creating domain\\nCALL meshfile%initiate( filename=\\\"./mesh.h5\\\", mode=\\\"READ\\\" )\\nCALL meshfile%open()\\nCALL dom%initiate( hdf5=meshfile, group=\\\"\\\" )\\n!> end creating domain\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"initiate scalar field\\\"\",\n        children: \"CALL SetScalarFieldParam( param=param, &\\n  & fieldType=FIELD_TYPE_NORMAL, &\\n  & name=\\\"U\\\", &\\n  & engine=engine)\\nCALL obj%initiate( param, dom )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"setting all values using vector\\\"\",\n        children: \"CALL reallocate( realVec, dom%getTotalNodes() )\\nCALL RANDOM_NUMBER( realVec )\\nCALL obj%set(realVec)\\nCALL obj%display( \\\"scalar field = \\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"0.525588,   \\n0.106782,   \\n0.665122,   \\n0.108642,   \\n0.482753,   \\n0.356140,   \\n0.737333,   \\n0.739410,   \\n0.286026,\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL obj%get( value=avar, globalNode=2)\\nCALL Display(avar, \\\"avar = \\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"avar = 0.106782\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Cleanup\\\"\",\n        children: \"  CALL obj%Deallocate(); CALL dom%Deallocate()\\n  CALL meshfile%Deallocate()\\n  CALL resultFile%Deallocate()\\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\\n  IF(allocated(realVec) ) deallocate(realVec)\\nEND PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/ScalarFieldLis/_ScalarField_test_12.md\n\n\nconst _ScalarField_test_12_frontMatter = {};\nconst _ScalarField_test_12_contentTitle = undefined;\n\n\n\n\n\nconst _ScalarField_test_12_toc = [];\nfunction _ScalarField_test_12_createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"In this example we test \", (0,jsx_runtime.jsx)(_components.a, {\n        href: \"/docs-api/ScalarFieldLis/Get\",\n        children: \"Get\"\n      }), \" method.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Get all entries in a vector of reals.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n  USE easifemBase\\n  USE easifemClasses\\n  TYPE( Domain_ ) :: dom\\n  TYPE( ScalarFieldLis_ ) :: obj\\n  TYPE( HDF5File_ ) :: meshfile, resultFile\\n  TYPE( ParameterList_ ) :: param\\n  INTEGER( I4B ) :: ierr\\n  REAL( DFP ), ALLOCATABLE :: realVec( : )\\n  REAL( DFP ) :: avar\\n  CHARACTER( LEN = * ), PARAMETER :: engine = \\\"LIS_OMP\\\"\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Open file for import\\\"\",\n        children: \"CALL FPL_INIT()\\nCALL param%initiate()\\nCALL resultFile%initiate( filename=\\\"./result.h5\\\", mode=\\\"READ\\\" )\\nCALL resultFile%open()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"read domain\\\"\",\n        children: \"!> start creating domain\\nCALL meshfile%initiate( filename=\\\"./mesh.h5\\\", mode=\\\"READ\\\" )\\nCALL meshfile%open()\\nCALL dom%initiate( hdf5=meshfile, group=\\\"\\\" )\\n!> end creating domain\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"initiate scalar field\\\"\",\n        children: \"CALL SetScalarFieldParam( param=param, &\\n  & fieldType=FIELD_TYPE_NORMAL, &\\n  & name=\\\"U\\\", &\\n  & engine=engine)\\nCALL obj%initiate( param, dom )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"setting all values using vector\\\"\",\n        children: \"CALL reallocate( realVec, dom%getTotalNodes() )\\nCALL RANDOM_NUMBER( realVec )\\nCALL obj%set(realVec)\\nCALL obj%display( \\\"scalar field = \\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"0.132029,   \\n0.489434,   \\n0.690163,   \\n0.424993,   \\n0.313813,   \\n0.833015,   \\n0.369671,   \\n0.252695,   \\n0.327842,   \\n0.649937,\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Get all entries\\\"\",\n        children: \"CALL obj%get( value=realVec)\\nCALL Display(realVec(1:5), \\\"realVec(1:5) = \\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"0.132029    \\n0.489434    \\n0.690163    \\n0.424993    \\n0.313813\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Cleanup\\\"\",\n        children: \"  CALL obj%Deallocate(); CALL dom%Deallocate()\\n  CALL meshfile%Deallocate()\\n  CALL resultFile%Deallocate()\\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\\n  if(allocated(realVec) ) deallocate(realVec)\\nEND PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction _ScalarField_test_12_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_ScalarField_test_12_createMdxContent, {\n      ...props\n    })\n  }) : _ScalarField_test_12_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/ScalarFieldLis/_ScalarField_test_13.md\n\n\nconst _ScalarField_test_13_frontMatter = {};\nconst _ScalarField_test_13_contentTitle = undefined;\n\n\n\n\n\nconst _ScalarField_test_13_toc = [];\nfunction _ScalarField_test_13_createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"In this example we test \", (0,jsx_runtime.jsx)(_components.a, {\n        href: \"/docs-api/ScalarFieldLis/Get\",\n        children: \"Get\"\n      }), \" method.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Get multiple entries.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n  USE easifemBase\\n  USE easifemClasses\\n  TYPE( Domain_ ) :: dom\\n  TYPE( ScalarFieldLis_ ) :: obj\\n  TYPE( HDF5File_ ) :: meshfile, resultFile\\n  TYPE( ParameterList_ ) :: param\\n  INTEGER( I4B ) :: ierr\\n  REAL( DFP ), ALLOCATABLE :: realVec( : )\\n  REAL( DFP ) :: avar\\n  CHARACTER( LEN = * ), PARAMETER :: engine = \\\"LIS_OMP\\\"\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Open file for import\\\"\",\n        children: \"CALL FPL_INIT()\\nCALL param%initiate()\\nCALL resultFile%initiate( filename=\\\"./result.h5\\\", mode=\\\"READ\\\" )\\nCALL resultFile%open()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"read domain\\\"\",\n        children: \"!> start creating domain\\nCALL meshfile%initiate( filename=\\\"./mesh.h5\\\", mode=\\\"READ\\\" )\\nCALL meshfile%open()\\nCALL dom%initiate( hdf5=meshfile, group=\\\"\\\" )\\n!> end creating domain\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"initiate scalar field\\\"\",\n        children: \"CALL SetScalarFieldParam( param=param, &\\n  & fieldType=FIELD_TYPE_NORMAL, &\\n  & name=\\\"U\\\", &\\n  & engine=engine)\\nCALL obj%initiate( param, dom )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"setting all values using vector\\\"\",\n        children: \"CALL reallocate( realVec, dom%getTotalNodes() )\\nCALL RANDOM_NUMBER( realVec )\\nCALL obj%set(realVec)\\nCALL obj%display( \\\"scalar field = \\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"0.335789,   \\n0.222078,   \\n0.384477,   \\n0.360936,   \\n0.522693,   \\n0.260172,   \\n0.219712,   \\n0.416958,   \\n0.313375,   \\n0.566592,   \\n0.783093,   \\n0.844735,\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Get multiple entries\\\"\",\n        children: \"CALL obj%get( value=realVec, globalNode=[1,2,3,4,5])\\nCALL Display(realVec(1:5), \\\"realVec(1:5) = \\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"realVec(1:5) = \\n---------------\\n   0.335789    \\n   0.222078    \\n   0.384477    \\n   0.360936    \\n   0.522693\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Cleanup\\\"\",\n        children: \"  CALL obj%Deallocate(); CALL dom%Deallocate()\\n  CALL meshfile%Deallocate()\\n  CALL resultFile%Deallocate()\\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\\n  if(allocated(realVec) ) deallocate(realVec)\\nEND PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction _ScalarField_test_13_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_ScalarField_test_13_createMdxContent, {\n      ...props\n    })\n  }) : _ScalarField_test_13_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/ScalarFieldLis/_ScalarField_test_14.md\n\n\nconst _ScalarField_test_14_frontMatter = {};\nconst _ScalarField_test_14_contentTitle = undefined;\n\n\n\n\n\nconst _ScalarField_test_14_toc = [];\nfunction _ScalarField_test_14_createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"In this example we test \", (0,jsx_runtime.jsx)(_components.a, {\n        href: \"/docs-api/ScalarFieldLis/Get\",\n        children: \"Get\"\n      }), \" method.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Get multiple values using triplets.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n  USE easifemBase\\n  USE easifemClasses\\n  TYPE( Domain_ ) :: dom\\n  TYPE( ScalarFieldLis_ ) :: obj\\n  TYPE( HDF5File_ ) :: meshfile, resultFile\\n  TYPE( ParameterList_ ) :: param\\n  INTEGER( I4B ) :: ierr\\n  REAL( DFP ), ALLOCATABLE :: realVec( : )\\n  REAL( DFP ) :: avar\\n  CHARACTER( LEN = * ), PARAMETER :: engine = \\\"LIS_OMP\\\"\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Open file for import\\\"\",\n        children: \"CALL FPL_INIT()\\nCALL param%initiate()\\nCALL resultFile%initiate( filename=\\\"./result.h5\\\", mode=\\\"READ\\\" )\\nCALL resultFile%open()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"read domain\\\"\",\n        children: \"!> start creating domain\\nCALL meshfile%initiate( filename=\\\"./mesh.h5\\\", mode=\\\"READ\\\" )\\nCALL meshfile%open()\\nCALL dom%initiate( hdf5=meshfile, group=\\\"\\\" )\\n!> end creating domain\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"initiate scalar field\\\"\",\n        children: \"CALL SetScalarFieldParam( param=param, &\\n  & fieldType=FIELD_TYPE_NORMAL, &\\n  & name=\\\"U\\\", &\\n  & engine=engine)\\nCALL obj%initiate( param, dom )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"setting all values using vector\\\"\",\n        children: \"CALL reallocate( realVec, dom%getTotalNodes() )\\nCALL RANDOM_NUMBER( realVec )\\nCALL obj%set(realVec)\\nCALL obj%display( \\\"scalar field = \\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"0.622789,   \\n0.905349,   \\n0.707204,   \\n0.759759,   \\n0.867313,   \\n0.557912,   \\n0.618558,   \\n0.111490,   \\n0.447643,   \\n0.582593,\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Get multiple entries\\\"\",\n        children: \"CALL obj%get( value=realVec, istart=1, iend=5, stride=1)\\nCALL Display(realVec(1:5), \\\"realVec(1:5) = \\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"realVec(1:5) = \\n---------------\\n   0.622789    \\n   0.905349    \\n   0.707204    \\n   0.759759    \\n   0.867313\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Cleanup\\\"\",\n        children: \"  CALL obj%Deallocate(); CALL dom%Deallocate()\\n  CALL meshfile%Deallocate()\\n  CALL resultFile%Deallocate()\\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\\n  if(allocated(realVec) ) deallocate(realVec)\\nEND PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction _ScalarField_test_14_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_ScalarField_test_14_createMdxContent, {\n      ...props\n    })\n  }) : _ScalarField_test_14_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/ScalarFieldLis/_ScalarField_test_15.md\n\n\nconst _ScalarField_test_15_frontMatter = {};\nconst _ScalarField_test_15_contentTitle = undefined;\n\n\n\n\n\nconst _ScalarField_test_15_toc = [];\nfunction _ScalarField_test_15_createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"In this example we test \", (0,jsx_runtime.jsx)(_components.a, {\n        href: \"/docs-api/ScalarFieldLis/Get\",\n        children: \"Get\"\n      }), \" method.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Get multiple entries in FEVariable.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n  USE easifemBase\\n  USE easifemClasses\\n  TYPE( Domain_ ) :: dom\\n  TYPE( ScalarFieldLis_ ) :: obj\\n  TYPE( HDF5File_ ) :: meshfile, resultFile\\n  TYPE( ParameterList_ ) :: param\\n  INTEGER( I4B ) :: ierr\\n  REAL( DFP ), ALLOCATABLE :: realVec( : )\\n  REAL( DFP ) :: avar\\n  CHARACTER( LEN = * ), PARAMETER :: engine = \\\"LIS_OMP\\\"\\n  TYPE(FEVariable_) :: fevar\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Open file for import\\\"\",\n        children: \"CALL FPL_INIT()\\nCALL param%initiate()\\nCALL resultFile%initiate( filename=\\\"./result.h5\\\", mode=\\\"READ\\\" )\\nCALL resultFile%open()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"read domain\\\"\",\n        children: \"!> start creating domain\\nCALL meshfile%initiate( filename=\\\"./mesh.h5\\\", mode=\\\"READ\\\" )\\nCALL meshfile%open()\\nCALL dom%initiate( hdf5=meshfile, group=\\\"\\\" )\\n!> end creating domain\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"initiate scalar field\\\"\",\n        children: \"CALL SetScalarFieldParam( param=param, &\\n  & fieldType=FIELD_TYPE_NORMAL, &\\n  & name=\\\"U\\\", &\\n  & engine=engine)\\nCALL obj%initiate( param, dom )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"setting all values using vector\\\"\",\n        children: \"CALL reallocate( realVec, dom%getTotalNodes() )\\nCALL RANDOM_NUMBER( realVec )\\nCALL obj%set(realVec)\\nCALL obj%display( \\\"scalar field = \\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"0.476675,   \\n0.721996,   \\n0.808386,   \\n0.022536,   \\n0.843059,   \\n0.107551,   \\n0.443036,   \\n0.104665,   \\n0.759430,   \\n0.853888,\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Get multiple entries\\\"\",\n        children: \"CALL obj%get( value=fevar, globalNode=arange(1,5,1) )\\nCALL Display(fevar, \\\"fevar = \\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"fevar = \\n# RANK :: 0 (SCALAR)\\n# VarType: SPACE\\n# VALUE: \\n---------\\n0.476675 \\n0.721996 \\n0.808386 \\n0.022536 \\n0.843059\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Cleanup\\\"\",\n        children: \"  CALL obj%Deallocate(); CALL dom%Deallocate()\\n  CALL meshfile%Deallocate()\\n  CALL resultFile%Deallocate()\\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\\n  if(allocated(realVec) ) deallocate(realVec)\\nEND PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction _ScalarField_test_15_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_ScalarField_test_15_createMdxContent, {\n      ...props\n    })\n  }) : _ScalarField_test_15_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/ScalarFieldLis/_ScalarField_test_20.md\n\n\nconst _ScalarField_test_20_frontMatter = {};\nconst _ScalarField_test_20_contentTitle = undefined;\n\n\n\n\n\nconst _ScalarField_test_20_toc = [];\nfunction _ScalarField_test_20_createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"In this example we test \", (0,jsx_runtime.jsx)(_components.a, {\n        href: \"/docs-api/ScalarFieldLis/Get\",\n        children: \"Get\"\n      }), \" method.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Get all entry in obj2, where obj2 is an instance of ScalarFieldLis_\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        children: \"obj2 = obj\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"Both \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"obj\"\n      }), \" and \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"obj2\"\n      }), \" are instances of \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"ScalarFieldLis_\"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n  USE easifemBase\\n  USE easifemClasses\\n  TYPE( Domain_ ) :: dom\\n  TYPE( ScalarFieldLis_ ) :: obj\\n  TYPE( ScalarFieldLis_ ) :: obj2\\n  TYPE( HDF5File_ ) :: meshfile, resultFile\\n  TYPE( ParameterList_ ) :: param\\n  INTEGER( I4B ) :: ierr\\n  REAL( DFP ), ALLOCATABLE :: realVec( : )\\n  REAL( DFP ) :: avar\\n  CHARACTER( LEN = * ), PARAMETER :: engine = \\\"LIS_OMP\\\"\\n  TYPE(FEVariable_) :: fevar\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Open file for import\\\"\",\n        children: \"CALL FPL_INIT()\\nCALL param%initiate()\\nCALL resultFile%initiate( filename=\\\"./result.h5\\\", mode=\\\"READ\\\" )\\nCALL resultFile%open()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"read domain\\\"\",\n        children: \"!> start creating domain\\nCALL meshfile%initiate( filename=\\\"./mesh.h5\\\", mode=\\\"READ\\\" )\\nCALL meshfile%open()\\nCALL dom%initiate( hdf5=meshfile, group=\\\"\\\" )\\n!> end creating domain\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"initiate scalar field\\\"\",\n        children: \"CALL SetScalarFieldParam( param=param, &\\n  & fieldType=FIELD_TYPE_NORMAL, &\\n  & name=\\\"U\\\", &\\n  & engine=engine)\\nCALL obj%initiate( param, dom )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"initiate scalar field\\\"\",\n        children: \"CALL SetScalarFieldParam( param=param, &\\n  & fieldType=FIELD_TYPE_NORMAL, &\\n  & name=\\\"U2\\\", &\\n  & engine=engine)\\nCALL obj2%initiate( param, dom )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"setting all values using vector\\\"\",\n        children: \"CALL reallocate( realVec, dom%getTotalNodes() )\\nCALL RANDOM_NUMBER( realVec )\\nCALL obj%set(realVec)\\nCALL obj%display( \\\"scalar field = \\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"#scalar field =\\n# isInitiated : TRUE\\n# name :U\\n# fieldType : NORMAL\\n# engine :LIS_OMP\\n# comm: 0\\n# myRank: 0\\n# numProcs: 1\\n# global_n: 102\\n# local_n: 102\\n# is: 1\\n# ie: 103\\n# lis_ptr: 94642949263200\\n# domain : ASSOCIATED\\n# domains : NOT ALLOCATED\\n# tSize : 102\\n# # DOF data :\\n# Total Physical Variables :1\\n# Name : U\\n# Space Components : 1\\n# Time Components : 1\\n# Total Nodes : 102\\n# Storage Format : Nodes\\n# Value Map : \\n--------------\\n       1      \\n     103      \\n# VAR :U\\n  DOF-1 ,   \\n--------,   \\n0.677787,   \\n0.648929,   \\n0.876577,   \\n0.929737,   \\n0.746531,   \\n0.655029,   \\n0.956440,   \\n0.892157,   \\n0.563374,   \\n0.149392,   \\n0.217981,   \\n0.207189,   \\n0.355624,   \\n0.396910,   \\n0.559421,   \\n0.589930,   \\n0.713219,   \\n0.625906,   \\n0.838845,   \\n0.960102,\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Get multiple entries\\\"\",\n        children: \"CALL obj%get( value=obj2 )\\nCALL obj2%Display(\\\"obj2\\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"#obj2\\n# isInitiated : TRUE\\n# name :U2\\n# fieldType : NORMAL\\n# engine :LIS_OMP\\n# comm: 0\\n# myRank: 0\\n# numProcs: 1\\n# global_n: 102\\n# local_n: 102\\n# is: 1\\n# ie: 103\\n# lis_ptr: 94642948865744\\n# domain : ASSOCIATED\\n# domains : NOT ALLOCATED\\n# tSize : 102\\n# # DOF data :\\n# Total Physical Variables :1\\n# Name : U\\n# Space Components : 1\\n# Time Components : 1\\n# Total Nodes : 102\\n# Storage Format : Nodes\\n# Value Map : \\n--------------\\n       1      \\n     103      \\n# VAR :U\\n  DOF-1 ,   \\n--------,   \\n0.677787,   \\n0.648929,   \\n0.876577,   \\n0.929737,   \\n0.746531,   \\n0.655029,   \\n0.956440,   \\n0.892157,   \\n0.563374,   \\n0.149392,   \\n0.217981,   \\n0.207189,   \\n0.355624,   \\n0.396910,   \\n0.559421,   \\n0.589930,   \\n0.713219,   \\n0.625906,   \\n0.838845,   \\n0.960102,\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Cleanup\\\"\",\n        children: \"  CALL obj%Deallocate(); CALL dom%Deallocate()\\n  CALL meshfile%Deallocate()\\n  CALL resultFile%Deallocate()\\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\\n  if(allocated(realVec) ) deallocate(realVec)\\nEND PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction _ScalarField_test_20_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_ScalarField_test_20_createMdxContent, {\n      ...props\n    })\n  }) : _ScalarField_test_20_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/ScalarFieldLis/_ScalarField_test_21.md\n\n\nconst _ScalarField_test_21_frontMatter = {};\nconst _ScalarField_test_21_contentTitle = undefined;\n\n\n\n\n\nconst _ScalarField_test_21_toc = [];\nfunction _ScalarField_test_21_createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"In this example we test \", (0,jsx_runtime.jsx)(_components.a, {\n        href: \"/docs-api/ScalarFieldLis/Get\",\n        children: \"Get\"\n      }), \" method.\"]\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"Get all entry in obj2, where obj2 is an instance of \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"ScalarField_\"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        children: \"obj2 = obj\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"Both \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"obj\"\n      }), \" and \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"obj2\"\n      }), \" are instances of \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"ScalarFieldLis_\"\n      }), \" and \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"ScalarField_\"\n      }), \", respectively.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n  USE easifemBase\\n  USE easifemClasses\\n  TYPE( Domain_ ) :: dom\\n  TYPE( ScalarFieldLis_ ) :: obj\\n  TYPE( ScalarField_ ) :: obj2\\n  TYPE( HDF5File_ ) :: meshfile, resultFile\\n  TYPE( ParameterList_ ) :: param\\n  INTEGER( I4B ) :: ierr\\n  REAL( DFP ), ALLOCATABLE :: realVec( : )\\n  REAL( DFP ) :: avar\\n  CHARACTER( LEN = * ), PARAMETER :: engine = \\\"LIS_OMP\\\"\\n  TYPE(FEVariable_) :: fevar\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Open file for import\\\"\",\n        children: \"CALL FPL_INIT()\\nCALL param%initiate()\\nCALL resultFile%initiate( filename=\\\"./result.h5\\\", mode=\\\"READ\\\" )\\nCALL resultFile%open()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"read domain\\\"\",\n        children: \"!> start creating domain\\nCALL meshfile%initiate( filename=\\\"./mesh.h5\\\", mode=\\\"READ\\\" )\\nCALL meshfile%open()\\nCALL dom%initiate( hdf5=meshfile, group=\\\"\\\" )\\n!> end creating domain\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"initiate scalar field\\\"\",\n        children: \"CALL SetScalarFieldParam( param=param, &\\n  & fieldType=FIELD_TYPE_NORMAL, &\\n  & name=\\\"U\\\", &\\n  & engine=engine)\\nCALL obj%initiate( param, dom )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"initiate scalar field\\\"\",\n        children: \"CALL SetScalarFieldParam( param=param, &\\n  & fieldType=FIELD_TYPE_NORMAL, &\\n  & name=\\\"U2\\\", &\\n  & engine=\\\"NATIVE_SERIAL\\\")\\nCALL obj2%initiate( param, dom )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"setting all values using vector\\\"\",\n        children: \"CALL reallocate( realVec, dom%getTotalNodes() )\\nCALL RANDOM_NUMBER( realVec )\\nCALL obj%set(realVec)\\nCALL obj%display( \\\"scalar field = \\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"#scalar field =\\n# isInitiated : TRUE\\n# name :U\\n# fieldType : NORMAL\\n# engine :LIS_OMP\\n# comm: 0\\n# myRank: 0\\n# numProcs: 1\\n# global_n: 102\\n# local_n: 102\\n# is: 1\\n# ie: 103\\n# lis_ptr: 94778893242208\\n# domain : ASSOCIATED\\n# domains : NOT ALLOCATED\\n# tSize : 102\\n# # DOF data :\\n# Total Physical Variables :1\\n# Name : U\\n# Space Components : 1\\n# Time Components : 1\\n# Total Nodes : 102\\n# Storage Format : Nodes\\n# Value Map : \\n--------------\\n       1      \\n     103      \\n# VAR :U\\n  DOF-1 ,   \\n--------,   \\n0.976837,   \\n0.483390,   \\n0.581184,   \\n0.147984,   \\n0.724879,   \\n0.299203,   \\n0.940301,   \\n0.663552,   \\n0.240904,   \\n0.941748,   \\n0.447914,   \\n0.202338,   \\n0.454285,   \\n0.881168,   \\n0.323755,   \\n0.373271,   \\n0.530906,   \\n0.802271,   \\n0.433111,   \\n0.472424,   \\n0.749044,\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Get multiple entries\\\"\",\n        children: \"CALL obj%get( value=obj2 )\\nCALL obj2%Display(\\\"obj2\\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"#obj2\\n# isInitiated : TRUE\\n# name :U2\\n# fieldType : NORMAL\\n# engine :NATIVE_SERIAL\\n# comm: 0\\n# myRank: 0\\n# numProcs: 1\\n# global_n: 102\\n# local_n: 102\\n# is: 0\\n# ie: 0\\n# lis_ptr: 0\\n# domain : ASSOCIATED\\n# domains : NOT ALLOCATED\\n# tSize : 102\\n# # DOF data :\\n# Total Physical Variables :1\\n# Name : U\\n# Space Components : 1\\n# Time Components : 1\\n# Total Nodes : 102\\n# Storage Format : Nodes\\n# Value Map : \\n--------------\\n       1      \\n     103      \\n# VAR :U\\n  DOF-1 ,   \\n--------,   \\n0.976837,   \\n0.483390,   \\n0.581184,   \\n0.147984,   \\n0.724879,   \\n0.299203,   \\n0.940301,   \\n0.663552,   \\n0.240904,   \\n0.941748,   \\n0.447914,   \\n0.202338,   \\n0.454285,   \\n0.881168,   \\n0.323755,   \\n0.373271,   \\n0.530906,   \\n0.802271,   \\n0.433111,   \\n0.472424,   \\n0.749044,\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Cleanup\\\"\",\n        children: \"  CALL obj%Deallocate(); CALL dom%Deallocate()\\n  CALL meshfile%Deallocate()\\n  CALL resultFile%Deallocate()\\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\\n  if(allocated(realVec) ) deallocate(realVec)\\nEND PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction _ScalarField_test_21_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_ScalarField_test_21_createMdxContent, {\n      ...props\n    })\n  }) : _ScalarField_test_21_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/ScalarFieldLis/Get.md\n\n\nconst Get_frontMatter = {};\nconst Get_contentTitle = 'Get';\n\nconst assets = {\n\n};\n\n\n\n\n\n\n\n\n\n\n\n\nconst Get_toc = [{\n  \"value\": \"Interface 1\",\n  \"id\": \"interface-1\",\n  \"level\": 2\n}, ...toc, {\n  \"value\": \"Interface 2\",\n  \"id\": \"interface-2\",\n  \"level\": 2\n}, ..._ScalarField_test_12_toc, {\n  \"value\": \"Interface 3\",\n  \"id\": \"interface-3\",\n  \"level\": 2\n}, ..._ScalarField_test_13_toc, {\n  \"value\": \"Interface 4\",\n  \"id\": \"interface-4\",\n  \"level\": 2\n}, ..._ScalarField_test_14_toc, {\n  \"value\": \"Interface 5\",\n  \"id\": \"interface-5\",\n  \"level\": 2\n}, ..._ScalarField_test_15_toc, {\n  \"value\": \"Interface 6\",\n  \"id\": \"interface-6\",\n  \"level\": 2\n}, ..._ScalarField_test_20_toc, ..._ScalarField_test_21_toc];\nfunction Get_createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    header: \"header\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.header, {\n      children: (0,jsx_runtime.jsx)(_components.h1, {\n        id: \"get\",\n        children: \"Get\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Get the entries from scalar field.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Calling examples:\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(\"span\", {\n      class: \"badge badge--primary\",\n      children: \" Getting single entry \"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL Get(\\n    CLASS(ScalarFieldLis_):: obj\\n    REAL(DFP):: VALUE\\n    INTEGER(I4B):: globalNode\\n)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(\"span\", {\n      class: \"badge badge--primary\",\n      children: \" Getting all entries \"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL Get(\\n    CLASS(ScalarFieldLis_):: obj\\n    REAL(DFP):: VALUE(:)\\n)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(\"span\", {\n      class: \"badge badge--primary\",\n      children: \" Getting multiple entries \"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL Get(\\n    CLASS(ScalarFieldLis_):: obj\\n    REAL(DFP):: VALUE(:)\\n    INTEGER(I4B):: globalNode(:)\\n    )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(\"span\", {\n      class: \"badge badge--primary\",\n      children: \" Getting multiple entries \"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL Get(\\n    CLASS(ScalarFieldLis_):: obj\\n    REAL(DFP):: VALUE(:)\\n    INTEGER(I4B):: istart\\n    INTEGER(I4B):: iend\\n    INTEGER(I4B):: stride\\n    )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(\"span\", {\n      class: \"badge badge--primary\",\n      children: \" Getting multiple entries \"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL Get(\\n    CLASS(ScalarFieldLis_):: obj\\n    TYPE(FEVariable_):: VALUE\\n    INTEGER(I4B):: globalNode(:)\\n    )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(\"span\", {\n      class: \"badge badge--primary\",\n      children: \" Getting all entries \"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL Get(\\n    CLASS(ScalarFieldLis_):: obj\\n    CLASS(ScalarField_):: VALUE\\n    )\\n\"\n      })\n    }), \"\\n\", \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-1\",\n      children: \"Interface 1\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE SUBROUTINE get1(obj, VALUE, globalNode)\\n    CLASS(ScalarFieldLis_), INTENT(IN) :: obj\\n    REAL(DFP), INTENT(INOUT) :: VALUE\\n    INTEGER(I4B), INTENT(IN) :: globalNode\\n  END SUBROUTINE get1\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsx)(_components.p, {\n          children: \"Get a single entry.\"\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-2\",\n      children: \"Interface 2\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE SUBROUTINE get2(obj, VALUE)\\n    CLASS(ScalarFieldLis_), INTENT(IN) :: obj\\n    REAL(DFP), ALLOCATABLE, INTENT(INOUT) :: VALUE(:)\\n  END SUBROUTINE get2\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsx)(_components.p, {\n          children: \"Get all entries in a vector of reals.\"\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_ScalarField_test_12_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-3\",\n      children: \"Interface 3\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE SUBROUTINE get3(obj, VALUE, globalNode)\\n    CLASS(ScalarFieldLis_), INTENT(IN) :: obj\\n    REAL(DFP), ALLOCATABLE, INTENT(INOUT) :: VALUE(:)\\n    INTEGER(I4B), INTENT(IN) :: globalNode(:)\\n  END SUBROUTINE get3\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsx)(_components.p, {\n          children: \"Get multiple entries.\"\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_ScalarField_test_13_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-4\",\n      children: \"Interface 4\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE SUBROUTINE get4(obj, VALUE, istart, iend, stride)\\n    CLASS(ScalarFieldLis_), INTENT(IN) :: obj\\n    REAL(DFP), ALLOCATABLE, INTENT(INOUT) :: VALUE(:)\\n    INTEGER(I4B), INTENT(IN) :: istart\\n    INTEGER(I4B), INTENT(IN) :: iend\\n    INTEGER(I4B), INTENT(IN) :: stride\\n  END SUBROUTINE get4\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsx)(_components.p, {\n          children: \"Get multiple entries by using triplets.\"\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_ScalarField_test_14_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-5\",\n      children: \"Interface 5\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE SUBROUTINE get5(obj, VALUE, globalNode)\\n    CLASS(ScalarFieldLis_), INTENT(IN) :: obj\\n    TYPE(FEVariable_), INTENT(INOUT) :: VALUE\\n  !! Scalar Nodal FEVariable\\n    INTEGER(I4B), INTENT(IN) :: globalNode(:)\\n  END SUBROUTINE get5\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.p, {\n          children: [\"Get multiple entries in \", (0,jsx_runtime.jsx)(_components.a, {\n            href: \"/docs-api/FEVariable/FEVariable_\",\n            children: \"FEVariable\"\n          })]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_ScalarField_test_15_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-6\",\n      children: \"Interface 6\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE SUBROUTINE get6(obj, VALUE)\\n    CLASS(ScalarFieldLis_), INTENT(IN) :: obj\\n    CLASS(ScalarField_), INTENT(INOUT) :: VALUE\\n  END SUBROUTINE get6\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsx)(_components.p, {\n          children: \"Get a scalarfield in an instance of scalar field.\"\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example1\",\n        label: \"️܀ Example 1\",\n        children: (0,jsx_runtime.jsx)(_ScalarField_test_20_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example2\",\n        label: \"️܀ Example 2\",\n        children: (0,jsx_runtime.jsx)(_ScalarField_test_21_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    })]\n  });\n}\nfunction Get_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(Get_createMdxContent, {\n      ...props\n    })\n  }) : Get_createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./docs/docs-api/ScalarFieldLis/Get.md\n");

/***/ })

}]);