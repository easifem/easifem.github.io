"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkeasifem_docs"] = globalThis["webpackChunkeasifem_docs"] || []).push([["content---docs-api-abstract-steady-stokes-abstract-steady-stokes-b-5-e-452"],{

/***/ "./docs/docs-api/AbstractSteadyStokes/AbstractSteadyStokes_.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  assets: () => (/* binding */ assets),\n  contentTitle: () => (/* binding */ contentTitle),\n  \"default\": () => (/* binding */ MDXContent),\n  frontMatter: () => (/* binding */ frontMatter),\n  metadata: () => (/* reexport */ site_docs_docs_api_abstract_steady_stokes_abstract_steady_stokes_md_b5e_namespaceObject),\n  toc: () => (/* binding */ toc)\n});\n\n;// ./.docusaurus/docusaurus-plugin-content-docs/docs-api/site-docs-docs-api-abstract-steady-stokes-abstract-steady-stokes-md-b5e.json\nconst site_docs_docs_api_abstract_steady_stokes_abstract_steady_stokes_md_b5e_namespaceObject = /*#__PURE__*/JSON.parse('{\"id\":\"AbstractSteadyStokes/AbstractSteadyStokes_\",\"title\":\"Structure\",\"description\":\"The structure of AbstractSteadyStokes_ is given below.\",\"source\":\"@site/docs/docs-api/AbstractSteadyStokes/AbstractSteadyStokes_.md\",\"sourceDirName\":\"AbstractSteadyStokes\",\"slug\":\"/AbstractSteadyStokes/AbstractSteadyStokes_\",\"permalink\":\"/docs-api/AbstractSteadyStokes/AbstractSteadyStokes_\",\"draft\":false,\"unlisted\":false,\"editUrl\":\"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/AbstractSteadyStokes/AbstractSteadyStokes_.md\",\"tags\":[],\"version\":\"current\",\"lastUpdatedAt\":1539502055000,\"frontMatter\":{},\"sidebar\":\"tutorialSidebar\",\"previous\":{\"title\":\"AbstractSteadyStokes\",\"permalink\":\"/docs-api/AbstractSteadyStokes/\"},\"next\":{\"title\":\"AppendUtility\",\"permalink\":\"/docs-api/AppendUtility/\"}}');\n// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n// EXTERNAL MODULE: ./node_modules/@mdx-js/react/lib/index.js\nvar lib = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n;// ./docs/docs-api/AbstractSteadyStokes/AbstractSteadyStokes_.md\n\n\nconst frontMatter = {};\nconst contentTitle = 'Structure';\n\nconst assets = {\n\n};\n\n\n\nconst toc = [{\n  \"value\": \"ConstructorMethods\",\n  \"id\": \"constructormethods\",\n  \"level\": 2\n}, {\n  \"value\": \"setAbstractSteadyStokesParam\",\n  \"id\": \"setabstractsteadystokesparam\",\n  \"level\": 3\n}, {\n  \"value\": \"AddSurrogate\",\n  \"id\": \"addsurrogate\",\n  \"level\": 3\n}, {\n  \"value\": \"Deallocate\",\n  \"id\": \"deallocate\",\n  \"level\": 3\n}, {\n  \"value\": \"CheckEssentialParam\",\n  \"id\": \"checkessentialparam\",\n  \"level\": 3\n}, {\n  \"value\": \"Initiate\",\n  \"id\": \"initiate\",\n  \"level\": 3\n}, {\n  \"value\": \"IOMethods\",\n  \"id\": \"iomethods\",\n  \"level\": 2\n}, {\n  \"value\": \"Import\",\n  \"id\": \"import\",\n  \"level\": 3\n}, {\n  \"value\": \"Export\",\n  \"id\": \"export\",\n  \"level\": 3\n}, {\n  \"value\": \"Display\",\n  \"id\": \"display\",\n  \"level\": 3\n}, {\n  \"value\": \"WriteData_hdf5\",\n  \"id\": \"writedata_hdf5\",\n  \"level\": 3\n}, {\n  \"value\": \"WriteData_vtk\",\n  \"id\": \"writedata_vtk\",\n  \"level\": 3\n}, {\n  \"value\": \"MaterialMethods\",\n  \"id\": \"materialmethods\",\n  \"level\": 2\n}, {\n  \"value\": \"AddFluidMaterial\",\n  \"id\": \"addfluidmaterial\",\n  \"level\": 3\n}, {\n  \"value\": \"BCMethods\",\n  \"id\": \"bcmethods\",\n  \"level\": 2\n}, {\n  \"value\": \"AddPressureDirichletBC\",\n  \"id\": \"addpressuredirichletbc\",\n  \"level\": 3\n}, {\n  \"value\": \"AddVelocityDirichletBC\",\n  \"id\": \"addvelocitydirichletbc\",\n  \"level\": 3\n}, {\n  \"value\": \"AddPressureNeumannBC\",\n  \"id\": \"addpressureneumannbc\",\n  \"level\": 3\n}, {\n  \"value\": \"AddVelocityNeumannBC\",\n  \"id\": \"addvelocityneumannbc\",\n  \"level\": 3\n}, {\n  \"value\": \"SetMethods\",\n  \"id\": \"setmethods\",\n  \"level\": 2\n}, {\n  \"value\": \"Set\",\n  \"id\": \"set\",\n  \"level\": 3\n}, {\n  \"value\": \"GetMethods\",\n  \"id\": \"getmethods\",\n  \"level\": 2\n}, {\n  \"value\": \"GetPressureDirichletBCPointer\",\n  \"id\": \"getpressuredirichletbcpointer\",\n  \"level\": 3\n}, {\n  \"value\": \"GetVelocityDirichletBCPointer\",\n  \"id\": \"getvelocitydirichletbcpointer\",\n  \"level\": 3\n}, {\n  \"value\": \"GetPressureNeumannBCPointer\",\n  \"id\": \"getpressureneumannbcpointer\",\n  \"level\": 3\n}, {\n  \"value\": \"GetVelocityNeumannBCPointer\",\n  \"id\": \"getvelocityneumannbcpointer\",\n  \"level\": 3\n}, {\n  \"value\": \"ConvergenceMethods\",\n  \"id\": \"convergencemethods\",\n  \"level\": 2\n}, {\n  \"value\": \"IsSteadyState\",\n  \"id\": \"issteadystate\",\n  \"level\": 3\n}, {\n  \"value\": \"IsConverged\",\n  \"id\": \"isconverged\",\n  \"level\": 3\n}, {\n  \"value\": \"InitiateFieldMethods\",\n  \"id\": \"initiatefieldmethods\",\n  \"level\": 2\n}, {\n  \"value\": \"InitiateFields\",\n  \"id\": \"initiatefields\",\n  \"level\": 3\n}, {\n  \"value\": \"ApplyDirichletBCMethods\",\n  \"id\": \"applydirichletbcmethods\",\n  \"level\": 2\n}, {\n  \"value\": \"ApplyDirichletBC\",\n  \"id\": \"applydirichletbc\",\n  \"level\": 3\n}, {\n  \"value\": \"SolveMethods\",\n  \"id\": \"solvemethods\",\n  \"level\": 2\n}, {\n  \"value\": \"Solve\",\n  \"id\": \"solve\",\n  \"level\": 3\n}, {\n  \"value\": \"UpdateMethods\",\n  \"id\": \"updatemethods\",\n  \"level\": 2\n}, {\n  \"value\": \"Update\",\n  \"id\": \"update\",\n  \"level\": 3\n}, {\n  \"value\": \"AssembleTanmatMethods\",\n  \"id\": \"assembletanmatmethods\",\n  \"level\": 2\n}, {\n  \"value\": \"AssembleTanmat\",\n  \"id\": \"assembletanmat\",\n  \"level\": 3\n}, {\n  \"value\": \"AssembleTanmat_InternalFacet\",\n  \"id\": \"assembletanmat_internalfacet\",\n  \"level\": 3\n}, {\n  \"value\": \"AssembleTanMat_NeumanFacet\",\n  \"id\": \"assembletanmat_neumanfacet\",\n  \"level\": 3\n}, {\n  \"value\": \"AssembleMethods\",\n  \"id\": \"assemblemethods\",\n  \"level\": 2\n}, {\n  \"value\": \"Assemble\",\n  \"id\": \"assemble\",\n  \"level\": 3\n}, {\n  \"value\": \"AssembleRHSMethods\",\n  \"id\": \"assemblerhsmethods\",\n  \"level\": 2\n}, {\n  \"value\": \"AssembleRHS\",\n  \"id\": \"assemblerhs\",\n  \"level\": 3\n}, {\n  \"value\": \"RunMethods\",\n  \"id\": \"runmethods\",\n  \"level\": 2\n}, {\n  \"value\": \"Run\",\n  \"id\": \"run\",\n  \"level\": 3\n}];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    admonition: \"admonition\",\n    annotation: \"annotation\",\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    h3: \"h3\",\n    header: \"header\",\n    hr: \"hr\",\n    li: \"li\",\n    math: \"math\",\n    mi: \"mi\",\n    mrow: \"mrow\",\n    msub: \"msub\",\n    p: \"p\",\n    pre: \"pre\",\n    semantics: \"semantics\",\n    span: \"span\",\n    ul: \"ul\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.header, {\n      children: (0,jsx_runtime.jsx)(_components.h1, {\n        id: \"structure\",\n        children: \"Structure\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"The structure of \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"AbstractSteadyStokes_\"\n      }), \" is given below.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"TYPE, ABSTRACT, EXTENDS(AbstractKernel_) :: AbstractSteadyStokes_\\n  LOGICAL(LGT) :: isConservativeForm = .TRUE.\\n  LOGICAL(LGT) :: isCommonDomain = .TRUE.\\n  LOGICAL(LGT) :: isSubscalePressure = .TRUE.\\n  LOGICAL(LGT) :: isBoundarySubscale = .FALSE.\\n  INTEGER(I4B) :: stabParamOption = 1\\n  REAL(DFP) :: rtoleranceForPressure = 1.0D-6\\n  REAL(DFP) :: rtoleranceForVelocity = 1.0D-6\\n  REAL(DFP) :: atoleranceForPressure = 1.0D-6\\n  REAL(DFP) :: atoleranceForVelocity = 1.0D-6\\n  REAL(DFP) :: toleranceForSteadyState = 1.0E-8\\n  REAL(DFP) :: pressureError0 = 0.0_DFP\\n  REAL(DFP) :: velocityError0 = 0.0_DFP\\n  REAL(DFP) :: pressureError = 0.0_DFP\\n  REAL(DFP) :: velocityError = 0.0_DFP\\n  LOGICAL(LGT) :: ismaterialInterfaces = .FALSE.\\n  INTEGER(I4B) :: refPressureNode = 0\\n  REAL(DFP) :: refPressure = 0.0_DFP\\n  INTEGER(I4B), ALLOCATABLE :: materialInterfaces(:)\\n  TYPE(DomainConnectivity_), ALLOCATABLE :: matIfaceConnectData(:)\\n  TYPE(String) :: domainFileForPressure\\n  TYPE(String) :: domainFileForVelocity\\n  INTEGER(I4B) :: tFluidMaterials = 0\\n  TYPE(FluidMaterialPointer_), ALLOCATABLE :: fluidMaterial(:)\\n  TYPE(MeshSelection_), ALLOCATABLE :: FluidMaterialToMesh(:)\\n  TYPE(String) :: baseContinuityForPressure\\n  TYPE(String) :: baseInterpolationForPressure\\n  TYPE(String) :: quadratureTypeForPressure\\n  TYPE(String) :: baseContinuityForVelocity\\n  TYPE(String) :: baseInterpolationForVelocity\\n  TYPE(String) :: quadratureTypeForVelocity\\n  TYPE(DirichletBCPointer_), ALLOCATABLE :: DBCForPressure(:)\\n  TYPE(DirichletBCPointer_), ALLOCATABLE :: DBCForVelocity(:)\\n  TYPE(NeumannBCPointer_), ALLOCATABLE :: NBCForPressure(:)\\n  TYPE(NeumannBCPointer_), ALLOCATABLE :: NBCForVelocity(:)\\n  CLASS(Domain_), POINTER :: domForPressure => NULL()\\n  CLASS(Domain_), POINTER :: domForVelocity => NULL()\\n  CLASS(DomainConnectivity_), POINTER :: domConnect => NULL()\\n  TYPE(ScalarMeshField_), ALLOCATABLE :: tausups_cell(:)\\n  TYPE(ScalarMeshField_), ALLOCATABLE :: nulsic_cell(:)\\n  TYPE(ScalarMeshField_), ALLOCATABLE :: hv_cell(:)\\n  TYPE(ScalarMeshField_), ALLOCATABLE :: hp_cell(:)\\n  TYPE(ScalarMeshField_), ALLOCATABLE :: hmax_cell(:)\\n  TYPE(ScalarMeshField_), ALLOCATABLE :: hmin_cell(:)\\n  TYPE(ScalarMeshField_), ALLOCATABLE :: dynamicViscosity(:)\\n  TYPE(ScalarMeshField_), ALLOCATABLE :: massDensity(:)\\n  CLASS(BlockNodeField_), POINTER :: rhs => NULL()\\n  CLASS(BlockNodeField_), POINTER :: sol => NULL()\\n  CLASS(VectorField_), POINTER :: nodeCoord => NULL()\\n  CLASS(VectorField_), POINTER :: nodeCoordForPressure => NULL()\\n  CLASS(VectorField_), POINTER :: nodeCoordForVelocity => NULL()\\n  CLASS(ScalarField_), POINTER :: pressure => NULL()\\n  CLASS(ScalarField_), POINTER :: pressure0 => NULL()\\n  CLASS(VectorField_), POINTER :: velocity => NULL()\\n  CLASS(VectorField_), POINTER :: velocity0 => NULL()\\n  PROCEDURE(ComputeStabParam), POINTER, PASS(obj) :: &\\n    & ComputeStabParam => NULL()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Description of these variables is given below.\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"isConservativeForm\"\n        }), \" True if we are using conservative form\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"isCommonDomain\"\n        }), \" True if the domain is common for pressure and velocity, which means equal order interpolation\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"isSubscalePressure\"\n        }), \", Only required when Variational Multiscale Methods are used for Equal order interpolations. If, True then we use subscale for pressure field\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"isBoundarySubscale\"\n        }), \", Only needed when VMS is used for stabilized FEM. If true then we use subscale at the interelement boundary\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"stabParamOption\"\n        }), \", Only needed when equal order interpolation is used. This option is for definition of stabilization parameter (\", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"tau_supg\"\n        }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"nuLSIC\"\n        }), \", etc.)\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"rtoleranceForPressure\"\n        }), \" relative tolerance for convergence in pressure field\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"rtoleranceForVelocity\"\n        }), \" relative tolerance for convergence in velocity field\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"atoleranceForPressure\"\n        }), \" absolute tolerance for pressure\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"atoleranceForVelocity\"\n        }), \" absolute tolerance for velocity field\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"toleranceForSteadyState\"\n        }), \" tolerance for checking steady state\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"pressureError0\"\n        }), \" initial error for checking convergence in pressure field\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"velocityError0\"\n        }), \" initial error for checking convergence in velocity field\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"pressureError\"\n        }), \" current error for checking convergence in pressure field\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"velocityError\"\n        }), \" current error for checking convergence in velocity field\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"ismaterialInterfaces\"\n        }), \" True if materialInterfaces are allocated. We can have multiple fluids\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"refPressureNode\"\n        }), \" reference pressure node\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"refPressure\"\n        }), \" reference pressure at reference pressure node\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"materialInterfaces\"\n        }), \" Mesh ID of material interfaces\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"matIfaceConnectData\"\n        }), \" Facet to cell data for each materialInterface mesh. The size of matIfaceConnectData is same as the size of materialInterfaces\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"domainFileForPressure\"\n        }), \" domain file name for pressure\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"domainFileForVelocity\"\n        }), \" domain file name for velocity\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"tFluidMaterials\"\n        }), \" Total number of fluid materials\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"fluidMaterial\"\n        }), \" Pointer to the fluid materials\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"FluidMaterialToMesh\"\n        }), \" Map porous media to the mesh subregion. The size of FluidMaterialToMesh is equal to tFluidMaterials\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"baseContinuityForPressure\"\n        }), \" Continuity of basis function for pressure field\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"baseInterpolationForPressure\"\n        }), \" Interpolation of shape function for pressure field\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"quadratureTypeForPressure\"\n        }), \" Quadrature type for pressure field\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"baseContinuityForVelocity\"\n        }), \" Continuity of basis function for velocity field\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"baseInterpolationForVelocity\"\n        }), \" Interpolation of shape function for velocity field\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"quadratureTypeForVelocity\"\n        }), \" Quadrature type for velocity field\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"DBCForPressure\"\n        }), \" Dirichlet boundary condition for pressure\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"DBCForVelocity\"\n        }), \" Dirichlet boundary condition for velocity\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"NBCForPressure\"\n        }), \" Neumann boundary condition for pressure\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"NBCForVelocity\"\n        }), \" Dirichlet boundary condition for velocity\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"domForPressure\"\n        }), \" Domain for pressure field\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"domForVelocity\"\n        }), \" Domain for velocity field\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"domConnect\"\n        }), \" Domain connectivity, it contains cell to cell and node to node mapping between two domains.\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"tausups_cell\"\n        }), \" stabilization parameter for cell\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"nulsic_cell\"\n        }), \" \", (0,jsx_runtime.jsxs)(_components.span, {\n          className: \"katex\",\n          children: [(0,jsx_runtime.jsx)(_components.span, {\n            className: \"katex-mathml\",\n            children: (0,jsx_runtime.jsx)(_components.math, {\n              xmlns: \"http://www.w3.org/1998/Math/MathML\",\n              children: (0,jsx_runtime.jsxs)(_components.semantics, {\n                children: [(0,jsx_runtime.jsx)(_components.mrow, {\n                  children: (0,jsx_runtime.jsxs)(_components.msub, {\n                    children: [(0,jsx_runtime.jsx)(_components.mi, {\n                      children: \"ν\"\n                    }), (0,jsx_runtime.jsxs)(_components.mrow, {\n                      children: [(0,jsx_runtime.jsx)(_components.mi, {\n                        children: \"L\"\n                      }), (0,jsx_runtime.jsx)(_components.mi, {\n                        children: \"S\"\n                      }), (0,jsx_runtime.jsx)(_components.mi, {\n                        children: \"I\"\n                      }), (0,jsx_runtime.jsx)(_components.mi, {\n                        children: \"C\"\n                      })]\n                    })]\n                  })\n                }), (0,jsx_runtime.jsx)(_components.annotation, {\n                  encoding: \"application/x-tex\",\n                  children: \"\\\\nu_{LSIC}\"\n                })]\n              })\n            })\n          }), (0,jsx_runtime.jsx)(_components.span, {\n            className: \"katex-html\",\n            \"aria-hidden\": \"true\",\n            children: (0,jsx_runtime.jsxs)(_components.span, {\n              className: \"base\",\n              children: [(0,jsx_runtime.jsx)(_components.span, {\n                className: \"strut\",\n                style: {\n                  height: \"0.5806em\",\n                  verticalAlign: \"-0.15em\"\n                }\n              }), (0,jsx_runtime.jsxs)(_components.span, {\n                className: \"mord\",\n                children: [(0,jsx_runtime.jsx)(_components.span, {\n                  className: \"mord mathnormal\",\n                  style: {\n                    marginRight: \"0.06366em\"\n                  },\n                  children: \"ν\"\n                }), (0,jsx_runtime.jsx)(_components.span, {\n                  className: \"msupsub\",\n                  children: (0,jsx_runtime.jsxs)(_components.span, {\n                    className: \"vlist-t vlist-t2\",\n                    children: [(0,jsx_runtime.jsxs)(_components.span, {\n                      className: \"vlist-r\",\n                      children: [(0,jsx_runtime.jsx)(_components.span, {\n                        className: \"vlist\",\n                        style: {\n                          height: \"0.3283em\"\n                        },\n                        children: (0,jsx_runtime.jsxs)(_components.span, {\n                          style: {\n                            top: \"-2.55em\",\n                            marginLeft: \"-0.0637em\",\n                            marginRight: \"0.05em\"\n                          },\n                          children: [(0,jsx_runtime.jsx)(_components.span, {\n                            className: \"pstrut\",\n                            style: {\n                              height: \"2.7em\"\n                            }\n                          }), (0,jsx_runtime.jsx)(_components.span, {\n                            className: \"sizing reset-size6 size3 mtight\",\n                            children: (0,jsx_runtime.jsxs)(_components.span, {\n                              className: \"mord mtight\",\n                              children: [(0,jsx_runtime.jsx)(_components.span, {\n                                className: \"mord mathnormal mtight\",\n                                children: \"L\"\n                              }), (0,jsx_runtime.jsx)(_components.span, {\n                                className: \"mord mathnormal mtight\",\n                                style: {\n                                  marginRight: \"0.05764em\"\n                                },\n                                children: \"S\"\n                              }), (0,jsx_runtime.jsx)(_components.span, {\n                                className: \"mord mathnormal mtight\",\n                                style: {\n                                  marginRight: \"0.07847em\"\n                                },\n                                children: \"I\"\n                              }), (0,jsx_runtime.jsx)(_components.span, {\n                                className: \"mord mathnormal mtight\",\n                                style: {\n                                  marginRight: \"0.07153em\"\n                                },\n                                children: \"C\"\n                              })]\n                            })\n                          })]\n                        })\n                      }), (0,jsx_runtime.jsx)(_components.span, {\n                        className: \"vlist-s\",\n                        children: \"​\"\n                      })]\n                    }), (0,jsx_runtime.jsx)(_components.span, {\n                      className: \"vlist-r\",\n                      children: (0,jsx_runtime.jsx)(_components.span, {\n                        className: \"vlist\",\n                        style: {\n                          height: \"0.15em\"\n                        },\n                        children: (0,jsx_runtime.jsx)(_components.span, {})\n                      })\n                    })]\n                  })\n                })]\n              })]\n            })\n          })]\n        }), \" stabilization parameter for cell\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"hv_cell\"\n        }), \" element size, hRGN for velocity field\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"hp_cell\"\n        }), \" hRPGN for cell\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"hmax_cell\"\n        }), \" hmax for cell\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"hmin_cell\"\n        }), \" hmin for cell\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"dynamicViscosity\"\n        }), \" Dynamic viscosity (mu) of fluids\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"massDensity\"\n        }), \" mass density\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"rhs\"\n        }), \" Block vector field for containing generalized force terms of mass and linear momentum conservation equations\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"sol\"\n        }), \" Block vector field for space-time vectors and multi-physics apps\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"nodeCoord\"\n        }), \" Vector field for nodal coordinates for pressure field\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"nodeCoordForPressure\"\n        }), \" Vector field for nodal coordinates for pressure field\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"nodeCoordForVelocity\"\n        }), \" Vector field for nodal cozordinates for velocity\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"pressure\"\n        }), \" Nodal values of current pressure field\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"pressure0\"\n        }), \" Converged nodal values of pressure field\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"velocity\"\n        }), \" Nodal values of current pressure field\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"velocity0\"\n        }), \" Converged nodal values of velocity field\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"ComputeStabParam\"\n        }), \" This procedure pointer computes the stabilization parameter. Depending upon the value of stabParamOption the target of the pointer is decided. The interface is given below.\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"ABSTRACT INTERFACE\\n  SUBROUTINE ComputeStabParam(obj)\\n    IMPORT :: AbstractSteadyStokes_\\n    CLASS(AbstractSteadyStokes_), INTENT(INOUT) :: obj\\n  END SUBROUTINE ComputeStabParam\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"constructormethods\",\n      children: \"ConstructorMethods\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"setabstractsteadystokesparam\",\n      children: \"setAbstractSteadyStokesParam\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This subroutine sets the essential parameter in the kernel\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n  MODULE SUBROUTINE setAbstractSteadyStokesParam( &\\n    & param, &\\n    & prefix, &\\n    & name, &\\n    & isCommonDomain, &\\n    & isConservativeForm, &\\n    & gravity, &\\n    & isSubscalePressure, &\\n    & isBoundarySubscale, &\\n    & stabParamOption, &\\n    & domainFile, &\\n    & domainFileForPressure, &\\n    & domainFileForVelocity, &\\n    & materialInterfaces, &\\n    & engine, &\\n    & coordinateSystem, &\\n    & nnt, &\\n    & dt, &\\n    & startTime, &\\n    & endTime, &\\n    & maxIter, &\\n    & rtoleranceForPressure, &\\n    & rtoleranceForVelocity, &\\n    & atoleranceForPressure, &\\n    & atoleranceForVelocity, &\\n    & toleranceForSteadyState, &\\n    & tFluidMaterials, &\\n    & tDirichletBCForPressure, &\\n    & tDirichletBCForVelocity, &\\n    & tNeumannBCForPressure, &\\n    & tNeumannBCForVelocity, &\\n    & baseInterpolationForSpace, &\\n    & baseContinuityForSpace, &\\n    & quadratureTypeForSpace, &\\n    & baseInterpolationForPressure, &\\n    & baseContinuityForPressure, &\\n    & quadratureTypeForPressure, &\\n    & baseInterpolationForVelocity, &\\n    & baseContinuityForVelocity, &\\n    & quadratureTypeForVelocity, &\\n    & baseContinuityForTime,&\\n    & baseInterpolationForTime, &\\n    & quadratureTypeForTime, &\\n    & postProcessOpt, &\\n    & refPressureNode, &\\n    & refPressure)\\n    !!\\n    TYPE(ParameterList_), INTENT(INOUT) :: param\\n    CHARACTER(LEN=*), INTENT(IN) :: prefix\\n    CHARACTER(LEN=*), INTENT(IN) :: name\\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: isCommonDomain\\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: isConservativeForm\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: gravity(3)\\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: isSubscalePressure\\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: isBoundarySubscale\\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: stabParamOption\\n    CHARACTER(LEN=*), OPTIONAL, INTENT(IN) :: domainFile\\n    CHARACTER(LEN=*), OPTIONAL, INTENT(IN) :: domainFileForPressure\\n    CHARACTER(LEN=*), OPTIONAL, INTENT(IN) :: domainFileForVelocity\\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: materialInterfaces(:)\\n    CHARACTER(LEN=*), OPTIONAL, INTENT(IN) :: engine\\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: coordinateSystem\\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: nnt\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: dt\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: startTime\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: endTime\\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: maxIter\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: rtoleranceForPressure\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: rtoleranceForVelocity\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: atoleranceForPressure\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: atoleranceForVelocity\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: toleranceForSteadyState\\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: tFluidMaterials\\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: tDirichletBCForPressure\\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: tDirichletBCForVelocity\\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: tNeumannBCForPressure\\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: tNeumannBCForVelocity\\n    CHARACTER(LEN=*), OPTIONAL, INTENT(IN) :: baseInterpolationForPressure\\n    CHARACTER(LEN=*), OPTIONAL, INTENT(IN) :: baseContinuityForPressure\\n    CHARACTER(LEN=*), OPTIONAL, INTENT(IN) :: quadratureTypeForPressure\\n    CHARACTER(LEN=*), OPTIONAL, INTENT(IN) :: baseInterpolationForVelocity\\n    CHARACTER(LEN=*), OPTIONAL, INTENT(IN) :: baseContinuityForVelocity\\n    CHARACTER(LEN=*), OPTIONAL, INTENT(IN) :: quadratureTypeForVelocity\\n    CHARACTER(LEN=*), OPTIONAL, INTENT(IN) :: baseInterpolationForSpace\\n    CHARACTER(LEN=*), OPTIONAL, INTENT(IN) :: baseContinuityForSpace\\n    CHARACTER(LEN=*), OPTIONAL, INTENT(IN) :: quadratureTypeForSpace\\n    CHARACTER(LEN=*), OPTIONAL, INTENT(IN) :: baseInterpolationForTime\\n    CHARACTER(LEN=*), OPTIONAL, INTENT(IN) :: baseContinuityForTime\\n    CHARACTER(LEN=*), OPTIONAL, INTENT(IN) :: quadratureTypeForTime\\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: postProcessOpt\\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: refPressureNode\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: refPressure\\n  END SUBROUTINE setAbstractSteadyStokesParam\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"param\"\n        }), \" param stores the parameters\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"prefix\"\n        }), \" prefix is like name of directory inside param \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"xyz\"\n        }), \" variable will be stored inside \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"prefix/xyz\"\n        })]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"name\"\n        }), \" name of the kernel\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"isCommonDomain\"\n        }), \" true if the domain for pressure and velocity are the same.\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"isConservativeForm\"\n        }), \" True if we are using conservative form\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"gravity\"\n        }), \" Acceleration due to gravity, default is zero. If gravity is zero then we use piezometric pressure. If gravity is nonzero then we use thermodynamic pressure\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"isSubscalePressure\"\n        }), \" If true then we consider the subscale pressure in stabilization\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"isBoundarySubscale\"\n        }), \" If true then we consider the subscale at interelement boundary\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"stabParamOption\"\n        }), \" Option for calculating stabilization-parameter tau \", (0,jsx_runtime.jsxs)(_components.span, {\n          className: \"katex\",\n          children: [(0,jsx_runtime.jsx)(_components.span, {\n            className: \"katex-mathml\",\n            children: (0,jsx_runtime.jsx)(_components.math, {\n              xmlns: \"http://www.w3.org/1998/Math/MathML\",\n              children: (0,jsx_runtime.jsxs)(_components.semantics, {\n                children: [(0,jsx_runtime.jsx)(_components.mrow, {\n                  children: (0,jsx_runtime.jsx)(_components.mi, {\n                    children: \"τ\"\n                  })\n                }), (0,jsx_runtime.jsx)(_components.annotation, {\n                  encoding: \"application/x-tex\",\n                  children: \"\\\\tau\"\n                })]\n              })\n            })\n          }), (0,jsx_runtime.jsx)(_components.span, {\n            className: \"katex-html\",\n            \"aria-hidden\": \"true\",\n            children: (0,jsx_runtime.jsxs)(_components.span, {\n              className: \"base\",\n              children: [(0,jsx_runtime.jsx)(_components.span, {\n                className: \"strut\",\n                style: {\n                  height: \"0.4306em\"\n                }\n              }), (0,jsx_runtime.jsx)(_components.span, {\n                className: \"mord mathnormal\",\n                style: {\n                  marginRight: \"0.1132em\"\n                },\n                children: \"τ\"\n              })]\n            })\n          })]\n        }), \".\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"domainFile\"\n        }), \" Mesh/domain file for velocity and pressure. Use when pressure and velocity have common domain\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"domainFileForPressure\"\n        }), \" Mesh/domain file for pressure\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"domainFileForVelocity\"\n        }), \" Mesh/domain file for velocity\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"materialInterfaces\"\n        }), \" Mesh-id for material interfaces\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"engine\"\n        }), \" name of engine\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"coordinateSystem\"\n        }), \" Coordinate system\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"nnt\"\n        }), \" Number of nodes in time, default 1, has no effect, so ignore.\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"dt\"\n        }), \" Initial time step size, useful in case of nonlinear stokes flow\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"startTime\"\n        }), \" Starting time t0 of simulation, default=0.0\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"endTime\"\n        }), \" Final time of simulation, default is 0.0_DFP\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"maxIter\"\n        }), \" maximum iteration for Newton-method\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"rtoleranceForPressure\"\n        }), \" relative tolerance for pressure field\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"rtoleranceForVelocity\"\n        }), \" relative tolerance for velocity field\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"atoleranceForPressure\"\n        }), \" absolute tolerance for pressure\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"atoleranceForVelocity\"\n        }), \" absolute tolerance for velocity\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"toleranceForSteadyState\"\n        }), \" tolerance for steady state\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"tFluidMaterials\"\n        }), \" Total number of fluid materials; default=1\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"tDirichletBCForPressure\"\n        }), \" Total number of Dirichlet domain for pressure, default=0\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"tDirichletBCForVelocity\"\n        }), \" Total number of Dirichlet domain for velocity, default=0\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"tNeumannBCForPressure\"\n        }), \" Total number of Neumann domain for pressure, default=0\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"tNeumannBCForVelocity\"\n        }), \" Total number of Neumann domain for velocity, default=0\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"baseInterpolationForPressure\"\n        }), \" Type of interpolation function used for basis function\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"baseContinuityForPressure\"\n        }), \" Type of continuity of basis function for pressure\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"quadratureTypeForPressure\"\n        }), \" Type of quadrature for pressure field\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"baseInterpolationForVelocity\"\n        }), \" Type of interpolation function used for velocity\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"baseContinuityForVelocity\"\n        }), \" Type of continuity of basis function for velocity\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"quadratureTypeForVelocity\"\n        }), \" Type of quadrature for velocity field\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"baseInterpolationForSpace\"\n        }), \" Type of interpolation function used for velocity\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"baseContinuityForSpace\"\n        }), \" Type of continuity of basis function for velocity\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"quadratureTypeForSpace\"\n        }), \" Type of quadrature for velocity field\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"baseInterpolationForTime\"\n        }), \" Type of interpolation function used for Time\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"baseContinuityForTime\"\n        }), \" Type of continuity of basis function for Time\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"quadratureTypeForTime\"\n        }), \" Type of quadrature for time\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"postProcessOpt\"\n        }), \" Postprocessing option\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"refPressureNode\"\n        }), \" reference node number for pressure\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"refPressure\"\n        }), \" reference value of pressure.\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"addsurrogate\",\n      children: \"AddSurrogate\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"Add surrogate to the module \", (0,jsx_runtime.jsx)(_components.a, {\n        href: \"/docs-api/ExceptionHandler/ExceptionHandler_\",\n        children: \"ExceptionHandler_\"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n  MODULE SUBROUTINE addSurrogate(obj, UserObj)\\n    CLASS(AbstractSteadyStokes_), INTENT(INOUT) :: obj\\n    TYPE(ExceptionHandler_), INTENT(IN) :: UserObj\\n  END SUBROUTINE addSurrogate\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE AbstractSteadyStokesAddSurrogate\\n  MODULE PROCEDURE addSurrogate\\nEND INTERFACE AbstractSteadyStokesAddSurrogate\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"deallocate\",\n      children: \"Deallocate\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This routine deallocates the data stored inside the kernel\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n  MODULE SUBROUTINE Deallocate(obj)\\n    CLASS(AbstractSteadyStokes_), INTENT(INOUT) :: obj\\n  END SUBROUTINE Deallocate\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE AbstractSteadyStokesDeallocate\\n  MODULE PROCEDURE Deallocate\\nEND INTERFACE AbstractSteadyStokesDeallocate\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"checkessentialparam\",\n      children: \"CheckEssentialParam\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Check the essential parameters for defining the kernel.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n  MODULE SUBROUTINE checkEssentialParam(obj, param, prefix)\\n    CLASS(AbstractSteadyStokes_), INTENT(INOUT) :: obj\\n    TYPE(ParameterList_), INTENT(IN) :: param\\n    CHARACTER(LEN=*), OPTIONAL, INTENT(IN) :: prefix\\n  END SUBROUTINE checkEssentialParam\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"initiate\",\n      children: \"Initiate\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Initiate the kernel.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n  MODULE SUBROUTINE Initiate(obj, param, dom, domains)\\n    CLASS(AbstractSteadyStokes_), INTENT(INOUT) :: obj\\n    TYPE(ParameterList_), INTENT(IN) :: param\\n    CLASS(Domain_), OPTIONAL, TARGET, INTENT(INOUT) :: dom\\n    TYPE(DomainPointer_), OPTIONAL, TARGET, INTENT(INOUT) :: domains(:)\\n  END SUBROUTINE Initiate\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n  MODULE SUBROUTINE AbstractSteadyStokesInitiate(obj, param, prefix, &\\n    & dom, domains)\\n    CLASS(AbstractSteadyStokes_), INTENT(INOUT) :: obj\\n    TYPE(ParameterList_), INTENT(IN) :: param\\n    CHARACTER(LEN=*), INTENT(IN) :: prefix\\n    CLASS(Domain_), OPTIONAL, TARGET, INTENT(INOUT) :: dom\\n    TYPE(DomainPointer_), OPTIONAL, TARGET, INTENT(INOUT) :: domains(:)\\n  END SUBROUTINE AbstractSteadyStokesInitiate\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.hr, {}), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"iomethods\",\n      children: \"IOMethods\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"import\",\n      children: \"Import\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"This rotuine imports the properties of the kernel, and then builds it. All the properties are mentioned in the HDF5 file. Domain \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"dom\"\n      }), \" is used as a target for kernel's domain pointer.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n  MODULE SUBROUTINE Import(obj, hdf5, group, dom)\\n    CLASS(AbstractSteadyStokes_), INTENT(INOUT) :: obj\\n    TYPE(HDF5File_), INTENT(INOUT) :: hdf5\\n    CHARACTER(LEN=*), INTENT(IN) :: group\\n    CLASS(Domain_), TARGET, INTENT(INOUT) :: dom\\n  END SUBROUTINE Import\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"export\",\n      children: \"Export\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"This routine exports the kernel to \", (0,jsx_runtime.jsx)(_components.a, {\n        href: \"/docs-api/HDF5File/HDF5File_\",\n        children: \"HDF5File_\"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n  MODULE SUBROUTINE Export(obj, hdf5, group)\\n    CLASS(AbstractSteadyStokes_), INTENT(INOUT) :: obj\\n    TYPE(HDF5File_), INTENT(INOUT) :: hdf5\\n    CHARACTER(LEN=*), INTENT(IN) :: group\\n  END SUBROUTINE Export\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"display\",\n      children: \"Display\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This routine displays the content of the kernel on the screen\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n  MODULE SUBROUTINE Display(obj, msg, unitNo)\\n    CLASS(AbstractSteadyStokes_), INTENT(INOUT) :: obj\\n    CHARACTER(LEN=*), INTENT(IN) :: msg\\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: unitNo\\n  END SUBROUTINE Display\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"writedata_hdf5\",\n      children: \"WriteData_hdf5\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This routine writes the data in the hdf5 file. Following data is written.\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"velocity0\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"pressure0\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"tausups_cell\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"nulsic_cell\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"hv_cell\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"hp_cell\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"hmax_cell\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"hmin_cell\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"dynamicViscosity\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"massDensity\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n  MODULE SUBROUTINE WriteData_hdf5(obj, hdf5, group)\\n    CLASS(AbstractSteadyStokes_), INTENT(INOUT) :: obj\\n    TYPE(HDF5File_), INTENT(INOUT) :: hdf5\\n    CHARACTER(LEN=*), INTENT(IN) :: group\\n  END SUBROUTINE WriteData_hdf5\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"writedata_vtk\",\n      children: \"WriteData_vtk\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This routine writes the data in the vtk file\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n  MODULE SUBROUTINE WriteData_vtk(obj, vtk, group)\\n    CLASS(AbstractSteadyStokes_), INTENT(INOUT) :: obj\\n    TYPE(VTKFile_), INTENT(INOUT) :: vtk\\n    CHARACTER(LEN=*), INTENT(IN) :: group\\n  END SUBROUTINE WriteData_vtk\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"materialmethods\",\n      children: \"MaterialMethods\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"addfluidmaterial\",\n      children: \"AddFluidMaterial\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"This routine adds Fluid material to the \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"AbstractSteadyStokes_:fluidMaterial\"\n        })]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"It also prepares \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"obj%FluidMaterialToMesh(materialNo)\"\n        }), \" and \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"obj%fluidMaterial(materialNo)\"\n        }), \".\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"param\"\n        }), \" contains the parameters for constructing a FluidMaterial.\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"materialName\"\n        }), \" is the name of material, it should be \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"fluidMaterial\"\n        }), \".\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"region\"\n        }), \" is an instance of \", (0,jsx_runtime.jsx)(_components.a, {\n          href: \"/docs-api/MeshSelection/MeshSelection_\",\n          children: \"MeshSelection_\"\n        }), \".\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.admonition, {\n      type: \"caution\",\n      children: (0,jsx_runtime.jsxs)(_components.p, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"materialNo\"\n        }), \" should be lesser than or equal to the total number of Fluid materials.\"]\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n  MODULE SUBROUTINE addFluidMaterial(obj, materialNo, materialName, &\\n    & param, region)\\n    CLASS(AbstractSteadyStokes_), INTENT(INOUT) :: obj\\n    INTEGER(I4B), INTENT(IN) :: materialNo\\n    CHARACTER(LEN=*), OPTIONAL, INTENT(IN) :: materialName\\n    TYPE(ParameterList_), OPTIONAL, INTENT(IN) :: param\\n    TYPE(MeshSelection_), OPTIONAL, INTENT(IN) :: region\\n  END SUBROUTINE addFluidMaterial\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"bcmethods\",\n      children: \"BCMethods\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"addpressuredirichletbc\",\n      children: \"AddPressureDirichletBC\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"This routine sets the Dirichlet boundary condition for pressure field in \", (0,jsx_runtime.jsx)(_components.a, {\n          href: \"/docs-api/AbstractSteadyStokes/AbstractSteadyStokes_\",\n          children: \"AbstractSteadyStokes_\"\n        }), \" kernel.\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"It also makes the \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"obj%DBCForPressure(dbcNo)\"\n        })]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"dbcNo\"\n        }), \" should be lesser than total dirichlet boundary condition for pressure field.\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n  MODULE SUBROUTINE addPressureDirichletBC(obj, dbcNo, param, boundary)\\n    CLASS(AbstractSteadyStokes_), INTENT(INOUT) :: obj\\n    INTEGER(I4B), INTENT(IN) :: dbcNo\\n    !! Dirichlet boundary nunber\\n    TYPE(ParameterList_), INTENT(IN) :: param\\n    !! parameter for constructing [DirichletBC_](DirichletBC_.md).\\n    TYPE(MeshSelection_), INTENT(IN) :: boundary\\n    !! Boundary region\\n  END SUBROUTINE addPressureDirichletBC\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"addvelocitydirichletbc\",\n      children: \"AddVelocityDirichletBC\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"This routine sets the Dirichlet boundary condition for Velocity field in \", (0,jsx_runtime.jsx)(_components.a, {\n          href: \"/docs-api/AbstractSteadyStokes/AbstractSteadyStokes_\",\n          children: \"AbstractSteadyStokes_\"\n        }), \" kernel.\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"It makes \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"obj%DBCForVelocity(dbcNo)\"\n        })]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"dbcNo\"\n        }), \" should be lesser than total dirichlet boundary condition for velocity field.\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n  MODULE SUBROUTINE addVelocityDirichletBC(obj, dbcNo, param, boundary)\\n    CLASS(AbstractSteadyStokes_), INTENT(INOUT) :: obj\\n    INTEGER(I4B), INTENT(IN) :: dbcNo\\n    !! Dirichlet boundary nunber\\n    TYPE(ParameterList_), INTENT(IN) :: param\\n    !! parameter for constructing [DirichletBC_](DirichletBC_.md).\\n    TYPE(MeshSelection_), INTENT(IN) :: boundary\\n    !! Boundary region\\n  END SUBROUTINE addVelocityDirichletBC\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"addpressureneumannbc\",\n      children: \"AddPressureNeumannBC\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"This routine sets the Neumann boundary condition for pressure field in \", (0,jsx_runtime.jsx)(_components.a, {\n          href: \"/docs-api/AbstractSteadyStokes/AbstractSteadyStokes_\",\n          children: \"AbstractSteadyStokes_\"\n        }), \" kernel.\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"It makes \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"obj%NBCForPressure(nbcNo)\"\n        })]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"nbcNo\"\n        }), \" should be lesser than total Neumann boundary condition for pressure field.\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n  MODULE SUBROUTINE addPressureNeumannBC(obj, nbcNo, param, boundary)\\n    CLASS(AbstractSteadyStokes_), INTENT(INOUT) :: obj\\n    INTEGER(I4B), INTENT(IN) :: nbcNo\\n    !! Neumann boundary nunber\\n    TYPE(ParameterList_), INTENT(IN) :: param\\n    !! parameter for constructing [DirichletBC_](DirichletBC_.md).\\n    TYPE(MeshSelection_), INTENT(IN) :: boundary\\n    !! Boundary region\\n  END SUBROUTINE addPressureNeumannBC\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"addvelocityneumannbc\",\n      children: \"AddVelocityNeumannBC\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"This routine sets the Neumann boundary condition for Velocity field in \", (0,jsx_runtime.jsx)(_components.a, {\n          href: \"/docs-api/AbstractSteadyStokes/AbstractSteadyStokes_\",\n          children: \"AbstractSteadyStokes_\"\n        }), \" kernel.\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"It makes \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"obj%NBCForVelocity(nbcNo)\"\n        })]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"nbcNo\"\n        }), \" should be lesser than total Neumann boundary condition for velocity field.\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n  MODULE SUBROUTINE addVelocityNeumannBC(obj, nbcNo, param, boundary)\\n    CLASS(AbstractSteadyStokes_), INTENT(INOUT) :: obj\\n    INTEGER(I4B), INTENT(IN) :: nbcNo\\n    !! Neumann boundary nunber\\n    TYPE(ParameterList_), INTENT(IN) :: param\\n    !! parameter for constructing [NeumannBC_](NeumannBC_).\\n    TYPE(MeshSelection_), INTENT(IN) :: boundary\\n    !! Boundary region\\n  END SUBROUTINE addVelocityNeumannBC\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"setmethods\",\n      children: \"SetMethods\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"set\",\n      children: \"Set\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"This routine is the most important one\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"This routine should be called before starting the main computation.\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"After initiating the kernel, we have all the information to construct the state of the kernel\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"This routine checks all the options\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"This routine, then sets pointer to the appropriate pointers.\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This routine calls InitiateFields method\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n  MODULE SUBROUTINE Set(obj)\\n    CLASS(AbstractSteadyStokes_), INTENT(INOUT) :: obj\\n  END SUBROUTINE Set\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE AbstractSteadyStokesSet\\n  MODULE PROCEDURE Set\\nEND INTERFACE AbstractSteadyStokesSet\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"getmethods\",\n      children: \"GetMethods\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"getpressuredirichletbcpointer\",\n      children: \"GetPressureDirichletBCPointer\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"This routine returns the pointer to Dirichlet boundary condition of pressure field in \", (0,jsx_runtime.jsx)(_components.a, {\n          href: \"/docs-api/AbstractSteadyStokes/AbstractSteadyStokes_\",\n          children: \"AbstractSteadyStokes_\"\n        }), \" kernel, that is \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"obj%DBCForPressure(dbcNo)%ptr\"\n        }), \".\"]\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"After obtaining the Dirichlet boundary condition pointer, user can set the\\nboundary condition\"\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"dbcNo\"\n        }), \" should be lesser than total dirichlet boundary condition.\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n  MODULE FUNCTION getPressureDirichletBCPointer(obj, dbcNo) RESULT(ans)\\n    CLASS(AbstractSteadyStokes_), INTENT(INOUT) :: obj\\n    INTEGER(I4B), INTENT(IN) :: dbcNo\\n    !! Dirichlet boundary nunber\\n    CLASS(DirichletBC_), POINTER :: ans\\n  END FUNCTION getPressureDirichletBCPointer\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"getvelocitydirichletbcpointer\",\n      children: \"GetVelocityDirichletBCPointer\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"This routine returns the pointer to Dirichlet boundary condition of Velocity field in \", (0,jsx_runtime.jsx)(_components.a, {\n          href: \"/docs-api/AbstractSteadyStokes/AbstractSteadyStokes_\",\n          children: \"AbstractSteadyStokes_\"\n        }), \" kernel, that is \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"obj%DBCForVelocity(dbcNo)%ptr\"\n        }), \".\"]\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"After obtaining the Dirichlet boundary condition pointer, user can set the boundary condition\"\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"dbcNo\"\n        }), \" should be lesser than total dirichlet boundary condition.\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n  MODULE FUNCTION getVelocityDirichletBCPointer(obj, dbcNo) RESULT(ans)\\n    CLASS(AbstractSteadyStokes_), INTENT(INOUT) :: obj\\n    INTEGER(I4B), INTENT(IN) :: dbcNo\\n    !! Dirichlet boundary nunber\\n    CLASS(DirichletBC_), POINTER :: ans\\n  END FUNCTION getVelocityDirichletBCPointer\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"getpressureneumannbcpointer\",\n      children: \"GetPressureNeumannBCPointer\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"This routine returns the pointer to Neumann boundary condition of pressure field in \", (0,jsx_runtime.jsx)(_components.a, {\n          href: \"/docs-api/AbstractSteadyStokes/AbstractSteadyStokes_\",\n          children: \"AbstractSteadyStokes_\"\n        }), \" kernel, that is \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"obj%NBCForPressure(nbcNo)%ptr\"\n        }), \".\"]\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"After obtaining the Neumann boundary condition pointer, user can set the boundary condition\"\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"nbcNo\"\n        }), \" should be lesser than total Neumann boundary condition.\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n  MODULE FUNCTION getPressureNeumannBCPointer(obj, nbcNo) RESULT(ans)\\n    CLASS(AbstractSteadyStokes_), INTENT(INOUT) :: obj\\n    INTEGER(I4B), INTENT(IN) :: nbcNo\\n    !! Neumann boundary nunber\\n    CLASS(NeumannBC_), POINTER :: ans\\n  END FUNCTION getPressureNeumannBCPointer\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"getvelocityneumannbcpointer\",\n      children: \"GetVelocityNeumannBCPointer\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"This routine returns the pointer to Neumann boundary condition of Velocity field in \", (0,jsx_runtime.jsx)(_components.a, {\n          href: \"/docs-api/AbstractSteadyStokes/AbstractSteadyStokes_\",\n          children: \"AbstractSteadyStokes_\"\n        }), \" kernel, that is \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"obj%NBCForVelocity(nbcNo)%ptr\"\n        }), \".\"]\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"After obtaining the Neumann boundary condition pointer, user can set the boundary condition\"\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"nbcNo\"\n        }), \" should be lesser than total Neumann boundary condition.\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n  MODULE FUNCTION getVelocityNeumannBCPointer(obj, nbcNo) RESULT(ans)\\n    CLASS(AbstractSteadyStokes_), INTENT(INOUT) :: obj\\n    INTEGER(I4B), INTENT(IN) :: nbcNo\\n    !! Neumann boundary nunber\\n    CLASS(NeumannBC_), POINTER :: ans\\n  END FUNCTION getVelocityNeumannBCPointer\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"convergencemethods\",\n      children: \"ConvergenceMethods\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"issteadystate\",\n      children: \"IsSteadyState\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Returns true if steady state is achieved.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n  MODULE FUNCTION isSteadyState(obj) RESULT(Ans)\\n    CLASS(AbstractSteadyStokes_), INTENT(INOUT) :: obj\\n    LOGICAL(LGT) :: ans\\n  END FUNCTION isSteadyState\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"isconverged\",\n      children: \"IsConverged\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Returns true if steady state is achieved.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n  MODULE FUNCTION isConverged(obj) RESULT(Ans)\\n    CLASS(AbstractSteadyStokes_), INTENT(INOUT) :: obj\\n    LOGICAL(LGT) :: ans\\n  END FUNCTION isConverged\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"initiatefieldmethods\",\n      children: \"InitiateFieldMethods\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"initiatefields\",\n      children: \"InitiateFields\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This routine initiates the field variable, deferred type.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n  MODULE SUBROUTINE InitiateFields(obj)\\n    CLASS(AbstractSteadyStokes_), INTENT(INOUT) :: obj\\n  END SUBROUTINE InitiateFields\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"applydirichletbcmethods\",\n      children: \"ApplyDirichletBCMethods\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"applydirichletbc\",\n      children: \"ApplyDirichletBC\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Apply Dirichlet boundary conditions\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n  MODULE SUBROUTINE applyDirichletBC(obj)\\n    CLASS(AbstractSteadyStokes_), INTENT(INOUT) :: obj\\n  END SUBROUTINE applyDirichletBC\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"solvemethods\",\n      children: \"SolveMethods\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"solve\",\n      children: \"Solve\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This subroutine solves the system of linear equation.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n  MODULE SUBROUTINE Solve(obj)\\n    CLASS(AbstractSteadyStokes_), INTENT(INOUT) :: obj\\n  END SUBROUTINE Solve\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"updatemethods\",\n      children: \"UpdateMethods\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This subroutine Updates the system of linear equation\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n  MODULE SUBROUTINE Update(obj, reset)\\n    CLASS(AbstractSteadyStokes_), INTENT(INOUT) :: obj\\n    LOGICAL(LGT), INTENT(IN) :: reset\\n  END SUBROUTINE Update\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"update\",\n      children: \"Update\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This subroutine update the state of the kernel\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n  MODULE SUBROUTINE UpdateIteration(obj, reset)\\n    CLASS(AbstractSteadyStokes_), INTENT(INOUT) :: obj\\n    LOGICAL(LGT), INTENT(IN) :: reset\\n  END SUBROUTINE UpdateIteration\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"assembletanmatmethods\",\n      children: \"AssembleTanmatMethods\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"assembletanmat\",\n      children: \"AssembleTanmat\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This procedure pointer assembles the global tangent matrix.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n  MODULE SUBROUTINE AssembleTanmat(obj)\\n    CLASS(AbstractSteadyStokes_), INTENT(INOUT) :: obj\\n  END SUBROUTINE AssembleTanmat\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"assembletanmat_internalfacet\",\n      children: \"AssembleTanmat_InternalFacet\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Assemble tangent matrix internal facet.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n  MODULE SUBROUTINE AssembleTanmat_InternalFacet(obj)\\n    CLASS(AbstractSteadyStokes_), INTENT(INOUT) :: obj\\n  END SUBROUTINE AssembleTanmat_InternalFacet\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"assembletanmat_neumanfacet\",\n      children: \"AssembleTanMat_NeumanFacet\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Assemble tangent matrix internal facet.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n  MODULE SUBROUTINE AssembleTanmat_NeumanFacet(obj)\\n    CLASS(AbstractSteadyStokes_), INTENT(INOUT) :: obj\\n  END SUBROUTINE AssembleTanmat_NeumanFacet\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"assemblemethods\",\n      children: \"AssembleMethods\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"assemble\",\n      children: \"Assemble\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This procedure pointer assembles the problem\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n  MODULE SUBROUTINE Assemble(obj)\\n    CLASS(AbstractSteadyStokes_), INTENT(INOUT) :: obj\\n  END SUBROUTINE Assemble\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"assemblerhsmethods\",\n      children: \"AssembleRHSMethods\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"assemblerhs\",\n      children: \"AssembleRHS\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This procedure pointer assembles the right-hand-side vector.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n  MODULE SUBROUTINE AssembleRHS(obj)\\n    CLASS(AbstractSteadyStokes_), INTENT(INOUT) :: obj\\n  END SUBROUTINE AssembleRHS\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"runmethods\",\n      children: \"RunMethods\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"run\",\n      children: \"Run\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Run the simulation\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n  MODULE SUBROUTINE Run(obj, param)\\n    CLASS(AbstractSteadyStokes_), INTENT(INOUT) :: obj\\n    TYPE(ParameterList_), INTENT(IN) :: param\\n  END SUBROUTINE Run\\nEND INTERFACE\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./docs/docs-api/AbstractSteadyStokes/AbstractSteadyStokes_.md\n");

/***/ }),

/***/ "./node_modules/@mdx-js/react/lib/index.js":
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MDXProvider: () => (/* binding */ MDXProvider),\n/* harmony export */   useMDXComponents: () => (/* binding */ useMDXComponents)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/react/index.js\");\n/**\n * @import {MDXComponents} from 'mdx/types.js'\n * @import {Component, ReactElement, ReactNode} from 'react'\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\n\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nfunction useMDXComponents(components) {\n  const contextComponents = react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {ReactElement}\n *   Element.\n * @satisfies {Component}\n */\nfunction MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Vhc2lmZW0tZG9jcy8uL25vZGVfbW9kdWxlcy9AbWR4LWpzL3JlYWN0L2xpYi9pbmRleC5qcz9hZjEyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGltcG9ydCB7TURYQ29tcG9uZW50c30gZnJvbSAnbWR4L3R5cGVzLmpzJ1xuICogQGltcG9ydCB7Q29tcG9uZW50LCBSZWFjdEVsZW1lbnQsIFJlYWN0Tm9kZX0gZnJvbSAncmVhY3QnXG4gKi9cblxuLyoqXG4gKiBAY2FsbGJhY2sgTWVyZ2VDb21wb25lbnRzXG4gKiAgIEN1c3RvbSBtZXJnZSBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7UmVhZG9ubHk8TURYQ29tcG9uZW50cz59IGN1cnJlbnRDb21wb25lbnRzXG4gKiAgIEN1cnJlbnQgY29tcG9uZW50cyBmcm9tIHRoZSBjb250ZXh0LlxuICogQHJldHVybnMge01EWENvbXBvbmVudHN9XG4gKiAgIEFkZGl0aW9uYWwgY29tcG9uZW50cy5cbiAqXG4gKiBAdHlwZWRlZiBQcm9wc1xuICogICBDb25maWd1cmF0aW9uIGZvciBgTURYUHJvdmlkZXJgLlxuICogQHByb3BlcnR5IHtSZWFjdE5vZGUgfCBudWxsIHwgdW5kZWZpbmVkfSBbY2hpbGRyZW5dXG4gKiAgIENoaWxkcmVuIChvcHRpb25hbCkuXG4gKiBAcHJvcGVydHkge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+IHwgTWVyZ2VDb21wb25lbnRzIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2NvbXBvbmVudHNdXG4gKiAgIEFkZGl0aW9uYWwgY29tcG9uZW50cyB0byB1c2Ugb3IgYSBmdW5jdGlvbiB0aGF0IGNyZWF0ZXMgdGhlbSAob3B0aW9uYWwpLlxuICogQHByb3BlcnR5IHtib29sZWFuIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2Rpc2FibGVQYXJlbnRDb250ZXh0PWZhbHNlXVxuICogICBUdXJuIG9mZiBvdXRlciBjb21wb25lbnQgY29udGV4dCAoZGVmYXVsdDogYGZhbHNlYCkuXG4gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuXG4vKiogQHR5cGUge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+fSAqL1xuY29uc3QgZW1wdHlDb21wb25lbnRzID0ge31cblxuY29uc3QgTURYQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoZW1wdHlDb21wb25lbnRzKVxuXG4vKipcbiAqIEdldCBjdXJyZW50IGNvbXBvbmVudHMgZnJvbSB0aGUgTURYIENvbnRleHQuXG4gKlxuICogQHBhcmFtIHtSZWFkb25seTxNRFhDb21wb25lbnRzPiB8IE1lcmdlQ29tcG9uZW50cyB8IG51bGwgfCB1bmRlZmluZWR9IFtjb21wb25lbnRzXVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMgdG8gdXNlIG9yIGEgZnVuY3Rpb24gdGhhdCBjcmVhdGVzIHRoZW0gKG9wdGlvbmFsKS5cbiAqIEByZXR1cm5zIHtNRFhDb21wb25lbnRzfVxuICogICBDdXJyZW50IGNvbXBvbmVudHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VNRFhDb21wb25lbnRzKGNvbXBvbmVudHMpIHtcbiAgY29uc3QgY29udGV4dENvbXBvbmVudHMgPSBSZWFjdC51c2VDb250ZXh0KE1EWENvbnRleHQpXG5cbiAgLy8gTWVtb2l6ZSB0byBhdm9pZCB1bm5lY2Vzc2FyeSB0b3AtbGV2ZWwgY29udGV4dCBjaGFuZ2VzXG4gIHJldHVybiBSZWFjdC51c2VNZW1vKFxuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIEN1c3RvbSBtZXJnZSB2aWEgYSBmdW5jdGlvbiBwcm9wXG4gICAgICBpZiAodHlwZW9mIGNvbXBvbmVudHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGNvbXBvbmVudHMoY29udGV4dENvbXBvbmVudHMpXG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7Li4uY29udGV4dENvbXBvbmVudHMsIC4uLmNvbXBvbmVudHN9XG4gICAgfSxcbiAgICBbY29udGV4dENvbXBvbmVudHMsIGNvbXBvbmVudHNdXG4gIClcbn1cblxuLyoqXG4gKiBQcm92aWRlciBmb3IgTURYIGNvbnRleHQuXG4gKlxuICogQHBhcmFtIHtSZWFkb25seTxQcm9wcz59IHByb3BlcnRpZXNcbiAqICAgUHJvcGVydGllcy5cbiAqIEByZXR1cm5zIHtSZWFjdEVsZW1lbnR9XG4gKiAgIEVsZW1lbnQuXG4gKiBAc2F0aXNmaWVzIHtDb21wb25lbnR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBNRFhQcm92aWRlcihwcm9wZXJ0aWVzKSB7XG4gIC8qKiBAdHlwZSB7UmVhZG9ubHk8TURYQ29tcG9uZW50cz59ICovXG4gIGxldCBhbGxDb21wb25lbnRzXG5cbiAgaWYgKHByb3BlcnRpZXMuZGlzYWJsZVBhcmVudENvbnRleHQpIHtcbiAgICBhbGxDb21wb25lbnRzID1cbiAgICAgIHR5cGVvZiBwcm9wZXJ0aWVzLmNvbXBvbmVudHMgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBwcm9wZXJ0aWVzLmNvbXBvbmVudHMoZW1wdHlDb21wb25lbnRzKVxuICAgICAgICA6IHByb3BlcnRpZXMuY29tcG9uZW50cyB8fCBlbXB0eUNvbXBvbmVudHNcbiAgfSBlbHNlIHtcbiAgICBhbGxDb21wb25lbnRzID0gdXNlTURYQ29tcG9uZW50cyhwcm9wZXJ0aWVzLmNvbXBvbmVudHMpXG4gIH1cblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICBNRFhDb250ZXh0LlByb3ZpZGVyLFxuICAgIHt2YWx1ZTogYWxsQ29tcG9uZW50c30sXG4gICAgcHJvcGVydGllcy5jaGlsZHJlblxuICApXG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@mdx-js/react/lib/index.js\n");

/***/ })

}]);