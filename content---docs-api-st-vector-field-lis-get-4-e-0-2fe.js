"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkeasifem_docs"] = globalThis["webpackChunkeasifem_docs"] || []).push([["content---docs-api-st-vector-field-lis-get-4-e-0-2fe"],{

/***/ "./docs/docs-api/STVectorFieldLis/Get.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  assets: () => (/* binding */ assets),\n  contentTitle: () => (/* binding */ Get_contentTitle),\n  \"default\": () => (/* binding */ Get_MDXContent),\n  frontMatter: () => (/* binding */ Get_frontMatter),\n  metadata: () => (/* reexport */ site_docs_docs_api_st_vector_field_lis_get_md_4e0_namespaceObject),\n  toc: () => (/* binding */ Get_toc)\n});\n\n;// ./.docusaurus/docusaurus-plugin-content-docs/docs-api/site-docs-docs-api-st-vector-field-lis-get-md-4e0.json\nconst site_docs_docs_api_st_vector_field_lis_get_md_4e0_namespaceObject = /*#__PURE__*/JSON.parse('{\"id\":\"STVectorFieldLis/Get\",\"title\":\"Get\",\"description\":\"Get entries from vector field.\",\"source\":\"@site/docs/docs-api/STVectorFieldLis/Get.md\",\"sourceDirName\":\"STVectorFieldLis\",\"slug\":\"/STVectorFieldLis/Get\",\"permalink\":\"/docs-api/STVectorFieldLis/Get\",\"draft\":false,\"unlisted\":false,\"editUrl\":\"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/STVectorFieldLis/Get.md\",\"tags\":[],\"version\":\"current\",\"lastUpdatedAt\":1539502055000,\"frontMatter\":{},\"sidebar\":\"tutorialSidebar\",\"previous\":{\"title\":\"Export\",\"permalink\":\"/docs-api/STVectorFieldLis/Export\"},\"next\":{\"title\":\"GetPointer\",\"permalink\":\"/docs-api/STVectorFieldLis/GetPointer\"}}');\n// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n// EXTERNAL MODULE: ./node_modules/@mdx-js/react/lib/index.js\nvar lib = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js + 2 modules\nvar Tabs = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js + 1 modules\nvar TabItem = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js\");\n;// ./docs/docs-api/STVectorFieldLis/_STVectorField_test_17.md\n\n\nconst frontMatter = {};\nconst contentTitle = undefined;\n\n\n\n\n\nconst toc = [];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"In this example we test the \", (0,jsx_runtime.jsx)(_components.a, {\n        href: \"/docs-api/STVectorFieldLis/Get\",\n        children: \"Get\"\n      }), \" method.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"{42-52}\",\n        children: \"PROGRAM main\\n  USE easifemBase\\n  USE easifemClasses\\n  TYPE( Domain_ ) :: dom\\n  TYPE( STVectorFieldLis_ ) :: obj\\n  TYPE( HDF5File_ ) :: meshfile\\n  TYPE( ParameterList_ ) :: param\\n  INTEGER( I4B ) :: ierr\\n  INTEGER( I4B ), PARAMETER :: spaceCompo=2_I4B\\n  INTEGER( I4B ), PARAMETER :: timeCompo=2_I4B\\n  REAL( DFP ), ALLOCATABLE :: svalue(:,:,:)\\n  REAL( DFP ), ALLOCATABLE :: value(:)\\n  CHARACTER(*), PARAMETER :: engine = \\\"LIS_OMP\\\"\\n  INTEGER( I4B ) :: tnodes\\n\\n  ! import domain\\n  CALL meshfile%initiate( filename=\\\"./mesh.h5\\\", mode=\\\"READ\\\" )\\n  CALL meshfile%open()\\n  CALL dom%initiate( hdf5=meshfile, group=\\\"\\\" )\\n  CALL meshfile%Deallocate()\\n\\n\\n  ! set parameters for VectorField_\\n  CALL FPL_INIT()\\n  CALL param%initiate()\\n\\n  CALL SetSTVectorFieldParam( &\\n    & param=param, &\\n    & fieldType=FIELD_TYPE_NORMAL, &\\n    & name=\\\"U\\\", &\\n    & engine=engine, &\\n    & spaceCompo=spaceCompo, &\\n    & timeCompo=timeCompo)\\n  CALL obj%initiate( param, dom )\\n\\n  tnodes = dom%getTotalNodes()\\n\\n  call reallocate(svalue, spaceCompo, timeCompo, tnodes)\\n  call random_number(svalue)\\n  call obj%set(value=svalue)\\n\\n  call obj%get(value=value, globalNode=3)\\n  call display(svalue(:,:,3), \\\"set value(:,:,3) = \\\")\\n  call display(value, \\\"get value = \\\")\\n\\n  call obj%get(value=value, spaceCompo=1, timeCompo=1)\\n  call display(svalue(1,1,:), \\\"set value(1,1,:) = \\\")\\n  call display(value, \\\"get value = \\\")\\n\\n  call obj%get(value=value, spaceCompo=2)\\n  call display(svalue(2,:,1:3), \\\"set value(2,:,:) = \\\")\\n  call display(value, \\\"get value = \\\")\\n\\n\\n  call obj%get(value=value, timeCompo=2)\\n  call display(svalue(:,2,1:3), \\\"set value(:,2,1:3) = \\\")\\n  call display(value, \\\"get value = \\\")\\n\\n  CALL obj%Deallocate(); CALL dom%Deallocate()\\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\\nEND PROGRAM main\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"Results\\\"\",\n        children: \"set value(:,:,3) = \\n-------------------\\n0.147476  0.747876 \\n0.171333  0.127092 \\n\\nget value(:,:,3) = \\n-------------------\\n     0.147476      \\n     0.171333      \\n     0.747876      \\n     0.127092      \\n\\nset value(1,1,:) = \\n-------------------\\n     0.241280      \\n     0.812112      \\n     0.498660      \\n\\nget value = \\n------------\\n  0.241280  \\n  0.812112  \\n  0.498660  \\n\\n     set value(2,:,1:3) =     \\n----------------------------\\n0.900714  0.183391  0.119554\\n0.649540  0.061109  0.117385\\n\\nget value = \\n------------\\n  0.900714  \\n  0.649540  \\n  0.183391  \\n  0.061109  \\n  0.119554  \\n  0.117385  \\n.\\n.\\n.\\n\\n\\n    set value(:,2,1:3) =    \\n----------------------------\\n0.965499  0.382799  0.656891\\n0.646576  0.781357  0.206606\\nget value = \\n------------\\n  0.965499  \\n  0.646576  \\n  0.382799  \\n  0.781357  \\n  0.656891  \\n  0.206606  \\n.\\n.\\n.\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/STVectorFieldLis/_STVectorField_test_18.md\n\n\nconst _STVectorField_test_18_frontMatter = {};\nconst _STVectorField_test_18_contentTitle = undefined;\n\n\n\n\n\nconst _STVectorField_test_18_toc = [];\nfunction _STVectorField_test_18_createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"In this example we test the \", (0,jsx_runtime.jsx)(_components.a, {\n        href: \"/docs-api/STVectorFieldLis/Get\",\n        children: \"Get\"\n      }), \" method.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n  USE easifemBase\\n  USE easifemClasses\\n  TYPE( Domain_ ) :: dom\\n  TYPE( STVectorFieldLis_ ) :: obj\\n  TYPE( HDF5File_ ) :: meshfile\\n  TYPE( ParameterList_ ) :: param\\n  INTEGER( I4B ) :: ierr\\n  INTEGER( I4B ), PARAMETER :: spaceCompo=2_I4B\\n  INTEGER( I4B ), PARAMETER :: timeCompo=2_I4B\\n  REAL( DFP ), ALLOCATABLE :: svalue(:,:,:)\\n  REAL( DFP ), ALLOCATABLE :: value(:, :, :)\\n  CHARACTER(*), PARAMETER :: engine = \\\"LIS_OMP\\\"\\n  INTEGER( I4B ) :: tnodes\\n\\n  ! import domain\\n  CALL meshfile%initiate( filename=\\\"./mesh.h5\\\", mode=\\\"READ\\\" )\\n  CALL meshfile%open()\\n  CALL dom%initiate( hdf5=meshfile, group=\\\"\\\" )\\n  CALL meshfile%Deallocate()\\n\\n\\n  ! set parameters for VectorField_\\n  CALL FPL_INIT()\\n  CALL param%initiate()\\n\\n  CALL SetSTVectorFieldParam( &\\n    & param=param, &\\n    & fieldType=FIELD_TYPE_NORMAL, &\\n    & name=\\\"U\\\", &\\n    & engine=engine, &\\n    & spaceCompo=spaceCompo, &\\n    & timeCompo=timeCompo)\\n  CALL obj%initiate( param, dom )\\n\\n  tnodes = dom%getTotalNodes()\\n\\n  call reallocate(svalue, spaceCompo, timeCompo, tnodes)\\n  call random_number(svalue)\\n  call obj%set(value=svalue)\\n\\n  call obj%get(value=value)\\n  call display(svalue(:,:,3), \\\"set value(:,:,3) = \\\")\\n  call display(value(:,:,3), \\\"get value = \\\")\\n\\n  CALL obj%Deallocate(); CALL dom%Deallocate()\\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\\nEND PROGRAM main\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"Results\\\"\",\n        children: \"set value(:,:,3) = \\n-------------------\\n0.131827  0.736131 \\n0.861203  0.200003 \\n\\n   get value =    \\n------------------\\n0.131827  0.736131\\n0.861203  0.200003\\n\"\n      })\n    })]\n  });\n}\nfunction _STVectorField_test_18_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_STVectorField_test_18_createMdxContent, {\n      ...props\n    })\n  }) : _STVectorField_test_18_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/STVectorFieldLis/_STVectorField_test_19.md\n\n\nconst _STVectorField_test_19_frontMatter = {};\nconst _STVectorField_test_19_contentTitle = undefined;\n\n\n\n\n\nconst _STVectorField_test_19_toc = [];\nfunction _STVectorField_test_19_createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"In this example we test the \", (0,jsx_runtime.jsx)(_components.a, {\n        href: \"/docs-api/STVectorFieldLis/Get\",\n        children: \"Get\"\n      }), \" method.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n  USE easifemBase\\n  USE easifemClasses\\n  TYPE( Domain_ ) :: dom\\n  TYPE( STVectorFieldLis_ ) :: obj\\n  TYPE( HDF5File_ ) :: meshfile\\n  TYPE( ParameterList_ ) :: param\\n  INTEGER( I4B ) :: ierr\\n  INTEGER( I4B ), PARAMETER :: spaceCompo=2_I4B\\n  INTEGER( I4B ), PARAMETER :: timeCompo=2_I4B\\n  REAL( DFP ), ALLOCATABLE :: svalue(:,:,:)\\n  REAL( DFP ), ALLOCATABLE :: value(:, :, :)\\n  CHARACTER(*), PARAMETER :: engine = \\\"LIS_OMP\\\"\\n  INTEGER( I4B ) :: tnodes\\n\\n  ! import domain\\n  CALL meshfile%initiate( filename=\\\"./mesh.h5\\\", mode=\\\"READ\\\" )\\n  CALL meshfile%open()\\n  CALL dom%initiate( hdf5=meshfile, group=\\\"\\\" )\\n  CALL meshfile%Deallocate()\\n\\n\\n  ! set parameters for VectorField_\\n  CALL FPL_INIT()\\n  CALL param%initiate()\\n\\n  CALL SetSTVectorFieldParam( &\\n    & param=param, &\\n    & fieldType=FIELD_TYPE_NORMAL, &\\n    & name=\\\"U\\\", &\\n    & engine=engine, &\\n    & spaceCompo=spaceCompo, &\\n    & timeCompo=timeCompo)\\n  CALL obj%initiate( param, dom )\\n\\n  tnodes = dom%getTotalNodes()\\n\\n  call reallocate(svalue, spaceCompo, timeCompo, tnodes)\\n  call random_number(svalue)\\n  call obj%set(value=svalue)\\n\\n  call obj%get(value=value, globalNode=arange(1,3,1))\\n  call display(svalue(:,:,1:3), \\\"set value(:,:,1:3) = \\\")\\n  call display(value(:,:,1:3), \\\"get value = \\\")\\n\\n  CALL obj%Deallocate(); CALL dom%Deallocate()\\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\\nEND PROGRAM main\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"Results\\\"\",\n        children: \"set value(:,:,1:3) =( :, :, 1 ) = \\n----------------------------------\\n        0.756550  0.362901        \\n        0.014583  0.965337        \\nset value(:,:,1:3) =( :, :, 2 ) = \\n----------------------------------\\n        0.640156  0.578452        \\n        0.030592  0.802883        \\nset value(:,:,1:3) =( :, :, 3 ) = \\n----------------------------------\\n        0.661545  0.874983        \\n        0.684608  0.628923        \\nget value =( :, :, 1 ) = \\n-------------------------\\n   0.756550  0.362901    \\n   0.014583  0.965337    \\nget value =( :, :, 2 ) = \\n-------------------------\\n   0.640156  0.578452    \\n   0.030592  0.802883    \\nget value =( :, :, 3 ) = \\n-------------------------\\n   0.661545  0.874983    \\n   0.684608  0.628923\\n\"\n      })\n    })]\n  });\n}\nfunction _STVectorField_test_19_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_STVectorField_test_19_createMdxContent, {\n      ...props\n    })\n  }) : _STVectorField_test_19_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/STVectorFieldLis/_STVectorField_test_20.md\n\n\nconst _STVectorField_test_20_frontMatter = {};\nconst _STVectorField_test_20_contentTitle = undefined;\n\n\n\n\n\nconst _STVectorField_test_20_toc = [];\nfunction _STVectorField_test_20_createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"In this example we test the \", (0,jsx_runtime.jsx)(_components.a, {\n        href: \"/docs-api/STVectorFieldLis/Get\",\n        children: \"Get\"\n      }), \" method.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n  USE easifemBase\\n  USE easifemClasses\\n  TYPE( Domain_ ) :: dom\\n  TYPE( STVectorFieldLis_ ) :: obj\\n  TYPE( HDF5File_ ) :: meshfile\\n  TYPE( ParameterList_ ) :: param\\n  INTEGER( I4B ) :: ierr\\n  INTEGER( I4B ), PARAMETER :: spaceCompo=2_I4B\\n  INTEGER( I4B ), PARAMETER :: timeCompo=2_I4B\\n  REAL( DFP ), ALLOCATABLE :: svalue(:,:,:)\\n  REAL( DFP ), ALLOCATABLE :: value(:)\\n  CHARACTER(*), PARAMETER :: engine = \\\"LIS_OMP\\\"\\n  INTEGER( I4B ) :: tnodes\\n\\n  ! import domain\\n  CALL meshfile%initiate( filename=\\\"./mesh.h5\\\", mode=\\\"READ\\\" )\\n  CALL meshfile%open()\\n  CALL dom%initiate( hdf5=meshfile, group=\\\"\\\" )\\n  CALL meshfile%Deallocate()\\n\\n\\n  ! set parameters for VectorField_\\n  CALL FPL_INIT()\\n  CALL param%initiate()\\n\\n  CALL SetSTVectorFieldParam( &\\n    & param=param, &\\n    & fieldType=FIELD_TYPE_NORMAL, &\\n    & name=\\\"U\\\", &\\n    & engine=engine, &\\n    & spaceCompo=spaceCompo, &\\n    & timeCompo=timeCompo)\\n  CALL obj%initiate( param, dom )\\n\\n  tnodes = dom%getTotalNodes()\\n\\n  call reallocate(svalue, spaceCompo, timeCompo, tnodes)\\n  call random_number(svalue)\\n  call obj%set(value=svalue)\\n\\n  call obj%get(value=value, globalNode=arange(1,3,1), spaceCompo=1, &\\n  & timeCompo=1)\\n  call display(svalue(1,1,1:3), \\\"set value(1,1,1:3) = \\\")\\n  call display(value, \\\"get value = \\\")\\n\\n  CALL obj%Deallocate(); CALL dom%Deallocate()\\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\\nEND PROGRAM main\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"Results\\\"\",\n        children: \"set value(1,1,1:3) = \\n---------------------\\n      0.360376       \\n      0.515725       \\n      0.139868       \\n\\nget value = \\n------------\\n  0.360376  \\n  0.515725  \\n  0.139868\\n\"\n      })\n    })]\n  });\n}\nfunction _STVectorField_test_20_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_STVectorField_test_20_createMdxContent, {\n      ...props\n    })\n  }) : _STVectorField_test_20_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/STVectorFieldLis/_STVectorField_test_21.md\n\n\nconst _STVectorField_test_21_frontMatter = {};\nconst _STVectorField_test_21_contentTitle = undefined;\n\n\n\n\n\nconst _STVectorField_test_21_toc = [];\nfunction _STVectorField_test_21_createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"In this example we test the \", (0,jsx_runtime.jsx)(_components.a, {\n        href: \"/docs-api/STVectorFieldLis/Get\",\n        children: \"Get\"\n      }), \" method.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n  USE easifemBase\\n  USE easifemClasses\\n  TYPE( Domain_ ) :: dom\\n  TYPE( STVectorFieldLis_ ) :: obj\\n  TYPE( HDF5File_ ) :: meshfile\\n  TYPE( ParameterList_ ) :: param\\n  INTEGER( I4B ) :: ierr\\n  INTEGER( I4B ), PARAMETER :: spaceCompo=2_I4B\\n  INTEGER( I4B ), PARAMETER :: timeCompo=2_I4B\\n  REAL( DFP ), ALLOCATABLE :: svalue(:,:,:)\\n  REAL( DFP ) :: value\\n  CHARACTER(*), PARAMETER :: engine = \\\"LIS_OMP\\\"\\n  INTEGER( I4B ) :: tnodes\\n\\n  ! import domain\\n  CALL meshfile%initiate( filename=\\\"./mesh.h5\\\", mode=\\\"READ\\\" )\\n  CALL meshfile%open()\\n  CALL dom%initiate( hdf5=meshfile, group=\\\"\\\" )\\n  CALL meshfile%Deallocate()\\n\\n\\n  ! set parameters for VectorField_\\n  CALL FPL_INIT()\\n  CALL param%initiate()\\n\\n  CALL SetSTVectorFieldParam( &\\n    & param=param, &\\n    & fieldType=FIELD_TYPE_NORMAL, &\\n    & name=\\\"U\\\", &\\n    & engine=engine, &\\n    & spaceCompo=spaceCompo, &\\n    & timeCompo=timeCompo)\\n  CALL obj%initiate( param, dom )\\n\\n  tnodes = dom%getTotalNodes()\\n\\n  call reallocate(svalue, spaceCompo, timeCompo, tnodes)\\n  call random_number(svalue)\\n  call obj%set(value=svalue)\\n\\n  call obj%get(value=value, globalNode=3, spaceCompo=1, &\\n  & timeCompo=1)\\n  call display(svalue(1,1,3), \\\"set value(1,1,1:3) = \\\")\\n  call display(value, \\\"get value = \\\")\\n\\n  CALL obj%Deallocate(); CALL dom%Deallocate()\\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\\nEND PROGRAM main\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"Results\\\"\",\n        children: \"set value(1,1,1:3) = 0.959122\\nget value = 0.959122\\n\"\n      })\n    })]\n  });\n}\nfunction _STVectorField_test_21_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_STVectorField_test_21_createMdxContent, {\n      ...props\n    })\n  }) : _STVectorField_test_21_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/STVectorFieldLis/_STVectorField_test_22.md\n\n\nconst _STVectorField_test_22_frontMatter = {};\nconst _STVectorField_test_22_contentTitle = undefined;\n\n\n\n\n\nconst _STVectorField_test_22_toc = [];\nfunction _STVectorField_test_22_createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"In this example we test the \", (0,jsx_runtime.jsx)(_components.a, {\n        href: \"/docs-api/STVectorFieldLis/Get\",\n        children: \"Get\"\n      }), \" method.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n  USE easifemBase\\n  USE easifemClasses\\n  TYPE( Domain_ ) :: dom\\n  TYPE( STVectorFieldLis_ ) :: obj\\n  TYPE( HDF5File_ ) :: meshfile\\n  TYPE( ParameterList_ ) :: param\\n  INTEGER( I4B ) :: ierr\\n  INTEGER( I4B ), PARAMETER :: spaceCompo=2_I4B\\n  INTEGER( I4B ), PARAMETER :: timeCompo=2_I4B\\n  REAL( DFP ), ALLOCATABLE :: svalue(:,:,:)\\n  REAL( DFP ), ALLOCATABLE :: value(:, :, :)\\n  CHARACTER(*), PARAMETER :: engine = \\\"LIS_OMP\\\"\\n  INTEGER( I4B ) :: tnodes\\n\\n  ! import domain\\n  CALL meshfile%initiate( filename=\\\"./mesh.h5\\\", mode=\\\"READ\\\" )\\n  CALL meshfile%open()\\n  CALL dom%initiate( hdf5=meshfile, group=\\\"\\\" )\\n  CALL meshfile%Deallocate()\\n\\n\\n  ! set parameters for VectorField_\\n  CALL FPL_INIT()\\n  CALL param%initiate()\\n\\n  CALL SetSTVectorFieldParam( &\\n    & param=param, &\\n    & fieldType=FIELD_TYPE_NORMAL, &\\n    & name=\\\"U\\\", &\\n    & engine=engine, &\\n    & spaceCompo=spaceCompo, &\\n    & timeCompo=timeCompo)\\n  CALL obj%initiate( param, dom )\\n\\n  tnodes = dom%getTotalNodes()\\n\\n  call reallocate(svalue, spaceCompo, timeCompo, tnodes)\\n  call random_number(svalue)\\n  call obj%set(value=svalue)\\n\\n  call obj%get(value=value, istart=1, iend=3, stride=1)\\n  call display(svalue(:,:,1:3), \\\"set value(:,:,1:3) = \\\")\\n  call display(value(:,:,1:3), \\\"get value = \\\")\\n\\n  CALL obj%Deallocate(); CALL dom%Deallocate()\\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\\nEND PROGRAM main\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"Results\\\"\",\n        children: \"set value(:,:,1:3) =( :, :, 1 ) = \\n----------------------------------\\n        0.180902  0.420299        \\n        0.983944  0.386861        \\nset value(:,:,1:3) =( :, :, 2 ) = \\n----------------------------------\\n        0.248634  0.276885        \\n        0.320403  0.242269        \\nset value(:,:,1:3) =( :, :, 3 ) = \\n----------------------------------\\n        0.026450  0.434365        \\n        0.303477  0.002217        \\nget value =( :, :, 1 ) = \\n-------------------------\\n   0.180902  0.420299    \\n   0.983944  0.386861    \\nget value =( :, :, 2 ) = \\n-------------------------\\n   0.248634  0.276885    \\n   0.320403  0.242269    \\nget value =( :, :, 3 ) = \\n-------------------------\\n   0.026450  0.434365    \\n   0.303477  0.002217\\n\"\n      })\n    })]\n  });\n}\nfunction _STVectorField_test_22_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_STVectorField_test_22_createMdxContent, {\n      ...props\n    })\n  }) : _STVectorField_test_22_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/STVectorFieldLis/_STVectorField_test_23.md\n\n\nconst _STVectorField_test_23_frontMatter = {};\nconst _STVectorField_test_23_contentTitle = undefined;\n\n\n\n\n\nconst _STVectorField_test_23_toc = [];\nfunction _STVectorField_test_23_createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"In this example we test the \", (0,jsx_runtime.jsx)(_components.a, {\n        href: \"/docs-api/STVectorFieldLis/Get\",\n        children: \"Get\"\n      }), \" method.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n  USE easifemBase\\n  USE easifemClasses\\n  TYPE( Domain_ ) :: dom\\n  TYPE( STVectorFieldLis_ ) :: obj\\n  TYPE( HDF5File_ ) :: meshfile\\n  TYPE( ParameterList_ ) :: param\\n  INTEGER( I4B ) :: ierr\\n  INTEGER( I4B ), PARAMETER :: spaceCompo=2_I4B\\n  INTEGER( I4B ), PARAMETER :: timeCompo=2_I4B\\n  REAL( DFP ), ALLOCATABLE :: svalue(:,:,:)\\n  REAL( DFP ), ALLOCATABLE :: value(:)\\n  CHARACTER(*), PARAMETER :: engine = \\\"LIS_OMP\\\"\\n  INTEGER( I4B ) :: tnodes\\n\\n  ! import domain\\n  CALL meshfile%initiate( filename=\\\"./mesh.h5\\\", mode=\\\"READ\\\" )\\n  CALL meshfile%open()\\n  CALL dom%initiate( hdf5=meshfile, group=\\\"\\\" )\\n  CALL meshfile%Deallocate()\\n\\n\\n  ! set parameters for VectorField_\\n  CALL FPL_INIT()\\n  CALL param%initiate()\\n\\n  CALL SetSTVectorFieldParam( &\\n    & param=param, &\\n    & fieldType=FIELD_TYPE_NORMAL, &\\n    & name=\\\"U\\\", &\\n    & engine=engine, &\\n    & spaceCompo=spaceCompo, &\\n    & timeCompo=timeCompo)\\n  CALL obj%initiate( param, dom )\\n\\n  tnodes = dom%getTotalNodes()\\n\\n  call reallocate(svalue, spaceCompo, timeCompo, tnodes)\\n  call random_number(svalue)\\n  call obj%set(value=svalue)\\n\\n  call obj%get(value=value, istart=1, iend=3, stride=1, &\\n  & spaceCompo=1, timeCompo=1)\\n  call display(svalue(1,1,1:3), \\\"set value(1,1,1:3) = \\\")\\n  call display(value, \\\"get value = \\\")\\n\\n  CALL obj%Deallocate(); CALL dom%Deallocate()\\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\\nEND PROGRAM main\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"Results\\\"\",\n        children: \"set value(1,1,1:3) = \\n---------------------\\n      0.826815       \\n      0.325986       \\n      0.024318       \\n\\nget value = \\n------------\\n  0.826815  \\n  0.325986  \\n  0.024318\\n\"\n      })\n    })]\n  });\n}\nfunction _STVectorField_test_23_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_STVectorField_test_23_createMdxContent, {\n      ...props\n    })\n  }) : _STVectorField_test_23_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/STVectorFieldLis/_STVectorField_test_24.md\n\n\nconst _STVectorField_test_24_frontMatter = {};\nconst _STVectorField_test_24_contentTitle = undefined;\n\n\n\n\n\nconst _STVectorField_test_24_toc = [];\nfunction _STVectorField_test_24_createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"In this example we test the \", (0,jsx_runtime.jsx)(_components.a, {\n        href: \"/docs-api/STVectorFieldLis/Get\",\n        children: \"Get\"\n      }), \" method.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n  USE easifemBase\\n  USE easifemClasses\\n  TYPE( Domain_ ) :: dom\\n  TYPE( STVectorFieldLis_ ) :: obj\\n  TYPE( HDF5File_ ) :: meshfile\\n  TYPE( ParameterList_ ) :: param\\n  INTEGER( I4B ) :: ierr\\n  INTEGER( I4B ), PARAMETER :: spaceCompo=2_I4B\\n  INTEGER( I4B ), PARAMETER :: timeCompo=2_I4B\\n  REAL( DFP ), ALLOCATABLE :: svalue(:,:,:)\\n  REAL( DFP ), ALLOCATABLE :: value(:, :)\\n  CHARACTER(*), PARAMETER :: engine = \\\"LIS_OMP\\\"\\n  INTEGER( I4B ) :: tnodes\\n\\n  ! import domain\\n  CALL meshfile%initiate( filename=\\\"./mesh.h5\\\", mode=\\\"READ\\\" )\\n  CALL meshfile%open()\\n  CALL dom%initiate( hdf5=meshfile, group=\\\"\\\" )\\n  CALL meshfile%Deallocate()\\n\\n\\n  ! set parameters for VectorField_\\n  CALL FPL_INIT()\\n  CALL param%initiate()\\n\\n  CALL SetSTVectorFieldParam( &\\n    & param=param, &\\n    & fieldType=FIELD_TYPE_NORMAL, &\\n    & name=\\\"U\\\", &\\n    & engine=engine, &\\n    & spaceCompo=spaceCompo, &\\n    & timeCompo=timeCompo)\\n  CALL obj%initiate( param, dom )\\n\\n  tnodes = dom%getTotalNodes()\\n\\n  call reallocate(svalue, spaceCompo, timeCompo, tnodes)\\n  call random_number(svalue)\\n  call obj%set(value=svalue)\\n\\n  call obj%get(value=value, globalNode=3_I4B)\\n  call display(svalue(:,:,3), \\\"set value(:,:,3) = \\\")\\n  call display(value, \\\"get value = \\\")\\n\\n  CALL obj%Deallocate(); CALL dom%Deallocate()\\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\\nEND PROGRAM main\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"Results\\\"\",\n        children: \"set value(:,:,3) = \\n-------------------\\n0.129860  0.440831 \\n0.624638  0.761094 \\n   get value =    \\n------------------\\n0.129860  0.440831\\n0.624638  0.761094\\n\"\n      })\n    })]\n  });\n}\nfunction _STVectorField_test_24_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_STVectorField_test_24_createMdxContent, {\n      ...props\n    })\n  }) : _STVectorField_test_24_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/STVectorFieldLis/_STVectorField_test_25.md\n\n\nconst _STVectorField_test_25_frontMatter = {};\nconst _STVectorField_test_25_contentTitle = undefined;\n\n\n\n\n\nconst _STVectorField_test_25_toc = [];\nfunction _STVectorField_test_25_createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"In this example we test the \", (0,jsx_runtime.jsx)(_components.a, {\n        href: \"/docs-api/STVectorFieldLis/Get\",\n        children: \"Get\"\n      }), \" method.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n  USE easifemBase\\n  USE easifemClasses\\n  TYPE( Domain_ ) :: dom\\n  TYPE( STVectorFieldLis_ ) :: obj\\n  TYPE( HDF5File_ ) :: meshfile\\n  TYPE( ParameterList_ ) :: param\\n  INTEGER( I4B ) :: ierr\\n  INTEGER( I4B ), PARAMETER :: spaceCompo=2_I4B\\n  INTEGER( I4B ), PARAMETER :: timeCompo=2_I4B\\n  REAL( DFP ), ALLOCATABLE :: svalue(:,:,:)\\n  REAL( DFP ), ALLOCATABLE :: value(:, :)\\n  CHARACTER(*), PARAMETER :: engine = \\\"LIS_OMP\\\"\\n  INTEGER( I4B ) :: tnodes\\n  type(FEVariable_) :: fevar\\n\\n  ! import domain\\n  CALL meshfile%initiate( filename=\\\"./mesh.h5\\\", mode=\\\"READ\\\" )\\n  CALL meshfile%open()\\n  CALL dom%initiate( hdf5=meshfile, group=\\\"\\\" )\\n  CALL meshfile%Deallocate()\\n\\n\\n  ! set parameters for VectorField_\\n  CALL FPL_INIT()\\n  CALL param%initiate()\\n\\n  CALL SetSTVectorFieldParam( &\\n    & param=param, &\\n    & fieldType=FIELD_TYPE_NORMAL, &\\n    & name=\\\"U\\\", &\\n    & engine=engine, &\\n    & spaceCompo=spaceCompo, &\\n    & timeCompo=timeCompo)\\n  CALL obj%initiate( param, dom )\\n\\n  tnodes = dom%getTotalNodes()\\n\\n  call reallocate(svalue, spaceCompo, timeCompo, tnodes)\\n  call random_number(svalue)\\n  call obj%set(value=svalue)\\n\\n  call obj%get(value=fevar, globalNode=arange(1,3,1))\\n  call display(svalue(:,:,1:3), \\\"set value(:,:,3) = \\\")\\n  call display(fevar, \\\"get value = \\\")\\n\\n  CALL obj%Deallocate(); CALL dom%Deallocate()\\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\\nEND PROGRAM main\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"Results\\\"\",\n        children: \"set value(:,:,3) =( :, :, 1 ) = \\n--------------------------------\\n       0.189357  0.579115       \\n       0.412881  0.543243       \\nset value(:,:,3) =( :, :, 2 ) = \\n--------------------------------\\n       0.860663  0.715234       \\n       0.946888  0.539013       \\nset value(:,:,3) =( :, :, 3 ) = \\n--------------------------------\\n       0.240968  0.771520       \\n       0.793377  0.683370       \\nget value = \\nRANK :: 1 (VECTOR)\\n# VarType: SPACE & TIME\\n   # VALUE:( :, :, 1 ) =    \\n----------------------------\\n0.189357  0.860663  0.240968\\n0.412881  0.946888  0.793377\\n   # VALUE:( :, :, 2 ) =    \\n----------------------------\\n0.579115  0.715234  0.771520\\n0.543243  0.539013  0.683370\\n\"\n      })\n    })]\n  });\n}\nfunction _STVectorField_test_25_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_STVectorField_test_25_createMdxContent, {\n      ...props\n    })\n  }) : _STVectorField_test_25_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/STVectorFieldLis/Get.md\n\n\nconst Get_frontMatter = {};\nconst Get_contentTitle = 'Get';\n\nconst assets = {\n\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst Get_toc = [{\n  \"value\": \"Interface 1\",\n  \"id\": \"interface-1\",\n  \"level\": 2\n}, ...toc, {\n  \"value\": \"Interface 2\",\n  \"id\": \"interface-2\",\n  \"level\": 2\n}, ..._STVectorField_test_18_toc, {\n  \"value\": \"Interface 3\",\n  \"id\": \"interface-3\",\n  \"level\": 2\n}, ..._STVectorField_test_19_toc, {\n  \"value\": \"Interface 4\",\n  \"id\": \"interface-4\",\n  \"level\": 2\n}, ..._STVectorField_test_20_toc, {\n  \"value\": \"Interface 5\",\n  \"id\": \"interface-5\",\n  \"level\": 2\n}, ..._STVectorField_test_21_toc, {\n  \"value\": \"Interface 6\",\n  \"id\": \"interface-6\",\n  \"level\": 2\n}, ..._STVectorField_test_22_toc, {\n  \"value\": \"Interface 7\",\n  \"id\": \"interface-7\",\n  \"level\": 2\n}, ..._STVectorField_test_23_toc, {\n  \"value\": \"Interface 8\",\n  \"id\": \"interface-8\",\n  \"level\": 2\n}, ..._STVectorField_test_24_toc, {\n  \"value\": \"Interface 9\",\n  \"id\": \"interface-9\",\n  \"level\": 2\n}, ..._STVectorField_test_25_toc, {\n  \"value\": \"Interface 10\",\n  \"id\": \"interface-10\",\n  \"level\": 2\n}];\nfunction Get_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    header: \"header\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.header, {\n      children: (0,jsx_runtime.jsx)(_components.h1, {\n        id: \"get\",\n        children: \"Get\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Get entries from vector field.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Calling example:\"\n    }), \"\\n\", \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-1\",\n      children: \"Interface 1\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE SUBROUTINE stvField_get1(obj, VALUE, globalNode, spaceCompo, &\\n    & timeCompo)\\n    CLASS(STVectorFieldLis_), INTENT(IN) :: obj\\n    REAL(DFP), ALLOCATABLE, INTENT(INOUT) :: VALUE(:)\\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: globalNode\\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: spaceCompo\\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: timeCompo\\n  END SUBROUTINE stvField_get1\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n              children: [\"If \", (0,jsx_runtime.jsx)(_components.code, {\n                children: \"globalnode\"\n              }), \" is present then this routine returns the space-time values at the \", (0,jsx_runtime.jsx)(_components.code, {\n                children: \"globalnode\"\n              }), \". Note that the returned values are stored in \", (0,jsx_runtime.jsx)(_components.code, {\n                children: \"value\"\n              }), \" in \", (0,jsx_runtime.jsx)(_components.code, {\n                children: \"NODES_FMT\"\n              }), \" format. You can get the space-time nodal values by reshaping \", (0,jsx_runtime.jsx)(_components.code, {\n                children: \"value\"\n              }), \", that is, \", (0,jsx_runtime.jsx)(_components.code, {\n                children: \"reshape(value, [spaceCompo, timeCompo])\"\n              }), \".\"]\n            }), \"\\n\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n              children: [\"If \", (0,jsx_runtime.jsx)(_components.code, {\n                children: \"spaceCompo\"\n              }), \" and \", (0,jsx_runtime.jsx)(_components.code, {\n                children: \"timeCompo\"\n              }), \" are present, then this routine returns all the nodal values of specified space-time component. The size of \", (0,jsx_runtime.jsx)(_components.code, {\n                children: \"value\"\n              }), \" will be \", (0,jsx_runtime.jsx)(_components.code, {\n                children: \"tNodes\"\n              }), \".\"]\n            }), \"\\n\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n              children: [\"If \", (0,jsx_runtime.jsx)(_components.code, {\n                children: \"spaceCompo\"\n              }), \" is present and \", (0,jsx_runtime.jsx)(_components.code, {\n                children: \"timeCompo\"\n              }), \" is not present, then this routine returns nodal values of all time components in \", (0,jsx_runtime.jsx)(_components.code, {\n                children: \"value\"\n              }), \". The data is stored in \", (0,jsx_runtime.jsx)(_components.code, {\n                children: \"NODES_FMT\"\n              }), \". Therefore, by reshaping \", (0,jsx_runtime.jsx)(_components.code, {\n                children: \"value\"\n              }), \" as \", (0,jsx_runtime.jsx)(_components.code, {\n                children: \"reshape(value, [timeCompo, tNodes])\"\n              }), \" you can retrive data.\"]\n            }), \"\\n\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n              children: [\"If \", (0,jsx_runtime.jsx)(_components.code, {\n                children: \"timeCompo\"\n              }), \" is present and \", (0,jsx_runtime.jsx)(_components.code, {\n                children: \"spaceCompo\"\n              }), \" is not present, then this routine returns nodal values of all space components in \", (0,jsx_runtime.jsx)(_components.code, {\n                children: \"value\"\n              }), \". The data is stored in \", (0,jsx_runtime.jsx)(_components.code, {\n                children: \"NODES_FMT\"\n              }), \". Therefore, by reshaping \", (0,jsx_runtime.jsx)(_components.code, {\n                children: \"value\"\n              }), \" as \", (0,jsx_runtime.jsx)(_components.code, {\n                children: \"reshape(value, [spaceCompo, tNodes])\"\n              }), \" you can retrive data.\"]\n            }), \"\\n\"]\n          }), \"\\n\"]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-2\",\n      children: \"Interface 2\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE SUBROUTINE stvField_get2(obj, VALUE)\\n    CLASS(STVectorFieldLis_), INTENT(IN) :: obj\\n    REAL(DFP), ALLOCATABLE, INTENT(INOUT) :: VALUE(:, :, :)\\n  END SUBROUTINE stvField_get2\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"This routine returns all nodal values of all space-time components.\"\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"The shape of \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"value\"\n            }), \" is (\", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"spaceCompo, timeCompo, tNodes\"\n            }), \").\"]\n          }), \"\\n\"]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_STVectorField_test_18_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-3\",\n      children: \"Interface 3\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE SUBROUTINE stvField_get3(obj, VALUE, globalNode)\\n    CLASS(STVectorFieldLis_), INTENT(IN) :: obj\\n    REAL(DFP), ALLOCATABLE, INTENT(INOUT) :: VALUE(:, :, :)\\n    INTEGER(I4B), INTENT(IN) :: globalNode(:)\\n  END SUBROUTINE stvField_get3\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"This routine returns space-time nodal values of global nodes\"\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"The shape of \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"value\"\n            }), \" is (\", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"spaceCompo, timeCompo, size(globalNode)\"\n            }), \")\"]\n          }), \"\\n\"]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_STVectorField_test_19_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-4\",\n      children: \"Interface 4\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE SUBROUTINE stvField_get4(obj, VALUE, globalNode, spaceCompo, &\\n    & timeCompo)\\n    CLASS(STVectorFieldLis_), INTENT(IN) :: obj\\n    REAL(DFP), ALLOCATABLE, INTENT(INOUT) :: VALUE(:)\\n    INTEGER(I4B), INTENT(IN) :: globalNode(:)\\n    INTEGER(I4B), INTENT(IN) :: spaceCompo\\n    INTEGER(I4B), INTENT(IN) :: timeCompo\\n  END SUBROUTINE stvField_get4\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"This method returns the nodal value of a given space-time component.\"\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"The size of \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"value\"\n            }), \" is same as the size of \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"globalNode\"\n            }), \".\"]\n          }), \"\\n\"]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_STVectorField_test_20_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-5\",\n      children: \"Interface 5\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE SUBROUTINE stvField_get5(obj, VALUE, globalNode, spaceCompo, &\\n    & timeCompo)\\n    CLASS(STVectorFieldLis_), INTENT(IN) :: obj\\n    REAL(DFP), INTENT(INOUT) :: VALUE\\n    INTEGER(I4B), INTENT(IN) :: globalNode\\n    INTEGER(I4B), INTENT(IN) :: spaceCompo\\n    INTEGER(I4B), INTENT(IN) :: timeCompo\\n  END SUBROUTINE stvField_get5\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"This method returns a single entry of a space-time component at a given node.\"\n          }), \"\\n\"]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_STVectorField_test_21_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-6\",\n      children: \"Interface 6\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE SUBROUTINE stvField_get6(obj, VALUE, istart, iend, stride)\\n    CLASS(STVectorFieldLis_), INTENT(IN) :: obj\\n    REAL(DFP), ALLOCATABLE, INTENT(INOUT) :: VALUE(:, :, :)\\n    INTEGER(I4B), INTENT(IN) :: istart\\n    INTEGER(I4B), INTENT(IN) :: iend\\n    INTEGER(I4B), INTENT(IN) :: stride\\n  END SUBROUTINE stvField_get6\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"This routine returns space-time nodal values at multiple nodes.\"\n          }), \"\\n\"]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_STVectorField_test_22_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-7\",\n      children: \"Interface 7\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE SUBROUTINE stvField_get7(obj, VALUE, istart, iend, stride, &\\n    & spaceCompo, timeCompo)\\n    CLASS(STVectorFieldLis_), INTENT(IN) :: obj\\n    REAL(DFP), ALLOCATABLE, INTENT(INOUT) :: VALUE(:)\\n    INTEGER(I4B), INTENT(IN) :: istart\\n    INTEGER(I4B), INTENT(IN) :: iend\\n    INTEGER(I4B), INTENT(IN) :: stride\\n    INTEGER(I4B), INTENT(IN) :: spaceCompo\\n    INTEGER(I4B), INTENT(IN) :: timeCompo\\n  END SUBROUTINE stvField_get7\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"This routine returns the nodal values of specified space-time component\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"Node numbers are specified by triplets\"\n          }), \"\\n\"]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_STVectorField_test_23_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-8\",\n      children: \"Interface 8\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE SUBROUTINE stvField_get8(obj, VALUE, globalNode)\\n    CLASS(STVectorFieldLis_), INTENT(IN) :: obj\\n    REAL(DFP), ALLOCATABLE, INTENT(INOUT) :: VALUE(:, :)\\n    INTEGER(I4B), INTENT(IN) :: globalNode\\n  END SUBROUTINE stvField_get8\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"This method returns the space-time nodal value at a given node.\"\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"The shape of \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"value\"\n            }), \" is (\", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"spaceCompo\"\n            }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"timeCompo\"\n            }), \").\"]\n          }), \"\\n\"]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_STVectorField_test_24_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-9\",\n      children: \"Interface 9\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE SUBROUTINE stvField_get9(obj, VALUE, globalNode)\\n    CLASS(STVectorFieldLis_), INTENT(IN) :: obj\\n    TYPE(FEVariable_), INTENT(INOUT) :: VALUE\\n    INTEGER(I4B), INTENT(IN) :: globalNode(:)\\n  END SUBROUTINE stvField_get9\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"This routine returns space-time nodal value of specified nodes in FEVariable.\"\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"value\"\n            }), \" is FEVariable of SpaceTime type.\"]\n          }), \"\\n\"]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_STVectorField_test_25_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-10\",\n      children: \"Interface 10\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n  MODULE SUBROUTINE stvField_get10(obj, VALUE, spaceCompo, timeCompo)\\n    CLASS(STVectorFieldLis_), INTENT(IN) :: obj\\n    CLASS(AbstractNodeField_), INTENT(INOUT) :: VALUE\\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: spaceCompo\\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: timeCompo\\n  END SUBROUTINE stvField_get10\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"This method returns the space component as an instance of AbstractNodeField.\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction Get_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(Get_createMdxContent, {\n      ...props\n    })\n  }) : Get_createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./docs/docs-api/STVectorFieldLis/Get.md\n");

/***/ })

}]);