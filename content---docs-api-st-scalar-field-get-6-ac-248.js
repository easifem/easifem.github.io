"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkeasifem_docs"] = globalThis["webpackChunkeasifem_docs"] || []).push([["content---docs-api-st-scalar-field-get-6-ac-248"],{

/***/ "./docs/docs-api/STScalarField/Get.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  assets: () => (/* binding */ assets),\n  contentTitle: () => (/* binding */ Get_contentTitle),\n  \"default\": () => (/* binding */ Get_MDXContent),\n  frontMatter: () => (/* binding */ Get_frontMatter),\n  metadata: () => (/* reexport */ site_docs_docs_api_st_scalar_field_get_md_6ac_namespaceObject),\n  toc: () => (/* binding */ Get_toc)\n});\n\n;// ./.docusaurus/docusaurus-plugin-content-docs/docs-api/site-docs-docs-api-st-scalar-field-get-md-6ac.json\nconst site_docs_docs_api_st_scalar_field_get_md_6ac_namespaceObject = /*#__PURE__*/JSON.parse('{\"id\":\"STScalarField/Get\",\"title\":\"Get\",\"description\":\"Get entries of field.\",\"source\":\"@site/docs/docs-api/STScalarField/Get.md\",\"sourceDirName\":\"STScalarField\",\"slug\":\"/STScalarField/Get\",\"permalink\":\"/docs-api/STScalarField/Get\",\"draft\":false,\"unlisted\":false,\"editUrl\":\"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/STScalarField/Get.md\",\"tags\":[],\"version\":\"current\",\"lastUpdatedAt\":1539502055000,\"frontMatter\":{},\"sidebar\":\"tutorialSidebar\",\"previous\":{\"title\":\"Export\",\"permalink\":\"/docs-api/STScalarField/Export\"},\"next\":{\"title\":\"GetPointer\",\"permalink\":\"/docs-api/STScalarField/GetPointer\"}}');\n// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n// EXTERNAL MODULE: ./node_modules/@mdx-js/react/lib/index.js\nvar lib = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js + 2 modules\nvar Tabs = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js + 1 modules\nvar TabItem = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js\");\n;// ./docs/docs-api/STScalarField/_STScalarField_test_14.md\n\n\nconst frontMatter = {};\nconst contentTitle = undefined;\n\n\n\n\n\nconst toc = [];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"In this example we test \", (0,jsx_runtime.jsx)(_components.a, {\n        href: \"/docs-api/STScalarField/Get\",\n        children: \"Get\"\n      }), \" method.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"In this example we get all temporal values of a given space node.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"program main\\n  use easifemBase\\n  use easifemClasses\\n  implicit none\\n\\n  type( domain_ ) :: dom\\n  type( STScalarFieldLis_ ) :: obj\\n  TYPE( HDF5File_ ) :: meshfile\\n  type( ParameterList_ ) :: param\\n  integer( i4b ) :: ierr\\n  INTEGER( I4B ), Parameter :: timeCompo=2\\n  CHARACTER( LEN = * ), Parameter :: engine=\\\"LIS_OMP\\\"\\n  INTEGER( I4B ) ::tNodes\\n  REAL( DFP ), ALLOCATABLE :: val2(:)\\n  REAL( DFP ), ALLOCATABLE :: val1(:,:)\\n\\n  call meshfile%initiate( filename=\\\"./mesh.h5\\\", mode=\\\"READ\\\" )\\n  call meshfile%open()\\n  call dom%initiate( meshfile, \\\"\\\" )\\n  call meshfile%Deallocate()\\n\\n  CALL FPL_INIT()\\n  CALL param%initiate()\\n  CALL SetSTScalarFieldParam( &\\n    & param=param, &\\n    & name=\\\"U\\\", &\\n    & fieldType=FIELD_TYPE_NORMAL, &\\n    & engine=engine, &\\n    & timeCompo=timeCompo)\\n\\n  call obj%initiate( param, dom )\\n\\n  tNodes = dom%getTotalNodes()\\n  call reallocate(val1, timeCompo, tNodes)\\n  call random_number(val1)\\n\\n  call obj%set(value=val1)\\n  call obj%get(value=val2, globalNode=1)\\n\\n  call Display(val1(:,1:5), \\\"val1 = \\\" )\\n  call Display(val2, \\\"val2 node 1 = \\\"  )\\n  call obj%get(value=val2, globalNode=5)\\n  call Display(val2, \\\"val2 node 5 = \\\"  )\\n\\n  call obj%Deallocate()\\n  call dom%Deallocate()\\n  call param%Deallocate()\\n  call FPL_FINALIZE()\\nend program main\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"                     val1 =                     \\n------------------------------------------------\\n0.985725  0.712300  0.838596  0.656728  0.490376\\n0.674099  0.196048  0.327113  0.386112  0.450990\\nval2 node 1 = \\n--------------\\n   0.985725   \\n   0.674099   \\nval2 node 5 = \\n--------------\\n   0.490376   \\n   0.450990\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/STScalarField/_STScalarField_test_16.md\n\n\nconst _STScalarField_test_16_frontMatter = {};\nconst _STScalarField_test_16_contentTitle = undefined;\n\n\n\n\n\nconst _STScalarField_test_16_toc = [];\nfunction _STScalarField_test_16_createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"In this example we test \", (0,jsx_runtime.jsx)(_components.a, {\n        href: \"/docs-api/STScalarField/Get\",\n        children: \"Get\"\n      }), \" method.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"program main\\n  use easifemBase\\n  use easifemClasses\\n  implicit none\\n\\n  type( domain_ ) :: dom\\n  type( STScalarFieldLis_ ) :: obj\\n  TYPE( HDF5File_ ) :: meshfile\\n  type( ParameterList_ ) :: param\\n  integer( i4b ) :: ierr\\n  INTEGER( I4B ), Parameter :: timeCompo=2\\n  CHARACTER( LEN = * ), Parameter :: engine=\\\"LIS_OMP\\\"\\n  INTEGER( I4B ) ::tNodes\\n  REAL( DFP ), ALLOCATABLE :: val2(:, :)\\n  REAL( DFP ), ALLOCATABLE :: val1(:,:)\\n\\n  call meshfile%initiate( filename=\\\"./mesh.h5\\\", mode=\\\"READ\\\" )\\n  call meshfile%open()\\n  call dom%initiate( meshfile, \\\"\\\" )\\n  call meshfile%Deallocate()\\n\\n  CALL FPL_INIT()\\n  CALL param%initiate()\\n  CALL SetSTScalarFieldParam( &\\n    & param=param, &\\n    & name=\\\"U\\\", &\\n    & fieldType=FIELD_TYPE_NORMAL, &\\n    & engine=engine, &\\n    & timeCompo=timeCompo)\\n\\n  call obj%initiate( param, dom )\\n\\n  tNodes = dom%getTotalNodes()\\n  call reallocate(val1, timeCompo, tNodes)\\n  call random_number(val1)\\n  call Display(val1(:, 1:5), \\\"val1 = \\\" )\\n\\n  call obj%set(value=val1)\\n  call obj%get(value=val2)\\n  call Display(val2(:, 1:5), \\\"val2 = \\\"  )\\n\\n  call obj%Deallocate()\\n  call dom%Deallocate()\\n  call param%Deallocate()\\n  call FPL_FINALIZE()\\nend program main\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"                     val1 =                     \\n------------------------------------------------\\n0.422617  0.429280  0.529915  0.503016  0.776664\\n0.408958  0.078687  0.172171  0.790472  0.069847\\n\\n                     val2 =                     \\n------------------------------------------------\\n0.422617  0.429280  0.529915  0.503016  0.776664\\n0.408958  0.078687  0.172171  0.790472  0.069847\\n\"\n      })\n    })]\n  });\n}\nfunction _STScalarField_test_16_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_STScalarField_test_16_createMdxContent, {\n      ...props\n    })\n  }) : _STScalarField_test_16_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/STScalarField/_STScalarField_test_17.md\n\n\nconst _STScalarField_test_17_frontMatter = {};\nconst _STScalarField_test_17_contentTitle = undefined;\n\n\n\n\n\nconst _STScalarField_test_17_toc = [];\nfunction _STScalarField_test_17_createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"In this example we test \", (0,jsx_runtime.jsx)(_components.a, {\n        href: \"/docs-api/STScalarField/Get\",\n        children: \"Get\"\n      }), \" method.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"program main\\n  use easifemBase\\n  use easifemClasses\\n  implicit none\\n\\n  type( domain_ ) :: dom\\n  type( STScalarFieldLis_ ) :: obj\\n  TYPE( HDF5File_ ) :: meshfile\\n  type( ParameterList_ ) :: param\\n  integer( i4b ) :: ierr\\n  INTEGER( I4B ), Parameter :: timeCompo=2\\n  CHARACTER( LEN = * ), Parameter :: engine=\\\"LIS_OMP\\\"\\n  INTEGER( I4B ) ::tNodes\\n  REAL( DFP ), ALLOCATABLE :: val2(:, :)\\n  REAL( DFP ), ALLOCATABLE :: val1(:,:)\\n\\n  call meshfile%initiate( filename=\\\"./mesh.h5\\\", mode=\\\"READ\\\" )\\n  call meshfile%open()\\n  call dom%initiate( meshfile, \\\"\\\" )\\n  call meshfile%Deallocate()\\n\\n  CALL FPL_INIT()\\n  CALL param%initiate()\\n  CALL SetSTScalarFieldParam( &\\n    & param=param, &\\n    & name=\\\"U\\\", &\\n    & fieldType=FIELD_TYPE_NORMAL, &\\n    & engine=engine, &\\n    & timeCompo=timeCompo)\\n\\n  call obj%initiate( param, dom )\\n\\n  tNodes = dom%getTotalNodes()\\n  call reallocate(val1, timeCompo, tNodes)\\n  call random_number(val1)\\n  call Display(val1(:, 1:5), \\\"val1 = \\\" )\\n\\n  call obj%set(value=val1)\\n  call obj%get(value=val2, globalNode=arange(1,5) )\\n  call Display(val2(:, 1:5), \\\"val2 = \\\"  )\\n\\n  call obj%Deallocate()\\n  call dom%Deallocate()\\n  call param%Deallocate()\\n  call FPL_FINALIZE()\\nend program main\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"                     val1 =                     \\n------------------------------------------------\\n0.450271  0.195486  0.123940  0.445466  0.178457\\n0.779424  0.951806  0.209786  0.867207  0.345955\\n                     val2 =                     \\n------------------------------------------------\\n0.450271  0.195486  0.123940  0.445466  0.178457\\n0.779424  0.951806  0.209786  0.867207  0.345955\\n\"\n      })\n    })]\n  });\n}\nfunction _STScalarField_test_17_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_STScalarField_test_17_createMdxContent, {\n      ...props\n    })\n  }) : _STScalarField_test_17_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/STScalarField/_STScalarField_test_18.md\n\n\nconst _STScalarField_test_18_frontMatter = {};\nconst _STScalarField_test_18_contentTitle = undefined;\n\n\n\n\n\nconst _STScalarField_test_18_toc = [];\nfunction _STScalarField_test_18_createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"In this example we test \", (0,jsx_runtime.jsx)(_components.a, {\n        href: \"/docs-api/STScalarField/Get\",\n        children: \"Get\"\n      }), \" method.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"program main\\n  use easifemBase\\n  use easifemClasses\\n  implicit none\\n\\n  type( domain_ ) :: dom\\n  type( STScalarFieldLis_ ) :: obj\\n  TYPE( HDF5File_ ) :: meshfile\\n  type( ParameterList_ ) :: param\\n  integer( i4b ) :: ierr\\n  INTEGER( I4B ), Parameter :: timeCompo=2\\n  CHARACTER( LEN = * ), Parameter :: engine=\\\"LIS_OMP\\\"\\n  INTEGER( I4B ) ::tNodes\\n  REAL( DFP ), ALLOCATABLE :: val2(:)\\n  REAL( DFP ), ALLOCATABLE :: val1(:,:)\\n\\n  call meshfile%initiate( filename=\\\"./mesh.h5\\\", mode=\\\"READ\\\" )\\n  call meshfile%open()\\n  call dom%initiate( meshfile, \\\"\\\" )\\n  call meshfile%Deallocate()\\n\\n  CALL FPL_INIT()\\n  CALL param%initiate()\\n  CALL SetSTScalarFieldParam( &\\n    & param=param, &\\n    & name=\\\"U\\\", &\\n    & fieldType=FIELD_TYPE_NORMAL, &\\n    & engine=engine, &\\n    & timeCompo=timeCompo)\\n\\n  call obj%initiate( param, dom )\\n\\n  tNodes = dom%getTotalNodes()\\n  call reallocate(val1, timeCompo, tNodes)\\n  call random_number(val1)\\n  call Display(val1(:, 1:5), \\\"val1 = \\\" )\\n\\n  call obj%set(value=val1)\\n  call obj%get(value=val2, globalNode=arange(1,5), timeCompo=1 )\\n  call Display(val2(1:5), \\\"val2 = \\\"  )\\n  call obj%get(value=val2, globalNode=arange(1,5), timeCompo=2 )\\n  call Display(val2(1:5), \\\"val2 = \\\"  )\\n\\n  call obj%Deallocate()\\n  call dom%Deallocate()\\n  call param%Deallocate()\\n  call FPL_FINALIZE()\\nend program main\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"                     val1 =                     \\n------------------------------------------------\\n0.767915  0.962912  0.574328  0.331982  0.284842\\n0.891933  0.684328  0.359778  0.220547  0.346818\\n val2 = \\n--------\\n0.767915\\n0.962912\\n0.574328\\n0.331982\\n0.284842\\n val2 = \\n--------\\n0.891933\\n0.684328\\n0.359778\\n0.220547\\n0.346818\\n\"\n      })\n    })]\n  });\n}\nfunction _STScalarField_test_18_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_STScalarField_test_18_createMdxContent, {\n      ...props\n    })\n  }) : _STScalarField_test_18_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/STScalarField/_STScalarField_test_19.md\n\n\nconst _STScalarField_test_19_frontMatter = {};\nconst _STScalarField_test_19_contentTitle = undefined;\n\n\n\n\n\nconst _STScalarField_test_19_toc = [];\nfunction _STScalarField_test_19_createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"In this example we test \", (0,jsx_runtime.jsx)(_components.a, {\n        href: \"/docs-api/STScalarField/Get\",\n        children: \"Get\"\n      }), \" method.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"program main\\n  use easifemBase\\n  use easifemClasses\\n  implicit none\\n\\n  type( domain_ ) :: dom\\n  type( STScalarFieldLis_ ) :: obj\\n  TYPE( HDF5File_ ) :: meshfile\\n  type( ParameterList_ ) :: param\\n  integer( i4b ) :: ierr\\n  INTEGER( I4B ), Parameter :: timeCompo=2\\n  CHARACTER( LEN = * ), Parameter :: engine=\\\"LIS_OMP\\\"\\n  INTEGER( I4B ) ::tNodes\\n  REAL( DFP ) :: val2\\n  REAL( DFP ), ALLOCATABLE :: val1(:,:)\\n\\n  call meshfile%initiate( filename=\\\"./mesh.h5\\\", mode=\\\"READ\\\" )\\n  call meshfile%open()\\n  call dom%initiate( meshfile, \\\"\\\" )\\n  call meshfile%Deallocate()\\n\\n  CALL FPL_INIT()\\n  CALL param%initiate()\\n  CALL SetSTScalarFieldParam( &\\n    & param=param, &\\n    & name=\\\"U\\\", &\\n    & fieldType=FIELD_TYPE_NORMAL, &\\n    & engine=engine, &\\n    & timeCompo=timeCompo)\\n\\n  call obj%initiate( param, dom )\\n\\n  tNodes = dom%getTotalNodes()\\n  call reallocate(val1, timeCompo, tNodes)\\n  call random_number(val1)\\n  call Display(val1(:, 1:5), \\\"val1 = \\\" )\\n\\n  call obj%set(value=val1)\\n  call obj%get(value=val2, globalNode=1, timeCompo=1 )\\n  call Display(val2, \\\"val2 = \\\"  )\\n  call obj%get(value=val2, globalNode=2, timeCompo=1 )\\n  call Display(val2, \\\"val2 = \\\"  )\\n  call obj%get(value=val2, globalNode=1, timeCompo=2 )\\n  call Display(val2, \\\"val2 = \\\"  )\\n  call obj%get(value=val2, globalNode=2, timeCompo=2 )\\n  call Display(val2, \\\"val2 = \\\"  )\\n\\n  call obj%Deallocate()\\n  call dom%Deallocate()\\n  call param%Deallocate()\\n  call FPL_FINALIZE()\\nend program main\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"                     val1 =                     \\n------------------------------------------------\\n0.603828  0.756928  0.863545  0.512535  0.914640\\n0.214214  0.073219  0.731039  0.124185  0.871294\\nval2 = 0.603828\\nval2 = 0.756928\\nval2 = 0.214214\\nval2 = 7.32189E-2\\n\"\n      })\n    })]\n  });\n}\nfunction _STScalarField_test_19_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_STScalarField_test_19_createMdxContent, {\n      ...props\n    })\n  }) : _STScalarField_test_19_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/STScalarField/Get.md\n\n\nconst Get_frontMatter = {};\nconst Get_contentTitle = 'Get';\n\nconst assets = {\n\n};\n\n\n\n\n\n\n\n\n\n\nconst Get_toc = [{\n  \"value\": \"Interface 1\",\n  \"id\": \"interface-1\",\n  \"level\": 2\n}, ...toc, {\n  \"value\": \"Interface 2\",\n  \"id\": \"interface-2\",\n  \"level\": 2\n}, ..._STScalarField_test_16_toc, {\n  \"value\": \"Interface 3\",\n  \"id\": \"interface-3\",\n  \"level\": 2\n}, ..._STScalarField_test_17_toc, {\n  \"value\": \"Interface 4\",\n  \"id\": \"interface-4\",\n  \"level\": 2\n}, ..._STScalarField_test_18_toc, {\n  \"value\": \"Interface 5\",\n  \"id\": \"interface-5\",\n  \"level\": 2\n}, ..._STScalarField_test_19_toc, {\n  \"value\": \"Interface 6\",\n  \"id\": \"interface-6\",\n  \"level\": 2\n}, {\n  \"value\": \"Interface 7\",\n  \"id\": \"interface-7\",\n  \"level\": 2\n}, {\n  \"value\": \"Interface 8\",\n  \"id\": \"interface-8\",\n  \"level\": 2\n}, {\n  \"value\": \"Interface 9\",\n  \"id\": \"interface-9\",\n  \"level\": 2\n}];\nfunction Get_createMdxContent(props) {\n  const _components = {\n    admonition: \"admonition\",\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    header: \"header\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.header, {\n      children: (0,jsx_runtime.jsx)(_components.h1, {\n        id: \"get\",\n        children: \"Get\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Get entries of field.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Calling example:\"\n    }), \"\\n\", \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-1\",\n      children: \"Interface 1\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ See Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \" INTERFACE\\n  MODULE SUBROUTINE get1(obj, VALUE, globalNode, timeCompo)\\n    CLASS(STScalarField_), INTENT(IN) :: obj\\n    REAL(DFP), ALLOCATABLE, INTENT(INOUT) :: VALUE(:)\\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: globalNode\\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: timeCompo\\n  END SUBROUTINE get1\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsx)(_components.admonition, {\n          type: \"note\",\n          children: (0,jsx_runtime.jsxs)(_components.p, {\n            children: [\"Both \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"globalNode\"\n            }), \" and \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"timeCompo\"\n            }), \" cannot be present.\"]\n          })\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"If \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"globalNode\"\n            }), \" is present then temporal value are returned\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"If \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"timeCompo\"\n            }), \" is present then spatial values are returned\"]\n          }), \"\\n\"]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example1\",\n        label: \"܀ Example 1\",\n        children: (0,jsx_runtime.jsx)(MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-2\",\n      children: \"Interface 2\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ See Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE SUBROUTINE get2(obj, VALUE)\\n    CLASS(STScalarField_), INTENT(IN) :: obj\\n    REAL(DFP), ALLOCATABLE, INTENT(INOUT) :: VALUE(:, :)\\n  END SUBROUTINE get2\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsx)(_components.p, {\n          children: \"Get all the values.\"\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"Number of rows in value is equal to the \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"obj%timecompo\"\n            })]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"Number of col in value is equal to the \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"obj%domain%tNodes\"\n            })]\n          }), \"\\n\"]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example1\",\n        label: \"Example 1\",\n        default: true,\n        children: (0,jsx_runtime.jsx)(_STScalarField_test_16_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \",\n        default: true\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-3\",\n      children: \"Interface 3\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE SUBROUTINE stsField_get3(obj, VALUE, globalNode)\\n    CLASS(STScalarField_), INTENT(IN) :: obj\\n    REAL(DFP), ALLOCATABLE, INTENT(INOUT) :: VALUE(:, :)\\n    INTEGER(I4B), INTENT(IN) :: globalNode(:)\\n  END SUBROUTINE stsField_get3\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsx)(_components.p, {\n          children: \"Get multiple values.\"\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"Total number of rows in value is \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"obj%timeCompo\"\n            })]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"Total number of columns in value are \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"obj%domain%tnodes\"\n            })]\n          }), \"\\n\"]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_STScalarField_test_17_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-4\",\n      children: \"Interface 4\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE SUBROUTINE stsField_get4(obj, VALUE, globalNode, timeCompo)\\n    CLASS(STScalarField_), INTENT(IN) :: obj\\n    REAL(DFP), ALLOCATABLE, INTENT(INOUT) :: VALUE(:)\\n    INTEGER(I4B), INTENT(IN) :: globalNode(:)\\n    INTEGER(I4B), INTENT(IN) :: timeCompo\\n  END SUBROUTINE stsField_get4\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsx)(_components.p, {\n          children: \"Get multiple values of timeCompo.\"\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"size of value is equal to the size of globalNode\"\n          }), \"\\n\"]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_STScalarField_test_18_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-5\",\n      children: \"Interface 5\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \" INTERFACE\\n  MODULE SUBROUTINE stsField_get5(obj, VALUE, globalNode, timeCompo)\\n    CLASS(STScalarField_), INTENT(IN) :: obj\\n    REAL(DFP), INTENT(INOUT) :: VALUE\\n    INTEGER(I4B), INTENT(IN) :: globalNode\\n    INTEGER(I4B), INTENT(IN) :: timeCompo\\n  END SUBROUTINE stsField_get5\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsx)(_components.p, {\n          children: \"Get the single value of timeCompo.\"\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_STScalarField_test_19_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-6\",\n      children: \"Interface 6\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \" INTERFACE\\n  MODULE SUBROUTINE stsField_get6(obj, VALUE, istart, iend, stride)\\n    CLASS(STScalarField_), INTENT(IN) :: obj\\n    REAL(DFP), ALLOCATABLE, INTENT(INOUT) :: VALUE(:, :)\\n    INTEGER(I4B), INTENT(IN) :: istart\\n    INTEGER(I4B), INTENT(IN) :: iend\\n    INTEGER(I4B), INTENT(IN) :: stride\\n  END SUBROUTINE stsField_get6\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Get multiple values using triplets.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-7\",\n      children: \"Interface 7\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n  MODULE SUBROUTINE stsField_get7(obj, VALUE, istart, iend, stride, timeCompo)\\n    CLASS(STScalarField_), INTENT(IN) :: obj\\n    REAL(DFP), ALLOCATABLE, INTENT(INOUT) :: VALUE(:)\\n    INTEGER(I4B), INTENT(IN) :: istart\\n    INTEGER(I4B), INTENT(IN) :: iend\\n    INTEGER(I4B), INTENT(IN) :: stride\\n    INTEGER(I4B), INTENT(IN) :: timeCompo\\n  END SUBROUTINE stsField_get7\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Get multiple values using triplets\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-8\",\n      children: \"Interface 8\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n  MODULE SUBROUTINE stsField_get8(obj, VALUE, globalNode)\\n    CLASS(STScalarField_), INTENT(IN) :: obj\\n    TYPE(FEVariable_), INTENT(INOUT) :: VALUE\\n  !! Nodal, Vector, SpaceTime\\n    INTEGER(I4B), INTENT(IN) :: globalNode(:)\\n  END SUBROUTINE stsField_get8\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Get multiple values in FEVariable.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-9\",\n      children: \"Interface 9\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n  MODULE SUBROUTINE stsField_get9(obj, VALUE, timeCompo)\\n    CLASS(STScalarField_), INTENT(IN) :: obj\\n    CLASS(ScalarField_), INTENT(INOUT) :: VALUE\\n    INTEGER(I4B), INTENT(IN) :: timeCompo\\n  END SUBROUTINE stsField_get9\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"Get \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"STScalarField_\"\n      }), \" in an instance of \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"ScalarField_\"\n      }), \".\"]\n    })]\n  });\n}\nfunction Get_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(Get_createMdxContent, {\n      ...props\n    })\n  }) : Get_createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./docs/docs-api/STScalarField/Get.md\n");

/***/ })

}]);