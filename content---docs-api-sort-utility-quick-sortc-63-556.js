"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkeasifem_docs"] = globalThis["webpackChunkeasifem_docs"] || []).push([["content---docs-api-sort-utility-quick-sortc-63-556"],{

/***/ "./docs/docs-api/SortUtility/QuickSort.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  assets: () => (/* binding */ assets),\n  contentTitle: () => (/* binding */ QuickSort_contentTitle),\n  \"default\": () => (/* binding */ QuickSort_MDXContent),\n  frontMatter: () => (/* binding */ QuickSort_frontMatter),\n  metadata: () => (/* reexport */ site_docs_docs_api_sort_utility_quick_sort_md_c63_namespaceObject),\n  toc: () => (/* binding */ QuickSort_toc)\n});\n\n;// ./.docusaurus/docusaurus-plugin-content-docs/docs-api/site-docs-docs-api-sort-utility-quick-sort-md-c63.json\nconst site_docs_docs_api_sort_utility_quick_sort_md_c63_namespaceObject = /*#__PURE__*/JSON.parse('{\"id\":\"SortUtility/QuickSort\",\"title\":\"QuickSort\",\"description\":\"QuickSort algorithm for sorting.\",\"source\":\"@site/docs/docs-api/SortUtility/QuickSort.md\",\"sourceDirName\":\"SortUtility\",\"slug\":\"/SortUtility/QuickSort\",\"permalink\":\"/docs-api/SortUtility/QuickSort\",\"draft\":false,\"unlisted\":false,\"editUrl\":\"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/SortUtility/QuickSort.md\",\"tags\":[],\"version\":\"current\",\"lastUpdatedAt\":1539502055000,\"frontMatter\":{},\"sidebar\":\"tutorialSidebar\",\"previous\":{\"title\":\"IntroSort\",\"permalink\":\"/docs-api/SortUtility/IntroSort\"},\"next\":{\"title\":\"Sort\",\"permalink\":\"/docs-api/SortUtility/Sort\"}}');\n// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n// EXTERNAL MODULE: ./node_modules/@mdx-js/react/lib/index.js\nvar lib = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js + 2 modules\nvar Tabs = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js + 1 modules\nvar TabItem = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js\");\n;// ./docs/docs-api/SortUtility/_QuickSort_test_1.md\n\n\nconst frontMatter = {};\nconst contentTitle = undefined;\n\n\n\n\n\nconst toc = [];\nfunction _createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  }, {Details} = _components;\n  if (!Details) _missingMdxReference(\"Details\", true);\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"In this example we test \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"QuickSort\"\n      }), \" method.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"program main\\n  use easifembase\\n  implicit none\\n  integer(i4b), allocatable :: intvec( : )\\n  real(dfp), allocatable :: realvec( : )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"intvec = [ 5, 4, 3, 2, 1 ]\\ncall QuickSort( vect1=intvec, low=1, high=SIZE(intvec) )\\ncall display( intvec, \\\"intvec = \\\" )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Details, {\n      children: [(0,jsx_runtime.jsx)(\"summary\", {\n        children: \"See results\"\n      }), (0,jsx_runtime.jsx)(\"div\", {\n        children: (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-txt\",\n            children: \"intvec =\\n---------\\n1\\n2\\n3\\n4\\n5\\n\"\n          })\n        })\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"realvec = [ 5, 4, 3, 2, 1 ]\\ncall QuickSort( realvec, 1, SIZE( realvec ) )\\ncall display( realvec, \\\"realvec = \\\" )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Details, {\n      children: [(0,jsx_runtime.jsx)(\"summary\", {\n        children: \"See results\"\n      }), (0,jsx_runtime.jsx)(\"div\", {\n        children: (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-txt\",\n            children: \"realvec = \\n----------\\n 1.00000  \\n 2.00000  \\n 3.00000  \\n 4.00000  \\n 5.00000\\n\"\n          })\n        })\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"end program main\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n\n\n;// ./docs/docs-api/SortUtility/_QuickSort_test_2.md\n\n\nconst _QuickSort_test_2_frontMatter = {};\nconst _QuickSort_test_2_contentTitle = undefined;\n\n\n\n\n\nconst _QuickSort_test_2_toc = [];\nfunction _QuickSort_test_2_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  }, {Details} = _components;\n  if (!Details) _QuickSort_test_2_missingMdxReference(\"Details\", true);\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"In this example we test \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"QuickSort\"\n      }), \" method.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"program main\\n  use easifembase\\n  implicit none\\n  integer(i4b), allocatable :: intvec( : )\\n  real(dfp), allocatable :: realvec( : )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"intvec = [ 5, 4, 3, 2, 1 ]\\nrealvec = [ 8, 9, 12, 3, 2 ]\\ncall QuickSort( vect1=intvec, vect2=realvec, low=1, high=SIZE(intvec) )\\ncall display( intvec, \\\"intvec = \\\", advance=\\\"NO\\\" )\\ncall display( realvec, \\\"realvec= \\\", advance=\\\"YES\\\" )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Details, {\n      children: [(0,jsx_runtime.jsx)(\"summary\", {\n        children: \"See results\"\n      }), (0,jsx_runtime.jsx)(\"div\", {\n        children: (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-txt\",\n            children: \"intvec = ,  realvec= \\n---------,  ---------\\n    1    ,    2.0000 \\n    2    ,    3.0000 \\n    3    ,   12.0000 \\n    4    ,    9.0000 \\n    5    ,    8.0000\\n\"\n          })\n        })\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"intvec = [ 5, 4, 3, 2, 1 ]\\nrealvec = [ 8, 9, 12, 3, 2 ]\\ncall QuickSort( vect1=realvec, vect2=intvec, low=1, high=SIZE(intvec) )\\ncall display( intvec, \\\"intvec = \\\", advance=\\\"NO\\\" )\\ncall display( realvec, \\\"realvec= \\\", advance=\\\"YES\\\" )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Details, {\n      children: [(0,jsx_runtime.jsx)(\"summary\", {\n        children: \"See results\"\n      }), (0,jsx_runtime.jsx)(\"div\", {\n        children: (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-txt\",\n            children: \"intvec = ,  realvec= \\n---------,  ---------\\n    1    ,    2.0000 \\n    2    ,    3.0000 \\n    5    ,    8.0000 \\n    4    ,    9.0000 \\n    3    ,   12.0000\\n\"\n          })\n        })\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"end program main\\n\"\n      })\n    })]\n  });\n}\nfunction _QuickSort_test_2_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_QuickSort_test_2_createMdxContent, {\n      ...props\n    })\n  }) : _QuickSort_test_2_createMdxContent(props);\n}\nfunction _QuickSort_test_2_missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n\n\n;// ./docs/docs-api/SortUtility/_QuickSort_test_3.md\n\n\nconst _QuickSort_test_3_frontMatter = {};\nconst _QuickSort_test_3_contentTitle = undefined;\n\n\n\n\n\nconst _QuickSort_test_3_toc = [];\nfunction _QuickSort_test_3_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  }, {Details} = _components;\n  if (!Details) _QuickSort_test_3_missingMdxReference(\"Details\", true);\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"In this example we test \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"QuickSort\"\n      }), \" method.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"program main\\n  use easifembase\\n  implicit none\\n  integer(i4b), allocatable :: intvec( : )\\n  real(dfp), allocatable :: realvec( : )\\n  real(dfp), allocatable :: realvec2( : )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"intvec = [ 5, 4, 3, 2, 1 ]\\nrealvec = [ 8, 9, 12, 3, 2 ]\\nrealvec2 = [ 8, 9, 12, 3, 2 ]\\ncall QuickSort( &\\n  & vect1=intvec, &\\n  & vect2=realvec, &\\n  & vect3=realvec2, &\\n  & low=1, &\\n  & high=SIZE(intvec) )\\ncall display( intvec, \\\"intvec = \\\", advance=\\\"NO\\\" )\\ncall display( realvec, \\\"realvec= \\\", advance=\\\"NO\\\" )\\ncall display( realvec2, \\\"realvec2= \\\", advance=\\\"YES\\\" )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Details, {\n      children: [(0,jsx_runtime.jsx)(\"summary\", {\n        children: \"See results\"\n      }), (0,jsx_runtime.jsx)(\"div\", {\n        children: (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-txt\",\n            children: \"intvec = ,  realvec= ,  realvec2= \\n---------,  ---------,  ----------\\n    1    ,    2.0000 ,    2.0000  \\n    2    ,    3.0000 ,    3.0000  \\n    3    ,   12.0000 ,   12.0000  \\n    4    ,    9.0000 ,    9.0000  \\n    5    ,    8.0000 ,    8.0000\\n\"\n          })\n        })\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"intvec = [ 5, 4, 3, 2, 1 ]\\nrealvec = [ 8, 9, 12, 3, 2 ]\\nrealvec2 = [ 8, 9, 12, 3, 2 ]\\ncall QuickSort( &\\n  & vect1=realvec, &\\n  & vect2=intvec, &\\n  & vect3=realvec2, &\\n  & low=1, &\\n  & high=SIZE(intvec) )\\ncall display( intvec, \\\"intvec = \\\", advance=\\\"NO\\\" )\\ncall display( realvec, \\\"realvec= \\\", advance=\\\"NO\\\" )\\ncall display( realvec2, \\\"realvec2= \\\", advance=\\\"YES\\\" )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Details, {\n      children: [(0,jsx_runtime.jsx)(\"summary\", {\n        children: \"See results\"\n      }), (0,jsx_runtime.jsx)(\"div\", {\n        children: (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-txt\",\n            children: \"intvec = ,  realvec= ,  realvec2= \\n---------,  ---------,  ----------\\n    1    ,    2.0000 ,    2.0000  \\n    2    ,    3.0000 ,    3.0000  \\n    5    ,    8.0000 ,    8.0000  \\n    4    ,    9.0000 ,    9.0000  \\n    3    ,   12.0000 ,   12.0000\\n\"\n          })\n        })\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"end program main\\n\"\n      })\n    })]\n  });\n}\nfunction _QuickSort_test_3_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_QuickSort_test_3_createMdxContent, {\n      ...props\n    })\n  }) : _QuickSort_test_3_createMdxContent(props);\n}\nfunction _QuickSort_test_3_missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n\n\n;// ./docs/docs-api/SortUtility/_QuickSort_test_4.md\n\n\nconst _QuickSort_test_4_frontMatter = {};\nconst _QuickSort_test_4_contentTitle = undefined;\n\n\n\n\n\nconst _QuickSort_test_4_toc = [];\nfunction _QuickSort_test_4_createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  }, {Details} = _components;\n  if (!Details) _QuickSort_test_4_missingMdxReference(\"Details\", true);\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"In this example we test \", (0,jsx_runtime.jsx)(_components.a, {\n        href: \"/docs-api/SortUtility/QuickSort\",\n        children: \"QuickSort\"\n      }), \" method.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        children: \"CALL QuickSort(v1,v2,v3,v4)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\nUSE easifemBase\\ninteger(i4b), allocatable :: i1(:),i2(:),i3(:), i4(:)\\nreal( dfp ), allocatable :: r1(:),r2(:),r3(:),r4(:)\\ninteger(i4b) :: first, last\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"i1 = [5,2,1,6,3,4]\\ni2 = i1\\ni3 = i1\\ni4 = i1\\nfirst=1; last=size(i1)\\ncall QuickSort(i1,i2,i3,i4,first,last)\\ncall display(i1, \\\"i1=\\\", orient=\\\"col\\\", advance=\\\"NO\\\")\\ncall display(i2, \\\"i2=\\\", orient=\\\"col\\\", advance=\\\"NO\\\")\\ncall display(i3, \\\"i3=\\\", orient=\\\"col\\\", advance=\\\"NO\\\")\\ncall display(i4, \\\"i4=\\\", orient=\\\"col\\\", advance=\\\"YES\\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Details, {\n      children: [(0,jsx_runtime.jsx)(\"summary\", {\n        children: \"See results\"\n      }), (0,jsx_runtime.jsx)(\"div\", {\n        children: (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-txt\",\n            children: \"i1=,  i2=,  i3=,  i4=\\n---,  ---,  ---,  ---\\n 1 ,   1 ,   1 ,   1 \\n 2 ,   2 ,   2 ,   2 \\n 3 ,   3 ,   3 ,   3 \\n 4 ,   4 ,   4 ,   4 \\n 5 ,   5 ,   5 ,   5 \\n 6 ,   6 ,   6 ,   6\\n\"\n          })\n        })\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"r4 = [1,2,3,2,2]\\ni1 = [0,1,0,0,0]\\ni2 = [0,0,1,0,0]\\ni3 = [0,0,0,1,1]\\nfirst=1; last=size(i1)\\ncall QuickSort(i1,i2,i3,r4,first,last)\\ncall blanklines(nol=2)\\ncall display( \\\"test-2\\\" )\\ncall display(i1, \\\"i1=\\\", orient=\\\"col\\\", advance=\\\"NO\\\")\\ncall display(i2, \\\"i2=\\\", orient=\\\"col\\\", advance=\\\"NO\\\")\\ncall display(i3, \\\"i3=\\\", orient=\\\"col\\\", advance=\\\"NO\\\")\\ncall display(r4, \\\"r4=\\\", orient=\\\"col\\\", advance=\\\"YES\\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Details, {\n      children: [(0,jsx_runtime.jsx)(\"summary\", {\n        children: \"See results\"\n      }), (0,jsx_runtime.jsx)(\"div\", {\n        children: (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-txt\",\n            children: \"i1=,  i2=,  i3=,    r4=  \\n---,  ---,  ---,  -------\\n 0 ,   0 ,   0 ,  1.00000\\n 0 ,   0 ,   1 ,  2.00000\\n 0 ,   1 ,   0 ,  3.00000\\n 0 ,   0 ,   1 ,  2.00000\\n 1 ,   0 ,   0 ,  2.00000\\n\"\n          })\n        })\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"END PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction _QuickSort_test_4_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_QuickSort_test_4_createMdxContent, {\n      ...props\n    })\n  }) : _QuickSort_test_4_createMdxContent(props);\n}\nfunction _QuickSort_test_4_missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n\n\n;// ./docs/docs-api/SortUtility/QuickSort.md\n\n\nconst QuickSort_frontMatter = {};\nconst QuickSort_contentTitle = 'QuickSort';\n\nconst assets = {\n\n};\n\n\n\n\n\n\n\n\n\nconst QuickSort_toc = [{\n  \"value\": \"Interface 1\",\n  \"id\": \"interface-1\",\n  \"level\": 2\n}, ...toc, {\n  \"value\": \"Interface 2\",\n  \"id\": \"interface-2\",\n  \"level\": 2\n}, ..._QuickSort_test_2_toc, {\n  \"value\": \"Interface 3\",\n  \"id\": \"interface-3\",\n  \"level\": 2\n}, ..._QuickSort_test_3_toc, {\n  \"value\": \"Interface 4\",\n  \"id\": \"interface-4\",\n  \"level\": 2\n}, ..._QuickSort_test_4_toc];\nfunction QuickSort_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    header: \"header\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.header, {\n      children: (0,jsx_runtime.jsx)(_components.h1, {\n        id: \"quicksort\",\n        children: \"QuickSort\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"QuickSort algorithm for sorting.\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"At present \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"QuickSort\"\n      }), \" generic method contains following interfaces.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL QuickSort(vec1, low, high)\\nCALL QuickSort(vec1, vect2, low, high)\\nCALL QuickSort(vec1, vect2, vect3, low, high)\\nCALL QuickSort(vect1, vect2, vect3, vect4, low, high)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-1\",\n      children: \"Interface 1\"\n    }), \"\\n\", \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ QuickSort(vect1, low, high)\",\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"MODULE RECURSIVE PURE SUBROUTINE QuickSort(vect1, low, high)\\n  Int8|Int16|Int32|Int64|Real32|Real64, INTENT(INOUT) :: vect1(:)\\n  INTEGER(I4B), INTENT(IN) :: low, high\\nEND SUBROUTINE QuickSort\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.p, {\n          children: [\"In this interface \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"vect1\"\n          }), \" can be a one dimensional fortran array of\"]\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"Int8\"\n            }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"Int16\"\n            }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"Int32\"\n            }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"Int64\"\n            })]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"Real32\"\n            }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"Real64\"\n            })]\n          }), \"\\n\"]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢\"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-2\",\n      children: \"Interface 2\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ QuickSort(vect1, vect2, low, high)\",\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE RECURSIVE PURE SUBROUTINE QuickSort(vect1, vect2, low, high)\\n    INTEGER( I4B )| REAL( DFP ) , DIMENSION(:), INTENT(INOUT) :: vect1\\n    INTEGER( I4B )| REAL( DFP ) , DIMENSION(:), INTENT(INOUT) :: vect2\\n    INTEGER(I4B), INTENT(IN) :: low, high\\n  END SUBROUTINE QuickSort\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.p, {\n          children: [\"In this interface \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"vect1\"\n          }), \" and \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"vect2\"\n          }), \" can be a one dimensional fortran array of\"]\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"Int32\"\n            }), \" or \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"I4B\"\n            }), \" 4 byte integers\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"Real(DFP)\"\n            }), \" default floating point, usually \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"Real64\"\n            })]\n          }), \"\\n\"]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_QuickSort_test_2_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢\"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-3\",\n      children: \"Interface 3\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ QuickSort(vect1, vect2, vect3, low, high)\",\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE PURE RECURSIVE SUBROUTINE QuickSort(vect1, vect2, vect3, &\\n    & low, high)\\n    INTEGER(I4B) | REAL(DFP), DIMENSION(:), INTENT(INOUT) :: vect3\\n    REAL(DFP) | INTEGER(I4B), DIMENSION(:), INTENT(INOUT) :: vect1, vect2\\n    INTEGER(I4B), INTENT(IN) :: low, high\\n  END SUBROUTINE QuickSort\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.p, {\n          children: [\"In this interface \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"vect1\"\n          }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"vect2\"\n          }), \", and \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"vect3\"\n          }), \" can be a one dimensional fortran array of\"]\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"Int32\"\n            }), \" or \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"I4B\"\n            }), \" 4 byte integers\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"Real(DFP)\"\n            }), \" default floating point, usually \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"Real64\"\n            })]\n          }), \"\\n\"]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_QuickSort_test_3_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢\"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-4\",\n      children: \"Interface 4\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ QuickSort(vect1, vect2, vect3, vect4, low, high)\",\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE PURE RECURSIVE SUBROUTINE QuickSort(vect1, vect2, vect3, &\\n      & vect4, low, high)\\n    INTEGER(I4B)| REAL( DFP ), DIMENSION(:), INTENT(INOUT) :: vect1, vect2, vect3, vect4\\n    INTEGER(I4B), INTENT(IN) :: low, high\\n  END SUBROUTINE QuickSort\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.p, {\n          children: [\"In this interface \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"vect1\"\n          }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"vect2\"\n          }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"vect3\"\n          }), \", and \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"vect4\"\n          }), \" can be a one dimensional fortran array of\"]\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"Int32\"\n            }), \" or \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"I4B\"\n            }), \" 4 byte integers\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"Real(DFP)\"\n            }), \" default floating point, usually \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"Real64\"\n            })]\n          }), \"\\n\"]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_QuickSort_test_4_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢\"\n      })]\n    })]\n  });\n}\nfunction QuickSort_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(QuickSort_createMdxContent, {\n      ...props\n    })\n  }) : QuickSort_createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./docs/docs-api/SortUtility/QuickSort.md\n");

/***/ })

}]);