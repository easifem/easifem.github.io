"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkeasifem_docs"] = globalThis["webpackChunkeasifem_docs"] || []).push([["content---docs-api-jacobi-polynomial-utility-jacobi-quadrature-360-075"],{

/***/ "./docs/docs-api/JacobiPolynomialUtility/JacobiQuadrature.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  assets: () => (/* binding */ assets),\n  contentTitle: () => (/* binding */ JacobiQuadrature_contentTitle),\n  \"default\": () => (/* binding */ JacobiQuadrature_MDXContent),\n  frontMatter: () => (/* binding */ JacobiQuadrature_frontMatter),\n  metadata: () => (/* reexport */ site_docs_docs_api_jacobi_polynomial_utility_jacobi_quadrature_md_360_namespaceObject),\n  toc: () => (/* binding */ JacobiQuadrature_toc)\n});\n\n;// ./.docusaurus/docusaurus-plugin-content-docs/docs-api/site-docs-docs-api-jacobi-polynomial-utility-jacobi-quadrature-md-360.json\nconst site_docs_docs_api_jacobi_polynomial_utility_jacobi_quadrature_md_360_namespaceObject = /*#__PURE__*/JSON.parse('{\"id\":\"JacobiPolynomialUtility/JacobiQuadrature\",\"title\":\"JacobiQuadrature\",\"description\":\"This routine returns the Quadrature point of Jacobi polynomial.\",\"source\":\"@site/docs/docs-api/JacobiPolynomialUtility/JacobiQuadrature.md\",\"sourceDirName\":\"JacobiPolynomialUtility\",\"slug\":\"/JacobiPolynomialUtility/JacobiQuadrature\",\"permalink\":\"/docs-api/JacobiPolynomialUtility/JacobiQuadrature\",\"draft\":false,\"unlisted\":false,\"editUrl\":\"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/JacobiPolynomialUtility/JacobiQuadrature.md\",\"tags\":[],\"version\":\"current\",\"lastUpdatedAt\":1539502055000,\"frontMatter\":{},\"sidebar\":\"tutorialSidebar\",\"previous\":{\"title\":\"JacobiNormSQRRatio\",\"permalink\":\"/docs-api/JacobiPolynomialUtility/JacobiNormSQRRatio\"},\"next\":{\"title\":\"JacobiTransform\",\"permalink\":\"/docs-api/JacobiPolynomialUtility/JacobiTransform\"}}');\n// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n// EXTERNAL MODULE: ./node_modules/@mdx-js/react/lib/index.js\nvar lib = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js + 2 modules\nvar Tabs = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js + 1 modules\nvar TabItem = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js\");\n;// ./docs/docs-api/JacobiPolynomialUtility/_JacobiQuadrature_test_1.md\n\n\nconst frontMatter = {};\nconst contentTitle = undefined;\n\n\n\n\n\nconst toc = [];\nfunction _createMdxContent(props) {\n  const _components = {\n    annotation: \"annotation\",\n    blockquote: \"blockquote\",\n    code: \"code\",\n    math: \"math\",\n    mi: \"mi\",\n    mn: \"mn\",\n    mo: \"mo\",\n    mrow: \"mrow\",\n    p: \"p\",\n    pre: \"pre\",\n    semantics: \"semantics\",\n    span: \"span\",\n    table: \"table\",\n    tbody: \"tbody\",\n    td: \"td\",\n    th: \"th\",\n    thead: \"thead\",\n    tr: \"tr\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  }, {Details} = _components;\n  if (!Details) _missingMdxReference(\"Details\", true);\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"This example shows the usage of \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"JacobiQuadrature\"\n      }), \" method which is defined in [[JacobiPolynomialUtility]] MODULE. This routine returns the quadrature points for Jacobi weights.\"]\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.blockquote, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n        children: [\"In this example \", (0,jsx_runtime.jsxs)(_components.span, {\n          className: \"katex\",\n          children: [(0,jsx_runtime.jsx)(_components.span, {\n            className: \"katex-mathml\",\n            children: (0,jsx_runtime.jsx)(_components.math, {\n              xmlns: \"http://www.w3.org/1998/Math/MathML\",\n              children: (0,jsx_runtime.jsxs)(_components.semantics, {\n                children: [(0,jsx_runtime.jsxs)(_components.mrow, {\n                  children: [(0,jsx_runtime.jsx)(_components.mi, {\n                    children: \"α\"\n                  }), (0,jsx_runtime.jsx)(_components.mo, {\n                    children: \"=\"\n                  }), (0,jsx_runtime.jsx)(_components.mi, {\n                    children: \"β\"\n                  }), (0,jsx_runtime.jsx)(_components.mo, {\n                    children: \"=\"\n                  }), (0,jsx_runtime.jsx)(_components.mn, {\n                    children: \"0.0\"\n                  })]\n                }), (0,jsx_runtime.jsx)(_components.annotation, {\n                  encoding: \"application/x-tex\",\n                  children: \"\\\\alpha=\\\\beta=0.0\"\n                })]\n              })\n            })\n          }), (0,jsx_runtime.jsxs)(_components.span, {\n            className: \"katex-html\",\n            \"aria-hidden\": \"true\",\n            children: [(0,jsx_runtime.jsxs)(_components.span, {\n              className: \"base\",\n              children: [(0,jsx_runtime.jsx)(_components.span, {\n                className: \"strut\",\n                style: {\n                  height: \"0.4306em\"\n                }\n              }), (0,jsx_runtime.jsx)(_components.span, {\n                className: \"mord mathnormal\",\n                style: {\n                  marginRight: \"0.0037em\"\n                },\n                children: \"α\"\n              }), (0,jsx_runtime.jsx)(_components.span, {\n                className: \"mspace\",\n                style: {\n                  marginRight: \"0.2778em\"\n                }\n              }), (0,jsx_runtime.jsx)(_components.span, {\n                className: \"mrel\",\n                children: \"=\"\n              }), (0,jsx_runtime.jsx)(_components.span, {\n                className: \"mspace\",\n                style: {\n                  marginRight: \"0.2778em\"\n                }\n              })]\n            }), (0,jsx_runtime.jsxs)(_components.span, {\n              className: \"base\",\n              children: [(0,jsx_runtime.jsx)(_components.span, {\n                className: \"strut\",\n                style: {\n                  height: \"0.8889em\",\n                  verticalAlign: \"-0.1944em\"\n                }\n              }), (0,jsx_runtime.jsx)(_components.span, {\n                className: \"mord mathnormal\",\n                style: {\n                  marginRight: \"0.05278em\"\n                },\n                children: \"β\"\n              }), (0,jsx_runtime.jsx)(_components.span, {\n                className: \"mspace\",\n                style: {\n                  marginRight: \"0.2778em\"\n                }\n              }), (0,jsx_runtime.jsx)(_components.span, {\n                className: \"mrel\",\n                children: \"=\"\n              }), (0,jsx_runtime.jsx)(_components.span, {\n                className: \"mspace\",\n                style: {\n                  marginRight: \"0.2778em\"\n                }\n              })]\n            }), (0,jsx_runtime.jsxs)(_components.span, {\n              className: \"base\",\n              children: [(0,jsx_runtime.jsx)(_components.span, {\n                className: \"strut\",\n                style: {\n                  height: \"0.6444em\"\n                }\n              }), (0,jsx_runtime.jsx)(_components.span, {\n                className: \"mord\",\n                children: \"0.0\"\n              })]\n            })]\n          })]\n        }), \" (that is, Legendre polynomial)\\nBy using this subroutine we can get Jacobi-Gauss, Jacobi-Gauss-Radau, Jacobi-Gauss-Lobatto quadrature points\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"program main\\n  use easifembase\\n  implicit none\\n  integer( i4b ) :: n, quadType\\n  real( dfp ), allocatable :: pt( : ), wt( : )\\n  real( dfp ), parameter :: alpha=0.0_DFP, beta=0.0_DFP\\n  type(string) :: msg, astr\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title \\\"Jacobi-Gauss\\\"\",\n        children: \"n = 2; quadType=Gauss; call callme\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Details, {\n      children: [(0,jsx_runtime.jsx)(\"summary\", {\n        children: \"See results\"\n      }), (0,jsx_runtime.jsx)(\"div\", {\n        children: (0,jsx_runtime.jsxs)(_components.table, {\n          children: [(0,jsx_runtime.jsx)(_components.thead, {\n            children: (0,jsx_runtime.jsxs)(_components.tr, {\n              children: [(0,jsx_runtime.jsx)(_components.th, {\n                children: \"pt\"\n              }), (0,jsx_runtime.jsx)(_components.th, {\n                children: \"wt\"\n              })]\n            })\n          }), (0,jsx_runtime.jsxs)(_components.tbody, {\n            children: [(0,jsx_runtime.jsxs)(_components.tr, {\n              children: [(0,jsx_runtime.jsx)(_components.td, {\n                children: \"-0.57735\"\n              }), (0,jsx_runtime.jsx)(_components.td, {\n                children: \"1\"\n              })]\n            }), (0,jsx_runtime.jsxs)(_components.tr, {\n              children: [(0,jsx_runtime.jsx)(_components.td, {\n                children: \"0.57735\"\n              }), (0,jsx_runtime.jsx)(_components.td, {\n                children: \"1\"\n              })]\n            })]\n          })]\n        })\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title \\\"Jacobi-Radau-Left\\\"\",\n        children: \"n = 3; quadType=GaussRadauLeft; call callme\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"| pt      | wt      |\\n|---------|---------|\\n| -1      | 0.22222 |\\n| -0.2899 | 1.025   |\\n| 0.6899  | 0.75281 |\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title \\\"Jacobi-Radau-Right\\\"\",\n        children: \"n = 3; quadType=GaussRadauRight; call callme\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Details, {\n      children: [(0,jsx_runtime.jsx)(\"summary\", {\n        children: \"See results\"\n      }), (0,jsx_runtime.jsx)(\"div\", {\n        children: (0,jsx_runtime.jsxs)(_components.table, {\n          children: [(0,jsx_runtime.jsx)(_components.thead, {\n            children: (0,jsx_runtime.jsxs)(_components.tr, {\n              children: [(0,jsx_runtime.jsx)(_components.th, {\n                children: \"pt\"\n              }), (0,jsx_runtime.jsx)(_components.th, {\n                children: \"wt\"\n              })]\n            })\n          }), (0,jsx_runtime.jsxs)(_components.tbody, {\n            children: [(0,jsx_runtime.jsxs)(_components.tr, {\n              children: [(0,jsx_runtime.jsx)(_components.td, {\n                children: \"-0.6899\"\n              }), (0,jsx_runtime.jsx)(_components.td, {\n                children: \"0.75281\"\n              })]\n            }), (0,jsx_runtime.jsxs)(_components.tr, {\n              children: [(0,jsx_runtime.jsx)(_components.td, {\n                children: \"0.2899\"\n              }), (0,jsx_runtime.jsx)(_components.td, {\n                children: \"1.025\"\n              })]\n            }), (0,jsx_runtime.jsxs)(_components.tr, {\n              children: [(0,jsx_runtime.jsx)(_components.td, {\n                children: \"1\"\n              }), (0,jsx_runtime.jsx)(_components.td, {\n                children: \"0.22222\"\n              })]\n            })]\n          })]\n        })\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title \\\"Jacobi-Lobatto\\\"\",\n        children: \"n = 4; quadType=GaussLobatto; call callme\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Details, {\n      children: [(0,jsx_runtime.jsx)(\"summary\", {\n        children: \"See results\"\n      }), (0,jsx_runtime.jsx)(\"div\", {\n        children: (0,jsx_runtime.jsxs)(_components.table, {\n          children: [(0,jsx_runtime.jsx)(_components.thead, {\n            children: (0,jsx_runtime.jsxs)(_components.tr, {\n              children: [(0,jsx_runtime.jsx)(_components.th, {\n                children: \"pt\"\n              }), (0,jsx_runtime.jsx)(_components.th, {\n                children: \"wt\"\n              })]\n            })\n          }), (0,jsx_runtime.jsxs)(_components.tbody, {\n            children: [(0,jsx_runtime.jsxs)(_components.tr, {\n              children: [(0,jsx_runtime.jsx)(_components.td, {\n                children: \"-1\"\n              }), (0,jsx_runtime.jsx)(_components.td, {\n                children: \"0.16667\"\n              })]\n            }), (0,jsx_runtime.jsxs)(_components.tr, {\n              children: [(0,jsx_runtime.jsx)(_components.td, {\n                children: \"-0.44721\"\n              }), (0,jsx_runtime.jsx)(_components.td, {\n                children: \"0.83333\"\n              })]\n            }), (0,jsx_runtime.jsxs)(_components.tr, {\n              children: [(0,jsx_runtime.jsx)(_components.td, {\n                children: \"0.44721\"\n              }), (0,jsx_runtime.jsx)(_components.td, {\n                children: \"0.83333\"\n              })]\n            }), (0,jsx_runtime.jsxs)(_components.tr, {\n              children: [(0,jsx_runtime.jsx)(_components.td, {\n                children: \"1\"\n              }), (0,jsx_runtime.jsx)(_components.td, {\n                children: \"0.16667\"\n              })]\n            })]\n          })]\n        })\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"contains\\nsubroutine callme\\n  call reallocate( pt, n, wt, n )\\n  call JacobiQuadrature( n=n, alpha=alpha, beta=beta, pt=pt, wt=wt, &\\n    & quadType=quadType )\\n  msg = \\\"| pt | wt |\\\"\\n  call display(msg%chars())\\n  astr = MdEncode( pt .COLCONCAT. wt )\\n  call display( astr%chars(), \\\"\\\" )\\nend subroutine callme\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"end program main\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n\n\n;// ./docs/docs-api/JacobiPolynomialUtility/JacobiQuadrature.md\n\n\nconst JacobiQuadrature_frontMatter = {};\nconst JacobiQuadrature_contentTitle = 'JacobiQuadrature';\n\nconst assets = {\n\n};\n\n\n\n\n\n\nconst JacobiQuadrature_toc = [{\n  \"value\": \"Interface\",\n  \"id\": \"interface\",\n  \"level\": 2\n}, {\n  \"value\": \"Examples\",\n  \"id\": \"examples\",\n  \"level\": 2\n}, ...toc];\nfunction JacobiQuadrature_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    header: \"header\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.header, {\n      children: (0,jsx_runtime.jsx)(_components.h1, {\n        id: \"jacobiquadrature\",\n        children: \"JacobiQuadrature\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This routine returns the Quadrature point of Jacobi polynomial.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Here n is the number of quadrature points. Please note it is not\\nthe order of jacobi polynomial. The order is decided internally\\ndepending upon the quadType\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [(0,jsx_runtime.jsx)(_components.code, {\n        children: \"pt\"\n      }), \" and \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"wt\"\n      }), \" should be allocated outside, and length should be n.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface\",\n      children: \"Interface\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n  MODULE SUBROUTINE JacobiQuadrature(n, alpha, beta, pt, wt, quadType)\\n    INTEGER(I4B), INTENT(IN) :: n\\n    !! number of quadrature points, the order will be computed as follows\\n    !! for quadType = Gauss, n is same as order of Jacobi polynomial\\n    !! for quadType = GaussRadauLeft or GaussRadauRight n is order+1\\n    !! for quadType = GaussLobatto, n = order+2\\n    REAL(DFP), INTENT(IN) :: alpha\\n    !! alpha of Jacobi polynomial\\n    REAL(DFP), INTENT(IN) :: beta\\n    !! beta of Jacobi polynomial\\n    REAL(DFP), INTENT(OUT) :: pt(n)\\n    !! n+1 quadrature points from 1 to n+1\\n    REAL(DFP), INTENT(OUT) :: wt(n)\\n    !! n+1 weights from 1 to n+1\\n    INTEGER(I4B), INTENT(IN) :: quadType\\n    !! Gauss\\n    !! GaussRadauLeft\\n    !! GaussRadauRight\\n    !! GaussLobatto\\n  END SUBROUTINE JacobiQuadrature\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"examples\",\n      children: \"Examples\"\n    }), \"\\n\", \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \",\n        default: true\n      })]\n    })]\n  });\n}\nfunction JacobiQuadrature_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(JacobiQuadrature_createMdxContent, {\n      ...props\n    })\n  }) : JacobiQuadrature_createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./docs/docs-api/JacobiPolynomialUtility/JacobiQuadrature.md\n");

/***/ })

}]);