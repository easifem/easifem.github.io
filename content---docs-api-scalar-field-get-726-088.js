"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkeasifem_docs"] = globalThis["webpackChunkeasifem_docs"] || []).push([["content---docs-api-scalar-field-get-726-088"],{

/***/ "./docs/docs-api/ScalarField/Get.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  assets: () => (/* binding */ assets),\n  contentTitle: () => (/* binding */ Get_contentTitle),\n  \"default\": () => (/* binding */ Get_MDXContent),\n  frontMatter: () => (/* binding */ Get_frontMatter),\n  metadata: () => (/* reexport */ site_docs_docs_api_scalar_field_get_md_726_namespaceObject),\n  toc: () => (/* binding */ Get_toc)\n});\n\n;// ./.docusaurus/docusaurus-plugin-content-docs/docs-api/site-docs-docs-api-scalar-field-get-md-726.json\nconst site_docs_docs_api_scalar_field_get_md_726_namespaceObject = /*#__PURE__*/JSON.parse('{\"id\":\"ScalarField/Get\",\"title\":\"Get\",\"description\":\"Get the entries from scalar field.\",\"source\":\"@site/docs/docs-api/ScalarField/Get.md\",\"sourceDirName\":\"ScalarField\",\"slug\":\"/ScalarField/Get\",\"permalink\":\"/docs-api/ScalarField/Get\",\"draft\":false,\"unlisted\":false,\"editUrl\":\"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/ScalarField/Get.md\",\"tags\":[],\"version\":\"current\",\"lastUpdatedAt\":1539502055000,\"frontMatter\":{},\"sidebar\":\"tutorialSidebar\",\"previous\":{\"title\":\"Export\",\"permalink\":\"/docs-api/ScalarField/Export\"},\"next\":{\"title\":\"GetPointer\",\"permalink\":\"/docs-api/ScalarField/GetPointer\"}}');\n// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n// EXTERNAL MODULE: ./node_modules/@mdx-js/react/lib/index.js\nvar lib = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n;// ./docs/docs-api/ScalarField/examples/_ScalarField_test_11.md\n\n\nconst frontMatter = {};\nconst contentTitle = undefined;\n\n\n\n\n\nconst toc = [];\nfunction _createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n  USE easifemBase\\n  USE easifemClasses\\n  TYPE( Domain_ ) :: dom\\n  TYPE( ScalarField_ ) :: obj\\n  TYPE( HDF5File_ ) :: meshfile, resultFile\\n  TYPE( ParameterList_ ) :: param\\n  INTEGER( I4B ) :: ierr\\n  REAL( DFP ), ALLOCATABLE :: realVec( : )\\n  REAL( DFP ) :: avar\\n  CHARACTER( LEN = * ), PARAMETER :: engine = \\\"NATIVE_SERIAL\\\"\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Open file for import\\\"\",\n        children: \"CALL FPL_INIT()\\nCALL param%initiate()\\nCALL resultFile%initiate( filename=\\\"./result.h5\\\", mode=\\\"READ\\\" )\\nCALL resultFile%open()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"read domain\\\"\",\n        children: \"!> start creating domain\\nCALL meshfile%initiate( filename=\\\"./mesh.h5\\\", mode=\\\"READ\\\" )\\nCALL meshfile%open()\\nCALL dom%initiate( hdf5=meshfile, group=\\\"\\\" )\\n!> end creating domain\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"initiate scalar field\\\"\",\n        children: \"CALL SetScalarFieldParam( param=param, &\\n  & fieldType=FIELD_TYPE_NORMAL, &\\n  & name=\\\"U\\\", &\\n  & engine=engine)\\nCALL obj%initiate( param, dom )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"setting all values using vector\\\"\",\n        children: \"CALL reallocate( realVec, dom%getTotalNodes() )\\nCALL RANDOM_NUMBER( realVec )\\nCALL obj%set(realVec)\\nCALL obj%display( \\\"scalar field = \\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"#scalar field =\\n# isInitiated : TRUE\\n# name :U\\n# fieldType : NORMAL\\n# engine :NATIVE_SERIAL\\n# comm: 0\\n# myRank: 0\\n# numProcs: 1\\n# global_n: 0\\n# local_n: 0\\n# is: 0\\n# ie: 0\\n# lis_ptr: 0\\n# domain : ASSOCIATED\\n# domains : NOT ALLOCATED\\n# tSize : 102\\n# # DOF data :\\n# Total Physical Variables :1\\n# Name : U\\n# Space Components : 1\\n# Time Components : 1\\n# Total Nodes : 102\\n# Storage Format : Nodes\\n# Value Map : \\n--------------\\n       1      \\n     103      \\n# VAR :U\\n  DOF-1 ,   \\n--------,   \\n0.725701,   \\n0.634809,   \\n0.398595,   \\n0.418203,   \\n0.195654,   \\n0.874868,\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL obj%get( value=avar, globalNode=2)\\nCALL Display(avar, \\\"avar = \\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"avar = 0.634809\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Cleanup\\\"\",\n        children: \"  CALL obj%Deallocate(); CALL dom%Deallocate()\\n  CALL meshfile%Deallocate()\\n  CALL resultFile%Deallocate()\\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\\n  if(allocated(realVec) ) deallocate(realVec)\\nEND PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/ScalarField/examples/_ScalarField_test_12.md\n\n\nconst _ScalarField_test_12_frontMatter = {};\nconst _ScalarField_test_12_contentTitle = undefined;\n\n\n\n\n\nconst _ScalarField_test_12_toc = [];\nfunction _ScalarField_test_12_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n  USE easifemBase\\n  USE easifemClasses\\n  TYPE( Domain_ ) :: dom\\n  TYPE( ScalarField_ ) :: obj\\n  TYPE( HDF5File_ ) :: meshfile, resultFile\\n  TYPE( ParameterList_ ) :: param\\n  INTEGER( I4B ) :: ierr\\n  REAL( DFP ), ALLOCATABLE :: realVec( : )\\n  REAL( DFP ) :: avar\\n  CHARACTER( LEN = * ), PARAMETER :: engine = \\\"NATIVE_SERIAL\\\"\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Open file for import\\\"\",\n        children: \"CALL FPL_INIT()\\nCALL param%initiate()\\nCALL resultFile%initiate( filename=\\\"./result.h5\\\", mode=\\\"READ\\\" )\\nCALL resultFile%open()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"read domain\\\"\",\n        children: \"!> start creating domain\\nCALL meshfile%initiate( filename=\\\"./mesh.h5\\\", mode=\\\"READ\\\" )\\nCALL meshfile%open()\\nCALL dom%initiate( hdf5=meshfile, group=\\\"\\\" )\\n!> end creating domain\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"initiate scalar field\\\"\",\n        children: \"CALL SetScalarFieldParam( param=param, &\\n  & fieldType=FIELD_TYPE_NORMAL, &\\n  & name=\\\"U\\\", &\\n  & engine=engine)\\nCALL obj%initiate( param, dom )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"setting all values using vector\\\"\",\n        children: \"CALL reallocate( realVec, dom%getTotalNodes() )\\nCALL RANDOM_NUMBER( realVec )\\nCALL obj%set(realVec)\\nCALL obj%display( \\\"scalar field = \\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"#scalar field =\\n# isInitiated : TRUE\\n# name :U\\n# fieldType : NORMAL\\n# engine :NATIVE_SERIAL\\n# comm: 0\\n# myRank: 0\\n# numProcs: 1\\n# global_n: 0\\n# local_n: 0\\n# is: 0\\n# ie: 0\\n# lis_ptr: 0\\n# domain : ASSOCIATED\\n# domains : NOT ALLOCATED\\n# tSize : 102\\n# # DOF data :\\n# Total Physical Variables :1\\n# Name : U\\n# Space Components : 1\\n# Time Components : 1\\n# Total Nodes : 102\\n# Storage Format : Nodes\\n# Value Map : \\n--------------\\n       1      \\n     103      \\n# VAR :U\\n  DOF-1 ,   \\n--------,   \\n0.829034,   \\n0.103488,   \\n0.686197,   \\n0.979929,   \\n0.115532,   \\n0.829484,   \\n0.007732,\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Get all entries\\\"\",\n        children: \"CALL obj%get( value=realVec)\\nCALL Display(realVec(1:5), \\\"realVec(1:5) = \\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"realVec(1:5) = \\n---------------\\n   0.829034    \\n   0.103488    \\n   0.686197    \\n   0.979929    \\n   0.115532\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Cleanup\\\"\",\n        children: \"  CALL obj%Deallocate(); CALL dom%Deallocate()\\n  CALL meshfile%Deallocate()\\n  CALL resultFile%Deallocate()\\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\\n  if(allocated(realVec) ) deallocate(realVec)\\nEND PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction _ScalarField_test_12_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_ScalarField_test_12_createMdxContent, {\n      ...props\n    })\n  }) : _ScalarField_test_12_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/ScalarField/examples/_ScalarField_test_13.md\n\n\nconst _ScalarField_test_13_frontMatter = {};\nconst _ScalarField_test_13_contentTitle = undefined;\n\n\n\n\n\nconst _ScalarField_test_13_toc = [];\nfunction _ScalarField_test_13_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n  USE easifemBase\\n  USE easifemClasses\\n  TYPE( Domain_ ) :: dom\\n  TYPE( ScalarField_ ) :: obj\\n  TYPE( HDF5File_ ) :: meshfile, resultFile\\n  TYPE( ParameterList_ ) :: param\\n  INTEGER( I4B ) :: ierr\\n  REAL( DFP ), ALLOCATABLE :: realVec( : )\\n  REAL( DFP ) :: avar\\n  CHARACTER( LEN = * ), PARAMETER :: engine = \\\"NATIVE_SERIAL\\\"\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Open file for import\\\"\",\n        children: \"CALL FPL_INIT()\\nCALL param%initiate()\\nCALL resultFile%initiate( filename=\\\"./result.h5\\\", mode=\\\"READ\\\" )\\nCALL resultFile%open()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"read domain\\\"\",\n        children: \"!> start creating domain\\nCALL meshfile%initiate( filename=\\\"./mesh.h5\\\", mode=\\\"READ\\\" )\\nCALL meshfile%open()\\nCALL dom%initiate( hdf5=meshfile, group=\\\"\\\" )\\n!> end creating domain\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"initiate scalar field\\\"\",\n        children: \"CALL SetScalarFieldParam( param=param, &\\n  & fieldType=FIELD_TYPE_NORMAL, &\\n  & name=\\\"U\\\", &\\n  & engine=engine)\\nCALL obj%initiate( param, dom )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"setting all values using vector\\\"\",\n        children: \"CALL reallocate( realVec, dom%getTotalNodes() )\\nCALL RANDOM_NUMBER( realVec )\\nCALL obj%set(realVec)\\nCALL obj%display( \\\"scalar field = \\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"#scalar field =\\n# isInitiated : TRUE\\n# name :U\\n# fieldType : NORMAL\\n# engine :NATIVE_SERIAL\\n# comm: 0\\n# myRank: 0\\n# numProcs: 1\\n# global_n: 0\\n# local_n: 0\\n# is: 0\\n# ie: 0\\n# lis_ptr: 0\\n# domain : ASSOCIATED\\n# domains : NOT ALLOCATED\\n# tSize : 102\\n# # DOF data :\\n# Total Physical Variables :1\\n# Name : U\\n# Space Components : 1\\n# Time Components : 1\\n# Total Nodes : 102\\n# Storage Format : Nodes\\n# Value Map : \\n--------------\\n       1      \\n     103      \\n# VAR :U\\n  DOF-1 ,   \\n--------,   \\n0.832033,   \\n0.745878,   \\n0.844285,   \\n0.691231,   \\n0.996872,   \\n0.347315,   \\n0.827425,   \\n0.263551,\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Get multiple entries\\\"\",\n        children: \"CALL obj%get( value=realVec, globalNode=[1,2,3,4,5])\\nCALL Display(realVec(1:5), \\\"realVec(1:5) = \\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"realVec(1:5) = \\n---------------\\n   0.832033    \\n   0.745878    \\n   0.844285    \\n   0.691231    \\n   0.996872\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Cleanup\\\"\",\n        children: \"  CALL obj%Deallocate(); CALL dom%Deallocate()\\n  CALL meshfile%Deallocate()\\n  CALL resultFile%Deallocate()\\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\\n  if(allocated(realVec) ) deallocate(realVec)\\nEND PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction _ScalarField_test_13_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_ScalarField_test_13_createMdxContent, {\n      ...props\n    })\n  }) : _ScalarField_test_13_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/ScalarField/examples/_ScalarField_test_14.md\n\n\nconst _ScalarField_test_14_frontMatter = {};\nconst _ScalarField_test_14_contentTitle = undefined;\n\n\n\n\n\nconst _ScalarField_test_14_toc = [];\nfunction _ScalarField_test_14_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n  USE easifemBase\\n  USE easifemClasses\\n  TYPE( Domain_ ) :: dom\\n  TYPE( ScalarField_ ) :: obj\\n  TYPE( HDF5File_ ) :: meshfile, resultFile\\n  TYPE( ParameterList_ ) :: param\\n  INTEGER( I4B ) :: ierr\\n  REAL( DFP ), ALLOCATABLE :: realVec( : )\\n  REAL( DFP ) :: avar\\n  CHARACTER( LEN = * ), PARAMETER :: engine = \\\"NATIVE_SERIAL\\\"\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Open file for import\\\"\",\n        children: \"CALL FPL_INIT()\\nCALL param%initiate()\\nCALL resultFile%initiate( filename=\\\"./result.h5\\\", mode=\\\"READ\\\" )\\nCALL resultFile%open()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"read domain\\\"\",\n        children: \"!> start creating domain\\nCALL meshfile%initiate( filename=\\\"./mesh.h5\\\", mode=\\\"READ\\\" )\\nCALL meshfile%open()\\nCALL dom%initiate( hdf5=meshfile, group=\\\"\\\" )\\n!> end creating domain\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"initiate scalar field\\\"\",\n        children: \"CALL SetScalarFieldParam( param=param, &\\n  & fieldType=FIELD_TYPE_NORMAL, &\\n  & name=\\\"U\\\", &\\n  & engine=engine)\\nCALL obj%initiate( param, dom )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"setting all values using vector\\\"\",\n        children: \"CALL reallocate( realVec, dom%getTotalNodes() )\\nCALL RANDOM_NUMBER( realVec )\\nCALL obj%set(realVec)\\nCALL obj%display( \\\"scalar field = \\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"#scalar field =\\n# isInitiated : TRUE\\n# name :U\\n# fieldType : NORMAL\\n# engine :NATIVE_SERIAL\\n# comm: 0\\n# myRank: 0\\n# numProcs: 1\\n# global_n: 0\\n# local_n: 0\\n# is: 0\\n# ie: 0\\n# lis_ptr: 0\\n# domain : ASSOCIATED\\n# domains : NOT ALLOCATED\\n# tSize : 102\\n# # DOF data :\\n# Total Physical Variables :1\\n# Name : U\\n# Space Components : 1\\n# Time Components : 1\\n# Total Nodes : 102\\n# Storage Format : Nodes\\n# Value Map : \\n--------------\\n       1      \\n     103      \\n# VAR :U\\n  DOF-1 ,   \\n--------,   \\n0.965852,   \\n0.106486,   \\n0.227661,   \\n0.278568,   \\n0.979695,   \\n0.156565,   \\n0.007468,\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Get multiple entries\\\"\",\n        children: \"CALL obj%get( value=realVec, istart=1, iend=5, stride=1)\\nCALL Display(realVec(1:5), \\\"realVec(1:5) = \\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"realVec(1:5) = \\n---------------\\n   0.965852    \\n   0.106486    \\n   0.227661    \\n   0.278568    \\n   0.979695\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Cleanup\\\"\",\n        children: \"  CALL obj%Deallocate(); CALL dom%Deallocate()\\n  CALL meshfile%Deallocate()\\n  CALL resultFile%Deallocate()\\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\\n  if(allocated(realVec) ) deallocate(realVec)\\nEND PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction _ScalarField_test_14_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_ScalarField_test_14_createMdxContent, {\n      ...props\n    })\n  }) : _ScalarField_test_14_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/ScalarField/examples/_ScalarField_test_15.md\n\n\nconst _ScalarField_test_15_frontMatter = {};\nconst _ScalarField_test_15_contentTitle = undefined;\n\n\n\n\n\nconst _ScalarField_test_15_toc = [];\nfunction _ScalarField_test_15_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n  USE easifemBase\\n  USE easifemClasses\\n  TYPE( Domain_ ) :: dom\\n  TYPE( ScalarField_ ) :: obj\\n  TYPE( HDF5File_ ) :: meshfile, resultFile\\n  TYPE( ParameterList_ ) :: param\\n  INTEGER( I4B ) :: ierr\\n  REAL( DFP ), ALLOCATABLE :: realVec( : )\\n  REAL( DFP ) :: avar\\n  CHARACTER( LEN = * ), PARAMETER :: engine = \\\"NATIVE_SERIAL\\\"\\n  TYPE(FEVariable_) :: fevar\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Open file for import\\\"\",\n        children: \"CALL FPL_INIT()\\nCALL param%initiate()\\nCALL resultFile%initiate( filename=\\\"./result.h5\\\", mode=\\\"READ\\\" )\\nCALL resultFile%open()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"read domain\\\"\",\n        children: \"!> start creating domain\\nCALL meshfile%initiate( filename=\\\"./mesh.h5\\\", mode=\\\"READ\\\" )\\nCALL meshfile%open()\\nCALL dom%initiate( hdf5=meshfile, group=\\\"\\\" )\\n!> end creating domain\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"initiate scalar field\\\"\",\n        children: \"CALL SetScalarFieldParam( param=param, &\\n  & fieldType=FIELD_TYPE_NORMAL, &\\n  & name=\\\"U\\\", &\\n  & engine=engine)\\nCALL obj%initiate( param, dom )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"setting all values using vector\\\"\",\n        children: \"CALL reallocate( realVec, dom%getTotalNodes() )\\nCALL RANDOM_NUMBER( realVec )\\nCALL obj%set(realVec)\\nCALL obj%display( \\\"scalar field = \\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"#scalar field =\\n# isInitiated : TRUE\\n# name :U\\n# fieldType : NORMAL\\n# engine :NATIVE_SERIAL\\n# comm: 0\\n# myRank: 0\\n# numProcs: 1\\n# global_n: 0\\n# local_n: 0\\n# is: 0\\n# ie: 0\\n# lis_ptr: 0\\n# domain : ASSOCIATED\\n# domains : NOT ALLOCATED\\n# tSize : 102\\n# # DOF data :\\n# Total Physical Variables :1\\n# Name : U\\n# Space Components : 1\\n# Time Components : 1\\n# Total Nodes : 102\\n# Storage Format : Nodes\\n# Value Map : \\n--------------\\n       1      \\n     103      \\n# VAR :U\\n  DOF-1 ,   \\n--------,   \\n0.623683,   \\n0.370695,   \\n0.967630,   \\n0.835710,   \\n0.821063,   \\n0.613570,\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Get multiple entries\\\"\",\n        children: \"CALL obj%get( value=fevar, globalNode=arange(1,5,1) )\\nCALL Display(fevar, \\\"fevar = \\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"fevar = \\n# RANK :: 0 (SCALAR)\\n# VarType: SPACE\\n# VALUE: \\n---------\\n0.623683 \\n0.370695 \\n0.967630 \\n0.835710 \\n0.821063\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Cleanup\\\"\",\n        children: \"  CALL obj%Deallocate(); CALL dom%Deallocate()\\n  CALL meshfile%Deallocate()\\n  CALL resultFile%Deallocate()\\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\\n  if(allocated(realVec) ) deallocate(realVec)\\nEND PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction _ScalarField_test_15_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_ScalarField_test_15_createMdxContent, {\n      ...props\n    })\n  }) : _ScalarField_test_15_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/ScalarField/Get.md\n\n\nconst Get_frontMatter = {};\nconst Get_contentTitle = 'Get';\n\nconst assets = {\n\n};\n\n\n\n\n\n\n\n\nconst Get_toc = [{\n  \"value\": \"Interface 1\",\n  \"id\": \"interface-1\",\n  \"level\": 2\n}, ...toc, {\n  \"value\": \"Interface 2\",\n  \"id\": \"interface-2\",\n  \"level\": 2\n}, ..._ScalarField_test_12_toc, {\n  \"value\": \"Interface 3\",\n  \"id\": \"interface-3\",\n  \"level\": 2\n}, ..._ScalarField_test_13_toc, {\n  \"value\": \"Interface 4\",\n  \"id\": \"interface-4\",\n  \"level\": 2\n}, ..._ScalarField_test_14_toc, {\n  \"value\": \"Interface 5\",\n  \"id\": \"interface-5\",\n  \"level\": 2\n}, ..._ScalarField_test_15_toc, {\n  \"value\": \"Interface 6\",\n  \"id\": \"interface-6\",\n  \"level\": 2\n}];\nfunction Get_createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    header: \"header\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  }, {TabItem, Tabs} = _components;\n  if (!TabItem) _missingMdxReference(\"TabItem\", true);\n  if (!Tabs) _missingMdxReference(\"Tabs\", true);\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.header, {\n      children: (0,jsx_runtime.jsx)(_components.h1, {\n        id: \"get\",\n        children: \"Get\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Get the entries from scalar field.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Calling examples:\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"TODO\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-1\",\n      children: \"Interface 1\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs, {\n      children: [(0,jsx_runtime.jsxs)(TabItem, {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE SUBROUTINE get1(obj, VALUE, globalNode)\\n    CLASS(ScalarField_), INTENT(IN) :: obj\\n    REAL(DFP), INTENT(INOUT) :: VALUE\\n    INTEGER(I4B), INTENT(IN) :: globalNode\\n  END SUBROUTINE get1\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsx)(_components.p, {\n          children: \"Get a single entry.\"\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem, {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem, {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-2\",\n      children: \"Interface 2\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs, {\n      children: [(0,jsx_runtime.jsxs)(TabItem, {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE SUBROUTINE get2(obj, VALUE)\\n    CLASS(ScalarField_), INTENT(IN) :: obj\\n    REAL(DFP), ALLOCATABLE, INTENT(INOUT) :: VALUE(:)\\n  END SUBROUTINE get2\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsx)(_components.p, {\n          children: \"Get all entries in a vector of reals.\"\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem, {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_ScalarField_test_12_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem, {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-3\",\n      children: \"Interface 3\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs, {\n      children: [(0,jsx_runtime.jsxs)(TabItem, {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE SUBROUTINE get3(obj, VALUE, globalNode)\\n    CLASS(ScalarField_), INTENT(IN) :: obj\\n    REAL(DFP), ALLOCATABLE, INTENT(INOUT) :: VALUE(:)\\n    INTEGER(I4B), INTENT(IN) :: globalNode(:)\\n  END SUBROUTINE get3\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsx)(_components.p, {\n          children: \"Get all multiple entries.\"\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem, {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_ScalarField_test_13_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem, {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-4\",\n      children: \"Interface 4\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs, {\n      children: [(0,jsx_runtime.jsxs)(TabItem, {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE SUBROUTINE get4(obj, VALUE, istart, iend, stride)\\n    CLASS(ScalarField_), INTENT(IN) :: obj\\n    REAL(DFP), ALLOCATABLE, INTENT(INOUT) :: VALUE(:)\\n    INTEGER(I4B), INTENT(IN) :: istart\\n    INTEGER(I4B), INTENT(IN) :: iend\\n    INTEGER(I4B), INTENT(IN) :: stride\\n  END SUBROUTINE get4\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsx)(_components.p, {\n          children: \"Get multiple entries by using triplets.\"\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem, {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_ScalarField_test_14_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem, {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-5\",\n      children: \"Interface 5\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs, {\n      children: [(0,jsx_runtime.jsxs)(TabItem, {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE SUBROUTINE get5(obj, VALUE, globalNode)\\n    CLASS(ScalarField_), INTENT(IN) :: obj\\n    TYPE(FEVariable_), INTENT(INOUT) :: VALUE\\n  !! Scalar Nodal FEVariable\\n    INTEGER(I4B), INTENT(IN) :: globalNode(:)\\n  END SUBROUTINE get5\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.p, {\n          children: [\"Get multiple entries in \", (0,jsx_runtime.jsx)(_components.a, {\n            href: \"/docs-api/FEVariable/FEVariable_\",\n            children: \"FEVariable\"\n          })]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem, {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_ScalarField_test_15_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem, {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-6\",\n      children: \"Interface 6\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n  MODULE SUBROUTINE get6(obj, VALUE)\\n    CLASS(ScalarField_), INTENT(IN) :: obj\\n    CLASS(ScalarField_), INTENT(INOUT) :: VALUE\\n  END SUBROUTINE get6\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Get a scalarfield in an instance of scalar field.\"\n    })]\n  });\n}\nfunction Get_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(Get_createMdxContent, {\n      ...props\n    })\n  }) : Get_createMdxContent(props);\n}\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./docs/docs-api/ScalarField/Get.md\n");

/***/ }),

/***/ "./node_modules/@mdx-js/react/lib/index.js":
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MDXProvider: () => (/* binding */ MDXProvider),\n/* harmony export */   useMDXComponents: () => (/* binding */ useMDXComponents)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/react/index.js\");\n/**\n * @import {MDXComponents} from 'mdx/types.js'\n * @import {Component, ReactElement, ReactNode} from 'react'\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\n\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nfunction useMDXComponents(components) {\n  const contextComponents = react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {ReactElement}\n *   Element.\n * @satisfies {Component}\n */\nfunction MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Vhc2lmZW0tZG9jcy8uL25vZGVfbW9kdWxlcy9AbWR4LWpzL3JlYWN0L2xpYi9pbmRleC5qcz9hZjEyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGltcG9ydCB7TURYQ29tcG9uZW50c30gZnJvbSAnbWR4L3R5cGVzLmpzJ1xuICogQGltcG9ydCB7Q29tcG9uZW50LCBSZWFjdEVsZW1lbnQsIFJlYWN0Tm9kZX0gZnJvbSAncmVhY3QnXG4gKi9cblxuLyoqXG4gKiBAY2FsbGJhY2sgTWVyZ2VDb21wb25lbnRzXG4gKiAgIEN1c3RvbSBtZXJnZSBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7UmVhZG9ubHk8TURYQ29tcG9uZW50cz59IGN1cnJlbnRDb21wb25lbnRzXG4gKiAgIEN1cnJlbnQgY29tcG9uZW50cyBmcm9tIHRoZSBjb250ZXh0LlxuICogQHJldHVybnMge01EWENvbXBvbmVudHN9XG4gKiAgIEFkZGl0aW9uYWwgY29tcG9uZW50cy5cbiAqXG4gKiBAdHlwZWRlZiBQcm9wc1xuICogICBDb25maWd1cmF0aW9uIGZvciBgTURYUHJvdmlkZXJgLlxuICogQHByb3BlcnR5IHtSZWFjdE5vZGUgfCBudWxsIHwgdW5kZWZpbmVkfSBbY2hpbGRyZW5dXG4gKiAgIENoaWxkcmVuIChvcHRpb25hbCkuXG4gKiBAcHJvcGVydHkge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+IHwgTWVyZ2VDb21wb25lbnRzIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2NvbXBvbmVudHNdXG4gKiAgIEFkZGl0aW9uYWwgY29tcG9uZW50cyB0byB1c2Ugb3IgYSBmdW5jdGlvbiB0aGF0IGNyZWF0ZXMgdGhlbSAob3B0aW9uYWwpLlxuICogQHByb3BlcnR5IHtib29sZWFuIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2Rpc2FibGVQYXJlbnRDb250ZXh0PWZhbHNlXVxuICogICBUdXJuIG9mZiBvdXRlciBjb21wb25lbnQgY29udGV4dCAoZGVmYXVsdDogYGZhbHNlYCkuXG4gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuXG4vKiogQHR5cGUge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+fSAqL1xuY29uc3QgZW1wdHlDb21wb25lbnRzID0ge31cblxuY29uc3QgTURYQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoZW1wdHlDb21wb25lbnRzKVxuXG4vKipcbiAqIEdldCBjdXJyZW50IGNvbXBvbmVudHMgZnJvbSB0aGUgTURYIENvbnRleHQuXG4gKlxuICogQHBhcmFtIHtSZWFkb25seTxNRFhDb21wb25lbnRzPiB8IE1lcmdlQ29tcG9uZW50cyB8IG51bGwgfCB1bmRlZmluZWR9IFtjb21wb25lbnRzXVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMgdG8gdXNlIG9yIGEgZnVuY3Rpb24gdGhhdCBjcmVhdGVzIHRoZW0gKG9wdGlvbmFsKS5cbiAqIEByZXR1cm5zIHtNRFhDb21wb25lbnRzfVxuICogICBDdXJyZW50IGNvbXBvbmVudHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VNRFhDb21wb25lbnRzKGNvbXBvbmVudHMpIHtcbiAgY29uc3QgY29udGV4dENvbXBvbmVudHMgPSBSZWFjdC51c2VDb250ZXh0KE1EWENvbnRleHQpXG5cbiAgLy8gTWVtb2l6ZSB0byBhdm9pZCB1bm5lY2Vzc2FyeSB0b3AtbGV2ZWwgY29udGV4dCBjaGFuZ2VzXG4gIHJldHVybiBSZWFjdC51c2VNZW1vKFxuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIEN1c3RvbSBtZXJnZSB2aWEgYSBmdW5jdGlvbiBwcm9wXG4gICAgICBpZiAodHlwZW9mIGNvbXBvbmVudHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGNvbXBvbmVudHMoY29udGV4dENvbXBvbmVudHMpXG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7Li4uY29udGV4dENvbXBvbmVudHMsIC4uLmNvbXBvbmVudHN9XG4gICAgfSxcbiAgICBbY29udGV4dENvbXBvbmVudHMsIGNvbXBvbmVudHNdXG4gIClcbn1cblxuLyoqXG4gKiBQcm92aWRlciBmb3IgTURYIGNvbnRleHQuXG4gKlxuICogQHBhcmFtIHtSZWFkb25seTxQcm9wcz59IHByb3BlcnRpZXNcbiAqICAgUHJvcGVydGllcy5cbiAqIEByZXR1cm5zIHtSZWFjdEVsZW1lbnR9XG4gKiAgIEVsZW1lbnQuXG4gKiBAc2F0aXNmaWVzIHtDb21wb25lbnR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBNRFhQcm92aWRlcihwcm9wZXJ0aWVzKSB7XG4gIC8qKiBAdHlwZSB7UmVhZG9ubHk8TURYQ29tcG9uZW50cz59ICovXG4gIGxldCBhbGxDb21wb25lbnRzXG5cbiAgaWYgKHByb3BlcnRpZXMuZGlzYWJsZVBhcmVudENvbnRleHQpIHtcbiAgICBhbGxDb21wb25lbnRzID1cbiAgICAgIHR5cGVvZiBwcm9wZXJ0aWVzLmNvbXBvbmVudHMgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBwcm9wZXJ0aWVzLmNvbXBvbmVudHMoZW1wdHlDb21wb25lbnRzKVxuICAgICAgICA6IHByb3BlcnRpZXMuY29tcG9uZW50cyB8fCBlbXB0eUNvbXBvbmVudHNcbiAgfSBlbHNlIHtcbiAgICBhbGxDb21wb25lbnRzID0gdXNlTURYQ29tcG9uZW50cyhwcm9wZXJ0aWVzLmNvbXBvbmVudHMpXG4gIH1cblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICBNRFhDb250ZXh0LlByb3ZpZGVyLFxuICAgIHt2YWx1ZTogYWxsQ29tcG9uZW50c30sXG4gICAgcHJvcGVydGllcy5jaGlsZHJlblxuICApXG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@mdx-js/react/lib/index.js\n");

/***/ })

}]);