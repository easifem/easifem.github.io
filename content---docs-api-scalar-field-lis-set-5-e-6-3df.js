"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkeasifem_docs"] = globalThis["webpackChunkeasifem_docs"] || []).push([["content---docs-api-scalar-field-lis-set-5-e-6-3df"],{

/***/ "./docs/docs-api/ScalarFieldLis/Set.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  assets: () => (/* binding */ assets),\n  contentTitle: () => (/* binding */ Set_contentTitle),\n  \"default\": () => (/* binding */ Set_MDXContent),\n  frontMatter: () => (/* binding */ Set_frontMatter),\n  metadata: () => (/* reexport */ site_docs_docs_api_scalar_field_lis_set_md_5e6_namespaceObject),\n  toc: () => (/* binding */ Set_toc)\n});\n\n;// ./.docusaurus/docusaurus-plugin-content-docs/docs-api/site-docs-docs-api-scalar-field-lis-set-md-5e6.json\nconst site_docs_docs_api_scalar_field_lis_set_md_5e6_namespaceObject = /*#__PURE__*/JSON.parse('{\"id\":\"ScalarFieldLis/Set\",\"title\":\"Set\",\"description\":\"Set the entries in the ScalarField.\",\"source\":\"@site/docs/docs-api/ScalarFieldLis/Set.md\",\"sourceDirName\":\"ScalarFieldLis\",\"slug\":\"/ScalarFieldLis/Set\",\"permalink\":\"/docs-api/ScalarFieldLis/Set\",\"draft\":false,\"unlisted\":false,\"editUrl\":\"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/ScalarFieldLis/Set.md\",\"tags\":[],\"version\":\"current\",\"lastUpdatedAt\":1539502055000,\"frontMatter\":{},\"sidebar\":\"tutorialSidebar\",\"previous\":{\"title\":\"Normi\",\"permalink\":\"/docs-api/ScalarFieldLis/Normi\"},\"next\":{\"title\":\"SetScalarFieldParam\",\"permalink\":\"/docs-api/ScalarFieldLis/SetScalarFieldParam\"}}');\n// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n// EXTERNAL MODULE: ./node_modules/@mdx-js/react/lib/index.js\nvar lib = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js + 2 modules\nvar Tabs = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js + 1 modules\nvar TabItem = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js\");\n;// ./docs/docs-api/ScalarFieldLis/_ScalarField_test_3.md\n\n\nconst frontMatter = {};\nconst contentTitle = undefined;\n\n\n\n\n\nconst toc = [];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"In this example we test \", (0,jsx_runtime.jsx)(_components.a, {\n        href: \"/docs-api/ScalarFieldLis/Set\",\n        children: \"Set\"\n      }), \" method.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"We set single entry in ScalarField.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n  USE easifemBase\\n  USE easifemClasses\\n  TYPE( Domain_ ) :: dom\\n  TYPE( ScalarFieldLis_ ) :: obj\\n  TYPE( HDF5File_ ) :: meshfile, resultFile\\n  TYPE( ParameterList_ ) :: param\\n  INTEGER( I4B ) :: ierr\\n  REAL( DFP ), ALLOCATABLE :: realVec( : )\\n  CHARACTER( LEN = * ), PARAMETER :: engine = \\\"LIS_OMP\\\"\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Open file for import\\\"\",\n        children: \"CALL FPL_INIT()\\nCALL param%initiate()\\nCALL resultFile%initiate( filename=\\\"./result.h5\\\", mode=\\\"READ\\\" )\\nCALL resultFile%open()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"read domain\\\"\",\n        children: \"!> start creating domain\\nCALL meshfile%initiate( filename=\\\"./mesh.h5\\\", mode=\\\"READ\\\" )\\nCALL meshfile%open()\\nCALL dom%initiate( hdf5=meshfile, group=\\\"\\\" )\\n!> end creating domain\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"initiate scalar field\\\"\",\n        children: \"  CALL SetScalarFieldParam( param=param, &\\n    & fieldType=FIELD_TYPE_NORMAL, &\\n    & name=\\\"U\\\", &\\n    & engine=engine)\\n\\n   CALL obj%initiate( param, dom )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"set single value\\\"\",\n        children: \"CALL obj%set( globalnode = 10, value= 100.0_dfp )\\nCALL obj%display( \\\"scalar field = \\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"#scalar field =\\n# isInitiated : TRUE\\n# name :U\\n# fieldType : NORMAL\\n# engine :LIS_OMP\\n# comm: 0\\n# myRank: 0\\n# numProcs: 1\\n# global_n: 102\\n# local_n: 102\\n# is: 1\\n# ie: 103\\n# lis_ptr: 94737506115424\\n# domain : ASSOCIATED\\n# domains : NOT ALLOCATED\\n# tSize : 102\\n# # DOF data :\\n# Total Physical Variables :1\\n# Name : U\\n# Space Components : 1\\n# Time Components : 1\\n# Total Nodes : 102\\n# Storage Format : Nodes\\n# Value Map : \\n--------------\\n       1      \\n     103      \\n# VAR :U\\n DOF-1 ,   \\n-------,   \\n  0.000,   \\n  0.000,   \\n  0.000,   \\n  0.000,   \\n  0.000,   \\n  0.000,   \\n  0.000,   \\n  0.000,   \\n  0.000,   \\n100.000,\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Cleanup\\\"\",\n        children: \"  CALL obj%Deallocate(); CALL dom%Deallocate()\\n  CALL meshfile%Deallocate()\\n  CALL resultFile%Deallocate()\\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\\n  if(allocated(realVec) ) deallocate(realVec)\\nEND PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/ScalarFieldLis/_ScalarField_test_4.md\n\n\nconst _ScalarField_test_4_frontMatter = {};\nconst _ScalarField_test_4_contentTitle = undefined;\n\n\n\n\n\nconst _ScalarField_test_4_toc = [];\nfunction _ScalarField_test_4_createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"In this example we test \", (0,jsx_runtime.jsx)(_components.a, {\n        href: \"/docs-api/ScalarFieldLis/Set\",\n        children: \"Set\"\n      }), \" method.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"In this example we set all values of ScalarField.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n  USE easifemBase\\n  USE easifemClasses\\n  TYPE( Domain_ ) :: dom\\n  TYPE( ScalarFieldLis_ ) :: obj\\n  TYPE( HDF5File_ ) :: meshfile, resultFile\\n  TYPE( ParameterList_ ) :: param\\n  INTEGER( I4B ) :: ierr\\n  REAL( DFP ), ALLOCATABLE :: realVec( : )\\n  CHARACTER( LEN = * ), PARAMETER :: engine = \\\"LIS_OMP\\\"\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Open file for import\\\"\",\n        children: \"CALL FPL_INIT()\\nCALL param%initiate()\\nCALL resultFile%initiate( filename=\\\"./result.h5\\\", mode=\\\"READ\\\" )\\nCALL resultFile%open()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"read domain\\\"\",\n        children: \"!> start creating domain\\nCALL meshfile%initiate( filename=\\\"./mesh.h5\\\", mode=\\\"READ\\\" )\\nCALL meshfile%open()\\nCALL dom%initiate( hdf5=meshfile, group=\\\"\\\" )\\n!> end creating domain\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"initiate scalar field\\\"\",\n        children: \"CALL SetScalarFieldParam( param=param, &\\n  & fieldType=FIELD_TYPE_NORMAL, &\\n  & name=\\\"U\\\", &\\n  & engine=engine)\\nCALL obj%initiate( param, dom )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"setting all values\\\"\",\n        children: \"CALL obj%set( value= 200.0_DFP )\\nCALL obj%display( \\\"scalar field = \\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"#scalar field =\\n# isInitiated : TRUE\\n# name :U\\n# fieldType : NORMAL\\n# engine :LIS_OMP\\n# comm: 0\\n# myRank: 0\\n# numProcs: 1\\n# global_n: 102\\n# local_n: 102\\n# is: 1\\n# ie: 103\\n# lis_ptr: 94373790752608\\n# domain : ASSOCIATED\\n# domains : NOT ALLOCATED\\n# tSize : 102\\n# # DOF data :\\n# Total Physical Variables :1\\n# Name : U\\n# Space Components : 1\\n# Time Components : 1\\n# Total Nodes : 102\\n# Storage Format : Nodes\\n# Value Map : \\n--------------\\n       1      \\n     103      \\n# VAR :U\\n DOF-1 ,   \\n-------,   \\n200.000,   \\n200.000,   \\n200.000,   \\n200.000,   \\n200.000,   \\n200.000,   \\n200.000,   \\n200.000,   \\n200.000,   \\n200.000,\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Cleanup\\\"\",\n        children: \"  CALL obj%Deallocate(); CALL dom%Deallocate()\\n  CALL meshfile%Deallocate()\\n  CALL resultFile%Deallocate()\\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\\n  if(allocated(realVec) ) deallocate(realVec)\\nEND PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction _ScalarField_test_4_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_ScalarField_test_4_createMdxContent, {\n      ...props\n    })\n  }) : _ScalarField_test_4_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/ScalarFieldLis/_ScalarField_test_5.md\n\n\nconst _ScalarField_test_5_frontMatter = {};\nconst _ScalarField_test_5_contentTitle = undefined;\n\n\n\n\n\nconst _ScalarField_test_5_toc = [];\nfunction _ScalarField_test_5_createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"In this example we test \", (0,jsx_runtime.jsx)(_components.a, {\n        href: \"/docs-api/ScalarFieldLis/Set\",\n        children: \"Set\"\n      }), \" method.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"In this example we set all values of ScalarField using a vector of reals.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n  USE easifemBase\\n  USE easifemClasses\\n  TYPE( Domain_ ) :: dom\\n  TYPE( ScalarFieldLis_ ) :: obj\\n  TYPE( HDF5File_ ) :: meshfile, resultFile\\n  TYPE( ParameterList_ ) :: param\\n  INTEGER( I4B ) :: ierr\\n  REAL( DFP ), ALLOCATABLE :: realVec( : )\\n  CHARACTER( LEN = * ), PARAMETER :: engine = \\\"LIS_OMP\\\"\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Open file for import\\\"\",\n        children: \"CALL FPL_INIT()\\nCALL param%initiate()\\nCALL resultFile%initiate( filename=\\\"./result.h5\\\", mode=\\\"READ\\\" )\\nCALL resultFile%open()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"read domain\\\"\",\n        children: \"!> start creating domain\\nCALL meshfile%initiate( filename=\\\"./mesh.h5\\\", mode=\\\"READ\\\" )\\nCALL meshfile%open()\\nCALL dom%initiate( hdf5=meshfile, group=\\\"\\\" )\\n!> end creating domain\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"initiate scalar field\\\"\",\n        children: \"CALL SetScalarFieldParam( param=param, &\\n  & fieldType=FIELD_TYPE_NORMAL, &\\n  & name=\\\"U\\\", &\\n  & engine=engine)\\nCALL obj%initiate( param, dom )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"setting all values using vector\\\"\",\n        children: \"call reallocate( realVec, dom%getTotalNodes() )\\ncall RANDOM_NUMBER( realVec )\\ncall obj%set(realVec)\\ncall obj%display( \\\"scalar field = \\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"#scalar field =\\n# isInitiated : TRUE\\n# name :U\\n# fieldType : NORMAL\\n# engine :LIS_OMP\\n# comm: 0\\n# myRank: 0\\n# numProcs: 1\\n# global_n: 102\\n# local_n: 102\\n# is: 1\\n# ie: 103\\n# lis_ptr: 94018677690208\\n# domain : ASSOCIATED\\n# domains : NOT ALLOCATED\\n# tSize : 102\\n# # DOF data :\\n# Total Physical Variables :1\\n# Name : U\\n# Space Components : 1\\n# Time Components : 1\\n# Total Nodes : 102\\n# Storage Format : Nodes\\n# Value Map : \\n--------------\\n       1      \\n     103      \\n# VAR :U\\n  DOF-1 ,   \\n--------,   \\n0.609126,   \\n0.877070,   \\n0.462140,   \\n0.474488,   \\n0.743044,   \\n0.471275,   \\n0.085154,   \\n0.671168,\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Cleanup\\\"\",\n        children: \"  CALL obj%Deallocate(); CALL dom%Deallocate()\\n  CALL meshfile%Deallocate()\\n  CALL resultFile%Deallocate()\\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\\n  if(allocated(realVec) ) deallocate(realVec)\\nEND PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction _ScalarField_test_5_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_ScalarField_test_5_createMdxContent, {\n      ...props\n    })\n  }) : _ScalarField_test_5_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/ScalarFieldLis/_ScalarField_test_6.md\n\n\nconst _ScalarField_test_6_frontMatter = {};\nconst _ScalarField_test_6_contentTitle = undefined;\n\n\n\n\n\nconst _ScalarField_test_6_toc = [];\nfunction _ScalarField_test_6_createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"In this example we test \", (0,jsx_runtime.jsx)(_components.a, {\n        href: \"/docs-api/ScalarFieldLis/Set\",\n        children: \"Set\"\n      }), \" method.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Setting multiple values in ScalarField.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n  USE easifemBase\\n  USE easifemClasses\\n  TYPE( Domain_ ) :: dom\\n  TYPE( ScalarFieldLis_ ) :: obj\\n  TYPE( HDF5File_ ) :: meshfile, resultFile\\n  TYPE( ParameterList_ ) :: param\\n  INTEGER( I4B ) :: ierr\\n  REAL( DFP ), ALLOCATABLE :: realVec( : )\\n  CHARACTER( LEN = * ), PARAMETER :: engine = \\\"LIS_OMP\\\"\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Open file for import\\\"\",\n        children: \"CALL FPL_INIT()\\nCALL param%initiate()\\nCALL resultFile%initiate( filename=\\\"./result.h5\\\", mode=\\\"READ\\\" )\\nCALL resultFile%open()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"read domain\\\"\",\n        children: \"!> start creating domain\\nCALL meshfile%initiate( filename=\\\"./mesh.h5\\\", mode=\\\"READ\\\" )\\nCALL meshfile%open()\\nCALL dom%initiate( hdf5=meshfile, group=\\\"\\\" )\\n!> end creating domain\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"initiate scalar field\\\"\",\n        children: \"CALL SetScalarFieldParam( param=param, &\\n  & fieldType=FIELD_TYPE_NORMAL, &\\n  & name=\\\"U\\\", &\\n  & engine=engine)\\nCALL obj%initiate( param, dom )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Setting multiple values\\\"\",\n        children: \"call obj%set(globalNode=[1,2,5], value=1.0_DFP )\\ncall obj%display( \\\"scalar field = \\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"#scalar field =\\n# isInitiated : TRUE\\n# name :U\\n# fieldType : NORMAL\\n# engine :LIS_OMP\\n# comm: 0\\n# myRank: 0\\n# numProcs: 1\\n# global_n: 102\\n# local_n: 102\\n# is: 1\\n# ie: 103\\n# lis_ptr: 93864323497824\\n# domain : ASSOCIATED\\n# domains : NOT ALLOCATED\\n# tSize : 102\\n# # DOF data :\\n# Total Physical Variables :1\\n# Name : U\\n# Space Components : 1\\n# Time Components : 1\\n# Total Nodes : 102\\n# Storage Format : Nodes\\n# Value Map : \\n--------------\\n       1      \\n     103      \\n# VAR :U\\n DOF-1 ,   \\n-------,   \\n1.00000,   \\n1.00000,   \\n0.00000,   \\n0.00000,   \\n1.00000,\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Cleanup\\\"\",\n        children: \"  CALL obj%Deallocate(); CALL dom%Deallocate()\\n  CALL meshfile%Deallocate()\\n  CALL resultFile%Deallocate()\\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\\n  if(allocated(realVec) ) deallocate(realVec)\\nEND PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction _ScalarField_test_6_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_ScalarField_test_6_createMdxContent, {\n      ...props\n    })\n  }) : _ScalarField_test_6_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/ScalarFieldLis/_ScalarField_test_7.md\n\n\nconst _ScalarField_test_7_frontMatter = {};\nconst _ScalarField_test_7_contentTitle = undefined;\n\n\n\n\n\nconst _ScalarField_test_7_toc = [];\nfunction _ScalarField_test_7_createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"In this example we test \", (0,jsx_runtime.jsx)(_components.a, {\n        href: \"/docs-api/ScalarFieldLis/Set\",\n        children: \"Set\"\n      }), \" method.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Setting multiple values.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n  USE easifemBase\\n  USE easifemClasses\\n  TYPE( Domain_ ) :: dom\\n  TYPE( ScalarFieldLis_ ) :: obj\\n  TYPE( HDF5File_ ) :: meshfile, resultFile\\n  TYPE( ParameterList_ ) :: param\\n  INTEGER( I4B ) :: ierr\\n  REAL( DFP ), ALLOCATABLE :: realVec( : )\\n  CHARACTER( LEN = * ), PARAMETER :: engine = \\\"LIS_OMP\\\"\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Open file for import\\\"\",\n        children: \"CALL FPL_INIT()\\nCALL param%initiate()\\nCALL resultFile%initiate( filename=\\\"./result.h5\\\", mode=\\\"READ\\\" )\\nCALL resultFile%open()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"read domain\\\"\",\n        children: \"!> start creating domain\\nCALL meshfile%initiate( filename=\\\"./mesh.h5\\\", mode=\\\"READ\\\" )\\nCALL meshfile%open()\\nCALL dom%initiate( hdf5=meshfile, group=\\\"\\\" )\\n!> end creating domain\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"initiate scalar field\\\"\",\n        children: \"CALL SetScalarFieldParam( param=param, &\\n  & fieldType=FIELD_TYPE_NORMAL, &\\n  & name=\\\"U\\\", &\\n  & engine=engine)\\nCALL obj%initiate( param, dom )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Setting multiple values\\\"\",\n        children: \"realVec = [1.0, 2.0, 3.0]\\nCALL obj%set(globalNode=[1,2,5], value=realVec )\\nCALL obj%display( \\\"scalar field = \\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"#scalar field =\\n# isInitiated : TRUE\\n# name :U\\n# fieldType : NORMAL\\n# engine :LIS_OMP\\n# comm: 0\\n# myRank: 0\\n# numProcs: 1\\n# global_n: 102\\n# local_n: 102\\n# is: 1\\n# ie: 103\\n# lis_ptr: 94289762668384\\n# domain : ASSOCIATED\\n# domains : NOT ALLOCATED\\n# tSize : 102\\n# # DOF data :\\n# Total Physical Variables :1\\n# Name : U\\n# Space Components : 1\\n# Time Components : 1\\n# Total Nodes : 102\\n# Storage Format : Nodes\\n# Value Map : \\n--------------\\n       1      \\n     103      \\n# VAR :U\\n DOF-1 ,   \\n-------,   \\n1.00000,   \\n2.00000,   \\n0.00000,   \\n0.00000,   \\n3.00000,\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Cleanup\\\"\",\n        children: \"  CALL obj%Deallocate(); CALL dom%Deallocate()\\n  CALL meshfile%Deallocate()\\n  CALL resultFile%Deallocate()\\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\\n  if(allocated(realVec) ) deallocate(realVec)\\nEND PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction _ScalarField_test_7_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_ScalarField_test_7_createMdxContent, {\n      ...props\n    })\n  }) : _ScalarField_test_7_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/ScalarFieldLis/_ScalarField_test_8.md\n\n\nconst _ScalarField_test_8_frontMatter = {};\nconst _ScalarField_test_8_contentTitle = undefined;\n\n\n\n\n\nconst _ScalarField_test_8_toc = [];\nfunction _ScalarField_test_8_createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"In this example we test \", (0,jsx_runtime.jsx)(_components.a, {\n        href: \"/docs-api/ScalarFieldLis/Set\",\n        children: \"Set\"\n      }), \" method.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Setting multiple values using triplets.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n  USE easifemBase\\n  USE easifemClasses\\n  TYPE( Domain_ ) :: dom\\n  TYPE( ScalarFieldLis_ ) :: obj\\n  TYPE( HDF5File_ ) :: meshfile, resultFile\\n  TYPE( ParameterList_ ) :: param\\n  INTEGER( I4B ) :: ierr\\n  REAL( DFP ), ALLOCATABLE :: realVec( : )\\n  CHARACTER( LEN = * ), PARAMETER :: engine = \\\"LIS_OMP\\\"\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Open file for import\\\"\",\n        children: \"CALL FPL_INIT()\\nCALL param%initiate()\\nCALL resultFile%initiate( filename=\\\"./result.h5\\\", mode=\\\"READ\\\" )\\nCALL resultFile%open()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"read domain\\\"\",\n        children: \"!> start creating domain\\nCALL meshfile%initiate( filename=\\\"./mesh.h5\\\", mode=\\\"READ\\\" )\\nCALL meshfile%open()\\nCALL dom%initiate( hdf5=meshfile, group=\\\"\\\" )\\n!> end creating domain\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"initiate scalar field\\\"\",\n        children: \"CALL SetScalarFieldParam( param=param, &\\n  & fieldType=FIELD_TYPE_NORMAL, &\\n  & name=\\\"U\\\", &\\n  & engine=engine)\\nCALL obj%initiate( param, dom )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Setting multiple values using triplets\\\"\",\n        children: \"CALL obj%set(istart=1, iend=5, stride=2, value=10.0_DFP )\\nCALL obj%display( \\\"scalar field = \\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"#scalar field =\\n# isInitiated : TRUE\\n# name :U\\n# fieldType : NORMAL\\n# engine :LIS_OMP\\n# comm: 0\\n# myRank: 0\\n# numProcs: 1\\n# global_n: 102\\n# local_n: 102\\n# is: 1\\n# ie: 103\\n# lis_ptr: 94209227312992\\n# domain : ASSOCIATED\\n# domains : NOT ALLOCATED\\n# tSize : 102\\n# # DOF data :\\n# Total Physical Variables :1\\n# Name : U\\n# Space Components : 1\\n# Time Components : 1\\n# Total Nodes : 102\\n# Storage Format : Nodes\\n# Value Map : \\n--------------\\n       1      \\n     103      \\n# VAR :U\\n DOF-1 ,   \\n-------,   \\n10.0000,   \\n 0.0000,   \\n10.0000,   \\n 0.0000,   \\n10.0000,\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Cleanup\\\"\",\n        children: \"  CALL obj%Deallocate(); CALL dom%Deallocate()\\n  CALL meshfile%Deallocate()\\n  CALL resultFile%Deallocate()\\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\\n  if(allocated(realVec) ) deallocate(realVec)\\nEND PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction _ScalarField_test_8_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_ScalarField_test_8_createMdxContent, {\n      ...props\n    })\n  }) : _ScalarField_test_8_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/ScalarFieldLis/_ScalarField_test_9.md\n\n\nconst _ScalarField_test_9_frontMatter = {};\nconst _ScalarField_test_9_contentTitle = undefined;\n\n\n\n\n\nconst _ScalarField_test_9_toc = [];\nfunction _ScalarField_test_9_createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"In this example we test \", (0,jsx_runtime.jsx)(_components.a, {\n        href: \"/docs-api/ScalarFieldLis/Set\",\n        children: \"Set\"\n      }), \" method.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Setting multiple values using triplets.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n  USE easifemBase\\n  USE easifemClasses\\n  TYPE( Domain_ ) :: dom\\n  TYPE( ScalarFieldLis_ ) :: obj\\n  TYPE( HDF5File_ ) :: meshfile, resultFile\\n  TYPE( ParameterList_ ) :: param\\n  INTEGER( I4B ) :: ierr\\n  REAL( DFP ), ALLOCATABLE :: realVec( : )\\n  CHARACTER( LEN = * ), PARAMETER :: engine = \\\"LIS_OMP\\\"\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Open file for import\\\"\",\n        children: \"CALL FPL_INIT()\\nCALL param%initiate()\\nCALL resultFile%initiate( filename=\\\"./result.h5\\\", mode=\\\"READ\\\" )\\nCALL resultFile%open()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"read domain\\\"\",\n        children: \"!> start creating domain\\nCALL meshfile%initiate( filename=\\\"./mesh.h5\\\", mode=\\\"READ\\\" )\\nCALL meshfile%open()\\nCALL dom%initiate( hdf5=meshfile, group=\\\"\\\" )\\n!> end creating domain\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"initiate scalar field\\\"\",\n        children: \"CALL SetScalarFieldParam( param=param, &\\n  & fieldType=FIELD_TYPE_NORMAL, &\\n  & name=\\\"U\\\", &\\n  & engine=engine)\\nCALL obj%initiate( param, dom )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Setting multiple values using triplets\\\"\",\n        children: \"realVec = [1.0, 3.0, 5.0]\\nCALL obj%set(istart=1, iend=5, stride=2, value=realVec )\\nCALL obj%display( \\\"scalar field = \\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"#scalar field =\\n# isInitiated : TRUE\\n# name :U\\n# fieldType : NORMAL\\n# engine :LIS_OMP\\n# comm: 0\\n# myRank: 0\\n# numProcs: 1\\n# global_n: 102\\n# local_n: 102\\n# is: 1\\n# ie: 103\\n# lis_ptr: 94391377026912\\n# domain : ASSOCIATED\\n# domains : NOT ALLOCATED\\n# tSize : 102\\n# # DOF data :\\n# Total Physical Variables :1\\n# Name : U\\n# Space Components : 1\\n# Time Components : 1\\n# Total Nodes : 102\\n# Storage Format : Nodes\\n# Value Map : \\n--------------\\n       1      \\n     103      \\n# VAR :U\\n DOF-1 ,   \\n-------,   \\n1.00000,   \\n0.00000,   \\n3.00000,   \\n0.00000,   \\n5.00000,\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Cleanup\\\"\",\n        children: \"  CALL obj%Deallocate(); CALL dom%Deallocate()\\n  CALL meshfile%Deallocate()\\n  CALL resultFile%Deallocate()\\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\\n  if(allocated(realVec) ) deallocate(realVec)\\nEND PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction _ScalarField_test_9_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_ScalarField_test_9_createMdxContent, {\n      ...props\n    })\n  }) : _ScalarField_test_9_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/ScalarFieldLis/_ScalarField_test_10.md\n\n\nconst _ScalarField_test_10_frontMatter = {};\nconst _ScalarField_test_10_contentTitle = undefined;\n\n\n\n\n\nconst _ScalarField_test_10_toc = [];\nfunction _ScalarField_test_10_createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"In this example we test \", (0,jsx_runtime.jsx)(_components.a, {\n        href: \"/docs-api/ScalarFieldLis/Set\",\n        children: \"Set\"\n      }), \" method.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Setting multiple values using triplets.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"We also test:\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        children: \"Obj2 =obj\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"Here \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"obj2\"\n      }), \" and \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"obj\"\n      }), \" are instances of \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"ScalarFieldLis_\"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n  USE easifemBase\\n  USE easifemClasses\\n  TYPE( Domain_ ) :: dom\\n  TYPE( ScalarFieldLis_ ) :: obj\\n  TYPE( ScalarFieldLis_ ) :: obj2\\n  TYPE( HDF5File_ ) :: meshfile, resultFile\\n  TYPE( ParameterList_ ) :: param\\n  INTEGER( I4B ) :: ierr\\n  REAL( DFP ), ALLOCATABLE :: realVec( : )\\n  CHARACTER( LEN = * ), PARAMETER :: engine = \\\"LIS_OMP\\\"\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Open file for import\\\"\",\n        children: \"CALL FPL_INIT()\\nCALL param%initiate()\\nCALL resultFile%initiate( filename=\\\"./result.h5\\\", mode=\\\"READ\\\" )\\nCALL resultFile%open()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"read domain\\\"\",\n        children: \"!> start creating domain\\nCALL meshfile%initiate( filename=\\\"./mesh.h5\\\", mode=\\\"READ\\\" )\\nCALL meshfile%open()\\nCALL dom%initiate( hdf5=meshfile, group=\\\"\\\" )\\n!> end creating domain\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"initiate scalar field\\\"\",\n        children: \"CALL SetScalarFieldParam( param=param, &\\n  & fieldType=FIELD_TYPE_NORMAL, &\\n  & name=\\\"U\\\", &\\n  & engine=engine)\\nCALL obj%initiate( param, dom )\\nCALL SetScalarFieldParam( param=param, &\\n  & fieldType=FIELD_TYPE_NORMAL, &\\n  & name=\\\"U2\\\", &\\n  & engine=engine)\\nCALL obj2%initiate( param, dom )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Setting multiple values using triplets\\\"\",\n        children: \"realVec = [1.0, 3.0, 5.0]\\nCALL obj%set(istart=1, iend=5, stride=2, value=realVec )\\nCALL obj2%set(obj)\\nCALL obj2%Display(\\\"obj2 = \\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"#obj2 =\\n# isInitiated : TRUE\\n# name :U2\\n# fieldType : NORMAL\\n# engine :LIS_OMP\\n# comm: 0\\n# myRank: 0\\n# numProcs: 1\\n# global_n: 102\\n# local_n: 102\\n# is: 1\\n# ie: 103\\n# lis_ptr: 94340755750608\\n# domain : ASSOCIATED\\n# domains : NOT ALLOCATED\\n# tSize : 102\\n# # DOF data :\\n# Total Physical Variables :1\\n# Name : U\\n# Space Components : 1\\n# Time Components : 1\\n# Total Nodes : 102\\n# Storage Format : Nodes\\n# Value Map : \\n--------------\\n       1      \\n     103      \\n# VAR :U\\n DOF-1 ,   \\n-------,   \\n1.00000,   \\n0.00000,   \\n3.00000,   \\n0.00000,   \\n5.00000,\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Cleanup\\\"\",\n        children: \"  CALL obj%Deallocate(); CALL dom%Deallocate()\\n  CALL meshfile%Deallocate()\\n  CALL resultFile%Deallocate()\\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\\n  if(allocated(realVec) ) deallocate(realVec)\\nEND PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction _ScalarField_test_10_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_ScalarField_test_10_createMdxContent, {\n      ...props\n    })\n  }) : _ScalarField_test_10_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/ScalarFieldLis/_ScalarField_test_17.md\n\n\nconst _ScalarField_test_17_frontMatter = {};\nconst _ScalarField_test_17_contentTitle = undefined;\n\n\n\n\n\nconst _ScalarField_test_17_toc = [];\nfunction _ScalarField_test_17_createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"In this example we test \", (0,jsx_runtime.jsx)(_components.a, {\n        href: \"/docs-api/ScalarFieldLis/Set\",\n        children: \"Set\"\n      }), \" method.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Setting multiple values using triplets.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"We also test:\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        children: \"obj2=obj\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"Here \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"obj\"\n      }), \" is an instance of \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"ScalarField_\"\n      }), \", and \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"obj2\"\n      }), \" is an instance of \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"ScalarFieldLis_\"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n  USE easifemBase\\n  USE easifemClasses\\n  TYPE( Domain_ ) :: dom\\n  TYPE( ScalarField_ ) :: obj\\n  TYPE( ScalarFieldLis_ ) :: obj2\\n  TYPE( HDF5File_ ) :: meshfile, resultFile\\n  TYPE( ParameterList_ ) :: param\\n  INTEGER( I4B ) :: ierr\\n  REAL( DFP ), ALLOCATABLE :: realVec( : )\\n  CHARACTER( LEN = * ), PARAMETER :: engine = \\\"LIS_OMP\\\"\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Open file for import\\\"\",\n        children: \"CALL FPL_INIT()\\nCALL param%initiate()\\nCALL resultFile%initiate( filename=\\\"./result.h5\\\", mode=\\\"READ\\\" )\\nCALL resultFile%open()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"read domain\\\"\",\n        children: \"!> start creating domain\\nCALL meshfile%initiate( filename=\\\"./mesh.h5\\\", mode=\\\"READ\\\" )\\nCALL meshfile%open()\\nCALL dom%initiate( hdf5=meshfile, group=\\\"\\\" )\\n!> end creating domain\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"initiate scalar field\\\"\",\n        children: \"  CALL SetScalarFieldParam( param=param, &\\n    & fieldType=FIELD_TYPE_NORMAL, &\\n    & name=\\\"U\\\", &\\n    & engine=\\\"NATIVE_SERIAL\\\")\\n  CALL obj%initiate( param, dom )\\n\\n  CALL SetScalarFieldParam( param=param, &\\n    & fieldType=FIELD_TYPE_NORMAL, &\\n    & name=\\\"U2\\\", &\\n    & engine=engine)\\n  CALL obj2%initiate( param, dom )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Setting multiple values using triplets\\\"\",\n        children: \"realVec = [1.0, 3.0, 5.0]\\nCALL obj%set(istart=1, iend=5, stride=2, value=realVec )\\nCALL obj2%set(obj)\\nCALL obj2%Display(\\\"obj2 = \\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"#obj2 =\\n# isInitiated : TRUE\\n# name :U2\\n# fieldType : NORMAL\\n# engine :LIS_OMP\\n# comm: 0\\n# myRank: 0\\n# numProcs: 1\\n# global_n: 102\\n# local_n: 102\\n# is: 1\\n# ie: 103\\n# lis_ptr: 94164546445152\\n# domain : ASSOCIATED\\n# domains : NOT ALLOCATED\\n# tSize : 102\\n# # DOF data :\\n# Total Physical Variables :1\\n# Name : U\\n# Space Components : 1\\n# Time Components : 1\\n# Total Nodes : 102\\n# Storage Format : Nodes\\n# Value Map : \\n--------------\\n       1      \\n     103      \\n# VAR :U\\n DOF-1 ,   \\n-------,   \\n1.00000,   \\n0.00000,   \\n3.00000,   \\n0.00000,   \\n5.00000,\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Cleanup\\\"\",\n        children: \"  CALL obj%Deallocate(); CALL dom%Deallocate()\\n  CALL meshfile%Deallocate()\\n  CALL resultFile%Deallocate()\\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\\n  if(allocated(realVec) ) deallocate(realVec)\\nEND PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction _ScalarField_test_17_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_ScalarField_test_17_createMdxContent, {\n      ...props\n    })\n  }) : _ScalarField_test_17_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/ScalarFieldLis/_ScalarField_test_18.md\n\n\nconst _ScalarField_test_18_frontMatter = {};\nconst _ScalarField_test_18_contentTitle = undefined;\n\n\n\n\n\nconst _ScalarField_test_18_toc = [];\nfunction _ScalarField_test_18_createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"In this example we test \", (0,jsx_runtime.jsx)(_components.a, {\n        href: \"/docs-api/ScalarFieldLis/Set\",\n        children: \"Set\"\n      }), \" method.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Setting multiple values using triplets.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"We also test:\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        children: \"obj=obj+scale*obj2\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"Here \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"obj\"\n      }), \" and \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"obj2\"\n      }), \" are instances of \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"ScalarFieldLis_\"\n      }), \".\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n  USE easifemBase\\n  USE easifemClasses\\n  TYPE( Domain_ ) :: dom\\n  TYPE( ScalarFieldLis_ ) :: obj\\n  TYPE( ScalarFieldLis_ ) :: obj2\\n  TYPE( HDF5File_ ) :: meshfile, resultFile\\n  TYPE( ParameterList_ ) :: param\\n  INTEGER( I4B ) :: ierr\\n  REAL( DFP ), ALLOCATABLE :: realVec( : )\\n  CHARACTER( LEN = * ), PARAMETER :: engine = \\\"LIS_OMP\\\"\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Open file for import\\\"\",\n        children: \"CALL FPL_INIT()\\nCALL param%initiate()\\nCALL resultFile%initiate( filename=\\\"./result.h5\\\", mode=\\\"READ\\\" )\\nCALL resultFile%open()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"read domain\\\"\",\n        children: \"!> start creating domain\\nCALL meshfile%initiate( filename=\\\"./mesh.h5\\\", mode=\\\"READ\\\" )\\nCALL meshfile%open()\\nCALL dom%initiate( hdf5=meshfile, group=\\\"\\\" )\\n!> end creating domain\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"initiate scalar field\\\"\",\n        children: \"  CALL SetScalarFieldParam( param=param, &\\n    & fieldType=FIELD_TYPE_NORMAL, &\\n    & name=\\\"U\\\", &\\n    & engine=engine)\\n  CALL obj%initiate( param, dom )\\n\\n  CALL SetScalarFieldParam( param=param, &\\n    & fieldType=FIELD_TYPE_NORMAL, &\\n    & name=\\\"U2\\\", &\\n    & engine=engine)\\n  CALL obj2%initiate( param, dom )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Setting multiple values using triplets\\\"\",\n        children: \"CALL Reallocate(realVec, dom%getTotalNodes())\\nCALL RANDOM_NUMBER(realVec)\\nCALL obj%set(value=realVec)\\nCALL obj%Display(\\\"obj = \\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"0.122526,   \\n0.004512,   \\n0.338894,   \\n0.634983,   \\n0.530011,   \\n0.772392,   \\n0.907221,\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Setting multiple values using triplets\\\"\",\n        children: \"CALL RANDOM_NUMBER(realVec)\\nCALL obj2%set(value=realVec)\\nCALL obj2%Display(\\\"obj2 = \\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"0.370250,   \\n0.898448,   \\n0.029706,   \\n0.299606,   \\n0.505284,   \\n0.072251,   \\n0.943977,\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"obj=obj+scale*obj2\\\"\",\n        children: \"CALL obj%set(obj2=obj2, scale=1.0_DFP, addContribution=.TRUE.)\\nCALL obj%Display(\\\"obj =\\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"0.49278,   \\n0.90296,   \\n0.36860,   \\n0.93459,   \\n1.03529,   \\n0.84464,   \\n1.85120,\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Cleanup\\\"\",\n        children: \"  CALL obj%Deallocate(); CALL dom%Deallocate()\\n  CALL meshfile%Deallocate()\\n  CALL resultFile%Deallocate()\\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\\n  if(allocated(realVec) ) deallocate(realVec)\\nEND PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction _ScalarField_test_18_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_ScalarField_test_18_createMdxContent, {\n      ...props\n    })\n  }) : _ScalarField_test_18_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/ScalarFieldLis/_ScalarField_test_19.md\n\n\nconst _ScalarField_test_19_frontMatter = {};\nconst _ScalarField_test_19_contentTitle = undefined;\n\n\n\n\n\nconst _ScalarField_test_19_toc = [];\nfunction _ScalarField_test_19_createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"In this example we test \", (0,jsx_runtime.jsx)(_components.a, {\n        href: \"/docs-api/ScalarFieldLis/Set\",\n        children: \"Set\"\n      }), \" method.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Setting multiple values using triplets.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"We also test:\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        children: \"obj=obj+scale*obj2\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"Here \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"obj\"\n      }), \" is an instance of \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"ScalarFieldLis_\"\n      }), \", and \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"obj2\"\n      }), \" is an instance of \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"ScalarField_\"\n      }), \".\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n  USE easifemBase\\n  USE easifemClasses\\n  TYPE( Domain_ ) :: dom\\n  TYPE( ScalarField_ ) :: obj\\n  TYPE( ScalarFieldLis_ ) :: obj2\\n  TYPE( HDF5File_ ) :: meshfile, resultFile\\n  TYPE( ParameterList_ ) :: param\\n  INTEGER( I4B ) :: ierr\\n  REAL( DFP ), ALLOCATABLE :: realVec( : )\\n  CHARACTER( LEN = * ), PARAMETER :: engine = \\\"LIS_OMP\\\"\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Open file for import\\\"\",\n        children: \"CALL FPL_INIT()\\nCALL param%initiate()\\nCALL resultFile%initiate( filename=\\\"./result.h5\\\", mode=\\\"READ\\\" )\\nCALL resultFile%open()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"read domain\\\"\",\n        children: \"!> start creating domain\\nCALL meshfile%initiate( filename=\\\"./mesh.h5\\\", mode=\\\"READ\\\" )\\nCALL meshfile%open()\\nCALL dom%initiate( hdf5=meshfile, group=\\\"\\\" )\\n!> end creating domain\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"initiate scalar field\\\"\",\n        children: \"  CALL SetScalarFieldParam( param=param, &\\n    & fieldType=FIELD_TYPE_NORMAL, &\\n    & name=\\\"U\\\", &\\n    & engine=\\\"NATIVE_SERIAL\\\")\\n  CALL obj%initiate( param, dom )\\n\\n  CALL SetScalarFieldParam( param=param, &\\n    & fieldType=FIELD_TYPE_NORMAL, &\\n    & name=\\\"U2\\\", &\\n    & engine=engine)\\n  CALL obj2%initiate( param, dom )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Setting multiple values using triplets\\\"\",\n        children: \"CALL Reallocate(realVec, dom%getTotalNodes())\\nCALL RANDOM_NUMBER(realVec)\\nCALL obj%set(value=realVec)\\nCALL obj%Display(\\\"obj = \\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"0.444226,   \\n0.622197,   \\n0.553742,   \\n0.453327,   \\n0.252453,   \\n0.436322,   \\n0.371526,   \\n0.956193,   \\n0.684259,   \\n0.335780,\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Setting multiple values using triplets\\\"\",\n        children: \"CALL RANDOM_NUMBER(realVec)\\nCALL obj2%set(value=realVec)\\nCALL obj2%Display(\\\"obj2 = \\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"0.117251,   \\n0.699120,   \\n0.400569,   \\n0.126309,   \\n0.097650,   \\n0.653376,   \\n0.497695,   \\n0.054821,   \\n0.674551,   \\n0.935478,\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"obj=obj+scale*obj2\\\"\",\n        children: \"CALL obj%set(obj2=obj2, scale=1.0_DFP, addContribution=.TRUE.)\\nCALL obj%Display(\\\"obj =\\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"0.56148,   \\n1.32132,   \\n0.95431,   \\n0.57964,   \\n0.35010,   \\n1.08970,   \\n0.86922,   \\n1.01101,   \\n1.35881,   \\n1.27126,\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"Cleanup\\\"\",\n        children: \"  CALL obj%Deallocate(); CALL dom%Deallocate()\\n  CALL meshfile%Deallocate()\\n  CALL resultFile%Deallocate()\\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\\n  if(allocated(realVec) ) deallocate(realVec)\\nEND PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction _ScalarField_test_19_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_ScalarField_test_19_createMdxContent, {\n      ...props\n    })\n  }) : _ScalarField_test_19_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/ScalarFieldLis/Set.md\n\n\nconst Set_frontMatter = {};\nconst Set_contentTitle = 'Set';\n\nconst assets = {\n\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst Set_toc = [{\n  \"value\": \"Interface 1\",\n  \"id\": \"interface-1\",\n  \"level\": 2\n}, ...toc, {\n  \"value\": \"Interface 2\",\n  \"id\": \"interface-2\",\n  \"level\": 2\n}, ..._ScalarField_test_4_toc, {\n  \"value\": \"Interface 3\",\n  \"id\": \"interface-3\",\n  \"level\": 2\n}, ..._ScalarField_test_5_toc, {\n  \"value\": \"Interface 4\",\n  \"id\": \"interface-4\",\n  \"level\": 2\n}, ..._ScalarField_test_6_toc, {\n  \"value\": \"Interface 5\",\n  \"id\": \"interface-5\",\n  \"level\": 2\n}, ..._ScalarField_test_7_toc, {\n  \"value\": \"Interface 6\",\n  \"id\": \"interface-6\",\n  \"level\": 2\n}, ..._ScalarField_test_8_toc, {\n  \"value\": \"Interface 7\",\n  \"id\": \"interface-7\",\n  \"level\": 2\n}, ..._ScalarField_test_9_toc, {\n  \"value\": \"Interface 8\",\n  \"id\": \"interface-8\",\n  \"level\": 2\n}, ..._ScalarField_test_10_toc, ..._ScalarField_test_17_toc, {\n  \"value\": \"Interface 9\",\n  \"id\": \"interface-9\",\n  \"level\": 2\n}, {\n  \"value\": \"Interface 10\",\n  \"id\": \"interface-10\",\n  \"level\": 2\n}, ..._ScalarField_test_18_toc, ..._ScalarField_test_19_toc];\nfunction Set_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    header: \"header\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.header, {\n      children: (0,jsx_runtime.jsx)(_components.h1, {\n        id: \"set\",\n        children: \"Set\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Set the entries in the ScalarField.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Calling example:\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(\"span\", {\n      class: \"badge badge--success\",\n      children: (0,jsx_runtime.jsx)(_components.p, {\n        children: \"Set a single entry\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL Set(\\n    CLASS(ScalarField_):: obj\\n    INTEGER(I4B):: globalNode\\n    REAL(DFP):: VALUE\\n    REAL(DFP):: scale\\n    LOGICAL(LGT):: addContribution\\n)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(\"span\", {\n      class: \"badge badge--success\",\n      children: (0,jsx_runtime.jsx)(_components.p, {\n        children: \"Set all entries to a single scalar value\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL Set(\\n    CLASS(ScalarField_):: obj\\n    REAL(DFP):: VALUE\\n    REAL(DFP):: scale\\n    LOGICAL(LGT):: addContribution\\n)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(\"span\", {\n      class: \"badge badge--success\",\n      children: (0,jsx_runtime.jsx)(_components.p, {\n        children: \"Set all entries of scalar field to a given vector.\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL Set(\\n    CLASS(ScalarField_):: obj\\n    REAL(DFP):: VALUE(:)\\n    REAL(DFP):: scale\\n    LOGICAL(LGT):: addContribution\\n)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(\"span\", {\n      class: \"badge badge--success\",\n      children: (0,jsx_runtime.jsx)(_components.p, {\n        children: \"Set selected entries to a single value.\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL Set(\\n    CLASS(ScalarField_):: obj\\n    INTEGER(I4B):: globalNode(:)\\n    REAL(DFP):: VALUE\\n    REAL(DFP):: scale\\n    LOGICAL(LGT):: addContribution\\n)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(\"span\", {\n      class: \"badge badge--success\",\n      children: (0,jsx_runtime.jsx)(_components.p, {\n        children: \"Set multiple entries to different values.\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL Set(\\n    CLASS(ScalarField_):: obj\\n    INTEGER(I4B):: globalNode(:)\\n    REAL(DFP):: VALUE(:)\\n    REAL(DFP):: scale\\n    LOGICAL(LGT):: addContribution\\n)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(\"span\", {\n      class: \"badge badge--success\",\n      children: (0,jsx_runtime.jsx)(_components.p, {\n        children: \"Select multiple enties using triads.\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL Set(\\n    CLASS(ScalarField_):: obj\\n    INTEGER(I4B):: istart\\n    INTEGER(I4B):: iend\\n    INTEGER(I4B):: stride\\n    REAL(DFP):: VALUE\\n    REAL(DFP):: scale\\n    LOGICAL(LGT):: addContribution\\n)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(\"span\", {\n      class: \"badge badge--success\",\n      children: (0,jsx_runtime.jsx)(_components.p, {\n        children: \"Select multiple enties using triads.\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL Set(\\n    CLASS(ScalarField_):: obj\\n    INTEGER(I4B):: istart\\n    INTEGER(I4B):: iend\\n    INTEGER(I4B):: stride\\n    REAL(DFP):: VALUE(:)\\n    REAL(DFP):: scale\\n    LOGICAL(LGT):: addContribution\\n)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(\"span\", {\n      class: \"badge badge--success\",\n      children: (0,jsx_runtime.jsx)(_components.p, {\n        children: \"Copy obj2 in obj.\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL Set(\\n    CLASS(ScalarField_):: obj\\n    CLASS(ScalarField_):: obj2\\n)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(\"span\", {\n      class: \"badge badge--success\",\n      children: (0,jsx_runtime.jsx)(_components.p, {\n        children: \"Select multiple values using FEVariable.\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL Set(\\n    CLASS(ScalarField_):: obj\\n    INTEGER(I4B):: globalNode(:)\\n    TYPE(FEVariable_):: VALUE\\n    REAL(DFP):: scale\\n    LOGICAL(LGT):: addContribution\\n)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(\"span\", {\n      class: \"badge badge--success\",\n      children: (0,jsx_runtime.jsx)(_components.p, {\n        children: \"Copy obj2 into obj like AXPY.\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL Set(\\n    CLASS(ScalarField_):: obj\\n    CLASS(ScalarField_):: obj2\\n    REAL(DFP):: scale\\n    LOGICAL(LGT):: addContribution\\n)\\n\"\n      })\n    }), \"\\n\", \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-1\",\n      children: \"Interface 1\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE SUBROUTINE set1(obj, globalNode, VALUE, scale, &\\n    & addContribution)\\n    CLASS(ScalarField_), INTENT(INOUT) :: obj\\n    INTEGER(I4B), INTENT(IN) :: globalNode\\n    REAL(DFP), INTENT(IN) :: VALUE\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\\n  END SUBROUTINE set1\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"Set single entry.\"\n          }), \"\\n\"]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-2\",\n      children: \"Interface 2\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE SUBROUTINE set2(obj, VALUE, scale, addContribution)\\n    CLASS(ScalarField_), INTENT(INOUT) :: obj\\n    REAL(DFP), INTENT(IN) :: VALUE\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\\n  END SUBROUTINE set2\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"Set all values of scalar field to a given scalar.\"\n          }), \"\\n\"]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_ScalarField_test_4_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-3\",\n      children: \"Interface 3\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE SUBROUTINE set3(obj, VALUE, scale, addContribution)\\n    CLASS(ScalarField_), INTENT(INOUT) :: obj\\n    REAL(DFP), INTENT(IN) :: VALUE(:)\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\\n  END SUBROUTINE set3\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"Set all values of scalarfield using a vector of reals.\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"The size of value should be same as the size of scalar field.\"\n          }), \"\\n\"]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_ScalarField_test_5_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-4\",\n      children: \"Interface 4\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n MODULE SUBROUTINE set4(obj, globalNode, VALUE, scale, addContribution)\\n    CLASS(ScalarField_), INTENT(INOUT) :: obj\\n    INTEGER(I4B), INTENT(IN) :: globalNode(:)\\n    REAL(DFP), INTENT(IN) :: VALUE\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\\n  END SUBROUTINE set4\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsx)(_components.p, {\n          children: \"Set multiple values to a scalar value.\"\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_ScalarField_test_6_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-5\",\n      children: \"Interface 5\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n MODULE SUBROUTINE set5(obj, globalNode, VALUE, scale, addContribution)\\n    CLASS(ScalarField_), INTENT(INOUT) :: obj\\n    INTEGER(I4B), INTENT(IN) :: globalNode(:)\\n    REAL(DFP), INTENT(IN) :: VALUE(:)\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\\n  END SUBROUTINE set5\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsx)(_components.p, {\n          children: \"Set multiple values of scalar field.\"\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_ScalarField_test_7_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-6\",\n      children: \"Interface 6\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE SUBROUTINE set6(obj, istart, iend, stride, VALUE, &\\n    & scale, addContribution)\\n    CLASS(ScalarField_), INTENT(INOUT) :: obj\\n    INTEGER(I4B), INTENT(IN) :: istart\\n    INTEGER(I4B), INTENT(IN) :: iend\\n    INTEGER(I4B), INTENT(IN) :: stride\\n    REAL(DFP), INTENT(IN) :: VALUE\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\\n  END SUBROUTINE set6\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.p, {\n          children: [\"Set multiple values by using triplets \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"istart:iend:stride\"\n          })]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_ScalarField_test_8_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-7\",\n      children: \"Interface 7\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE SUBROUTINE set7(obj, istart, iend, stride, VALUE, &\\n    & scale, addContribution)\\n    CLASS(ScalarField_), INTENT(INOUT) :: obj\\n    INTEGER(I4B), INTENT(IN) :: istart\\n    INTEGER(I4B), INTENT(IN) :: iend\\n    INTEGER(I4B), INTENT(IN) :: stride\\n    REAL(DFP), INTENT(IN) :: VALUE(:)\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\\n  END SUBROUTINE set7\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsx)(_components.p, {\n          children: \"Set multiple values using triplets.\"\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_ScalarField_test_9_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-8\",\n      children: \"Interface 8\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE SUBROUTINE set8(obj, obj2)\\n    CLASS(ScalarField_), INTENT(INOUT) :: obj\\n    CLASS(ScalarField_), INTENT(IN) :: obj2\\n  END SUBROUTINE set8\\nEND INTERFACE\\n\"\n          })\n        })\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example1\",\n        label: \"️܀ Example 1\",\n        children: (0,jsx_runtime.jsx)(_ScalarField_test_10_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example2\",\n        label: \"️܀ Example 2\",\n        children: (0,jsx_runtime.jsx)(_ScalarField_test_17_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-9\",\n      children: \"Interface 9\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n MODULE SUBROUTINE set9(obj, globalNode, VALUE, scale, addContribution)\\n    CLASS(ScalarField_), INTENT(INOUT) :: obj\\n    INTEGER(I4B), INTENT(IN) :: globalNode(:)\\n    TYPE(FEVariable_), INTENT(IN) :: VALUE\\n  !! Scalar, Nodal, FEVariable (Space or Constant)\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\\n  END SUBROUTINE set9\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-10\",\n      children: \"Interface 10\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \" INTERFACE\\n  MODULE SUBROUTINE set10(obj, obj2, scale, addContribution)\\n    CLASS(ScalarField_), INTENT(INOUT) :: obj\\n    CLASS(ScalarField_), INTENT(IN) :: obj2\\n    REAL(DFP), INTENT(IN) :: scale\\n    LOGICAL(LGT), INTENT(IN) :: addContribution\\n  END SUBROUTINE set10\\nEND INTERFACE\\n\"\n          })\n        })\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example1\",\n        label: \"️܀ Example 1\",\n        children: (0,jsx_runtime.jsx)(_ScalarField_test_18_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example2\",\n        label: \"️܀ Example 2\",\n        children: (0,jsx_runtime.jsx)(_ScalarField_test_19_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    })]\n  });\n}\nfunction Set_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(Set_createMdxContent, {\n      ...props\n    })\n  }) : Set_createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./docs/docs-api/ScalarFieldLis/Set.md\n");

/***/ })

}]);