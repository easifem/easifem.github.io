"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkeasifem_docs"] = globalThis["webpackChunkeasifem_docs"] || []).push([["content---docs-api-append-utility-append-491-bbc"],{

/***/ "./docs/docs-api/AppendUtility/Append.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  assets: () => (/* binding */ assets),\n  contentTitle: () => (/* binding */ Append_contentTitle),\n  \"default\": () => (/* binding */ Append_MDXContent),\n  frontMatter: () => (/* binding */ Append_frontMatter),\n  metadata: () => (/* reexport */ site_docs_docs_api_append_utility_append_md_491_namespaceObject),\n  toc: () => (/* binding */ Append_toc)\n});\n\n;// ./.docusaurus/docusaurus-plugin-content-docs/docs-api/site-docs-docs-api-append-utility-append-md-491.json\nconst site_docs_docs_api_append_utility_append_md_491_namespaceObject = /*#__PURE__*/JSON.parse('{\"id\":\"AppendUtility/Append\",\"title\":\"Append\",\"description\":\"Append is a generic subroutine to append entries to vector of real or integer.\",\"source\":\"@site/docs/docs-api/AppendUtility/Append.md\",\"sourceDirName\":\"AppendUtility\",\"slug\":\"/AppendUtility/Append\",\"permalink\":\"/docs-api/AppendUtility/Append\",\"draft\":false,\"unlisted\":false,\"editUrl\":\"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/AppendUtility/Append.md\",\"tags\":[],\"version\":\"current\",\"lastUpdatedAt\":1539502055000,\"frontMatter\":{},\"sidebar\":\"tutorialSidebar\",\"previous\":{\"title\":\"AppendUtility\",\"permalink\":\"/docs-api/AppendUtility/\"},\"next\":{\"title\":\"ColConcat\",\"permalink\":\"/docs-api/AppendUtility/ColConcat\"}}');\n// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n// EXTERNAL MODULE: ./node_modules/@mdx-js/react/lib/index.js\nvar lib = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js + 2 modules\nvar Tabs = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js + 1 modules\nvar TabItem = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js\");\n;// ./docs/docs-api/AppendUtility/examples/_Append_test_1.md\n\n\nconst frontMatter = {};\nconst contentTitle = undefined;\n\n\n\n\n\nconst toc = [];\nfunction _createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n    USE easifemBase\\n    IMPLICIT NONE\\n    INTEGER(I4B), ALLOCATABLE :: intvec1(:)\\n    REAL( DFP ), ALLOCATABLE :: realvec1(:)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Now lets us append a single ENTRY to a vector of integers.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL Append(intvec1, 1)\\nCALL OK( ALL(intvec1 .EQ. [1]), \\\"Append single ENTRY\\\"  )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Appending a vector to a vector.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL Append(intvec1, [2,3])\\nCALL OK( ALL(intvec1 .EQ. [1,2,3]), \\\"Append a vector\\\"  )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Now lets us append a single real value to realvec.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL Append(realvec1, 1.0_DFP)\\nCALL OK( ALL(realvec1 .EQ. [1.0_DFP]), \\\"Append single ENTRY\\\"  )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Appending vector to a vector.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL Append(realvec1, [2.0_DFP,3.0_DFP])\\nCALL OK( ALL(realvec1 .EQ. [1.0_DFP,2.0_DFP,3.0_DFP]), \\\"Append a vector\\\"  )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Cleanup\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"    DEALLOCATE(intvec1, realvec1)\\nEND PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/AppendUtility/examples/_Append_test_2.md\n\n\nconst _Append_test_2_frontMatter = {};\nconst _Append_test_2_contentTitle = undefined;\n\n\n\n\n\nconst _Append_test_2_toc = [];\nfunction _Append_test_2_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n    USE easifemBase\\n    IMPLICIT NONE\\n    INTEGER(I4B), ALLOCATABLE :: intvec1(:)\\n    REAL( DFP ), ALLOCATABLE :: realvec1(:)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Now lets us append a single ENTRY to a vector of integers.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"intvec1 = [1] .append. 2\\nCALL OK( ALL(intvec1 .EQ. [1, 2]), \\\"Append single ENTRY\\\"  )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Appending a vector to a vector.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"intvec1 = intvec1 .append. [3]\\nCALL OK( ALL(intvec1 .EQ. [1,2,3]), \\\"Append a vector\\\"  )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Now lets us append a single real value to realvec.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"realvec1 = [1.0_DFP] .append. 2.0_DFP\\nCALL OK( ALL(realvec1 .EQ. [1.0_DFP, 2.0_DFP]), \\\"Append single ENTRY\\\"  )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Appending vector to a vector.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"realvec1 = realvec1 .append. [3.0_DFP]\\nCALL OK( ALL(realvec1 .EQ. [1.0_DFP,2.0_DFP,3.0_DFP]), \\\"Append a vector\\\"  )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Cleanup\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"    DEALLOCATE(intvec1, realvec1)\\nEND PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction _Append_test_2_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_Append_test_2_createMdxContent, {\n      ...props\n    })\n  }) : _Append_test_2_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/AppendUtility/examples/_Append_test_3.md\n\n\nconst _Append_test_3_frontMatter = {};\nconst _Append_test_3_contentTitle = undefined;\n\n\n\n\n\nconst _Append_test_3_toc = [];\nfunction _Append_test_3_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n    USE easifemBase\\n    IMPLICIT NONE\\n    INTEGER(I4B), ALLOCATABLE :: C(:), B(:), A(:)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"A and B are vectors\\\"\",\n        children: \"A = [1]\\nB = [2]\\nCALL Append(C, A, B)\\nCALL OK( ALL(C .EQ. [1, 2]), \\\"tests(1):\\\"  )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"A is vector B is scalar\\\"\",\n        children: \"A = [1]\\nCALL Append(C, A, 2)\\nCALL OK( ALL(C .EQ. [1, 2]), \\\"tests(2):\\\"  )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"END PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction _Append_test_3_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_Append_test_3_createMdxContent, {\n      ...props\n    })\n  }) : _Append_test_3_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/AppendUtility/examples/_Append_test_4.md\n\n\nconst _Append_test_4_frontMatter = {};\nconst _Append_test_4_contentTitle = undefined;\n\n\n\n\n\nconst _Append_test_4_toc = [];\nfunction _Append_test_4_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n    USE easifemBase\\n    IMPLICIT NONE\\n    INTEGER(I4B), ALLOCATABLE :: intvec1(:)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Now lets us append a single ENTRY to a vector.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL Append(intvec1, 1, mask=.true.)\\nCALL Append(intvec1, 1, mask=.false.)\\nCALL OK( ALL(intvec1 .EQ. [1]), \\\"Append single ENTRY\\\"  )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Appending a vector to a vector.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL Append(intvec1, [2,3], mask=[.true., .true.])\\nCALL Append(intvec1, [4,5], mask=[.true., .false.])\\nCALL OK( ALL(intvec1 .EQ. [1,2,3,4]), \\\"Append a vector\\\"  )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"END PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction _Append_test_4_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_Append_test_4_createMdxContent, {\n      ...props\n    })\n  }) : _Append_test_4_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/AppendUtility/examples/_Append_test_5.md\n\n\nconst _Append_test_5_frontMatter = {};\nconst _Append_test_5_contentTitle = undefined;\n\n\n\n\n\nconst _Append_test_5_toc = [];\nfunction _Append_test_5_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n    USE easifemBase\\n    IMPLICIT NONE\\n    INTEGER(I4B), ALLOCATABLE :: C(:), B(:), A(:)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"A and B are vectors\\\"\",\n        children: \"  A = [1, 2]\\n  B = [3, 4]\\n  !!\\n  !! Append B(1) and B(2) to A and assign to C.\\n  !!\\n  CALL Append(C, A, B, mask=[.true., .true.]) \\n  CALL OK( ALL(C .EQ. [1, 2, 3, 4]), \\\"Append:\\\"  )\\n\\n  !!\\n  !! Append B(1) to A and assign to C.\\n  !!\\n  CALL Append(C, A, B, mask=[.true., .false.]) \\n  CALL OK( ALL(C .EQ. [1, 2, 3]), \\\"Append:\\\"  )\\n\\n\\n  !!\\n  !! Do not append B to A, just assign A to C.\\n  !!\\n  CALL Append(C, A, B, mask=[.false., .false.]) \\n  CALL OK( ALL(C .EQ. [1, 2]), \\\"Append:\\\" )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        metastring: \"title=\\\"A is vector B is scalar\\\"\",\n        children: \"  !!\\n  !! Append 3 to A and then assign result to C\\n  !!\\n  CALL Append(C, A, 3, mask=.true.)\\n  CALL OK( ALL(C .EQ. [1, 2, 3]), \\\"Append:\\\"  )\\n\\n  !!\\n  !! Do not append 3 to A, assign result to C, that is C =A\\n  !!\\n  CALL Append(C, A, 3, mask=.false.)\\n  CALL OK( ALL(C .EQ. [1, 2]), \\\"Append:\\\"  )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"END PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction _Append_test_5_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_Append_test_5_createMdxContent, {\n      ...props\n    })\n  }) : _Append_test_5_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/AppendUtility/Append.md\n\n\nconst Append_frontMatter = {};\nconst Append_contentTitle = 'Append';\n\nconst assets = {\n\n};\n\n\n\n\n\n\n\n\n\n\nconst Append_toc = [{\n  \"value\": \"Interface 1\",\n  \"id\": \"interface-1\",\n  \"level\": 2\n}, ...toc, ..._Append_test_2_toc, {\n  \"value\": \"Interface 2\",\n  \"id\": \"interface-2\",\n  \"level\": 2\n}, ..._Append_test_3_toc, {\n  \"value\": \"Interface 3\",\n  \"id\": \"interface-3\",\n  \"level\": 2\n}, ..._Append_test_4_toc, {\n  \"value\": \"Interface 4\",\n  \"id\": \"interface-4\",\n  \"level\": 2\n}, ..._Append_test_5_toc];\nfunction Append_createMdxContent(props) {\n  const _components = {\n    admonition: \"admonition\",\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    header: \"header\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.header, {\n      children: (0,jsx_runtime.jsx)(_components.h1, {\n        id: \"append\",\n        children: \"Append\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Append is a generic subroutine to append entries to vector of real or integer.\"\n    }), \"\\n\", \"\\n\", (0,jsx_runtime.jsx)(_components.admonition, {\n      type: \"note\",\n      children: (0,jsx_runtime.jsx)(_components.p, {\n        children: \"While calling Append the initial vector can be unallocated in the begining.\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Calling examples:\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL Append(A, entry)\\nCALL Append(C, A, B)\\nCALL Append(A, entry, mask)\\nCALL Append(C, A, B, mask)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-1\",\n      children: \"Interface 1\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"append\",\n        label: \"Append (1)\",\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"CALL Append(A, entry)\\n\"\n          })\n        }), (0,jsx_runtime.jsx)(_components.p, {\n          children: \"Here,\"\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"A\"\n            }), \" can be an allocatable vector of real or integer.\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"entry\"\n            }), \" can be a scalar of real or integer.\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"entry\"\n            }), \" can be a vector of real or integer.\"]\n          }), \"\\n\"]\n        }), (0,jsx_runtime.jsx)(_components.p, {\n          children: \"We can:\"\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"Append a scalar-integer to an integer-vector\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"Append an integer-vector and scalar to an integer-vector\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"Append a scalar-real to a real-vector\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"Append a real-vector to a real-vector\"\n          }), \"\\n\"]\n        }), (0,jsx_runtime.jsxs)(_components.admonition, {\n          type: \"note\",\n          children: [(0,jsx_runtime.jsx)(_components.p, {\n            children: \"We can also use this method as:\"\n          }), (0,jsx_runtime.jsx)(_components.pre, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              className: \"language-fortran\",\n              children: \"A = A .append. entry\\n\"\n            })\n          })]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"Example 1\",\n        children: (0,jsx_runtime.jsx)(MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example2\",\n        label: \"Example 2\",\n        children: (0,jsx_runtime.jsx)(_Append_test_2_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-2\",\n      children: \"Interface 2\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"append\",\n        label: \"Append (2)\",\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"CALL Append(C, A, B)\\n\"\n          })\n        }), (0,jsx_runtime.jsx)(_components.p, {\n          children: \"where,\"\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"Append A and B, then assign it to \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"C\"\n            })]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"C\"\n            }), \" can be an allocatable vector of real or integer\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"A\"\n            }), \" can be a vector of real or integer\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"B\"\n            }), \" can be a scalar of real or integer\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"B\"\n            }), \" can be a vector of real or integer\"]\n          }), \"\\n\"]\n        }), (0,jsx_runtime.jsx)(_components.admonition, {\n          type: \"note\",\n          children: (0,jsx_runtime.jsxs)(_components.p, {\n            children: [\"Currently, \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"A\"\n            }), \" cannot be scalar in the above interface.\"]\n          })\n        }), (0,jsx_runtime.jsx)(_components.p, {\n          children: \"We can:\"\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"Append a scalar and a vector of int to another vector of int\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"Append two vectors of int to another vector of int\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"Append a scalar and a vector of real to another vector of real\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"Append two vectors of real to another vector of real\"\n          }), \"\\n\"]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"See example\",\n        children: (0,jsx_runtime.jsx)(_Append_test_3_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-3\",\n      children: \"Interface 3\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"append\",\n        label: \"Append (3)\",\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"CALL Append(A, entry, mask)\\n\"\n          })\n        }), (0,jsx_runtime.jsx)(_components.p, {\n          children: \"here,\"\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"A\"\n            }), \" is an allocatable vector of real or integer.\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"entry\"\n            }), \" can be a scalar of real or integer. In this case \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"mask\"\n            }), \" is a scalar of logical type\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"entry\"\n            }), \" can be a vector of real or integer. In this case, \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"mask\"\n            }), \" will be a vector of logical types.\"]\n          }), \"\\n\"]\n        }), (0,jsx_runtime.jsx)(_components.admonition, {\n          type: \"note\",\n          children: (0,jsx_runtime.jsxs)(_components.p, {\n            children: [\"The size of \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"mask\"\n            }), \" should be same as the size of \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"entry\"\n            }), \".\"]\n          })\n        }), (0,jsx_runtime.jsx)(_components.p, {\n          children: \"We can:\"\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"Masked append a scalar integer to a vector of int\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"Masked append a scalar real to a vector of reals\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"Masked append a vector of integer to a vector of integer\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"Masked append a vector of real to a vector of real\"\n          }), \"\\n\"]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"See example\",\n        children: (0,jsx_runtime.jsx)(_Append_test_4_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-4\",\n      children: \"Interface 4\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"append\",\n        label: \"Append (4)\",\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"CALL Append(C, A, B, mask)\\n\"\n          })\n        }), (0,jsx_runtime.jsx)(_components.p, {\n          children: \"where,\"\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"C\"\n            }), \" is an allocatable vector of real or integer\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"A\"\n            }), \" is a vector of real or integer\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"B\"\n            }), \" is a vector of real or integer\"]\n          }), \"\\n\"]\n        }), (0,jsx_runtime.jsx)(_components.admonition, {\n          type: \"note\",\n          children: (0,jsx_runtime.jsxs)(_components.p, {\n            children: [\"Currently, we do not allow \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"A\"\n            }), \" to be a scalar in the above call.\"]\n          })\n        }), (0,jsx_runtime.jsx)(_components.p, {\n          children: \"We can:\"\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"Masked append a scalar and vector of int to another vector of int\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"Masked append a scalar and vector real to another vector of real\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"Masked append two vectors of integer to another vector of integer\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"Masked append two vectors of real to another vector of real\"\n          }), \"\\n\"]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"See example\",\n        children: (0,jsx_runtime.jsx)(_Append_test_5_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    })]\n  });\n}\nfunction Append_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(Append_createMdxContent, {\n      ...props\n    })\n  }) : Append_createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./docs/docs-api/AppendUtility/Append.md\n");

/***/ })

}]);