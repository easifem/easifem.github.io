"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[65931],{95806:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>p,frontMatter:()=>l,metadata:()=>r,toc:()=>m});const r=JSON.parse('{"id":"SteadyStokes221/Assemble","title":"Assemble","description":"This procedure pointer assembles the problem","source":"@site/docs/docs-api/SteadyStokes221/Assemble.md","sourceDirName":"SteadyStokes221","slug":"/SteadyStokes221/Assemble","permalink":"/docs-api/SteadyStokes221/Assemble","draft":false,"unlisted":false,"editUrl":"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/SteadyStokes221/Assemble.md","tags":[],"version":"current","lastUpdatedAt":1724304782000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"ApplyDirichletBC","permalink":"/docs-api/SteadyStokes221/ApplyDirichletBC"},"next":{"title":"AssembleRHS","permalink":"/docs-api/SteadyStokes221/AssembleRHS"}}');var t=a(23420),i=a(54213);function s(e){const n={a:"a",admonition:"admonition",code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["This example tests and demonstrates the usage of ",(0,t.jsx)(n.code,{children:"AssembleTanMat()"})," method."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  USE easifemMaterials\n  USE easifemKernels\n  USE SteadyStokes221_Class\n  IMPLICIT NONE\n"})}),"\n",(0,t.jsx)(n.p,{children:"Declare variables"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:'  TYPE( SteadyStokes221_ ) :: obj\n  TYPE( ParameterList_ ) :: param\n  TYPE( DomainPointer_ ) :: domains(2)\n  CLASS( Domain_ ), POINTER :: dom => NULL()\n  CHARACTER( LEN = * ), PARAMETER :: domainFileNamePressure="./mesh_tri3.h5"\n  CHARACTER( LEN = * ), PARAMETER :: domainFileNameVelocity="./mesh_tri6.h5"\n  TYPE(String) :: filename(2)\n  TYPE( MeshSelection_ ) :: region\n  CLASS( DirichletBC_ ), POINTER :: dbc => NULL()\n'})}),"\n",(0,t.jsx)(n.p,{children:"Set parameters"}),"\n",(0,t.jsxs)(n.p,{children:["Initiate an instance of ",(0,t.jsx)(n.a,{href:"/docs-api/ParameterList/ParameterList_",children:"ParameterList_"}),", param, this will be used to initiate several objects."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",metastring:'title="Initiate param"',children:"  CALL FPL_INIT(); CALL param%Initiate()\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",metastring:'{5} title="set SteadyStokes221 parameters"',children:'  CALL SetSteadyStokes221Param( &\n    & param=param, &\n    & isConservativeForm=.TRUE., &\n    & gravity = [0.0_DFP, -9.8_DFP, 0.0_DFP], &\n    & domainFileForPressure = domainFileNamePressure, &\n    & domainFileForVelocity = domainFileNameVelocity, &\n    & engine="NATIVE_SERIAL", &\n    & CoordinateSystem=KERNEL_CARTESIAN, &\n    & maxIter = 100, &\n    & rtoleranceForPressure = REAL( 1.0E-6, DFP ), &\n    & rtoleranceForVelocity = REAL( 1.0E-6, DFP ), &\n    & atoleranceForPressure = REAL( 1.0E-6, DFP ), &\n    & atoleranceForVelocity = REAL( 1.0E-6, DFP ), &\n    & toleranceForSteadyState = REAL( 1.0E-6, DFP ), &\n    & tFluidMaterials=1, &\n    & tDirichletBCForPressure=1, &\n    & tDirichletBCForVelocity=3, &\n    & baseInterpolationForSpace="LagrangeInterpolation", &\n    & baseContinuityForSpace="H1", &\n    & quadratureTypeForSpace="GaussLegendre", &\n    & postProcessOpt=1)\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",metastring:'title="Set param for linSolver"',children:"  CALL SetLinSolverParam( &\n    & param=param, &\n    & solverName=LIS_GMRES,&\n    & preconditionOption=NO_PRECONDITION, &\n    & convergenceIn=convergenceInRes, &\n    & convergenceType=relativeConvergence, &\n    & maxIter=100, &\n    & relativeToRHS=.TRUE., &\n    & KrylovSubspaceSize=20, &\n    & rtol=REAL( 1.0E-10, DFP ), &\n    & atol=REAL( 1.0D-10, DFP ) )\n"})}),"\n",(0,t.jsx)(n.p,{children:"Initiate domain"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",metastring:'{1} title="Initiate domain"',children:"  filename = [String(domainFileNameVelocity), &\n    & String(domainFileNamePressure)]\n  CALL e%setQuietMode(.TRUE.)\n  CALL Initiate(domains=domains, filename=filename)\n"})}),"\n",(0,t.jsx)(n.admonition,{title:"In line 1, make sure that Velocity domain comes first.",type:"caution"}),"\n",(0,t.jsx)(n.p,{children:"Initiate kernel"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",metastring:'{1} title="Initiate kernel"',children:"  CALL e%setQuietMode(.TRUE.)\n  CALL obj%Initiate(param=param, domains=domains )\n"})}),"\n",(0,t.jsx)(n.p,{children:"Here, line 1 is to allow verbosity."}),"\n",(0,t.jsxs)(n.p,{children:["Add fluid material to kernel. To do so, we first create an instance of ",(0,t.jsx)(n.a,{href:"/docs-api/MeshSelection/MeshSelection_",children:"MeshSelection_"}),". Then we add this instance to the kernel."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",metastring:'title="adding fluid material"',children:'  CALL e%setQuietMode(.TRUE.)\n  CALL region%Initiate( isSelectionByMeshID=.TRUE. )\n  CALL region%Add( dim=obj%nsd, meshID=[1] )\n  CALL SetFluidMaterialParam( &\n    & param=param, &\n    & name="fluidMaterial", &\n    & massDensity=1000.0_DFP, &\n    & dynamicViscosity = 0.001_DFP, &\n    & stressStrainModel="NewtonianFluidModel" )\n  CALL SetNewtonianFluidModelParam( &\n    & param = param, &\n    & dynamicViscosity = 0.001_DFP )\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:'  CALL e%setQuietMode(.TRUE.)\n  CALL obj%AddFluidMaterial( &\n    & materialNo=1, &\n    & materialName="fluidMaterial", &\n    & param=param, &\n    & region=region)\n  CALL region%Deallocate()\n'})}),"\n",(0,t.jsx)(n.p,{children:"Add Dirichlet boundary condition"}),"\n",(0,t.jsxs)(n.p,{children:["V1=0, Now we show how to add dirichlet boundary condition. To this end first we create an instance of ",(0,t.jsx)(n.a,{href:"/docs-api/MeshSelection/MeshSelection_",children:"MeshSelection_"})," to select the region of the mesh. Then we define the dirichlet bonundary condition, and pass these two information to kernel."]}),"\n",(0,t.jsx)(n.p,{children:"Set parameters for dirichlet boundary condition:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:'  CALL SetDirichletBCParam( &\n    & param=param, &\n    & name="ZeroV1", &\n    & idof=1, &\n    & nodalValueType=Constant, &\n    & useFunction=.FALSE. )\n'})}),"\n",(0,t.jsx)(n.p,{children:"Select the mesh region:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"#define BOTTOM 1\n#define RIGHT 2\n#define TOP 3\n#define LEFT 4\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"  CALL region%Initiate( isSelectionByMeshID=.TRUE. )\n  CALL region%Add( dim=obj%nsd-1, meshID=[BOTTOM, RIGHT, LEFT] )\n  CALL region%Set()\n"})}),"\n",(0,t.jsx)(n.p,{children:"Add dirichlet boundary condition and the region to kernel:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"  CALL obj%AddVelocityDirichletBC( &\n    & dbcNo=1, &\n    & param=param, &\n    & boundary=region )\n  dbc => obj%GetVelocityDirichletBCPointer( dbcNo=1 )\n  CALL dbc%Set( ConstantNodalValue=0.0_DFP )\n  dbc=>NULL()\n"})}),"\n",(0,t.jsx)(n.p,{children:"V1=U, Set parameters for dirichlet boundary condition:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:'  CALL SetDirichletBCParam( &\n    & param=param, &\n    & name="UpstreamV1", &\n    & idof=1, &\n    & nodalValueType=Constant, &\n    & useFunction=.FALSE. )\n'})}),"\n",(0,t.jsx)(n.p,{children:"Select the mesh region:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"  CALL region%Deallocate()\n  CALL region%Initiate( isSelectionByMeshID=.TRUE. )\n  CALL region%Add( dim=obj%nsd-1, meshID=[TOP] )\n  CALL region%Set()\n"})}),"\n",(0,t.jsx)(n.p,{children:"Add dirichlet boundary condition and the region to kernel:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"  CALL obj%AddVelocityDirichletBC( &\n    & dbcNo=2, &\n    & param=param, &\n    & boundary=region )\n  dbc => obj%GetVelocityDirichletBCPointer( dbcNo=2 )\n  CALL dbc%Set( ConstantNodalValue=0.1_DFP )\n  dbc=>NULL()\n  CALL region%Deallocate()\n"})}),"\n",(0,t.jsx)(n.p,{children:"V2=0, Set parameters for dirichlet boundary condition:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:'  CALL SetDirichletBCParam( &\n    & param=param, &\n    & name="ZeroV2", &\n    & idof=2, &\n    & nodalValueType=Constant, &\n    & useFunction=.FALSE. )\n'})}),"\n",(0,t.jsx)(n.p,{children:"Select the mesh region:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"  CALL region%Deallocate()\n  CALL region%Initiate( isSelectionByMeshID=.TRUE. )\n  CALL region%Add( dim=obj%nsd-1, meshID=[BOTTOM, RIGHT, TOP, LEFT] )\n  CALL region%Set()\n"})}),"\n",(0,t.jsx)(n.p,{children:"Add dirichlet boundary condition and the region to kernel:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"  CALL obj%AddVelocityDirichletBC( &\n    & dbcNo=3, &\n    & param=param, &\n    & boundary=region )\n  dbc => obj%GetVelocityDirichletBCPointer( dbcNo=3 )\n  CALL dbc%Set( ConstantNodalValue=0.0_DFP ); dbc=>NULL()\n  CALL region%Deallocate()\n"})}),"\n",(0,t.jsx)(n.p,{children:"P=0, Set parameters for dirichlet boundary condition:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",metastring:'title="setting boundary condition P=0"',children:'CALL SetDirichletBCParam( &\n  & param=param, &\n  & name="ZeroP", &\n  & idof=1, &\n  & nodalValueType=Constant, &\n  & useFunction=.FALSE. )\n'})}),"\n",(0,t.jsx)(n.p,{children:"Select the mesh region:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"CALL region%Deallocate()\nCALL region%Initiate( isSelectionByMeshID=.TRUE. )\nCALL region%Add( dim=obj%nsd-1, meshID=[BOTTOM] )\nCALL region%Set()\n"})}),"\n",(0,t.jsx)(n.p,{children:"Add dirichlet boundary condition and the region to kernel:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"  CALL obj%AddPressureDirichletBC( dbcNo=1, param=param, &\n    & boundary=region )\n  dbc => obj%GetPressureDirichletBCPointer( dbcNo=1 )\n  CALL dbc%Set( ConstantNodalValue=0.0_DFP ); dbc=>NULL()\n  CALL region%Deallocate()\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Now that we are done with the setup, we should call ",(0,t.jsx)(n.code,{children:"Set"})," method. In this method, the kernel checks the data, configuration, and intiates appropriate variables."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"  CALL obj%Set()\n"})}),"\n",(0,t.jsx)(n.p,{children:"AssembleTanMat"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",metastring:'title="assembling tangent matrix"',children:"  CALL e%setQuietMode(.TRUE.)\n  CALL obj%AssembleTanmat()\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-comment",metastring:'title="checking sparsity pattern"',children:'  CALL obj%Kmat%SPY(filename="./Kmat", ext=".png")\n  CALL obj%Gmat%SPY(filename="./Gmat", ext=".png")\n'})}),"\n",(0,t.jsx)(n.p,{children:"Assemble"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",metastring:'title="assemble"',children:"  CALL e%setQuietMode(.FALSE.)\n  CALL obj%Assemble()\n"})}),"\n",(0,t.jsx)(n.p,{children:"Cleanup"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"  CALL obj%Deallocate()\n  CALL param%Deallocate()\n  CALL FPL_FINALIZE()\nEND PROGRAM main\n"})})]})}function o(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(s,{...e})}):s(e)}const l={},d="Assemble",c={},m=[{value:"Interface",id:"interface",level:2},{value:"Example",id:"example",level:2}];function h(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"assemble",children:"Assemble"})}),"\n",(0,t.jsx)(n.p,{children:"This procedure pointer assembles the problem"}),"\n",(0,t.jsx)(n.h2,{id:"interface",children:"Interface"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE Assemble(obj)\n    CLASS(AbstractSteadyStokes_), INTENT(INOUT) :: obj\n  END SUBROUTINE Assemble\nEND INTERFACE\n"})}),"\n",(0,t.jsx)(n.h2,{id:"example",children:"Example"}),"\n","\n",(0,t.jsx)(o,{})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},54213:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>o});var r=a(36672);const t={},i=r.createContext(t);function s(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);