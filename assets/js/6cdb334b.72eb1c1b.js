"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[28096],{67435:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>E,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"ElemshapeData/GetDivergence","title":"GetDivergence","description":"The following subroutine returns the Divergence of a vector","source":"@site/docs/docs-api/ElemshapeData/GetDivergence.md","sourceDirName":"ElemshapeData","slug":"/ElemshapeData/GetDivergence","permalink":"/docs-api/ElemshapeData/GetDivergence","draft":false,"unlisted":false,"editUrl":"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/ElemshapeData/GetDivergence.md","tags":[],"version":"current","lastUpdatedAt":1724304782000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Structure","permalink":"/docs-api/ElemshapeData/ElemshapeData_"},"next":{"title":"GetHRGNParam","permalink":"/docs-api/ElemshapeData/GetHRGNParam"}}');var r=a(23420),i=a(54213);const o={},s="GetDivergence",c={},l=[];function g(e){const n={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"getdivergence",children:"GetDivergence"})}),"\n",(0,r.jsx)(n.p,{children:"The following subroutine returns the Divergence of a vector"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",children:"MODULE PURE SUBROUTINE getDivergence_1(obj, lg, val)\n  CLASS(ElemshapeData_), INTENT(IN) :: obj\n  REAL(DFP), ALLOCATABLE, INTENT(INOUT) :: lg(:)\n  !!  Divergence at integration points\n  REAL(DFP), INTENT(IN) :: val(:, :)\n  !! space nodal values of vector in `xiJ` format\n  !! row index: space component\n  !! col index: node number\nEND SUBROUTINE getDivergence_1\n"})}),"\n",(0,r.jsx)(n.p,{children:"The following subroutine returns the Divergence of a vector"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",children:"MODULE PURE SUBROUTINE getDivergence_2(obj, lg, val)\n  CLASS(ElemshapeData_), INTENT(IN) :: obj\n  REAL(DFP), ALLOCATABLE, INTENT(INOUT) :: lg(:)\n  !!  Divergence at integration points\n  REAL(DFP), INTENT(IN) :: val(:, :, :)\n  !! space-time nodal values of vector in `xiJa` format\nEND SUBROUTINE getDivergence_2\n"})}),"\n",(0,r.jsx)(n.p,{children:"The following subroutine returns the Divergence of a vector"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",children:"MODULE PURE SUBROUTINE getDivergence_3(obj, lg, val)\n  CLASS(ElemshapeData_), INTENT(IN) :: obj\n  REAL(DFP), ALLOCATABLE, INTENT(INOUT) :: lg(:)\n  !!  Divergence of vector at integration points\n  TYPE(FEVariable_), INTENT(IN) :: val\n  !! vector finite-element variable\nEND SUBROUTINE getDivergence_3\n"})}),"\n",(0,r.jsx)(n.p,{children:"The following subroutine returns the Divergence of a matrix"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",children:"MODULE PURE SUBROUTINE getDivergence_4(obj, lg, val)\n  CLASS(ElemshapeData_), INTENT(IN) :: obj\n  REAL(DFP), ALLOCATABLE, INTENT(INOUT) :: lg(:, :)\n  !!  Divergence at integration points\n  REAL(DFP), INTENT(IN) :: val(:, :, :)\n  !! space nodal values of matrix in (i,j,I) format\nEND SUBROUTINE getDivergence_4\n"})}),"\n",(0,r.jsx)(n.p,{children:"The following subroutine returns the Divergence of a vector"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",children:"MODULE PURE SUBROUTINE getDivergence_5(obj, lg, val)\n  CLASS(ElemshapeData_), INTENT(IN) :: obj\n  REAL(DFP), ALLOCATABLE, INTENT(INOUT) :: lg(:, :)\n  !!  Divergence at integration points\n  REAL(DFP), INTENT(IN) :: val(:, :, :, :)\n  !! space-time nodal values of matrix in (i,j,I,a) format\nEND SUBROUTINE getDivergence_5\n"})}),"\n",(0,r.jsx)(n.p,{children:"The following subroutine returns the Divergence of a vector"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",children:"MODULE PURE SUBROUTINE getDivergence_6(obj, lg, val)\n  CLASS(ElemshapeData_), INTENT(IN) :: obj\n  REAL(DFP), ALLOCATABLE, INTENT(INOUT) :: lg(:, :)\n  !!  Divergence at integration points\n  TYPE(FEVariable_), INTENT(IN) :: val\n  !! space/space-time nodal values of matrix in (i,j,I) format\nEND SUBROUTINE getDivergence_6\n"})}),"\n",(0,r.jsx)(n.p,{children:"The following subroutine returns the Divergence"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",children:"MODULE PURE SUBROUTINE getDivergence_7(obj, lg, val)\n  CLASS(ElemshapeData_), INTENT(IN) :: obj\n  TYPE(FEVariable_), INTENT(INOUT) :: lg\n  !!  Divergence of scalar/vector/matrix at space integration points\n  TYPE(FEVariable_), INTENT(IN) :: val\nEND SUBROUTINE getDivergence_7\n"})}),"\n",(0,r.jsx)(n.p,{children:"The following subroutine returns the Divergence"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",children:"MODULE PURE SUBROUTINE getDivergence_8(obj, lg, val)\n  CLASS(STElemshapeData_), INTENT(IN) :: obj(:)\n  TYPE(FEVariable_), INTENT(INOUT) :: lg\n  !!  Divergence of scalar/vector/matrix at space-time\n  !! integration points\n  TYPE(FEVariable_), INTENT(IN) :: val\n  !! space time nodal values of scalar/vector/matrix\nEND SUBROUTINE getDivergence_8\n"})})]})}function E(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(g,{...e})}):g(e)}},54213:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>s});var t=a(36672);const r={},i=t.createContext(r);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);