"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[13339],{4442:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>I,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"FEDOF/Initiate","title":"Initiate","description":"This method initiates an instance of FEDOF. There are several ways to initiate an instance of FEDOF.","source":"@site/docs/docs-api/FEDOF/Initiate.md","sourceDirName":"FEDOF","slug":"/FEDOF/Initiate","permalink":"/docs-api/FEDOF/Initiate","draft":false,"unlisted":false,"editUrl":"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/FEDOF/Initiate.md","tags":[],"version":"current","lastUpdatedAt":1737330762000,"sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"SetFEDOFParam","permalink":"/docs-api/FEDOF/SetFEDOFParam"},"next":{"title":"FEDomain","permalink":"/docs-api/FEDomain/"}}');var i=a(23420),r=a(54213);const s={sidebar_position:4},o="Initiate",l={},c=[{value:"Interface 1",id:"interface-1",level:2},{value:"Interface 2",id:"interface-2",level:2},{value:"Interface 3",id:"interface-3",level:2},{value:"Interface 4",id:"interface-4",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"initiate",children:"Initiate"})}),"\n",(0,i.jsxs)(n.p,{children:["This method initiates an instance of ",(0,i.jsx)(n.code,{children:"FEDOF"}),". There are several ways to initiate an instance of ",(0,i.jsx)(n.code,{children:"FEDOF"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"interface-1",children:"Interface 1"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Homogeneous order"}),"\n",(0,i.jsxs)(n.li,{children:["In case of ",(0,i.jsx)(n.code,{children:"H1"})," Lagrange ",(0,i.jsx)(n.code,{children:"FEDOF"}),", order is determined from the cell order of each mesh."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE Initiate(obj, order, mesh, baseContinuity, &\n                    baseInterpolation, ipType, basisType, alpha, beta, lambda)\n    CLASS(FEDOF_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: order\n    !! homogeneous value of order\n    CLASS(AbstractMesh_), TARGET, INTENT(IN) :: mesh\n    !! cell mesh\n    CHARACTER(*), INTENT(IN) :: baseContinuity\n    !! continuity of basis (regularity or conformity)\n    CHARACTER(*), INTENT(IN) :: baseInterpolation\n    !! basis function used for interpolation\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: ipType\n    !! interpolation point type\n    !! used when baseInterpolation is Lagrange\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: basisType(:)\n    !! type of basis function used for\n    !! constructing the Lagrange polynomial\n    !! Used when baseInterpolation is Lagrange\n    REAL(DFP), OPTIONAL, INTENT(IN) :: alpha(:)\n    !! alpha parameter for jacobian parameter\n    !! used when baseInterpolation is Lagrange\n    !! used when basistype is Jacobi\n    REAL(DFP), OPTIONAL, INTENT(IN) :: beta(:)\n    !! beta parameter for jacobian parameter\n    !! used when baseInterpolation is Lagrange\n    !! used when basistype is Jacobi\n    REAL(DFP), OPTIONAL, INTENT(IN) :: lambda(:)\n    !! lambda parameter for Ultraspherical parameter\n    !! used when baseInterpolation is Lagrange\n    !! used when basistype is Ultraspherical\n  END SUBROUTINE Initiate\nEND INTERFACE\n"})}),"\n",(0,i.jsx)(n.h2,{id:"interface-2",children:"Interface 2"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Here order represents the order of each cell element."}),"\n",(0,i.jsxs)(n.li,{children:["In case of ",(0,i.jsx)(n.code,{children:"H1"})," Lagrange ",(0,i.jsx)(n.code,{children:"FEDOF"}),", order is determined from the cell order of each mesh."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE Initiate(obj, order, mesh, baseContinuity, &\n                    baseInterpolation, ipType, basisType, alpha, lambda, beta)\n    CLASS(FEDOF_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: order(:)\n    CLASS(AbstractMesh_), TARGET, INTENT(IN) :: mesh\n    CHARACTER(*), INTENT(IN) :: baseContinuity\n    CHARACTER(*), INTENT(IN) :: baseInterpolation\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: ipType\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: basisType(:)\n    REAL(DFP), OPTIONAL, INTENT(IN) :: alpha(:)\n    REAL(DFP), OPTIONAL, INTENT(IN) :: beta(:)\n    REAL(DFP), OPTIONAL, INTENT(IN) :: lambda(:)\n  END SUBROUTINE Initiate\nEND INTERFACE\n"})}),"\n",(0,i.jsx)(n.h2,{id:"interface-3",children:"Interface 3"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["This method is used to initiate ",(0,i.jsx)(n.code,{children:"FEDOF"})," by using ",(0,i.jsx)(n.code,{children:"ParameterList"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE Initiate(obj, param, mesh)\n    CLASS(FEDOF_), INTENT(INOUT) :: obj\n    TYPE(ParameterList_), INTENT(IN) :: param\n    CLASS(AbstractMesh_), TARGET, INTENT(IN) :: mesh\n  END SUBROUTINE Initiate\nEND INTERFACE\n"})}),"\n",(0,i.jsx)(n.h2,{id:"interface-4",children:"Interface 4"}),"\n",(0,i.jsx)(n.p,{children:"This routine is similar to the interface 2, but the order of the element is defined for global element numbers."}),"\n",(0,i.jsx)(n.p,{children:"The number of rows in order is equal to 2, the first row contains the global element number the second row contains the order."}),"\n",(0,i.jsxs)(n.p,{children:["This routine will make ",(0,i.jsx)(n.code,{children:"order0(:)"})," from ",(0,i.jsx)(n.code,{children:"order(:,:)"})," and call ",(0,i.jsx)(n.code,{children:"Initiate2"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE Initiate(obj, order, mesh, baseContinuity, &\n                    baseInterpolation, ipType, basisType, alpha, beta, lambda)\n    CLASS(FEDOF_), INTENT(INOUT) :: obj\n    !! FEDOF\n    INTEGER(I4B), INTENT(IN) :: order(:, :)\n    !! the number of columns in order is equal to total number of elements\n    !! the number of rows in order is equal to 2\n    !! the first row contains the global element number\n    !! the second rows contains the order of that element\n    CLASS(AbstractMesh_), TARGET, INTENT(IN) :: mesh\n    !! mesh\n    CHARACTER(*), INTENT(IN) :: baseContinuity\n    !! continuity of basis function\n    CHARACTER(*), INTENT(IN) :: baseInterpolation\n    !! interpolation of basis\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: ipType\n    !! interpolation point type, needed for Lagrange polynomial\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: basisType(:)\n    !! basis type, needed for Lagrange polynomial only\n    REAL(DFP), OPTIONAL, INTENT(IN) :: alpha(:)\n    !! alpha parameter for jacobian parameter\n    REAL(DFP), OPTIONAL, INTENT(IN) :: beta(:)\n    !! beta parameter for jacobian parameter\n    REAL(DFP), OPTIONAL, INTENT(IN) :: lambda(:)\n  END SUBROUTINE Initiate\nEND INTERFACE\n"})})]})}function I(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},54213:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>o});var t=a(36672);const i={},r=t.createContext(i);function s(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);