"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[75594],{35807:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"CSRSparsity/CSRSparsity_","title":"Structure","description":"CSRSparsity is data type for handling CSRMatrix in EASIFEM.","source":"@site/docs/docs-api/CSRSparsity/CSRSparsity_.md","sourceDirName":"CSRSparsity","slug":"/CSRSparsity/CSRSparsity_","permalink":"/docs-api/CSRSparsity/CSRSparsity_","draft":false,"unlisted":false,"editUrl":"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/CSRSparsity/CSRSparsity_.md","tags":[],"version":"current","lastUpdatedAt":1724304782000,"sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"CSRSparsity","permalink":"/docs-api/CSRSparsity/"},"next":{"title":"Deallocate","permalink":"/docs-api/CSRSparsity/Deallocate"}}');var s=n(23420),r=n(54213);const o={sidebar_position:2},a="Structure",c={},d=[];function l(e){const i={code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.header,{children:(0,s.jsx)(i.h1,{id:"structure",children:"Structure"})}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"CSRSparsity_"})," is data type for handling ",(0,s.jsx)(i.code,{children:"CSRMatrix_"})," in EASIFEM."]}),"\n",(0,s.jsxs)(i.p,{children:["It is encapsulated inside ",(0,s.jsx)(i.code,{children:"CSRMatrix_"}),", and contains only the sparsity pattern not the matrix values, which we can use a single instance of ",(0,s.jsx)(i.code,{children:"CSRSparsity_"})," to define several ",(0,s.jsx)(i.code,{children:"CSRMatrix_"}),"."]}),"\n",(0,s.jsx)(i.p,{children:"The structure is given below."}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-fortran",children:"TYPE :: CSRSparsity_\nINTEGER( I4B ) :: nnz = 0\nINTEGER( I4B ) :: ncol = 0\nINTEGER( I4B ) :: nrow = 0\nLOGICAL( LGT ) :: isSorted = .FALSE.\nLOGICAL( LGT ) :: isInitiated = .FALSE.\nLOGICAL( LGT ) :: isSparsityLock = .FALSE.\nINTEGER( I4B ), ALLOCATABLE :: IA( : )\nINTEGER( I4B ), ALLOCATABLE :: JA( : )\nTYPE( IntVector_ ), ALLOCATABLE :: row( : )\nTYPE( DOF_ ) :: dof\nEND TYPE CSRSparsity_\n"})}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"IA"})," : size of IA is number of rows in the sparse matrix. It contains indices for accessing the entries in ",(0,s.jsx)(i.code,{children:"JA"}),". For example, ",(0,s.jsx)(i.code,{children:"IA( iRow )"})," to ",(0,s.jsx)(i.code,{children:"IA( iRow + 1 ) - 1"})," are indices of entries of matrix of ",(0,s.jsx)(i.code,{children:"iRow"}),"."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"JA"}),": size of ",(0,s.jsx)(i.code,{children:"JA"})," is ",(0,s.jsx)(i.code,{children:"NNZ"}),". ",(0,s.jsx)(i.code,{children:"JA"})," contains the column indices."]}),"\n"]})]})}function p(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},54213:(e,i,n)=>{n.d(i,{R:()=>o,x:()=>a});var t=n(36672);const s={},r=t.createContext(s);function o(e){const i=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(r.Provider,{value:i},e.children)}}}]);