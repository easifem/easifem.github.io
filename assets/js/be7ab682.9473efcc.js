"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[57254],{92883:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>A,contentTitle:()=>L,default:()=>C,frontMatter:()=>E,metadata:()=>o,toc:()=>r});const o=JSON.parse('{"id":"ExceptionHandler/test_ExceptionHandler","title":"test_ExceptionHandler","description":"","source":"@site/docs/docs-api/ExceptionHandler/test_ExceptionHandler.md","sourceDirName":"ExceptionHandler","slug":"/ExceptionHandler/test_ExceptionHandler","permalink":"/docs-api/ExceptionHandler/test_ExceptionHandler","draft":false,"unlisted":false,"editUrl":"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/ExceptionHandler/test_ExceptionHandler.md","tags":[],"version":"current","lastUpdatedAt":1724304782000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"ExceptionHandler example 1","permalink":"/docs-api/ExceptionHandler/ExceptionHandler_test_1"},"next":{"title":"EyeUtility","permalink":"/docs-api/EyeUtility/"}}');var n=s(23420),i=s(54213);const E={},L=void 0,A={},r=[];function T(e){const t={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-fortran",children:"! This program is a part of EASIFEM library\n! Copyright (C) 2020-2021  Vikas Sharma, Ph.D\n!\n! This program is free software: you can redistribute it and/or modify\n! it under the terms of the GNU General Public License as published by\n! the Free Software Foundation, either version 3 of the License, or\n! (at your option) any later version.\n!\n! This program is distributed in the hope that it will be useful,\n! but WITHOUT ANY WARRANTY; without even the implied warranty of\n! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n! GNU General Public License for more details.\n!\n! You should have received a copy of the GNU General Public License\n! along with this program.  If not, see <https: //www.gnu.org/licenses/>\n!\n\n!> authors: Vikas Sharma, Ph. D.\n! date:  5 April 2021\n! summary:  Tutorial for [[exceptionHandler_]] data type\n\nmodule test_exceptionHandler\nuse easifemBase\nuse easifemClasses\nimplicit none\ncontains\n\n  ! surr => NULL()\n  ! CALL eDomain%getSurrogate(surr)\n  ! IF( .NOT. ASSOCIATED( surr ) ) THEN\n  !   CALL eDomain%setQuietMode( .TRUE. )\n  !   CALL eDomain%setStopOnError( .TRUE. )\n  !   INQUIRE(file=eLogFile, exist=exist, opened=opened )\n  !   IF( exist ) THEN\n  !     IF( .NOT. opened ) OPEN( Unit=eUnitNo, FILE=eLogFile, &\n  !       & POSITION='APPEND',STATUS='OLD', &\n  !       & ACTION=\"WRITE\" )\n  !     CALL eDomain%setLogFileUnit( eUnitNo )\n  !     CALL eDomain%setLogActive( .TRUE. )\n  !   ELSE\n  !     OPEN( Unit=eUnitNo, FILE=eLogFile, &\n  !       & ACCESS='SEQUENTIAL',FORM='FORMATTED',STATUS='REPLACE' )\n  !     CALL eDomain%setLogFileUnit( eUnitNo )\n  !     CALL eDomain%setLogActive( .TRUE. )\n  !   END IF\n  ! END IF\n  ! surr => NULL()\n\n!----------------------------------------------------------------------------\n!\n!----------------------------------------------------------------------------\n\nsubroutine test0\n  TYPE( exceptionHandler_ ) :: obj\n  CALL obj%setQuietMode(.TRUE.)\n  CALL obj%setLogFileUnit(23)\n  OPEN(UNIT=obj%getLogFileUnit(),FILE='Exception.log', &\n      ACCESS='SEQUENTIAL',FORM='FORMATTED')\n  CALL obj%setLogActive(.TRUE.)\n  CALL display(obj%isLogActive(), \"isLogActive=\")\n  CALL obj%raiseInformation('Test information')\n  CALL obj%raiseWarning('Test warning')\n  CALL obj%raiseDebug('Test debug')\n  CALL obj%raiseError('Test error')\nend\n\n!----------------------------------------------------------------------------\n!\n!----------------------------------------------------------------------------\n\nsubroutine test1\n  WRITE(*,*) 'TESTING PARAMETERS'\n  WRITE(*,*) '  Passed:              EXCEPTION_OK = ',EXCEPTION_OK\n  WRITE(*,*) '  Passed:     EXCEPTION_INFORMATION = ',EXCEPTION_INFORMATION\n  WRITE(*,*) '  Passed:         EXCEPTION_WARNING = ',EXCEPTION_WARNING\n  WRITE(*,*) '  Passed:           EXCEPTION_DEBUG = ',EXCEPTION_DEBUG\n  WRITE(*,*) '  Passed:           EXCEPTION_ERROR = ',EXCEPTION_ERROR\n  WRITE(*,*) '  Passed:     EXCEPTION_FATAL_ERROR = ',EXCEPTION_FATAL_ERROR\n  WRITE(*,*) '  Passed:            EXCEPTION_SIZE = ',EXCEPTION_SIZE\n  WRITE(*,*) '  Passed: EXCEPTION_MAX_MESG_LENGTH = ', EXCEPTION_MAX_MESG_LENGTH\nend\n\nsubroutine test2\n  type( exceptionHandler_ ) :: obj\n  CALL Display( obj%isQuietMode(),'%isQuietMode() = ' )\n  CALL Display( obj%isQuietMode(EXCEPTION_INFORMATION),'%isQuietMode(INFO)=')\n  CALL Display( obj%isQuietMode(EXCEPTION_WARNING),'%isQuietMode(WARNING)=')\n  CALL Display( obj%isQuietMode(EXCEPTION_DEBUG),'%isQuietMode(DEBUG)=')\n  CALL Display( obj%isQuietMode(EXCEPTION_ERROR),'%isQuietMode(ERROR)=')\n  CALL Display( obj%isQuietMode(EXCEPTION_FATAL_ERROR),'%isQuietMode(FATAL_ERROR)=')\n  CALL Display( obj%isQuietMode(EXCEPTION_OK),'%isQuietMode(OK) =')\n  CALL Display(obj%isStopOnError(),'%isStopOnError =')\n  CALL Display(ALL(obj%getCounterAll() == 0),'getCounterAll() =')\n  CALL Display(obj%getCounter(EXCEPTION_INFORMATION) == 0,'INFO =')\n  CALL Display(obj%getCounter(EXCEPTION_WARNING) == 0,'WARN =')\n  CALL Display(obj%getCounter(EXCEPTION_DEBUG) == 0,'DEBUG =')\n  CALL Display(obj%getCounter(EXCEPTION_ERROR) == 0,'ERROR =')\n  CALL Display(obj%getCounter(EXCEPTION_FATAL_ERROR) == 0,'FATAL_ERROR =')\n  CALL Display(obj%getCounter(EXCEPTION_OK) == -1,'OK =')\n  CALL Display(obj%getLastMessage() == '','%getLastMessage() = ' )\n  CALL Display(obj%getLogFileUnit() == 666,'%getLogFileUnit = ')\n  CALL Display(.NOT.obj%isLogActive(),'%isLogActive = ')\n\n  CALL obj%setQuietMode(.TRUE.)\n  CALL Display(obj%isQuietMode(),'%setQuietMode(T)=')\n  CALL Display(obj%isQuietMode(EXCEPTION_INFORMATION),'%setQuietMode(T) INFO =')\n  CALL Display(obj%isQuietMode(EXCEPTION_WARNING),'%setQuietMode(T) WARN=')\n  CALL Display(obj%isQuietMode(EXCEPTION_DEBUG),'%setQuietMode(T) DEBUG=')\n  CALL Display(obj%isQuietMode(EXCEPTION_ERROR),'%setQuietMode(T) ERROR=')\n  CALL Display(.NOT.obj%isQuietMode(EXCEPTION_FATAL_ERROR),'%setQuietMode(T) FATAL=')\n\n  CALL obj%setQuietMode(.FALSE.)\n  CALL Display(.NOT.obj%isQuietMode(),'%setQuietMode(F)=')\n  CALL Display(.NOT.obj%isQuietMode(EXCEPTION_INFORMATION),'%setQuietMode(F) INFO =')\n  CALL Display(.NOT.obj%isQuietMode(EXCEPTION_WARNING),'%setQuietMode(F) WARNING =')\n  CALL Display(.NOT.obj%isQuietMode(EXCEPTION_DEBUG),'%setQuietMode(F) DEBUG=')\n  CALL Display(.NOT.obj%isQuietMode(EXCEPTION_ERROR),'%setQuietMode(F) ERROR=')\n  CALL Display(.NOT.obj%isQuietMode(EXCEPTION_FATAL_ERROR),'%setQuietMode(F) FATAL=')\n\n  CALL obj%setQuietMode(EXCEPTION_INFORMATION,.TRUE.)\n  CALL Display(.NOT.obj%isQuietMode(),'%setQuietMode(INFO,T)=')\n  CALL Display(obj%isQuietMode(EXCEPTION_INFORMATION),'%setQuietMode(INFO,T) INFO=')\n  CALL obj%setQuietMode(EXCEPTION_WARNING,.TRUE.)\n  CALL Display(.NOT.obj%isQuietMode(),'%setQuietMode(WARN,T)=')\n  CALL Display(obj%isQuietMode(EXCEPTION_WARNING),'%setQuietMode(WARN,T) WARN=')\n  CALL obj%setQuietMode(EXCEPTION_DEBUG,.FALSE.)\n  CALL Display(.NOT.obj%isQuietMode(),'%setQuietMode(DEBUG,F)=')\n  CALL Display(.NOT.obj%isQuietMode(EXCEPTION_DEBUG),'%setQuietMode(DEBUG,F) DEBUG=')\n  CALL obj%setQuietMode(EXCEPTION_ERROR,.TRUE.)\n  CALL Display(.NOT.obj%isQuietMode(),'%setQuietMode(ERROR,T)=')\n  CALL Display(obj%isQuietMode(EXCEPTION_ERROR),'%setQuietMode(ERROR,T) ERROR=')\n  CALL obj%setQuietMode(EXCEPTION_FATAL_ERROR,.TRUE.)\n  CALL Display(.NOT.obj%isQuietMode(),'%setQuietMode(FATAL,T)=')\n  CALL Display(.NOT.obj%isQuietMode(EXCEPTION_FATAL_ERROR),'%setQuietMode(FATAL,T) FATAL=')\n  CALL obj%setQuietMode(EXCEPTION_OK,.FALSE.)\n  CALL Display(.NOT.obj%isQuietMode(),'%setQuietMode(OK,T)=')\n  CALL Display(.NOT.obj%isQuietMode(EXCEPTION_OK),'%setQuietMode(OK,T) OK=')\n  CALL obj%setQuietMode((/.FALSE.,.FALSE.,.FALSE.,.FALSE./))\n\n  CALL obj%setVerboseMode(.TRUE.)\n  CALL Display(obj%isVerboseMode(),'%setVerboseMode(T)=')\n  CALL Display(obj%isVerboseMode(EXCEPTION_INFORMATION),'%setVerboseMode(T) INFO=')\n  CALL Display(obj%isVerboseMode(EXCEPTION_WARNING),'%setVerboseMode(T) WARN=')\n  CALL Display(obj%isVerboseMode(EXCEPTION_DEBUG),'%setVerboseMode(T) DEBUG=')\n  CALL Display(obj%isVerboseMode(EXCEPTION_ERROR),'%setVerboseMode(T) ERROR=')\n  CALL Display(.NOT.obj%isVerboseMode(EXCEPTION_FATAL_ERROR),'%setVerboseMode(T) FATAL=')\n  CALL obj%setVerboseMode(.FALSE.)\n  CALL Display(.NOT.obj%isVerboseMode(),'%setVerboseMode(F)=')\n  CALL Display(.NOT.obj%isVerboseMode(EXCEPTION_INFORMATION),'%setVerboseMode(F) INFO=')\n  CALL Display(.NOT.obj%isVerboseMode(EXCEPTION_WARNING),'%setVerboseMode(F) WARNING=')\n  CALL Display(.NOT.obj%isVerboseMode(EXCEPTION_DEBUG),'%setVerboseMode(F) DEBUG=')\n  CALL Display(.NOT.obj%isVerboseMode(EXCEPTION_ERROR),'%setVerboseMode(F) ERROR=')\n  CALL Display(.NOT.obj%isVerboseMode(EXCEPTION_FATAL_ERROR),'%setVerboseMode(F) FATAL=')\n\n  CALL obj%setVerboseMode(EXCEPTION_INFORMATION,.TRUE.)\n  CALL Display(.NOT.obj%isVerboseMode(),'%setVerboseMode(INFO,T)=')\n  CALL Display(obj%isVerboseMode(EXCEPTION_INFORMATION),'%setVerboseMode(INFO,T) INFO=')\n  CALL obj%setVerboseMode(EXCEPTION_WARNING,.TRUE.)\n  CALL Display(.NOT.obj%isVerboseMode(),'%setVerboseMode(WARN,T)=')\n  CALL Display(obj%isVerboseMode(EXCEPTION_WARNING),'%setVerboseMode(WARN,T) WARN=')\n  CALL obj%setVerboseMode(EXCEPTION_DEBUG,.FALSE.)\n  CALL Display(.NOT.obj%isVerboseMode(),'%setVerboseMode(DEBUG,F)=')\n  CALL Display(.NOT.obj%isVerboseMode(EXCEPTION_DEBUG),'%setVerboseMode(DEBUG,F) DEBUG=')\n  CALL obj%setVerboseMode(EXCEPTION_ERROR,.TRUE.)\n  CALL Display(.NOT.obj%isVerboseMode(),'%setVerboseMode(ERROR,T)=')\n  CALL Display(obj%isVerboseMode(EXCEPTION_ERROR),'%setVerboseMode(ERROR,T) ERROR=')\n  CALL obj%setVerboseMode(EXCEPTION_FATAL_ERROR,.TRUE.)\n  CALL Display(.NOT.obj%isVerboseMode(),'%setVerboseMode(FATAL,T)=')\n  CALL Display(.NOT.obj%isVerboseMode(EXCEPTION_FATAL_ERROR),'%setVerboseMode(FATAL,T) FATAL=')\n  CALL obj%setVerboseMode(EXCEPTION_OK,.FALSE.)\n  CALL Display(.NOT.obj%isVerboseMode(),'%setVerboseMode(OK,T)=')\n  CALL Display(.NOT.obj%isVerboseMode(EXCEPTION_OK),'%setVerboseMode(OK,T) OK=')\n  CALL obj%setVerboseMode((/.TRUE.,.TRUE.,.TRUE.,.TRUE./))\nend\n\n!----------------------------------------------------------------------------\n!\n!----------------------------------------------------------------------------\n\nsubroutine test3\n  type( exceptionHandler_ ) :: obj\n  CHARACTER( LEN = EXCEPTION_MAX_MESG_LENGTH ) :: mesg\n\n  CALL obj%raiseInformation('Test information')\n  CALL Display(ALL(obj%getCounterAll() == (/1,0,0,0,0/)),'%counterall=')\n  CALL Display(obj%getCounter(EXCEPTION_INFORMATION) == 1,'%counter(INFO)=')\n  mesg=' - EXCEPTION_INFORMATION: Test information'\n  CALL Display( obj%getLastMessage(), \"last mesg=\")\n  CALL Display(obj%getLastMessage() == TRIM(mesg),'mesg=')\n\n  CALL obj%raiseWarning('Test warning')\n  CALL Display(ALL(obj%getCounterAll() == (/1,1,0,0,0/)),'%counterall=')\n  CALL Display(obj%getCounter(EXCEPTION_WARNING) == 1,'%counter(WARN)=')\n  mesg='#### EXCEPTION_WARNING #### - Test warning'\n  CALL Display( obj%getLastMessage(), \"last mesg=\")\n  CALL Display(obj%getLastMessage() == TRIM(mesg),'mesg=')\n\n  CALL obj%raiseDebug('Test debug')\n  CALL Display(ALL(obj%getCounterAll() == (/1,1,1,0,0/)),'%raiseDebug=')\n  CALL Display(obj%getCounter(EXCEPTION_DEBUG) == 1,'%counter(DEBUG)=')\n  mesg='#### EXCEPTION_DEBUG_MESG #### - Test debug'\n  CALL Display(obj%getLastMessage() == TRIM(mesg),'mesg=')\n\n  CALL obj%setStopOnError(.FALSE.)\n  CALL Display(.NOT.obj%isStopOnError(),'setStopOnError(F)=')\n  CALL obj%setStopOnError(.TRUE.)\n  CALL Display(obj%isStopOnError(),'setStopOnError(T)=')\n  CALL obj%setStopOnError(.FALSE.)\n  CALL Display(.NOT.obj%isStopOnError(),'setStopOnError(F)=')\n\n  CALL obj%raiseError('Test error')\n  CALL Display(ALL(obj%getCounterAll() == (/1,1,1,1,0/)),'%raiseError=')\n  CALL Display(obj%getCounter(EXCEPTION_ERROR) == 1,'%counter(ERROR)=')\n  mesg='#### EXCEPTION_ERROR #### - Test error'\n  CALL Display(obj%getLastMessage() == TRIM(mesg),'mesg=')\n\n  CALL obj%initCounter()\n  CALL Display(ALL(obj%getCounterAll() == 0),'counterAll=')\n  CALL Display(obj%getCounter(EXCEPTION_INFORMATION) == 0,'%counter(INFO)=')\n  CALL Display(obj%getCounter(EXCEPTION_WARNING) == 0,'%counter(WARN)=')\n  CALL Display(obj%getCounter(EXCEPTION_DEBUG) == 0,'%counter(DEBUG)=')\n  CALL Display(obj%getCounter(EXCEPTION_ERROR) == 0,'%counter(ERROR)=')\n  CALL Display(obj%getCounter(EXCEPTION_FATAL_ERROR) == 0,'%counter(FATAL)=')\n  CALL Display(obj%getLastMessage() == '','mesg=')\n\n  CALL obj%raiseWarning('Very                                              '//&\n                          'long                                              '//&\n                          'message                                           '//&\n                          'exceeding                                         '//&\n                          'size                                              '//&\n                          'of                                                '//&\n                          'character                                         '//&\n                          'length                                            '//&\n                          'limit                                             '//&\n                          'of                                                '//&\n                          '512.....The remainder of this message will be truncated')\n\nend\n\n!----------------------------------------------------------------------------\n!\n!----------------------------------------------------------------------------\n\nsubroutine test4\n  type( exceptionHandler_ ) :: obj\n\n  CALL Display( \"test04\")\n  CALL EqualLine()\n  CALL obj%setQuietMode(.TRUE.)\n  CALL obj%setLogFileUnit(stdout)\n  CALL obj%setLogFileUnit(stderr)\n  CALL obj%setLogFileUnit(-1)\n\n  CALL Display(obj%getCounter(EXCEPTION_WARNING),'%counter(WARN)=')\n  CALL Display(TRIM(obj%getLastMessage()),'%getLastMessage=')\n  CALL obj%setLogFileUnit(23)\n  CALL Display(obj%getLogFileUnit() == 23,'setLogFileUnit(23)=')\n  CALL obj%setQuietMode(.FALSE.)\n  CALL Display(.NOT.obj%isLogActive(),'%isLogActive=')\n  CALL obj%setLogActive(.TRUE.)\n  CALL Display(.NOT.obj%isLogActive(),'%setLogActive=')\n  CALL obj%setLogActive(.FALSE.)\n  CALL Display(.NOT.obj%isLogActive(),'%setLogActive=')\n\n  OPEN(UNIT=obj%getLogFileUnit(),FILE='Exception.log', &\n      ACCESS='SEQUENTIAL', FORM='FORMATTED')\n  CALL obj%setLogActive(.TRUE.)\n  CALL Display(obj%isLogActive(),'%setLogActive ')\n  CALL obj%setLogActive(.FALSE.)\n  CALL Display(.NOT.obj%isLogActive(),'%setLogActive ')\n  CALL obj%setLogActive(.TRUE.)\n  CALL obj%setQuietMode(.TRUE.)\n  CALL obj%setStopOnError(.FALSE.)\n  CALL obj%raiseInformation('Test information')\n  CALL obj%raiseWarning('Test warning')\n  CALL obj%raiseDebug('Test debug')\n  CALL obj%raiseError('Test error')\n  CLOSE(obj%getLogFileUnit())\n\n  ! OPEN(UNIT=testE%getLogFileUnit(),FILE='Exception.log', &\n  !     ACCESS='SEQUENTIAL',FORM='FORMATTED',ACTION='READ')\n  ! READ(testE%getLogFileUnit(),'(a)') mesg2\n  ! mesg=''\n  ! ASSERT(TRIM(mesg) == TRIM(mesg2),'blank line')\n  ! READ(testE%getLogFileUnit(),'(a)') mesg2\n  ! mesg='      EXCEPTION_INFORMATION: Test information'\n  ! ASSERT(TRIM(mesg) == TRIM(mesg2),TRIM(mesg))\n  ! READ(testE%getLogFileUnit(),'(a)') mesg2\n  ! mesg='#### EXCEPTION_WARNING ####'\n  ! ASSERT(TRIM(mesg) == TRIM(mesg2),TRIM(mesg))\n  ! READ(testE%getLogFileUnit(),'(a)') mesg2\n  ! mesg='      Test warning'\n  ! ASSERT(TRIM(mesg) == TRIM(mesg2),TRIM(mesg))\n  ! READ(testE%getLogFileUnit(),'(a)') mesg2\n  ! mesg='#### EXCEPTION_DEBUG_MESG ####'\n  ! ASSERT(TRIM(mesg) == TRIM(mesg2),TRIM(mesg))\n  ! READ(testE%getLogFileUnit(),'(a)') mesg2\n  ! mesg='      Test debug'\n  ! ASSERT(TRIM(mesg) == TRIM(mesg2),TRIM(mesg))\n  ! READ(testE%getLogFileUnit(),'(a)') mesg2\n  ! mesg='#### EXCEPTION_ERROR ####'\n  ! ASSERT(TRIM(mesg) == TRIM(mesg2),TRIM(mesg))\n  ! READ(testE%getLogFileUnit(),'(a)') mesg2\n  ! mesg='      Test error'\n  ! ASSERT(TRIM(mesg) == TRIM(mesg2),TRIM(mesg))\n  ! CLOSE(testE%getLogFileUnit())\nend\n\n! SUBROUTINE testVerbosity()\n!   INTEGER(SIK) :: ioerr\n!   OPEN(UNIT=testE%getLogFileUnit(),FILE='Exception.log', &\n!       ACCESS='SEQUENTIAL',FORM='FORMATTED',STATUS='REPLACE')\n!   CALL testE%setQuietMode(.FALSE.)\n!   CALL testE%setVerboseMode(EXCEPTION_INFORMATION,.FALSE.)\n!   CALL testE%setVerboseMode(EXCEPTION_WARNING,.FALSE.)\n!   CALL testE%setVerboseMode(EXCEPTION_DEBUG,.FALSE.)\n!   CALL testE%setVerboseMode(EXCEPTION_ERROR,.FALSE.)\n!   CALL testE%raiseInformation('Test information no log')\n!   CALL testE%raiseWarning('Test warning no log')\n!   CALL testE%raiseDebug('Test debug no log')\n!   CALL testE%raiseError('Test error no log')\n!   CLOSE(testE%getLogFileUnit())\n!   OPEN(UNIT=testE%getLogFileUnit(),FILE='Exception.log', &\n!       ACCESS='SEQUENTIAL',FORM='FORMATTED',ACTION='READ')\n!   READ(testE%getLogFileUnit(),'(a)',IOSTAT=ioerr) mesg2\n!   ASSERT(ioerr == IOSTAT_END,'EOF Log file')\n! ENDSUBROUTINE testVerbosity\n! !\n! !-------------------------------------------------------------------------------\n! SUBROUTINE testSurrogate()\n!   CALL testE2%addSurrogate(testE)\n!   ASSERT(testE2%isStopOnError() .EQV. testE%isStopOnError(),'isStopOnError')\n!   ASSERT(testE2%getLogFileUnit() == testE%getLogFileUnit(),'getLogFileUnit')\n!   ASSERT(testE2%isQuietMode() .EQV. testE%isQuietMode(),'isQuiet')\n!   ASSERT(ALL(testE2%getCounterAll() == testE%getCounterAll()),'getCounterAll')\n!   ASSERT(testE2%getLastMessage() == testE%getLastMessage(),'getLastMessage')\n!   ASSERT(testE2%isLogActive() .EQV. testE%isLogActive(),'isLogActive')\n\n!   CALL testE2%getSurrogate(testE3)\n!   ASSERT(ASSOCIATED(testE3,testE), 'getSurrogate')\n\n!   CALL testE2%setQuietMode(.TRUE.)\n!   ASSERT(testE2%isQuietMode() .NEQV. testE%isQuietMode(),'isQuiet (NEQV)')\n! ENDSUBROUTINE testSurrogate\n! !\n! !-------------------------------------------------------------------------------\n! SUBROUTINE testAssignment()\n!   testE2=testE\n!   ASSERT(testE2%isStopOnError() .EQV. testE%isStopOnError(),'isStopOnError')\n!   ASSERT(testE2%getLogFileUnit() == testE%getLogFileUnit(),'getLogFileUnit')\n!   ASSERT(testE2%isQuietMode() .EQV. testE%isQuietMode(),'isQuiet')\n!   ASSERT(ALL(testE2%getCounterAll() == testE%getCounterAll()),'getCounterAll')\n!   ASSERT(testE2%getLastMessage() == testE%getLastMessage(),'getLastMessage')\n!   ASSERT(testE2%isLogActive() .EQV. testE%isLogActive(),'isLogActive')\n! ENDSUBROUTINE testAssignment\n! !\n! !-------------------------------------------------------------------------------\n! SUBROUTINE testReset()\n!   CALL testE%reset()\n!   ASSERT(.NOT.testE%isQuietMode(),'%isQuietMode()')\n!   ASSERT(testE%isStopOnError(),'%isStopOnError')\n!   ASSERT(testE%getLogFileUnit() == 666,'%getLogFileUnit')\n!   ASSERT(ALL(testE%getCounterAll() == 0),'getCounterAll()')\n!   ASSERT(testE%getLastMessage() == '','%getLastMessage()')\n!   ASSERT(.NOT.testE%isLogActive(),'%isLogActive')\n! ENDSUBROUTINE testReset\n! !\n! !-------------------------------------------------------------------------------\n! SUBROUTINE testSetCounter()\n!   ASSERT(ALL(testE%getCounterAll() == 0),'getCounterAll()')\n!   CALL testE%setCounter((/-1,-1,-1,-1,1/))\n!   ASSERT(ALL(testE%getCounterAll() == (/0,0,0,0,1/)),'setCounterAll() -1 for first 4')\n!   CALL testE%setCounter(EXCEPTION_INFORMATION,2)\n!   ASSERT(ALL(testE%getCounterAll() == (/2,0,0,0,1/)),'setCounter() Info')\n!   CALL testE%setCounter(EXCEPTION_WARNING,3)\n!   ASSERT(ALL(testE%getCounterAll() == (/2,3,0,0,1/)),'setCounter() Warning')\n!   CALL testE%setCounter(EXCEPTION_DEBUG,4)\n!   ASSERT(ALL(testE%getCounterAll() == (/2,3,4,0,1/)),'setCounter() Debug')\n!   CALL testE%setCounter(EXCEPTION_ERROR,5)\n!   ASSERT(ALL(testE%getCounterAll() == (/2,3,4,5,1/)),'setCounter() Error')\n!   CALL testE%setCounter(EXCEPTION_FATAL_ERROR,6)\n!   ASSERT(ALL(testE%getCounterAll() == (/2,3,4,5,6/)),'setCounter() Error')\n! ENDSUBROUTINE testSetCounter\n\n!----------------------------------------------------------------------------\n!\n!----------------------------------------------------------------------------\n\nend module\n\nprogram main\nuse test_exceptionHandler\nimplicit none\ncall test0\nend program main\n"})})}function C(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(T,{...e})}):T(e)}},54213:(e,t,s)=>{s.d(t,{R:()=>E,x:()=>L});var o=s(36672);const n={},i=o.createContext(n);function E(e){const t=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function L(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:E(e.components),o.createElement(i.Provider,{value:t},e.children)}}}]);