"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[40346],{75686:(n,e,o)=>{o.r(e),o.d(e,{assets:()=>i,contentTitle:()=>a,default:()=>N,frontMatter:()=>u,metadata:()=>t,toc:()=>r});const t=JSON.parse('{"id":"CSRMatrix/SetColumn","title":"SetColumn","description":"This method sets the column of the CSRMatrix.","source":"@site/docs/docs-api/CSRMatrix/SetColumn.md","sourceDirName":"CSRMatrix","slug":"/CSRMatrix/SetColumn","permalink":"/docs-api/CSRMatrix/SetColumn","draft":false,"unlisted":false,"editUrl":"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/CSRMatrix/SetColumn.md","tags":[],"version":"current","lastUpdatedAt":1724304782000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"SetBlockRow","permalink":"/docs-api/CSRMatrix/SetBlockRow"},"next":{"title":"SetRow","permalink":"/docs-api/CSRMatrix/SetRow"}}');var m=o(23420),s=o(54213);const u={},a="SetColumn",i={},r=[{value:"Interface",id:"interface",level:2}];function E(n){const e={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...n.components};return(0,m.jsxs)(m.Fragment,{children:[(0,m.jsx)(e.header,{children:(0,m.jsx)(e.h1,{id:"setcolumn",children:"SetColumn"})}),"\n",(0,m.jsx)(e.p,{children:"This method sets the column of the CSRMatrix."}),"\n",(0,m.jsx)(e.p,{children:"Calling example"}),"\n",(0,m.jsxs)(e.ul,{children:["\n",(0,m.jsx)(e.li,{children:(0,m.jsx)(e.code,{children:"SetColumn(obj, icolumn, value(:,:))"})}),"\n",(0,m.jsx)(e.li,{children:(0,m.jsx)(e.code,{children:"SetColumn(obj, nodenum, idof, value(:,:))"})}),"\n",(0,m.jsx)(e.li,{children:(0,m.jsx)(e.code,{children:"SetColumn(obj, icolumn, value)"})}),"\n",(0,m.jsx)(e.li,{children:(0,m.jsx)(e.code,{children:"SetColumn(obj, nodenum, idof, value)"})}),"\n",(0,m.jsx)(e.li,{children:(0,m.jsx)(e.code,{children:"SetColumn(obj, nodenum, ivar, idof, value)"})}),"\n",(0,m.jsx)(e.li,{children:(0,m.jsx)(e.code,{children:"SetColumn(obj, nodenum, ivar, idof, value(:))"})}),"\n",(0,m.jsx)(e.li,{children:(0,m.jsx)(e.code,{children:"SetColumn(obj, nodenum, ivar, spacecompo, timecompo, value)"})}),"\n",(0,m.jsx)(e.li,{children:(0,m.jsx)(e.code,{children:"SetColumn(obj, nodenum, ivar, spacecompo, timecompo, value(:))"})}),"\n",(0,m.jsx)(e.li,{children:(0,m.jsx)(e.code,{children:"SetColumn(obj, nodenum, ivar, spacecompo, timecompo(:), value)"})}),"\n",(0,m.jsx)(e.li,{children:(0,m.jsx)(e.code,{children:"SetColumn(obj, nodenum, ivar, spacecompo, timecompo(:), value(:))"})}),"\n",(0,m.jsx)(e.li,{children:(0,m.jsx)(e.code,{children:"SetColumn(obj, nodenum, ivar, spacecompo(:), timecompo, value)"})}),"\n",(0,m.jsx)(e.li,{children:(0,m.jsx)(e.code,{children:"SetColumn(obj, nodenum, ivar, spacecompo(:), timecompo, value(:))"})}),"\n",(0,m.jsx)(e.li,{children:(0,m.jsx)(e.code,{children:"SetColumn(obj, nodenum(:), ivar, spacecompo, timecompo(:), value)"})}),"\n",(0,m.jsx)(e.li,{children:(0,m.jsx)(e.code,{children:"SetColumn(obj, nodenum(:), ivar, spacecompo, timecompo(:), value(:))"})}),"\n",(0,m.jsx)(e.li,{children:(0,m.jsx)(e.code,{children:"SetColumn(obj, nodenum(:), ivar, spacecompo(:), timecompo, value)"})}),"\n",(0,m.jsx)(e.li,{children:(0,m.jsx)(e.code,{children:"SetColumn(obj, nodenum(:), ivar, spacecompo(:), timecompo, value(:))"})}),"\n"]}),"\n",(0,m.jsx)(e.h2,{id:"interface",children:"Interface"}),"\n",(0,m.jsx)(e.pre,{children:(0,m.jsx)(e.code,{className:"language-fortran",children:"!----------------------------------------------------------------------------\n!                                                       setColumn@setMethod\n!----------------------------------------------------------------------------\n\n!> author: Vikas Sharma, Ph. D.\n! date: 24 July 2021\n! summary: This routine sets the Column of a sparse matrix\n\nINTERFACE SetColumn\n  MODULE SUBROUTINE csrMat_setColumn1(obj, icolumn, VALUE)\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: icolumn\n    REAL(DFP), INTENT(IN) :: VALUE(:)\n  END SUBROUTINE csrMat_setColumn1\nEND INTERFACE SetColumn\n\n!----------------------------------------------------------------------------\n!                                                       setColumn@setMethod\n!----------------------------------------------------------------------------\n\n!> author: Vikas Sharma, Ph. D.\n! date: 24 July 2021\n! summary: This routine sets the Column of a sparse matrix\n\nINTERFACE SetColumn\n  MODULE SUBROUTINE csrMat_setColumn1b(obj, icolumn, VALUE)\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: icolumn(:)\n    REAL(DFP), INTENT(IN) :: VALUE(:)\n  END SUBROUTINE csrMat_setColumn1b\nEND INTERFACE SetColumn\n\n!----------------------------------------------------------------------------\n!                                                       setColumn@setMethod\n!----------------------------------------------------------------------------\n\n!> author: Vikas Sharma, Ph. D.\n! date: 24 July 2021\n! summary: This routine sets the Column of a sparse matrix\n!\n!# Introduction\n!\n! - This routine sets the Column of a sparse matrix. The Column index is\n! calculated using the nodenum and idof.\n! - nodenum is the node number\n! - idof is the degree of freedom number\n! - icolumn calculated from nodenum and idof depends upon the storageFMT.\n\nINTERFACE SetColumn\n  MODULE SUBROUTINE csrMat_setColumn2(obj, nodenum, idof, VALUE)\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: nodenum\n    INTEGER(I4B), INTENT(IN) :: idof\n    REAL(DFP), INTENT(IN) :: VALUE(:)\n  END SUBROUTINE csrMat_setColumn2\nEND INTERFACE SetColumn\n\n!----------------------------------------------------------------------------\n!                                                       setColumn@setMethod\n!----------------------------------------------------------------------------\n\n!> author: Vikas Sharma, Ph. D.\n! date: 24 July 2021\n! summary: This routine sets the Column of a sparse matrix\n\nINTERFACE SetColumn\n  MODULE SUBROUTINE csrMat_setColumn3(obj, icolumn, VALUE)\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: icolumn\n    REAL(DFP), INTENT(IN) :: VALUE\n  END SUBROUTINE csrMat_setColumn3\nEND INTERFACE SetColumn\n\n!----------------------------------------------------------------------------\n!                                                       setColumn@setMethod\n!----------------------------------------------------------------------------\n\n!> author: Vikas Sharma, Ph. D.\n! date: 24 July 2021\n! summary: This routine sets the Column of a sparse matrix\n\nINTERFACE SetColumn\n  MODULE SUBROUTINE csrMat_setColumn3b(obj, icolumn, VALUE)\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: icolumn(:)\n    REAL(DFP), INTENT(IN) :: VALUE\n  END SUBROUTINE csrMat_setColumn3b\nEND INTERFACE SetColumn\n\n!----------------------------------------------------------------------------\n!                                                       setColumn@setMethod\n!----------------------------------------------------------------------------\n\n!> author: Vikas Sharma, Ph. D.\n! date: 24 July 2021\n! summary: This routine sets the Column of a sparse matrix\n!\n!# Introduction\n!\n! - This routine sets the Column of a sparse matrix. The Column index is\n! calculated using the nodenum and idof.\n! - nodenum is the node number\n! - idof is the degree of freedom number\n! - icolumn calculated from nodenum and idof depends upon the storageFMT.\n\nINTERFACE SetColumn\n  MODULE SUBROUTINE csrMat_setColumn4(obj, nodenum, idof, VALUE)\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: nodenum\n    INTEGER(I4B), INTENT(IN) :: idof\n    REAL(DFP), INTENT(IN) :: VALUE\n  END SUBROUTINE csrMat_setColumn4\nEND INTERFACE SetColumn\n\n!----------------------------------------------------------------------------\n!                                                       setColumn@setMethod\n!----------------------------------------------------------------------------\n\n!> author: Vikas Sharma, Ph. D.\n! date: 24 July 2021\n! summary: This routine sets the Column of a sparse matrix\n!\n!# Introduction\n!\n! - This routine sets the Column of a sparse matrix. The Column index is\n! calculated using the nodenum and idof.\n! - nodenum is the node number\n! - idof is the degree of freedom number\n! - icolumn calculated from nodenum and idof depends upon the storageFMT.\n\nINTERFACE SetColumn\n  MODULE SUBROUTINE csrMat_setColumn5(obj, nodenum, ivar, idof, VALUE)\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: nodenum\n    INTEGER(I4B), INTENT(IN) :: ivar\n    INTEGER(I4B), INTENT(IN) :: idof\n    REAL(DFP), INTENT(IN) :: VALUE\n  END SUBROUTINE csrMat_setColumn5\nEND INTERFACE SetColumn\n\n!----------------------------------------------------------------------------\n!                                                       setColumn@setMethod\n!----------------------------------------------------------------------------\n\n!> author: Vikas Sharma, Ph. D.\n! date: 24 July 2021\n! summary: This routine sets the Column of a sparse matrix\n!\n!# Introduction\n!\n! - This routine sets the Column of a sparse matrix. The Column index is\n! calculated using the nodenum and idof.\n! - nodenum is the node number\n! - idof is the degree of freedom number\n! - icolumn calculated from nodenum and idof depends upon the storageFMT.\n\nINTERFACE SetColumn\n  MODULE SUBROUTINE csrMat_setColumn6(obj, nodenum, ivar, idof, VALUE)\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: nodenum\n    INTEGER(I4B), INTENT(IN) :: ivar\n    INTEGER(I4B), INTENT(IN) :: idof\n    REAL(DFP), INTENT(IN) :: VALUE(:)\n  END SUBROUTINE csrMat_setColumn6\nEND INTERFACE SetColumn\n\nINTERFACE SetColumn\n  MODULE PROCEDURE csrMat_setColumn6\nEND INTERFACE SetColumn\n\n!----------------------------------------------------------------------------\n!                                                       setColumn@setMethod\n!----------------------------------------------------------------------------\n\n!> author: Vikas Sharma, Ph. D.\n! date: 24 July 2021\n! summary: This routine set the Column of a sparse matrix\n!\n!# Introduction\n!\n! - This routine sets the Column of a sparse matrix. The Column index is\n! calculated\n! using the nodenum and idof.\n! - nodenum is the node number\n! - idof is the degree of freedom number\n! - icolumn calculated from nodenum and idof depends upon the storageFMT.\n\nINTERFACE SetColumn\n  MODULE SUBROUTINE csrMat_setColumn7(obj, nodenum, ivar, &\n    & spacecompo, timecompo, VALUE)\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: nodenum\n    INTEGER(I4B), INTENT(IN) :: ivar\n    INTEGER(I4B), INTENT(IN) :: spacecompo\n    INTEGER(I4B), INTENT(IN) :: timecompo\n    REAL(DFP), INTENT(IN) :: VALUE\n  END SUBROUTINE csrMat_setColumn7\nEND INTERFACE SetColumn\n\n!----------------------------------------------------------------------------\n!                                                       setColumn@setMethod\n!----------------------------------------------------------------------------\n\n!> author: Vikas Sharma, Ph. D.\n! date: 24 July 2021\n! summary: This routine set the Column of a sparse matrix\n!\n!# Introduction\n!\n! - This routine sets the Column of a sparse matrix. The Column index is\n! calculated\n! using the nodenum and idof.\n! - nodenum is the node number\n! - idof is the degree of freedom number\n! - icolumn calculated from nodenum and idof depends upon the storageFMT.\n\nINTERFACE SetColumn\n  MODULE SUBROUTINE csrMat_setColumn8(obj, nodenum, ivar, &\n    & spacecompo, timecompo, VALUE)\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: nodenum\n    INTEGER(I4B), INTENT(IN) :: ivar\n    INTEGER(I4B), INTENT(IN) :: spacecompo\n    INTEGER(I4B), INTENT(IN) :: timecompo\n    REAL(DFP), INTENT(IN) :: VALUE(:)\n  END SUBROUTINE csrMat_setColumn8\nEND INTERFACE SetColumn\n\n!----------------------------------------------------------------------------\n!                                                       setColumn@setMethod\n!----------------------------------------------------------------------------\n\n!> author: Vikas Sharma, Ph. D.\n! date: 24 July 2021\n! summary: This routine set the Column of a sparse matrix\n!\n!# Introduction\n!\n! - This routine sets the Column of a sparse matrix. The Column index is\n! calculated\n! using the nodenum and idof.\n! - nodenum is the node number\n! - idof is the degree of freedom number\n! - icolumn calculated from nodenum and idof depends upon the storageFMT.\n\nINTERFACE SetColumn\n  MODULE SUBROUTINE csrMat_setColumn9(obj, nodenum, ivar, &\n    & spacecompo, timecompo, VALUE)\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: nodenum\n    INTEGER(I4B), INTENT(IN) :: ivar\n    INTEGER(I4B), INTENT(IN) :: spacecompo\n    INTEGER(I4B), INTENT(IN) :: timecompo(:)\n    REAL(DFP), INTENT(IN) :: VALUE\n  END SUBROUTINE csrMat_setColumn9\nEND INTERFACE SetColumn\n\n!----------------------------------------------------------------------------\n!                                                       setColumn@setMethod\n!----------------------------------------------------------------------------\n\n!> author: Vikas Sharma, Ph. D.\n! date: 24 July 2021\n! summary: This routine set the Column of a sparse matrix\n!\n!# Introduction\n!\n! - This routine sets the Column of a sparse matrix. The Column index is\n! calculated\n! using the nodenum and idof.\n! - nodenum is the node number\n! - idof is the degree of freedom number\n! - icolumn calculated from nodenum and idof depends upon the storageFMT.\n\nINTERFACE SetColumn\n  MODULE SUBROUTINE csrMat_setColumn10(obj, nodenum, ivar, &\n    & spacecompo, timecompo, VALUE)\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: nodenum\n    INTEGER(I4B), INTENT(IN) :: ivar\n    INTEGER(I4B), INTENT(IN) :: spacecompo\n    INTEGER(I4B), INTENT(IN) :: timecompo(:)\n    REAL(DFP), INTENT(IN) :: VALUE(:)\n  END SUBROUTINE csrMat_setColumn10\nEND INTERFACE SetColumn\n\n!----------------------------------------------------------------------------\n!                                                      setColumn@setMethod\n!----------------------------------------------------------------------------\n\n!> author: Vikas Sharma, Ph. D.\n! date: 24 July 2021\n! summary: This routine set the Column of a sparse matrix\n!\n!# Introduction\n!\n! - This routine sets the Column of a sparse matrix. The Column index is\n! calculated\n! using the nodenum and idof.\n! - nodenum is the node number\n! - idof is the degree of freedom number\n! - icolumn calculated from nodenum and idof depends upon the storageFMT.\n\nINTERFACE SetColumn\n  MODULE SUBROUTINE csrMat_setColumn11(obj, nodenum, ivar, &\n    & spacecompo, timecompo, VALUE)\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: nodenum\n    INTEGER(I4B), INTENT(IN) :: ivar\n    INTEGER(I4B), INTENT(IN) :: spacecompo(:)\n    INTEGER(I4B), INTENT(IN) :: timecompo\n    REAL(DFP), INTENT(IN) :: VALUE\n  END SUBROUTINE csrMat_setColumn11\nEND INTERFACE SetColumn\n\n!----------------------------------------------------------------------------\n!                                                   setColumn@setMethod\n!----------------------------------------------------------------------------\n\n!> author: Vikas Sharma, Ph. D.\n! date: 24 July 2021\n! summary: This routine set the Column of a sparse matrix\n!\n!# Introduction\n!\n! - This routine sets the Column of a sparse matrix. The Column index is\n! calculated\n! using the nodenum and idof.\n! - nodenum is the node number\n! - idof is the degree of freedom number\n! - icolumn calculated from nodenum and idof depends upon the storageFMT.\n\nINTERFACE SetColumn\n  MODULE SUBROUTINE csrMat_setColumn12(obj, nodenum, ivar, &\n    & spacecompo, timecompo, VALUE)\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: nodenum\n    INTEGER(I4B), INTENT(IN) :: ivar\n    INTEGER(I4B), INTENT(IN) :: spacecompo(:)\n    INTEGER(I4B), INTENT(IN) :: timecompo\n    REAL(DFP), INTENT(IN) :: VALUE(:)\n  END SUBROUTINE csrMat_setColumn12\nEND INTERFACE SetColumn\n\n!----------------------------------------------------------------------------\n!                                                      setColumn@setMethod\n!----------------------------------------------------------------------------\n\n!> author: Vikas Sharma, Ph. D.\n! date: 24 July 2021\n! summary: This routine set the Column of a sparse matrix\n!\n!# Introduction\n!\n! - This routine sets the Column of a sparse matrix. The Column index is\n! calculated\n! using the nodenum and idof.\n! - nodenum is the node number\n! - idof is the degree of freedom number\n! - icolumn calculated from nodenum and idof depends upon the storageFMT.\n\nINTERFACE SetColumn\n  MODULE SUBROUTINE csrMat_setColumn13(obj, nodenum, ivar, &\n    & spacecompo, timecompo, VALUE)\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: nodenum(:)\n    INTEGER(I4B), INTENT(IN) :: ivar\n    INTEGER(I4B), INTENT(IN) :: spacecompo\n    INTEGER(I4B), INTENT(IN) :: timecompo(:)\n    REAL(DFP), INTENT(IN) :: VALUE\n  END SUBROUTINE csrMat_setColumn13\nEND INTERFACE SetColumn\n\n!----------------------------------------------------------------------------\n!                                                      setColumn@setMethod\n!----------------------------------------------------------------------------\n\n!> author: Vikas Sharma, Ph. D.\n! date: 24 July 2021\n! summary: This routine set the Column of a sparse matrix\n!\n!# Introduction\n!\n! - This routine sets the Column of a sparse matrix. The Column index is\n! calculated\n! using the nodenum and idof.\n! - nodenum is the node number\n! - idof is the degree of freedom number\n! - icolumn calculated from nodenum and idof depends upon the storageFMT.\n\nINTERFACE SetColumn\n  MODULE SUBROUTINE csrMat_setColumn14(obj, nodenum, ivar, &\n    & spacecompo, timecompo, VALUE)\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: nodenum(:)\n    INTEGER(I4B), INTENT(IN) :: ivar\n    INTEGER(I4B), INTENT(IN) :: spacecompo\n    INTEGER(I4B), INTENT(IN) :: timecompo(:)\n    REAL(DFP), INTENT(IN) :: VALUE(:)\n  END SUBROUTINE csrMat_setColumn14\nEND INTERFACE SetColumn\n\n!----------------------------------------------------------------------------\n!                                                     setColumn@setMethod\n!----------------------------------------------------------------------------\n\n!> author: Vikas Sharma, Ph. D.\n! date: 24 July 2021\n! summary: This routine set the Column of a sparse matrix\n!\n!# Introduction\n!\n! - This routine sets the Column of a sparse matrix. The Column index is\n! calculated\n! using the nodenum and idof.\n! - nodenum is the node number\n! - idof is the degree of freedom number\n! - icolumn calculated from nodenum and idof depends upon the storageFMT.\n\nINTERFACE SetColumn\n  MODULE SUBROUTINE csrMat_setColumn15(obj, nodenum, ivar, &\n    & spacecompo, timecompo, VALUE)\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: nodenum(:)\n    INTEGER(I4B), INTENT(IN) :: ivar\n    INTEGER(I4B), INTENT(IN) :: spacecompo(:)\n    INTEGER(I4B), INTENT(IN) :: timecompo\n    REAL(DFP), INTENT(IN) :: VALUE\n  END SUBROUTINE csrMat_setColumn15\nEND INTERFACE SetColumn\n\n!----------------------------------------------------------------------------\n!                                                      setColumn@setMethod\n!----------------------------------------------------------------------------\n\n!> author: Vikas Sharma, Ph. D.\n! date: 24 July 2021\n! summary: This routine set the Column of a sparse matrix\n!\n!# Introduction\n!\n! - This routine sets the Column of a sparse matrix. The Column index is\n! calculated\n! using the nodenum and idof.\n! - nodenum is the node number\n! - idof is the degree of freedom number\n! - icolumn calculated from nodenum and idof depends upon the storageFMT.\n\nINTERFACE SetColumn\n  MODULE SUBROUTINE csrMat_setColumn16(obj, nodenum, ivar, &\n    & spacecompo, timecompo, VALUE)\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: nodenum(:)\n    INTEGER(I4B), INTENT(IN) :: ivar\n    INTEGER(I4B), INTENT(IN) :: spacecompo(:)\n    INTEGER(I4B), INTENT(IN) :: timecompo\n    REAL(DFP), INTENT(IN) :: VALUE(:)\n  END SUBROUTINE csrMat_setColumn16\nEND INTERFACE SetColumn\n"})})]})}function N(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,m.jsx)(e,{...n,children:(0,m.jsx)(E,{...n})}):E(n)}},54213:(n,e,o)=>{o.d(e,{R:()=>u,x:()=>a});var t=o(36672);const m={},s=t.createContext(m);function u(n){const e=t.useContext(s);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(m):n.components||m:u(n.components),t.createElement(s.Provider,{value:e},n.children)}}}]);