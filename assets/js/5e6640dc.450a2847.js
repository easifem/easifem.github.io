"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[90302],{75802:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>O,contentTitle:()=>P,default:()=>v,frontMatter:()=>D,metadata:()=>l,toc:()=>_});const l=JSON.parse('{"id":"ScalarFieldLis/Set","title":"Set","description":"Set the entries in the ScalarField.","source":"@site/docs/docs-api/ScalarFieldLis/Set.md","sourceDirName":"ScalarFieldLis","slug":"/ScalarFieldLis/Set","permalink":"/docs-api/ScalarFieldLis/Set","draft":false,"unlisted":false,"editUrl":"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/ScalarFieldLis/Set.md","tags":[],"version":"current","lastUpdatedAt":1724304782000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Normi","permalink":"/docs-api/ScalarFieldLis/Normi"},"next":{"title":"SetScalarFieldParam","permalink":"/docs-api/ScalarFieldLis/SetScalarFieldParam"}}');var i=a(23420),r=a(54213),t=a(36492),s=a(92492);function c(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["In this example we test ",(0,i.jsx)(n.a,{href:"/docs-api/ScalarFieldLis/Set",children:"Set"})," method."]}),"\n",(0,i.jsx)(n.p,{children:"We set single entry in ScalarField."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:'PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  TYPE( Domain_ ) :: dom\n  TYPE( ScalarFieldLis_ ) :: obj\n  TYPE( HDF5File_ ) :: meshfile, resultFile\n  TYPE( ParameterList_ ) :: param\n  INTEGER( I4B ) :: ierr\n  REAL( DFP ), ALLOCATABLE :: realVec( : )\n  CHARACTER( LEN = * ), PARAMETER :: engine = "LIS_OMP"\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",metastring:'title="Open file for import"',children:'  CALL FPL_INIT()\n  CALL param%initiate()\n  CALL resultFile%initiate( filename="./result.h5", mode="READ" )\n  CALL resultFile%open()\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",metastring:'title="read domain"  ',children:'  !> start creating domain\n  CALL meshfile%initiate( filename="./mesh.h5", mode="READ" )\n  CALL meshfile%open()\n  CALL dom%initiate( hdf5=meshfile, group="" )\n  !> end creating domain\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",metastring:'title="initiate scalar field"',children:'\n  CALL SetScalarFieldParam( param=param, &\n    & fieldType=FIELD_TYPE_NORMAL, &\n    & name="U", &\n    & engine=engine)\n\n   CALL obj%initiate( param, dom )\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",metastring:'title="set single value"',children:'   CALL obj%set( globalnode = 10, value= 100.0_dfp )\n   CALL obj%display( "scalar field = ")\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-txt",metastring:'title="results"',children:"#scalar field =\n# isInitiated : TRUE\n# name :U\n# fieldType : NORMAL\n# engine :LIS_OMP\n# comm: 0\n# myRank: 0\n# numProcs: 1\n# global_n: 102\n# local_n: 102\n# is: 1\n# ie: 103\n# lis_ptr: 94737506115424\n# domain : ASSOCIATED\n# domains : NOT ALLOCATED\n# tSize : 102\n# # DOF data :\n# Total Physical Variables :1\n# Name : U\n# Space Components : 1\n# Time Components : 1\n# Total Nodes : 102\n# Storage Format : Nodes\n# Value Map : \n--------------\n       1      \n     103      \n# VAR :U\n DOF-1 ,   \n-------,   \n  0.000,   \n  0.000,   \n  0.000,   \n  0.000,   \n  0.000,   \n  0.000,   \n  0.000,   \n  0.000,   \n  0.000,   \n100.000,   \n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",metastring:'title="Cleanup"',children:"  CALL obj%Deallocate(); CALL dom%Deallocate()\n  CALL meshfile%Deallocate()\n  CALL resultFile%Deallocate()\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\n  if(allocated(realVec) ) deallocate(realVec)\nEND PROGRAM main\n"})})]})}function o(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}function d(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["In this example we test ",(0,i.jsx)(n.a,{href:"/docs-api/ScalarFieldLis/Set",children:"Set"})," method."]}),"\n",(0,i.jsx)(n.p,{children:"In this example we set all values of ScalarField."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:'PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  TYPE( Domain_ ) :: dom\n  TYPE( ScalarFieldLis_ ) :: obj\n  TYPE( HDF5File_ ) :: meshfile, resultFile\n  TYPE( ParameterList_ ) :: param\n  INTEGER( I4B ) :: ierr\n  REAL( DFP ), ALLOCATABLE :: realVec( : )\n  CHARACTER( LEN = * ), PARAMETER :: engine = "LIS_OMP"\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",metastring:'title="Open file for import"',children:'  CALL FPL_INIT()\n  CALL param%initiate()\n  CALL resultFile%initiate( filename="./result.h5", mode="READ" )\n  CALL resultFile%open()\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",metastring:'title="read domain"  ',children:'  !> start creating domain\n  CALL meshfile%initiate( filename="./mesh.h5", mode="READ" )\n  CALL meshfile%open()\n  CALL dom%initiate( hdf5=meshfile, group="" )\n  !> end creating domain\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",metastring:'title="initiate scalar field"',children:'\n  CALL SetScalarFieldParam( param=param, &\n    & fieldType=FIELD_TYPE_NORMAL, &\n    & name="U", &\n    & engine=engine)\n  CALL obj%initiate( param, dom )\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",metastring:'title="setting all values"',children:' CALL obj%set( value= 200.0_DFP )\n CALL obj%display( "scalar field = ")\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-txt",metastring:'title="results"',children:"#scalar field =\n# isInitiated : TRUE\n# name :U\n# fieldType : NORMAL\n# engine :LIS_OMP\n# comm: 0\n# myRank: 0\n# numProcs: 1\n# global_n: 102\n# local_n: 102\n# is: 1\n# ie: 103\n# lis_ptr: 94373790752608\n# domain : ASSOCIATED\n# domains : NOT ALLOCATED\n# tSize : 102\n# # DOF data :\n# Total Physical Variables :1\n# Name : U\n# Space Components : 1\n# Time Components : 1\n# Total Nodes : 102\n# Storage Format : Nodes\n# Value Map : \n--------------\n       1      \n     103      \n# VAR :U\n DOF-1 ,   \n-------,   \n200.000,   \n200.000,   \n200.000,   \n200.000,   \n200.000,   \n200.000,   \n200.000,   \n200.000,   \n200.000,   \n200.000,   \n\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",metastring:'title="Cleanup"',children:"  CALL obj%Deallocate(); CALL dom%Deallocate()\n  CALL meshfile%Deallocate()\n  CALL resultFile%Deallocate()\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\n  if(allocated(realVec) ) deallocate(realVec)\nEND PROGRAM main\n"})})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}function L(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["In this example we test ",(0,i.jsx)(n.a,{href:"/docs-api/ScalarFieldLis/Set",children:"Set"})," method."]}),"\n",(0,i.jsx)(n.p,{children:"In this example we set all values of ScalarField using a vector of reals."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:'PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  TYPE( Domain_ ) :: dom\n  TYPE( ScalarFieldLis_ ) :: obj\n  TYPE( HDF5File_ ) :: meshfile, resultFile\n  TYPE( ParameterList_ ) :: param\n  INTEGER( I4B ) :: ierr\n  REAL( DFP ), ALLOCATABLE :: realVec( : )\n  CHARACTER( LEN = * ), PARAMETER :: engine = "LIS_OMP"\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",metastring:'title="Open file for import"',children:'  CALL FPL_INIT()\n  CALL param%initiate()\n  CALL resultFile%initiate( filename="./result.h5", mode="READ" )\n  CALL resultFile%open()\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",metastring:'title="read domain"  ',children:'  !> start creating domain\n  CALL meshfile%initiate( filename="./mesh.h5", mode="READ" )\n  CALL meshfile%open()\n  CALL dom%initiate( hdf5=meshfile, group="" )\n  !> end creating domain\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",metastring:'title="initiate scalar field"',children:'  CALL SetScalarFieldParam( param=param, &\n    & fieldType=FIELD_TYPE_NORMAL, &\n    & name="U", &\n    & engine=engine)\n  CALL obj%initiate( param, dom )\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",metastring:'title="setting all values using vector"',children:' call reallocate( realVec, dom%getTotalNodes() )\n call RANDOM_NUMBER( realVec )\n call obj%set(realVec)\n call obj%display( "scalar field = ")\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-txt",metastring:'title="results"',children:"#scalar field =\n# isInitiated : TRUE\n# name :U\n# fieldType : NORMAL\n# engine :LIS_OMP\n# comm: 0\n# myRank: 0\n# numProcs: 1\n# global_n: 102\n# local_n: 102\n# is: 1\n# ie: 103\n# lis_ptr: 94018677690208\n# domain : ASSOCIATED\n# domains : NOT ALLOCATED\n# tSize : 102\n# # DOF data :\n# Total Physical Variables :1\n# Name : U\n# Space Components : 1\n# Time Components : 1\n# Total Nodes : 102\n# Storage Format : Nodes\n# Value Map : \n--------------\n       1      \n     103      \n# VAR :U\n  DOF-1 ,   \n--------,   \n0.609126,   \n0.877070,   \n0.462140,   \n0.474488,   \n0.743044,   \n0.471275,   \n0.085154,   \n0.671168,   \n\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",metastring:'title="Cleanup"',children:"  CALL obj%Deallocate(); CALL dom%Deallocate()\n  CALL meshfile%Deallocate()\n  CALL resultFile%Deallocate()\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\n  if(allocated(realVec) ) deallocate(realVec)\nEND PROGRAM main\n"})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(L,{...e})}):L(e)}function u(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["In this example we test ",(0,i.jsx)(n.a,{href:"/docs-api/ScalarFieldLis/Set",children:"Set"})," method."]}),"\n",(0,i.jsx)(n.p,{children:"Setting multiple values in ScalarField."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:'PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  TYPE( Domain_ ) :: dom\n  TYPE( ScalarFieldLis_ ) :: obj\n  TYPE( HDF5File_ ) :: meshfile, resultFile\n  TYPE( ParameterList_ ) :: param\n  INTEGER( I4B ) :: ierr\n  REAL( DFP ), ALLOCATABLE :: realVec( : )\n  CHARACTER( LEN = * ), PARAMETER :: engine = "LIS_OMP"\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",metastring:'title="Open file for import"',children:'  CALL FPL_INIT()\n  CALL param%initiate()\n  CALL resultFile%initiate( filename="./result.h5", mode="READ" )\n  CALL resultFile%open()\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",metastring:'title="read domain"  ',children:'  !> start creating domain\n  CALL meshfile%initiate( filename="./mesh.h5", mode="READ" )\n  CALL meshfile%open()\n  CALL dom%initiate( hdf5=meshfile, group="" )\n  !> end creating domain\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",metastring:'title="initiate scalar field"',children:'  CALL SetScalarFieldParam( param=param, &\n    & fieldType=FIELD_TYPE_NORMAL, &\n    & name="U", &\n    & engine=engine)\n  CALL obj%initiate( param, dom )\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",metastring:'title="Setting multiple values"',children:' call obj%set(globalNode=[1,2,5], value=1.0_DFP )\n call obj%display( "scalar field = ")\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-txt",metastring:'title="results"',children:"#scalar field =\n# isInitiated : TRUE\n# name :U\n# fieldType : NORMAL\n# engine :LIS_OMP\n# comm: 0\n# myRank: 0\n# numProcs: 1\n# global_n: 102\n# local_n: 102\n# is: 1\n# ie: 103\n# lis_ptr: 93864323497824\n# domain : ASSOCIATED\n# domains : NOT ALLOCATED\n# tSize : 102\n# # DOF data :\n# Total Physical Variables :1\n# Name : U\n# Space Components : 1\n# Time Components : 1\n# Total Nodes : 102\n# Storage Format : Nodes\n# Value Map : \n--------------\n       1      \n     103      \n# VAR :U\n DOF-1 ,   \n-------,   \n1.00000,   \n1.00000,   \n0.00000,   \n0.00000,   \n1.00000,   \n\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",metastring:'title="Cleanup"',children:"  CALL obj%Deallocate(); CALL dom%Deallocate()\n  CALL meshfile%Deallocate()\n  CALL resultFile%Deallocate()\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\n  if(allocated(realVec) ) deallocate(realVec)\nEND PROGRAM main\n"})})]})}function A(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}function h(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["In this example we test ",(0,i.jsx)(n.a,{href:"/docs-api/ScalarFieldLis/Set",children:"Set"})," method."]}),"\n",(0,i.jsx)(n.p,{children:"Setting multiple values."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:'PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  TYPE( Domain_ ) :: dom\n  TYPE( ScalarFieldLis_ ) :: obj\n  TYPE( HDF5File_ ) :: meshfile, resultFile\n  TYPE( ParameterList_ ) :: param\n  INTEGER( I4B ) :: ierr\n  REAL( DFP ), ALLOCATABLE :: realVec( : )\n  CHARACTER( LEN = * ), PARAMETER :: engine = "LIS_OMP"\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",metastring:'title="Open file for import"',children:'  CALL FPL_INIT()\n  CALL param%initiate()\n  CALL resultFile%initiate( filename="./result.h5", mode="READ" )\n  CALL resultFile%open()\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",metastring:'title="read domain"  ',children:'  !> start creating domain\n  CALL meshfile%initiate( filename="./mesh.h5", mode="READ" )\n  CALL meshfile%open()\n  CALL dom%initiate( hdf5=meshfile, group="" )\n  !> end creating domain\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",metastring:'title="initiate scalar field"',children:'  CALL SetScalarFieldParam( param=param, &\n    & fieldType=FIELD_TYPE_NORMAL, &\n    & name="U", &\n    & engine=engine)\n  CALL obj%initiate( param, dom )\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",metastring:'title="Setting multiple values"',children:'  realVec = [1.0, 2.0, 3.0]\n  CALL obj%set(globalNode=[1,2,5], value=realVec )\n  CALL obj%display( "scalar field = ")\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-txt",metastring:'title="results"',children:"#scalar field =\n# isInitiated : TRUE\n# name :U\n# fieldType : NORMAL\n# engine :LIS_OMP\n# comm: 0\n# myRank: 0\n# numProcs: 1\n# global_n: 102\n# local_n: 102\n# is: 1\n# ie: 103\n# lis_ptr: 94289762668384\n# domain : ASSOCIATED\n# domains : NOT ALLOCATED\n# tSize : 102\n# # DOF data :\n# Total Physical Variables :1\n# Name : U\n# Space Components : 1\n# Time Components : 1\n# Total Nodes : 102\n# Storage Format : Nodes\n# Value Map : \n--------------\n       1      \n     103      \n# VAR :U\n DOF-1 ,   \n-------,   \n1.00000,   \n2.00000,   \n0.00000,   \n0.00000,   \n3.00000,   \n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",metastring:'title="Cleanup"',children:"  CALL obj%Deallocate(); CALL dom%Deallocate()\n  CALL meshfile%Deallocate()\n  CALL resultFile%Deallocate()\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\n  if(allocated(realVec) ) deallocate(realVec)\nEND PROGRAM main\n"})})]})}function j(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}function E(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["In this example we test ",(0,i.jsx)(n.a,{href:"/docs-api/ScalarFieldLis/Set",children:"Set"})," method."]}),"\n",(0,i.jsx)(n.p,{children:"Setting multiple values using triplets."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:'PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  TYPE( Domain_ ) :: dom\n  TYPE( ScalarFieldLis_ ) :: obj\n  TYPE( HDF5File_ ) :: meshfile, resultFile\n  TYPE( ParameterList_ ) :: param\n  INTEGER( I4B ) :: ierr\n  REAL( DFP ), ALLOCATABLE :: realVec( : )\n  CHARACTER( LEN = * ), PARAMETER :: engine = "LIS_OMP"\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",metastring:'title="Open file for import"',children:'  CALL FPL_INIT()\n  CALL param%initiate()\n  CALL resultFile%initiate( filename="./result.h5", mode="READ" )\n  CALL resultFile%open()\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",metastring:'title="read domain"  ',children:'  !> start creating domain\n  CALL meshfile%initiate( filename="./mesh.h5", mode="READ" )\n  CALL meshfile%open()\n  CALL dom%initiate( hdf5=meshfile, group="" )\n  !> end creating domain\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",metastring:'title="initiate scalar field"',children:'  CALL SetScalarFieldParam( param=param, &\n    & fieldType=FIELD_TYPE_NORMAL, &\n    & name="U", &\n    & engine=engine)\n  CALL obj%initiate( param, dom )\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",metastring:'title="Setting multiple values using triplets"',children:'  CALL obj%set(istart=1, iend=5, stride=2, value=10.0_DFP )\n  CALL obj%display( "scalar field = ")\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-txt",metastring:'title="results"',children:"#scalar field =\n# isInitiated : TRUE\n# name :U\n# fieldType : NORMAL\n# engine :LIS_OMP\n# comm: 0\n# myRank: 0\n# numProcs: 1\n# global_n: 102\n# local_n: 102\n# is: 1\n# ie: 103\n# lis_ptr: 94209227312992\n# domain : ASSOCIATED\n# domains : NOT ALLOCATED\n# tSize : 102\n# # DOF data :\n# Total Physical Variables :1\n# Name : U\n# Space Components : 1\n# Time Components : 1\n# Total Nodes : 102\n# Storage Format : Nodes\n# Value Map : \n--------------\n       1      \n     103      \n# VAR :U\n DOF-1 ,   \n-------,   \n10.0000,   \n 0.0000,   \n10.0000,   \n 0.0000,   \n10.0000,   \n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",metastring:'title="Cleanup"',children:"  CALL obj%Deallocate(); CALL dom%Deallocate()\n  CALL meshfile%Deallocate()\n  CALL resultFile%Deallocate()\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\n  if(allocated(realVec) ) deallocate(realVec)\nEND PROGRAM main\n"})})]})}function g(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(E,{...e})}):E(e)}function N(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["In this example we test ",(0,i.jsx)(n.a,{href:"/docs-api/ScalarFieldLis/Set",children:"Set"})," method."]}),"\n",(0,i.jsx)(n.p,{children:"Setting multiple values using triplets."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:'PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  TYPE( Domain_ ) :: dom\n  TYPE( ScalarFieldLis_ ) :: obj\n  TYPE( HDF5File_ ) :: meshfile, resultFile\n  TYPE( ParameterList_ ) :: param\n  INTEGER( I4B ) :: ierr\n  REAL( DFP ), ALLOCATABLE :: realVec( : )\n  CHARACTER( LEN = * ), PARAMETER :: engine = "LIS_OMP"\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",metastring:'title="Open file for import"',children:'  CALL FPL_INIT()\n  CALL param%initiate()\n  CALL resultFile%initiate( filename="./result.h5", mode="READ" )\n  CALL resultFile%open()\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",metastring:'title="read domain"  ',children:'  !> start creating domain\n  CALL meshfile%initiate( filename="./mesh.h5", mode="READ" )\n  CALL meshfile%open()\n  CALL dom%initiate( hdf5=meshfile, group="" )\n  !> end creating domain\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",metastring:'title="initiate scalar field"',children:'  CALL SetScalarFieldParam( param=param, &\n    & fieldType=FIELD_TYPE_NORMAL, &\n    & name="U", &\n    & engine=engine)\n  CALL obj%initiate( param, dom )\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",metastring:'title="Setting multiple values using triplets"',children:'  realVec = [1.0, 3.0, 5.0]\n  CALL obj%set(istart=1, iend=5, stride=2, value=realVec )\n  CALL obj%display( "scalar field = ")\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-txt",metastring:'title="results"',children:"#scalar field =\n# isInitiated : TRUE\n# name :U\n# fieldType : NORMAL\n# engine :LIS_OMP\n# comm: 0\n# myRank: 0\n# numProcs: 1\n# global_n: 102\n# local_n: 102\n# is: 1\n# ie: 103\n# lis_ptr: 94391377026912\n# domain : ASSOCIATED\n# domains : NOT ALLOCATED\n# tSize : 102\n# # DOF data :\n# Total Physical Variables :1\n# Name : U\n# Space Components : 1\n# Time Components : 1\n# Total Nodes : 102\n# Storage Format : Nodes\n# Value Map : \n--------------\n       1      \n     103      \n# VAR :U\n DOF-1 ,   \n-------,   \n1.00000,   \n0.00000,   \n3.00000,   \n0.00000,   \n5.00000,   \n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",metastring:'title="Cleanup"',children:"  CALL obj%Deallocate(); CALL dom%Deallocate()\n  CALL meshfile%Deallocate()\n  CALL resultFile%Deallocate()\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\n  if(allocated(realVec) ) deallocate(realVec)\nEND PROGRAM main\n"})})]})}function f(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(N,{...e})}):N(e)}function x(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["In this example we test ",(0,i.jsx)(n.a,{href:"/docs-api/ScalarFieldLis/Set",children:"Set"})," method."]}),"\n",(0,i.jsx)(n.p,{children:"Setting multiple values using triplets."}),"\n",(0,i.jsx)(n.p,{children:"We also test:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-txt",children:"Obj2 =obj\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Here ",(0,i.jsx)(n.code,{children:"obj2"})," and ",(0,i.jsx)(n.code,{children:"obj"})," are instances of ",(0,i.jsx)(n.code,{children:"ScalarFieldLis_"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:'PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  TYPE( Domain_ ) :: dom\n  TYPE( ScalarFieldLis_ ) :: obj\n  TYPE( ScalarFieldLis_ ) :: obj2\n  TYPE( HDF5File_ ) :: meshfile, resultFile\n  TYPE( ParameterList_ ) :: param\n  INTEGER( I4B ) :: ierr\n  REAL( DFP ), ALLOCATABLE :: realVec( : )\n  CHARACTER( LEN = * ), PARAMETER :: engine = "LIS_OMP"\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",metastring:'title="Open file for import"',children:'  CALL FPL_INIT()\n  CALL param%initiate()\n  CALL resultFile%initiate( filename="./result.h5", mode="READ" )\n  CALL resultFile%open()\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",metastring:'title="read domain"  ',children:'  !> start creating domain\n  CALL meshfile%initiate( filename="./mesh.h5", mode="READ" )\n  CALL meshfile%open()\n  CALL dom%initiate( hdf5=meshfile, group="" )\n  !> end creating domain\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",metastring:'title="initiate scalar field"',children:'  CALL SetScalarFieldParam( param=param, &\n    & fieldType=FIELD_TYPE_NORMAL, &\n    & name="U", &\n    & engine=engine)\n  CALL obj%initiate( param, dom )\n  CALL SetScalarFieldParam( param=param, &\n    & fieldType=FIELD_TYPE_NORMAL, &\n    & name="U2", &\n    & engine=engine)\n  CALL obj2%initiate( param, dom )\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",metastring:'title="Setting multiple values using triplets"',children:'  realVec = [1.0, 3.0, 5.0]\n  CALL obj%set(istart=1, iend=5, stride=2, value=realVec )\n  CALL obj2%set(obj)\n  CALL obj2%Display("obj2 = ")\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-txt",metastring:'title="results"',children:"#obj2 =\n# isInitiated : TRUE\n# name :U2\n# fieldType : NORMAL\n# engine :LIS_OMP\n# comm: 0\n# myRank: 0\n# numProcs: 1\n# global_n: 102\n# local_n: 102\n# is: 1\n# ie: 103\n# lis_ptr: 94340755750608\n# domain : ASSOCIATED\n# domains : NOT ALLOCATED\n# tSize : 102\n# # DOF data :\n# Total Physical Variables :1\n# Name : U\n# Space Components : 1\n# Time Components : 1\n# Total Nodes : 102\n# Storage Format : Nodes\n# Value Map : \n--------------\n       1      \n     103      \n# VAR :U\n DOF-1 ,   \n-------,   \n1.00000,   \n0.00000,   \n3.00000,   \n0.00000,   \n5.00000,   \n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",metastring:'title="Cleanup"',children:"  CALL obj%Deallocate(); CALL dom%Deallocate()\n  CALL meshfile%Deallocate()\n  CALL resultFile%Deallocate()\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\n  if(allocated(realVec) ) deallocate(realVec)\nEND PROGRAM main\n"})})]})}function T(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(x,{...e})}):x(e)}function C(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["In this example we test ",(0,i.jsx)(n.a,{href:"/docs-api/ScalarFieldLis/Set",children:"Set"})," method."]}),"\n",(0,i.jsx)(n.p,{children:"Setting multiple values using triplets."}),"\n",(0,i.jsx)(n.p,{children:"We also test:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-txt",children:"obj2=obj\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Here ",(0,i.jsx)(n.code,{children:"obj"})," is an instance of ",(0,i.jsx)(n.code,{children:"ScalarField_"}),", and ",(0,i.jsx)(n.code,{children:"obj2"})," is an instance of ",(0,i.jsx)(n.code,{children:"ScalarFieldLis_"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:'PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  TYPE( Domain_ ) :: dom\n  TYPE( ScalarField_ ) :: obj\n  TYPE( ScalarFieldLis_ ) :: obj2\n  TYPE( HDF5File_ ) :: meshfile, resultFile\n  TYPE( ParameterList_ ) :: param\n  INTEGER( I4B ) :: ierr\n  REAL( DFP ), ALLOCATABLE :: realVec( : )\n  CHARACTER( LEN = * ), PARAMETER :: engine = "LIS_OMP"\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",metastring:'title="Open file for import"',children:'  CALL FPL_INIT()\n  CALL param%initiate()\n  CALL resultFile%initiate( filename="./result.h5", mode="READ" )\n  CALL resultFile%open()\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",metastring:'title="read domain"',children:'  !> start creating domain\n  CALL meshfile%initiate( filename="./mesh.h5", mode="READ" )\n  CALL meshfile%open()\n  CALL dom%initiate( hdf5=meshfile, group="" )\n  !> end creating domain\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",metastring:'title="initiate scalar field"',children:'  CALL SetScalarFieldParam( param=param, &\n    & fieldType=FIELD_TYPE_NORMAL, &\n    & name="U", &\n    & engine="NATIVE_SERIAL")\n  CALL obj%initiate( param, dom )\n\n  CALL SetScalarFieldParam( param=param, &\n    & fieldType=FIELD_TYPE_NORMAL, &\n    & name="U2", &\n    & engine=engine)\n  CALL obj2%initiate( param, dom )\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",metastring:'title="Setting multiple values using triplets"',children:'  realVec = [1.0, 3.0, 5.0]\n  CALL obj%set(istart=1, iend=5, stride=2, value=realVec )\n  CALL obj2%set(obj)\n  CALL obj2%Display("obj2 = ")\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-txt",metastring:'title="results"',children:"#obj2 =\n# isInitiated : TRUE\n# name :U2\n# fieldType : NORMAL\n# engine :LIS_OMP\n# comm: 0\n# myRank: 0\n# numProcs: 1\n# global_n: 102\n# local_n: 102\n# is: 1\n# ie: 103\n# lis_ptr: 94164546445152\n# domain : ASSOCIATED\n# domains : NOT ALLOCATED\n# tSize : 102\n# # DOF data :\n# Total Physical Variables :1\n# Name : U\n# Space Components : 1\n# Time Components : 1\n# Total Nodes : 102\n# Storage Format : Nodes\n# Value Map : \n--------------\n       1      \n     103      \n# VAR :U\n DOF-1 ,   \n-------,   \n1.00000,   \n0.00000,   \n3.00000,   \n0.00000,   \n5.00000,   \n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",metastring:'title="Cleanup"',children:"  CALL obj%Deallocate(); CALL dom%Deallocate()\n  CALL meshfile%Deallocate()\n  CALL resultFile%Deallocate()\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\n  if(allocated(realVec) ) deallocate(realVec)\nEND PROGRAM main\n"})})]})}function I(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(C,{...e})}):C(e)}function S(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["In this example we test ",(0,i.jsx)(n.a,{href:"/docs-api/ScalarFieldLis/Set",children:"Set"})," method."]}),"\n",(0,i.jsx)(n.p,{children:"Setting multiple values using triplets."}),"\n",(0,i.jsx)(n.p,{children:"We also test:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-txt",children:"obj=obj+scale*obj2\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Here ",(0,i.jsx)(n.code,{children:"obj"})," and ",(0,i.jsx)(n.code,{children:"obj2"})," are instances of ",(0,i.jsx)(n.code,{children:"ScalarFieldLis_"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:'PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  TYPE( Domain_ ) :: dom\n  TYPE( ScalarFieldLis_ ) :: obj\n  TYPE( ScalarFieldLis_ ) :: obj2\n  TYPE( HDF5File_ ) :: meshfile, resultFile\n  TYPE( ParameterList_ ) :: param\n  INTEGER( I4B ) :: ierr\n  REAL( DFP ), ALLOCATABLE :: realVec( : )\n  CHARACTER( LEN = * ), PARAMETER :: engine = "LIS_OMP"\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",metastring:'title="Open file for import"',children:'  CALL FPL_INIT()\n  CALL param%initiate()\n  CALL resultFile%initiate( filename="./result.h5", mode="READ" )\n  CALL resultFile%open()\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",metastring:'title="read domain"',children:'  !> start creating domain\n  CALL meshfile%initiate( filename="./mesh.h5", mode="READ" )\n  CALL meshfile%open()\n  CALL dom%initiate( hdf5=meshfile, group="" )\n  !> end creating domain\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",metastring:'title="initiate scalar field"',children:'  CALL SetScalarFieldParam( param=param, &\n    & fieldType=FIELD_TYPE_NORMAL, &\n    & name="U", &\n    & engine=engine)\n  CALL obj%initiate( param, dom )\n\n  CALL SetScalarFieldParam( param=param, &\n    & fieldType=FIELD_TYPE_NORMAL, &\n    & name="U2", &\n    & engine=engine)\n  CALL obj2%initiate( param, dom )\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",metastring:'title="Setting multiple values using triplets"',children:'  CALL Reallocate(realVec, dom%getTotalNodes())\n  CALL RANDOM_NUMBER(realVec)\n  CALL obj%set(value=realVec)\n  CALL obj%Display("obj = ")\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-txt",metastring:'title="results"',children:"0.122526,   \n0.004512,   \n0.338894,   \n0.634983,   \n0.530011,   \n0.772392,   \n0.907221,   \n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",metastring:'title="Setting multiple values using triplets"',children:'  CALL RANDOM_NUMBER(realVec)\n  CALL obj2%set(value=realVec)\n  CALL obj2%Display("obj2 = ")\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-txt",metastring:'title="results"',children:"0.370250,   \n0.898448,   \n0.029706,   \n0.299606,   \n0.505284,   \n0.072251,   \n0.943977,   \n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",metastring:'title="obj=obj+scale*obj2"',children:'  CALL obj%set(obj2=obj2, scale=1.0_DFP, addContribution=.TRUE.)\n  CALL obj%Display("obj =")\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-txt",metastring:'title="results"',children:"0.49278,   \n0.90296,   \n0.36860,   \n0.93459,   \n1.03529,   \n0.84464,   \n1.85120,   \n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",metastring:'title="Cleanup"',children:"  CALL obj%Deallocate(); CALL dom%Deallocate()\n  CALL meshfile%Deallocate()\n  CALL resultFile%Deallocate()\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\n  if(allocated(realVec) ) deallocate(realVec)\nEND PROGRAM main\n"})})]})}function b(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(S,{...e})}):S(e)}function R(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["In this example we test ",(0,i.jsx)(n.a,{href:"/docs-api/ScalarFieldLis/Set",children:"Set"})," method."]}),"\n",(0,i.jsx)(n.p,{children:"Setting multiple values using triplets."}),"\n",(0,i.jsx)(n.p,{children:"We also test:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-txt",children:"obj=obj+scale*obj2\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Here ",(0,i.jsx)(n.code,{children:"obj"})," is an instance of ",(0,i.jsx)(n.code,{children:"ScalarFieldLis_"}),", and ",(0,i.jsx)(n.code,{children:"obj2"})," is an instance of ",(0,i.jsx)(n.code,{children:"ScalarField_"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:'PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  TYPE( Domain_ ) :: dom\n  TYPE( ScalarField_ ) :: obj\n  TYPE( ScalarFieldLis_ ) :: obj2\n  TYPE( HDF5File_ ) :: meshfile, resultFile\n  TYPE( ParameterList_ ) :: param\n  INTEGER( I4B ) :: ierr\n  REAL( DFP ), ALLOCATABLE :: realVec( : )\n  CHARACTER( LEN = * ), PARAMETER :: engine = "LIS_OMP"\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",metastring:'title="Open file for import"',children:'  CALL FPL_INIT()\n  CALL param%initiate()\n  CALL resultFile%initiate( filename="./result.h5", mode="READ" )\n  CALL resultFile%open()\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",metastring:'title="read domain"',children:'  !> start creating domain\n  CALL meshfile%initiate( filename="./mesh.h5", mode="READ" )\n  CALL meshfile%open()\n  CALL dom%initiate( hdf5=meshfile, group="" )\n  !> end creating domain\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",metastring:'title="initiate scalar field"',children:'  CALL SetScalarFieldParam( param=param, &\n    & fieldType=FIELD_TYPE_NORMAL, &\n    & name="U", &\n    & engine="NATIVE_SERIAL")\n  CALL obj%initiate( param, dom )\n\n  CALL SetScalarFieldParam( param=param, &\n    & fieldType=FIELD_TYPE_NORMAL, &\n    & name="U2", &\n    & engine=engine)\n  CALL obj2%initiate( param, dom )\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",metastring:'title="Setting multiple values using triplets"',children:'  CALL Reallocate(realVec, dom%getTotalNodes())\n  CALL RANDOM_NUMBER(realVec)\n  CALL obj%set(value=realVec)\n  CALL obj%Display("obj = ")\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-txt",metastring:'title="results"',children:"0.444226,   \n0.622197,   \n0.553742,   \n0.453327,   \n0.252453,   \n0.436322,   \n0.371526,   \n0.956193,   \n0.684259,   \n0.335780,   \n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",metastring:'title="Setting multiple values using triplets"',children:'  CALL RANDOM_NUMBER(realVec)\n  CALL obj2%set(value=realVec)\n  CALL obj2%Display("obj2 = ")\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-txt",metastring:'title="results"',children:"0.117251,   \n0.699120,   \n0.400569,   \n0.126309,   \n0.097650,   \n0.653376,   \n0.497695,   \n0.054821,   \n0.674551,   \n0.935478,   \n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",metastring:'title="obj=obj+scale*obj2"',children:'  CALL obj%set(obj2=obj2, scale=1.0_DFP, addContribution=.TRUE.)\n  CALL obj%Display("obj =")\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-txt",metastring:'title="results"',children:"0.56148,   \n1.32132,   \n0.95431,   \n0.57964,   \n0.35010,   \n1.08970,   \n0.86922,   \n1.01101,   \n1.35881,   \n1.27126,   \n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",metastring:'title="Cleanup"',children:"  CALL obj%Deallocate(); CALL dom%Deallocate()\n  CALL meshfile%Deallocate()\n  CALL resultFile%Deallocate()\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\n  if(allocated(realVec) ) deallocate(realVec)\nEND PROGRAM main\n"})})]})}function F(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(R,{...e})}):R(e)}const D={},P="Set",O={},_=[{value:"Interface 1",id:"interface-1",level:2},{value:"Interface 2",id:"interface-2",level:2},{value:"Interface 3",id:"interface-3",level:2},{value:"Interface 4",id:"interface-4",level:2},{value:"Interface 5",id:"interface-5",level:2},{value:"Interface 6",id:"interface-6",level:2},{value:"Interface 7",id:"interface-7",level:2},{value:"Interface 8",id:"interface-8",level:2},{value:"Interface 9",id:"interface-9",level:2},{value:"Interface 10",id:"interface-10",level:2}];function U(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"set",children:"Set"})}),"\n",(0,i.jsx)(n.p,{children:"Set the entries in the ScalarField."}),"\n",(0,i.jsx)(n.p,{children:"Calling example:"}),"\n",(0,i.jsx)("span",{class:"badge badge--success",children:(0,i.jsx)(n.p,{children:"Set a single entry"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"CALL Set(\n    CLASS(ScalarField_):: obj\n    INTEGER(I4B):: globalNode\n    REAL(DFP):: VALUE\n    REAL(DFP):: scale\n    LOGICAL(LGT):: addContribution\n)\n"})}),"\n",(0,i.jsx)("span",{class:"badge badge--success",children:(0,i.jsx)(n.p,{children:"Set all entries to a single scalar value"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"CALL Set(\n    CLASS(ScalarField_):: obj\n    REAL(DFP):: VALUE\n    REAL(DFP):: scale\n    LOGICAL(LGT):: addContribution\n)\n"})}),"\n",(0,i.jsx)("span",{class:"badge badge--success",children:(0,i.jsx)(n.p,{children:"Set all entries of scalar field to a given vector."})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"CALL Set(\n    CLASS(ScalarField_):: obj\n    REAL(DFP):: VALUE(:)\n    REAL(DFP):: scale\n    LOGICAL(LGT):: addContribution\n)\n"})}),"\n",(0,i.jsx)("span",{class:"badge badge--success",children:(0,i.jsx)(n.p,{children:"Set selected entries to a single value."})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"CALL Set(\n    CLASS(ScalarField_):: obj\n    INTEGER(I4B):: globalNode(:)\n    REAL(DFP):: VALUE\n    REAL(DFP):: scale\n    LOGICAL(LGT):: addContribution\n)\n"})}),"\n",(0,i.jsx)("span",{class:"badge badge--success",children:(0,i.jsx)(n.p,{children:"Set multiple entries to different values."})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"CALL Set(\n    CLASS(ScalarField_):: obj\n    INTEGER(I4B):: globalNode(:)\n    REAL(DFP):: VALUE(:)\n    REAL(DFP):: scale\n    LOGICAL(LGT):: addContribution\n)\n"})}),"\n",(0,i.jsx)("span",{class:"badge badge--success",children:(0,i.jsx)(n.p,{children:"Select multiple enties using triads."})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"CALL Set(\n    CLASS(ScalarField_):: obj\n    INTEGER(I4B):: istart\n    INTEGER(I4B):: iend\n    INTEGER(I4B):: stride\n    REAL(DFP):: VALUE\n    REAL(DFP):: scale\n    LOGICAL(LGT):: addContribution\n)\n"})}),"\n",(0,i.jsx)("span",{class:"badge badge--success",children:(0,i.jsx)(n.p,{children:"Select multiple enties using triads."})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"CALL Set(\n    CLASS(ScalarField_):: obj\n    INTEGER(I4B):: istart\n    INTEGER(I4B):: iend\n    INTEGER(I4B):: stride\n    REAL(DFP):: VALUE(:)\n    REAL(DFP):: scale\n    LOGICAL(LGT):: addContribution\n)\n"})}),"\n",(0,i.jsx)("span",{class:"badge badge--success",children:(0,i.jsx)(n.p,{children:"Copy obj2 in obj."})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"CALL Set(\n    CLASS(ScalarField_):: obj\n    CLASS(ScalarField_):: obj2\n)\n"})}),"\n",(0,i.jsx)("span",{class:"badge badge--success",children:(0,i.jsx)(n.p,{children:"Select multiple values using FEVariable."})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"CALL Set(\n    CLASS(ScalarField_):: obj\n    INTEGER(I4B):: globalNode(:)\n    TYPE(FEVariable_):: VALUE\n    REAL(DFP):: scale\n    LOGICAL(LGT):: addContribution\n)\n"})}),"\n",(0,i.jsx)("span",{class:"badge badge--success",children:(0,i.jsx)(n.p,{children:"Copy obj2 into obj like AXPY."})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"CALL Set(\n    CLASS(ScalarField_):: obj\n    CLASS(ScalarField_):: obj2\n    REAL(DFP):: scale\n    LOGICAL(LGT):: addContribution\n)\n"})}),"\n","\n",(0,i.jsx)(n.h2,{id:"interface-1",children:"Interface 1"}),"\n",(0,i.jsxs)(t.A,{children:[(0,i.jsxs)(s.A,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE set1(obj, globalNode, VALUE, scale, &\n    & addContribution)\n    CLASS(ScalarField_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: globalNode\n    REAL(DFP), INTENT(IN) :: VALUE\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\n  END SUBROUTINE set1\nEND INTERFACE\n"})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Set single entry."}),"\n"]})]}),(0,i.jsx)(s.A,{value:"example",label:"\ufe0f\u0700 See example",children:(0,i.jsx)(o,{})}),(0,i.jsx)(s.A,{value:"close",label:"\u21a2 "})]}),"\n",(0,i.jsx)(n.h2,{id:"interface-2",children:"Interface 2"}),"\n",(0,i.jsxs)(t.A,{children:[(0,i.jsxs)(s.A,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE set2(obj, VALUE, scale, addContribution)\n    CLASS(ScalarField_), INTENT(INOUT) :: obj\n    REAL(DFP), INTENT(IN) :: VALUE\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\n  END SUBROUTINE set2\nEND INTERFACE\n"})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Set all values of scalar field to a given scalar."}),"\n"]})]}),(0,i.jsx)(s.A,{value:"example",label:"\ufe0f\u0700 See example",children:(0,i.jsx)(m,{})}),(0,i.jsx)(s.A,{value:"close",label:"\u21a2 "})]}),"\n",(0,i.jsx)(n.h2,{id:"interface-3",children:"Interface 3"}),"\n",(0,i.jsxs)(t.A,{children:[(0,i.jsxs)(s.A,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE set3(obj, VALUE, scale, addContribution)\n    CLASS(ScalarField_), INTENT(INOUT) :: obj\n    REAL(DFP), INTENT(IN) :: VALUE(:)\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\n  END SUBROUTINE set3\nEND INTERFACE\n"})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Set all values of scalarfield using a vector of reals."}),"\n",(0,i.jsx)(n.li,{children:"The size of value should be same as the size of scalar field."}),"\n"]})]}),(0,i.jsx)(s.A,{value:"example",label:"\ufe0f\u0700 See example",children:(0,i.jsx)(p,{})}),(0,i.jsx)(s.A,{value:"close",label:"\u21a2 "})]}),"\n",(0,i.jsx)(n.h2,{id:"interface-4",children:"Interface 4"}),"\n",(0,i.jsxs)(t.A,{children:[(0,i.jsxs)(s.A,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n MODULE SUBROUTINE set4(obj, globalNode, VALUE, scale, addContribution)\n    CLASS(ScalarField_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: globalNode(:)\n    REAL(DFP), INTENT(IN) :: VALUE\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\n  END SUBROUTINE set4\nEND INTERFACE\n"})}),(0,i.jsx)(n.p,{children:"Set multiple values to a scalar value."})]}),(0,i.jsx)(s.A,{value:"example",label:"\ufe0f\u0700 See example",children:(0,i.jsx)(A,{})}),(0,i.jsx)(s.A,{value:"close",label:"\u21a2 "})]}),"\n",(0,i.jsx)(n.h2,{id:"interface-5",children:"Interface 5"}),"\n",(0,i.jsxs)(t.A,{children:[(0,i.jsxs)(s.A,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n MODULE SUBROUTINE set5(obj, globalNode, VALUE, scale, addContribution)\n    CLASS(ScalarField_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: globalNode(:)\n    REAL(DFP), INTENT(IN) :: VALUE(:)\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\n  END SUBROUTINE set5\nEND INTERFACE\n"})}),(0,i.jsx)(n.p,{children:"Set multiple values of scalar field."})]}),(0,i.jsx)(s.A,{value:"example",label:"\ufe0f\u0700 See example",children:(0,i.jsx)(j,{})}),(0,i.jsx)(s.A,{value:"close",label:"\u21a2 "})]}),"\n",(0,i.jsx)(n.h2,{id:"interface-6",children:"Interface 6"}),"\n",(0,i.jsxs)(t.A,{children:[(0,i.jsxs)(s.A,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE set6(obj, istart, iend, stride, VALUE, &\n    & scale, addContribution)\n    CLASS(ScalarField_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: istart\n    INTEGER(I4B), INTENT(IN) :: iend\n    INTEGER(I4B), INTENT(IN) :: stride\n    REAL(DFP), INTENT(IN) :: VALUE\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\n  END SUBROUTINE set6\nEND INTERFACE\n"})}),(0,i.jsxs)(n.p,{children:["Set multiple values by using triplets ",(0,i.jsx)(n.code,{children:"istart:iend:stride"})]})]}),(0,i.jsx)(s.A,{value:"example",label:"\ufe0f\u0700 See example",children:(0,i.jsx)(g,{})}),(0,i.jsx)(s.A,{value:"close",label:"\u21a2 "})]}),"\n",(0,i.jsx)(n.h2,{id:"interface-7",children:"Interface 7"}),"\n",(0,i.jsxs)(t.A,{children:[(0,i.jsxs)(s.A,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE set7(obj, istart, iend, stride, VALUE, &\n    & scale, addContribution)\n    CLASS(ScalarField_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: istart\n    INTEGER(I4B), INTENT(IN) :: iend\n    INTEGER(I4B), INTENT(IN) :: stride\n    REAL(DFP), INTENT(IN) :: VALUE(:)\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\n  END SUBROUTINE set7\nEND INTERFACE\n"})}),(0,i.jsx)(n.p,{children:"Set multiple values using triplets."})]}),(0,i.jsx)(s.A,{value:"example",label:"\ufe0f\u0700 See example",children:(0,i.jsx)(f,{})}),(0,i.jsx)(s.A,{value:"close",label:"\u21a2 "})]}),"\n",(0,i.jsx)(n.h2,{id:"interface-8",children:"Interface 8"}),"\n",(0,i.jsxs)(t.A,{children:[(0,i.jsx)(s.A,{value:"interface",label:"\u0700 Interface",default:!0,children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE set8(obj, obj2)\n    CLASS(ScalarField_), INTENT(INOUT) :: obj\n    CLASS(ScalarField_), INTENT(IN) :: obj2\n  END SUBROUTINE set8\nEND INTERFACE\n"})})}),(0,i.jsx)(s.A,{value:"example1",label:"\ufe0f\u0700 Example 1",children:(0,i.jsx)(T,{})}),(0,i.jsx)(s.A,{value:"example2",label:"\ufe0f\u0700 Example 2",children:(0,i.jsx)(I,{})}),(0,i.jsx)(s.A,{value:"close",label:"\u21a2 "})]}),"\n",(0,i.jsx)(n.h2,{id:"interface-9",children:"Interface 9"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n MODULE SUBROUTINE set9(obj, globalNode, VALUE, scale, addContribution)\n    CLASS(ScalarField_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: globalNode(:)\n    TYPE(FEVariable_), INTENT(IN) :: VALUE\n  !! Scalar, Nodal, FEVariable (Space or Constant)\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\n  END SUBROUTINE set9\nEND INTERFACE\n"})}),"\n",(0,i.jsx)(n.h2,{id:"interface-10",children:"Interface 10"}),"\n",(0,i.jsxs)(t.A,{children:[(0,i.jsx)(s.A,{value:"interface",label:"\u0700 Interface",default:!0,children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:" INTERFACE\n  MODULE SUBROUTINE set10(obj, obj2, scale, addContribution)\n    CLASS(ScalarField_), INTENT(INOUT) :: obj\n    CLASS(ScalarField_), INTENT(IN) :: obj2\n    REAL(DFP), INTENT(IN) :: scale\n    LOGICAL(LGT), INTENT(IN) :: addContribution\n  END SUBROUTINE set10\nEND INTERFACE\n"})})}),(0,i.jsx)(s.A,{value:"example1",label:"\ufe0f\u0700 Example 1",children:(0,i.jsx)(b,{})}),(0,i.jsx)(s.A,{value:"example2",label:"\ufe0f\u0700 Example 2",children:(0,i.jsx)(F,{})}),(0,i.jsx)(s.A,{value:"close",label:"\u21a2 "})]})]})}function v(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(U,{...e})}):U(e)}},92492:(e,n,a)=>{a.d(n,{A:()=>t});a(36672);var l=a(28923);const i={tabItem:"tabItem_VSPN"};var r=a(23420);function t(e){let{children:n,hidden:a,className:t}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,l.A)(i.tabItem,t),hidden:a,children:n})}},36492:(e,n,a)=>{a.d(n,{A:()=>x});var l=a(36672),i=a(28923),r=a(19929),t=a(85291),s=a(5581),c=a(80034),o=a(12715),d=a(62741);function m(e){return l.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,l.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function L(e){const{values:n,children:a}=e;return(0,l.useMemo)((()=>{const e=n??function(e){return m(e).map((e=>{let{props:{value:n,label:a,attributes:l,default:i}}=e;return{value:n,label:a,attributes:l,default:i}}))}(a);return function(e){const n=(0,o.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,a])}function p(e){let{value:n,tabValues:a}=e;return a.some((e=>e.value===n))}function u(e){let{queryString:n=!1,groupId:a}=e;const i=(0,t.W6)(),r=function(e){let{queryString:n=!1,groupId:a}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:n,groupId:a});return[(0,c.aZ)(r),(0,l.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(i.location.search);n.set(r,e),i.replace({...i.location,search:n.toString()})}),[r,i])]}function A(e){const{defaultValue:n,queryString:a=!1,groupId:i}=e,r=L(e),[t,c]=(0,l.useState)((()=>function(e){let{defaultValue:n,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const l=a.find((e=>e.default))??a[0];if(!l)throw new Error("Unexpected error: 0 tabValues");return l.value}({defaultValue:n,tabValues:r}))),[o,m]=u({queryString:a,groupId:i}),[A,h]=function(e){let{groupId:n}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(n),[i,r]=(0,d.Dv)(a);return[i,(0,l.useCallback)((e=>{a&&r.set(e)}),[a,r])]}({groupId:i}),j=(()=>{const e=o??A;return p({value:e,tabValues:r})?e:null})();(0,s.A)((()=>{j&&c(j)}),[j]);return{selectedValue:t,selectValue:(0,l.useCallback)((e=>{if(!p({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);c(e),m(e),h(e)}),[m,h,r]),tabValues:r}}var h=a(32111);const j={tabList:"tabList_csSQ",tabItem:"tabItem_Bcmo"};var E=a(23420);function g(e){let{className:n,block:a,selectedValue:l,selectValue:t,tabValues:s}=e;const c=[],{blockElementScrollPositionUntilNextRender:o}=(0,r.a_)(),d=e=>{const n=e.currentTarget,a=c.indexOf(n),i=s[a].value;i!==l&&(o(n),t(i))},m=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const a=c.indexOf(e.currentTarget)+1;n=c[a]??c[0];break}case"ArrowLeft":{const a=c.indexOf(e.currentTarget)-1;n=c[a]??c[c.length-1];break}}n?.focus()};return(0,E.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":a},n),children:s.map((e=>{let{value:n,label:a,attributes:r}=e;return(0,E.jsx)("li",{role:"tab",tabIndex:l===n?0:-1,"aria-selected":l===n,ref:e=>{c.push(e)},onKeyDown:m,onClick:d,...r,className:(0,i.A)("tabs__item",j.tabItem,r?.className,{"tabs__item--active":l===n}),children:a??n},n)}))})}function N(e){let{lazy:n,children:a,selectedValue:r}=e;const t=(Array.isArray(a)?a:[a]).filter(Boolean);if(n){const e=t.find((e=>e.props.value===r));return e?(0,l.cloneElement)(e,{className:(0,i.A)("margin-top--md",e.props.className)}):null}return(0,E.jsx)("div",{className:"margin-top--md",children:t.map(((e,n)=>(0,l.cloneElement)(e,{key:n,hidden:e.props.value!==r})))})}function f(e){const n=A(e);return(0,E.jsxs)("div",{className:(0,i.A)("tabs-container",j.tabList),children:[(0,E.jsx)(g,{...n,...e}),(0,E.jsx)(N,{...n,...e})]})}function x(e){const n=(0,h.A)();return(0,E.jsx)(f,{...e,children:m(e.children)},String(n))}},54213:(e,n,a)=>{a.d(n,{R:()=>t,x:()=>s});var l=a(36672);const i={},r=l.createContext(i);function t(e){const n=l.useContext(r);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),l.createElement(r.Provider,{value:n},e.children)}}}]);