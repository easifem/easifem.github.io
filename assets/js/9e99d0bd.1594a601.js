"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[25214,54477],{47272:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"AbstractMeshField/Initiate","title":"Initiate","description":"Initiate an instance of AbstractMeshField_.","source":"@site/docs/docs-api/AbstractMeshField/Initiate.md","sourceDirName":"AbstractMeshField","slug":"/AbstractMeshField/Initiate","permalink":"/docs-api/AbstractMeshField/Initiate","draft":false,"unlisted":false,"editUrl":"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/AbstractMeshField/Initiate.md","tags":[],"version":"current","lastUpdatedAt":1724304782000,"sidebarPosition":3,"frontMatter":{"id":"Initiate","aliases":["Initiate"],"tags":[],"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"SetAbstractMeshFieldParam","permalink":"/docs-api/AbstractMeshField/SetAbstractMeshFieldParam"},"next":{"title":"Set","permalink":"/docs-api/AbstractMeshField/Set"}}');var t=i(23420),s=i(54213);const l={id:"Initiate",aliases:["Initiate"],tags:[],sidebar_position:3},r="Initiate",c={},d=[{value:"Interface 1 (Initiate by using param)",id:"interface-1-initiate-by-using-param",level:2},{value:"Interface 2 (Initiate by copying)",id:"interface-2-initiate-by-copying",level:2},{value:"Interface 3 (Initiate by AbstractMaterial)",id:"interface-3-initiate-by-abstractmaterial",level:2},{value:"Interface 4 (Initiate by UserFunction)",id:"interface-4-initiate-by-userfunction",level:2}];function o(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"initiate",children:"Initiate"})}),"\n",(0,t.jsxs)(n.p,{children:["Initiate an instance of ",(0,t.jsx)(n.code,{children:"AbstractMeshField_"}),"."]}),"\n",(0,t.jsx)("span",{class:"badge badge--secondary",children:" @ConstructorMethods "}),"\n",(0,t.jsx)(n.h2,{id:"interface-1-initiate-by-using-param",children:"Interface 1 (Initiate by using param)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"INTERFACE AbstractMeshFieldInitiate\n  MODULE SUBROUTINE Initiate1(obj, param, mesh)\n    CLASS(AbstractMeshField_), INTENT(INOUT) :: obj\n    TYPE(ParameterList_), INTENT(IN) :: param\n    TYPE(Mesh_), TARGET, INTENT(IN) :: mesh\n  END SUBROUTINE Initiate1\nEND INTERFACE AbstractMeshFieldInitiate\n"})}),"\n",(0,t.jsx)(n.h2,{id:"interface-2-initiate-by-copying",children:"Interface 2 (Initiate by copying)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE Initiate2(obj, obj2, copyFull, copyStructure, &\n    & usePointer)\n    CLASS(AbstractMeshField_), INTENT(INOUT) :: obj\n    CLASS(AbstractMeshField_), INTENT(INOUT) :: obj2\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: copyFull\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: copyStructure\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: usePointer\n  END SUBROUTINE Initiate2\nEND INTERFACE\n"})}),"\n",(0,t.jsx)(n.h2,{id:"interface-3-initiate-by-abstractmaterial",children:"Interface 3 (Initiate by AbstractMaterial)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE Initiate3(obj, mesh, material, name, engine)\n    CLASS(AbstractMeshField_), INTENT(INOUT) :: obj\n    !! AbstractMeshField\n    TYPE(Mesh_), TARGET, INTENT(IN) :: mesh\n    !! mesh\n    CLASS(AbstractMaterial_), INTENT(INOUT) :: material\n    !! Abstract material\n    CHARACTER(*), INTENT(IN) :: name\n    !! name of the AbstractMeshField\n    CHARACTER(*), INTENT(IN) :: engine\n    !! engine of the AbstractMeshField\n  END SUBROUTINE Initiate3\nEND INTERFACE\n"})}),"\n",(0,t.jsx)(n.h2,{id:"interface-4-initiate-by-userfunction",children:"Interface 4 (Initiate by UserFunction)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE Initiate4(obj, mesh, func, name, engine, nnt)\n    CLASS(AbstractMeshField_), INTENT(INOUT) :: obj\n    !! AbstractMeshField\n    TYPE(Mesh_), TARGET, INTENT(IN) :: mesh\n    !! mesh\n    CLASS(UserFunction_), INTENT(INOUT) :: func\n    !! Abstract material\n    CHARACTER(*), INTENT(IN) :: name\n    !! name of the AbstractMeshField\n    CHARACTER(*), INTENT(IN) :: engine\n    !! engine of the AbstractMeshField\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: nnt\n    !! number of nodes in time\n  END SUBROUTINE Initiate4\nEND INTERFACE\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},90041:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>f,contentTitle:()=>x,default:()=>u,frontMatter:()=>m,metadata:()=>a,toc:()=>j});const a=JSON.parse('{"id":"VectorMeshField/Initiate","title":"Initiate","description":"Inherited from AbstractMeshField","source":"@site/docs/docs-api/VectorMeshField/Initiate.md","sourceDirName":"VectorMeshField","slug":"/VectorMeshField/Initiate","permalink":"/docs-api/VectorMeshField/Initiate","draft":false,"unlisted":false,"editUrl":"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/VectorMeshField/Initiate.md","tags":[],"version":"current","lastUpdatedAt":1724304782000,"sidebarPosition":4,"frontMatter":{"id":"Initiate","aliases":["Initiate"],"tags":[],"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"SetVectorMeshFieldParam","permalink":"/docs-api/VectorMeshField/SetVectorMeshFieldParam"},"next":{"title":"Add","permalink":"/docs-api/VectorMeshField/Add"}}');var t=i(23420),s=i(54213),l=i(47272);function r(e){const n={a:"a",admonition:"admonition",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h3,{id:"example-1",children:"Example 1"}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["This example shows how to initiate an instance of ",(0,t.jsx)(n.a,{href:"/docs-api/Mesh",children:"Mesh"})," by reading data from mesh file, which is in ",(0,t.jsx)(n.a,{href:"/docs-api/HDF5File",children:"HDF5File_"})," format. We will also construct an instance of ",(0,t.jsx)(n.a,{href:"/docs-api/VectorMeshField",children:"VectorMeshField_"}),"."]})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  IMPLICIT NONE\n  TYPE( HDF5File_ ) :: meshfile\n  TYPE( Mesh_ ) :: amesh\n  TYPE( VectorMeshField_ ) :: obj\n  TYPE( ParameterList_ ) :: param\n"})}),"\n",(0,t.jsx)(n.h3,{id:"step-1",children:"Step 1:"}),"\n",(0,t.jsxs)(n.p,{children:["Initiate and open the mesh file which is in ",(0,t.jsx)(n.a,{href:"/docs-api/HDF5File",children:"HDF5File_"})," format."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:'CALL meshfile%Initiate( FileName="./mesh.h5", MODE="READ" )\nCALL meshfile%Open()\nCALL amesh%Initiate(hdf5=meshfile, group="/surfaceEntities_1" )\n'})}),"\n",(0,t.jsx)(n.h3,{id:"step-2",children:"Step 2:"}),"\n",(0,t.jsxs)(n.p,{children:["Initiate an instance of ",(0,t.jsx)(n.a,{href:"/docs-api/VectorMeshField",children:"VectorMeshField_"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"CALL FPL_INIT(); CALL param%initiate()\nCALL SetVectorMeshFieldParam( &\n  & param=param, &\n  & name='aVector', &\n  & varType = Constant, &\n  & fieldType=TypeField%normal, &\n  & engine='NATIVE_SERIAL', &\n  & defineOn=Nodal, &\n  & nns=6,  &\n  & spaceCompo=amesh%GetNSD() )\nCALL obj%Initiate( param=param, mesh=amesh )\nCALL obj%Display( 'obj: ' )\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The above code will initiate an instance of ",(0,t.jsx)(n.code,{children:"VectorMeshField_"}),", which will contain following data."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-txt",children:"Object INITIATED: TRUE\nname: aVector\nprefix: VectorMeshField\nfieldType: NORMAL              \nengine: NATIVE_SERIAL\ntSize: 484\ndefineOn: Nodal\nrank: Vector\nvarType: Constant\nshape: \n-------\n   2   \nval ALLOCATED: TRUE\nmesh ASSOCIATED: TRUE\n"})}),"\n",(0,t.jsx)(n.p,{children:"Let's try to understand the following situation:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["We save data in a two dimensional array ",(0,t.jsx)(n.code,{children:"val"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["The number of rows in ",(0,t.jsx)(n.code,{children:"val"})," in this example is ",(0,t.jsx)(n.code,{children:"1"}),". Because, we have set ",(0,t.jsx)(n.code,{children:"varType=Constant"}),", all nodes (we have specified 6 nodes) in an element have constant vector valued. Read more about the ",(0,t.jsx)(n.a,{href:"/docs-api/AbstractMeshField/Shape",children:"Shape"})," method."]}),"\n",(0,t.jsxs)(n.li,{children:["The number of columns in ",(0,t.jsx)(n.code,{children:"val"})," is ",(0,t.jsx)(n.code,{children:"484"})," elements in the mesh."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"step-3",children:"Step 3:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"  CALL obj%Deallocate()\n  CALL amesh%Deallocate()\n  CALL meshfile%Close()\n  CALL meshfile%Deallocate()\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\nEND PROGRAM main\n"})})]})}function c(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(r,{...e})}):r(e)}function d(e){const n={a:"a",admonition:"admonition",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h3,{id:"example-2",children:"Example 2"}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["This example shows how to initiate an instance of ",(0,t.jsx)(n.a,{href:"/docs-api/Mesh",children:"Mesh"})," by reading data from mesh file, which is in ",(0,t.jsx)(n.a,{href:"/docs-api/HDF5File",children:"HDF5File_"})," format. We will also construct an instance of ",(0,t.jsx)(n.a,{href:"/docs-api/VectorMeshField",children:"VectorMeshField_"}),"."]})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  IMPLICIT NONE\n  TYPE( HDF5File_ ) :: meshfile\n  TYPE( Mesh_ ) :: amesh\n  TYPE( VectorMeshField_ ) :: obj\n  TYPE( ParameterList_ ) :: param\n"})}),"\n",(0,t.jsx)(n.h3,{id:"step-1",children:"Step 1:"}),"\n",(0,t.jsxs)(n.p,{children:["Initiate and open the mesh file which is in ",(0,t.jsx)(n.a,{href:"/docs-api/HDF5File",children:"HDF5File_"})," format."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:'CALL meshfile%Initiate( FileName="./mesh.h5", MODE="READ" )\nCALL meshfile%Open()\nCALL amesh%Initiate(hdf5=meshfile, group="/surfaceEntities_1" )\n'})}),"\n",(0,t.jsx)(n.h3,{id:"step-2",children:"Step 2:"}),"\n",(0,t.jsxs)(n.p,{children:["Initiate an instance of ",(0,t.jsx)(n.a,{href:"/docs-api/VectorMeshField",children:"VectorMeshField_"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"CALL FPL_INIT(); CALL param%initiate()\nCALL SetVectorMeshFieldParam( &\n  & param=param, &\n  & name='aVector', &\n  & varType = Constant, &\n  & fieldType=TypeField%Constant, &\n  & engine='NATIVE_SERIAL', &\n  & defineOn=Nodal, &\n  & nns=6,  &\n  & spaceCompo=amesh%GetNSD() )\nCALL obj%Initiate( param=param, mesh=amesh )\nCALL obj%Display( 'obj: ' )\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The above code will initiate an instance of ",(0,t.jsx)(n.code,{children:"VectorMeshField_"}),", which will contain following data."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-txt",children:"Object INITIATED: TRUE\nname: aVector\nprefix: VectorMeshField\nfieldType: CONSTANT            \nengine: NATIVE_SERIAL\ntSize: 1\ndefineOn: Nodal\nrank: Vector\nvarType: Constant\nshape: \n-------\n   2   \nval ALLOCATED: TRUE\nmesh ASSOCIATED: TRUE\n"})}),"\n",(0,t.jsx)(n.p,{children:"Let's try to understand the above code:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["We save data in a two dimensional array ",(0,t.jsx)(n.code,{children:"val"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["The number of rows in ",(0,t.jsx)(n.code,{children:"val"})," for above example is ",(0,t.jsx)(n.code,{children:"1"})," (this is because the vector data is constant inside the element)."]}),"\n",(0,t.jsxs)(n.li,{children:["Because, we have set ",(0,t.jsx)(n.code,{children:"varType=Constant"}),", all nodes (we have specified 6 nodes) in an element have same vector value. Read more about the ",(0,t.jsx)(n.a,{href:"/docs-api/AbstractMeshField/AbstractMeshField_",children:"Shape"})," method."]}),"\n",(0,t.jsxs)(n.li,{children:["The number of columns in ",(0,t.jsx)(n.code,{children:"val"})," is ",(0,t.jsx)(n.code,{children:"1"}),", this is because the ",(0,t.jsx)(n.code,{children:"fieldType=Constant"})," (i.e., constant across all the elements)."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"step-3",children:"Step 3:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"  CALL obj%Deallocate()\n  CALL amesh%Deallocate()\n  CALL meshfile%Close()\n  CALL meshfile%Deallocate()\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\nEND PROGRAM main\n"})})]})}function o(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}function h(e){const n={a:"a",admonition:"admonition",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h3,{id:"example-3",children:"Example 3"}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["This example shows how to initiate an instance of ",(0,t.jsx)(n.a,{href:"/docs-api/Mesh",children:"Mesh"})," by reading data from mesh file, which is in ",(0,t.jsx)(n.a,{href:"/docs-api/HDF5File",children:"HDF5File_"})," format. We will also construct an instance of ",(0,t.jsx)(n.a,{href:"/docs-api/VectorMeshField",children:"VectorMeshField_"}),"."]})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  IMPLICIT NONE\n  TYPE( HDF5File_ ) :: meshfile\n  TYPE( Mesh_ ) :: amesh\n  TYPE( VectorMeshField_ ) :: obj\n  TYPE( ParameterList_ ) :: param\n"})}),"\n",(0,t.jsx)(n.h3,{id:"step-1",children:"Step 1:"}),"\n",(0,t.jsxs)(n.p,{children:["Initiate and open the mesh file which is in ",(0,t.jsx)(n.a,{href:"/docs-api/HDF5File",children:"HDF5File_"})," format."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:'CALL meshfile%Initiate( FileName="./mesh.h5", MODE="READ" )\nCALL meshfile%Open()\nCALL amesh%Initiate(hdf5=meshfile, group="/surfaceEntities_1" )\n'})}),"\n",(0,t.jsx)(n.h3,{id:"step-2",children:"Step 2:"}),"\n",(0,t.jsxs)(n.p,{children:["Initiate an instance of ",(0,t.jsx)(n.a,{href:"/docs-api/VectorMeshField",children:"VectorMeshField_"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"CALL FPL_INIT(); CALL param%initiate()\nCALL SetVectorMeshFieldParam( &\n  & param=param, &\n  & name='aVector', &\n  & varType = Space, &\n  & fieldType=TypeField%Normal, &\n  & engine='NATIVE_SERIAL', &\n  & defineOn=Nodal, &\n  & nns=6,  &\n  & spaceCompo=amesh%GetNSD() )\nCALL obj%Initiate( param=param, mesh=amesh )\nCALL obj%Display( 'obj: ' )\ncall display(amesh%GetTotalElements(), \"total elements: \" )\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The above code will initiate an instance of ",(0,t.jsx)(n.code,{children:"VectorMeshField_"}),", which will contain following data."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-txt",children:"Object INITIATED: TRUE\nname: aVector\nprefix: VectorMeshField\nfieldType: NORMAL              \nengine: NATIVE_SERIAL\ntSize: 484\ndefineOn: Nodal\nrank: Vector\nvarType: Space\nshape: \n-------\n   2   \n   6   \nval ALLOCATED: TRUE\nmesh ASSOCIATED: TRUE\ntotal elements: 484\n"})}),"\n",(0,t.jsx)(n.p,{children:"Let's try to understand the above code:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["We save data in a two dimensional array ",(0,t.jsx)(n.code,{children:"val"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["The number of rows in ",(0,t.jsx)(n.code,{children:"val"})," for above example is ",(0,t.jsx)(n.code,{children:"2"}),". This is because we have set ",(0,t.jsx)(n.code,{children:"varType=Space"}),", which means the vector data changes in ",(0,t.jsx)(n.code,{children:"Space"})," inside the element."]}),"\n",(0,t.jsxs)(n.li,{children:["Because, we have set ",(0,t.jsx)(n.code,{children:"varType=Space"}),", therefore ",(0,t.jsx)(n.code,{children:"val(1:12)"})," denotes the value of vector field at 6 nodes of element. Read more about the ",(0,t.jsx)(n.a,{href:"/docs-api/AbstractMeshField/AbstractMeshField_",children:"Shape"})," method."]}),"\n",(0,t.jsxs)(n.li,{children:["The number of columns in ",(0,t.jsx)(n.code,{children:"val"})," is ",(0,t.jsx)(n.code,{children:"484"})," (which is the total number of elements in the mesh), this is because the ",(0,t.jsx)(n.code,{children:"fieldType=Regular"})," (i.e., changes across all the elements)."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"step-3",children:"Step 3:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"  CALL obj%Deallocate()\n  CALL amesh%Deallocate()\n  CALL meshfile%Close()\n  CALL meshfile%Deallocate()\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\nEND PROGRAM main\n"})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}const m={id:"Initiate",aliases:["Initiate"],tags:[],sidebar_position:4},x="Initiate",f={},j=[...l.toc,{value:"Example 1",id:"example-1",level:2},{value:"Example 1",id:"example-1",level:3},{value:"Step 1:",id:"step-1",level:3},{value:"Step 2:",id:"step-2",level:3},{value:"Step 3:",id:"step-3",level:3},{value:"Example 2",id:"example-2",level:2},{value:"Example 2",id:"example-2",level:3},{value:"Step 1:",id:"step-1",level:3},{value:"Step 2:",id:"step-2",level:3},{value:"Step 3:",id:"step-3",level:3},{value:"Example 3",id:"example-3",level:2},{value:"Example 3",id:"example-3",level:3},{value:"Step 1:",id:"step-1",level:3},{value:"Step 2:",id:"step-2",level:3},{value:"Step 3:",id:"step-3",level:3}];function I(e){const n={a:"a",h1:"h1",h2:"h2",header:"header",p:"p",...(0,s.R)(),...e.components},{Details:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"initiate",children:"Initiate"})}),"\n",(0,t.jsxs)(n.p,{children:["Inherited from ",(0,t.jsx)(n.a,{href:"/docs-api/AbstractMeshField",children:"AbstractMeshField"})]}),"\n","\n",(0,t.jsx)(l.default,{}),"\n",(0,t.jsx)(n.h2,{id:"example-1",children:"Example 1"}),"\n","\n",(0,t.jsxs)(i,{children:[(0,t.jsx)("summary",{children:"Click here to see the example"}),(0,t.jsx)("div",{children:(0,t.jsx)(c,{})})]}),"\n",(0,t.jsx)(n.h2,{id:"example-2",children:"Example 2"}),"\n","\n",(0,t.jsxs)(i,{children:[(0,t.jsx)("summary",{children:"Click here to see the example"}),(0,t.jsx)("div",{children:(0,t.jsx)(o,{})})]}),"\n",(0,t.jsx)(n.h2,{id:"example-3",children:"Example 3"}),"\n","\n",(0,t.jsxs)(i,{children:[(0,t.jsx)("summary",{children:"Click here to see the example"}),(0,t.jsx)("div",{children:(0,t.jsx)(p,{})})]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(I,{...e})}):I(e)}},54213:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>r});var a=i(36672);const t={},s=a.createContext(t);function l(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);