"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[89561],{40725:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>f,frontMatter:()=>t,metadata:()=>d,toc:()=>h});const d=JSON.parse('{"id":"DOF/GetIndex","title":"GetIndex","description":"Get index of node number.","source":"@site/docs/docs-api/DOF/GetIndex.md","sourceDirName":"DOF","slug":"/DOF/GetIndex","permalink":"/docs-api/DOF/GetIndex","draft":false,"unlisted":false,"editUrl":"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/DOF/GetIndex.md","tags":[],"version":"current","lastUpdatedAt":1724304782000,"sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"GetIDOF","permalink":"/docs-api/DOF/GetIDOF"},"next":{"title":"GetNodeLoc","permalink":"/docs-api/DOF/GetNodeLoc"}}');var r=i(23420),o=i(54213);function s(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",children:'PROGRAM main\nUSE GlobalData\nUSE BaseType, ONLY: DOF_\nUSE DOF_Method\nUSE Test_Method\n\nIMPLICIT NONE\n\nTYPE(DOF_) :: obj\nINTEGER(I4B), ALLOCATABLE :: indx(:)\n\n! Initiate an instance of[DOF_] (DOF_.md)\n\nCALL Initiate(obj, tNodes=[10, 10], &\n              names=["V", "P"], spaceCompo=[3, 1], &\n              timeCompo=[1, 1], storageFMT=FMT_NODES)\n\n! GetIndex\n\nindx = GetIndex(obj, nodeNum=1)\nCALL OK(ALL(indx .EQ. [1, 2, 3, 4]), "indx .EQ. [1,2,3,4]:")\n\nindx = GetIndex(obj, nodeNum=5)\nCALL OK(ALL(indx .EQ. [17, 18, 19, 20]), "indx .EQ. [17,18,19,20]")\n\nindx = GetIndex(obj, nodeNum=1, iVar=1)\nCALL OK(ALL(indx .EQ. [1, 2, 3]), "indx .Eq. [1,2,3]")\n\nindx = GetIndex(obj, nodeNum=1, varName="V")\nCALL OK(ALL(indx .EQ. [1, 2, 3]), "indx .Eq. [1,2,3]")\n\nindx = GetIndex(obj, nodeNum=1, iVar=2)\nCALL OK(ALL(indx .EQ. [4]), "indx .Eq. [4]")\n\nindx = GetIndex(obj, nodeNum=1, varName="P")\nCALL OK(ALL(indx .EQ. [4]), "indx .Eq. [4]")\n\nindx = GetIndex(obj, nodeNum=2, iVar=1)\nCALL OK(ALL(indx .EQ. [5, 6, 7]), "indx .Eq. [5,6,7]")\n\nindx = GetIndex(obj, nodeNum=2, iVar=2)\nCALL OK(ALL(indx .EQ. [8]), "indx .Eq. [8]")\n\nindx = GetIndex(obj, nodeNum=[1, 2], iVar=1)\nCALL OK(ALL(indx .EQ. [1, 2, 3, 5, 6, 7]), "indx .Eq. [1,2,3,5,6,7]")\n\nindx = [GetIndex(obj, nodeNum=1, iVar=1, idof=1)]\nCALL OK(ALL(indx .EQ. [1]), "indx .Eq. [1]")\n\nindx = [GetIndex(obj, nodeNum=1, iVar=1, idof=2)]\nCALL OK(ALL(indx .EQ. [2]), "indx .Eq. [2]")\n\nindx = [GetIndex(obj, nodeNum=1, iVar=1, idof=3)]\nCALL OK(ALL(indx .EQ. [3]), "indx .Eq. [3]")\n\nindx = [GetIndex(obj, nodeNum=2, iVar=1, idof=1)]\nCALL OK(ALL(indx .EQ. [5]), "indx .Eq. [5]")\n\nindx = [GetIndex(obj, nodeNum=2, iVar=1, idof=2)]\nCALL OK(ALL(indx .EQ. [6]), "indx .Eq. [6]")\n\nindx = [GetIndex(obj, nodeNum=2, iVar=1, idof=3)]\nCALL OK(ALL(indx .EQ. [7]), "indx .Eq. [7]")\n\nCALL DEALLOCATE (obj)\nEND PROGRAM main\n'})})}function a(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(s,{...e})}):s(e)}const t={sidebar_position:4},c="GetIndex",l={},h=[{value:"What is an index",id:"what-is-an-index",level:2},{value:"Interface 1",id:"interface-1",level:2},{value:"Interface 2",id:"interface-2",level:2},{value:"Interface 3",id:"interface-3",level:2},{value:"Interface 4",id:"interface-4",level:2},{value:"Interface 5",id:"interface-5",level:2},{value:"Interface 6",id:"interface-6",level:2},{value:"Interface 7",id:"interface-7",level:2},{value:"Interface 8",id:"interface-8",level:2},{value:"Interface 9",id:"interface-9",level:2},{value:"Interface 10",id:"interface-10",level:2},{value:"Examples",id:"examples",level:2}];function x(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components},{Details:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"getindex",children:"GetIndex"})}),"\n",(0,r.jsx)(n.p,{children:"Get index of node number."}),"\n",(0,r.jsx)(n.p,{children:"Calling example:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"GetIndex(obj, nodenum)"})," ",(0,r.jsx)(n.a,{href:"#interface-1",children:"Interface 1"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"GetIndex(obj, nodenum, ivar)"})," ",(0,r.jsx)(n.a,{href:"#interface-2",children:"Interface 2"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"GetIndex(obj, nodenum, varname)"})," ",(0,r.jsx)(n.a,{href:"#interface-3",children:"Interface 3"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"GetIndex(obj, nodenum(:) )"})," ",(0,r.jsx)(n.a,{href:"#interface-4",children:"Interface 4"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"GetIndex(obj, nodenum(:), ivar)"})," ",(0,r.jsx)(n.a,{href:"#interface-5",children:"Interface 5"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"GetIndex(obj, nodenum(:), varname)"})," ",(0,r.jsx)(n.a,{href:"#interface-6",children:"Interface 6"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"GetIndex(obj, nodenum, ivar, idof)"})," ",(0,r.jsx)(n.a,{href:"#interface-7",children:"Interface 7"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"GetIndex(obj, nodenum(:), ivar, idof)"})," ",(0,r.jsx)(n.a,{href:"#interface-8",children:"Interface 8"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"GetIndex(obj, nodenum, ivar, spacecompo, timecompo)"})," ",(0,r.jsx)(n.a,{href:"#interface-9",children:"Interface 9"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"GetIndex(obj, nodenum(:), ivar, spacecompo, timecompo)"})," ",(0,r.jsx)(n.a,{href:"#interface-10",children:"Interface 10"})]}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"nodenum"})," should be lesser than the total number of nodes defined for dof number ",(0,r.jsx)(n.code,{children:"idof"}),"."]})}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"idof"}),"s are continuously numbered, so if there are two or more physical variables, then idof of the second or later physical variables does not start from 1."]})}),"\n",(0,r.jsx)(n.h2,{id:"what-is-an-index",children:"What is an index"}),"\n",(0,r.jsxs)(n.p,{children:["Index is a location of a nodal degree of freedom. For example, consider ",(0,r.jsx)(n.code,{children:"velocity"})," variable with 3 space and 2 time components. Now what is the location of velocity (space component 1, and time component 2) at node number 3. This location is called index."]}),"\n",(0,r.jsx)(n.h2,{id:"interface-1",children:"Interface 1"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE PURE FUNCTION GetIndex1(obj, nodenum) RESULT(ans)\n    CLASS(DOF_), INTENT(IN) :: obj\n    INTEGER(I4B), INTENT(IN) :: nodenum\n    INTEGER(I4B), ALLOCATABLE :: ans(:)\n  END FUNCTION GetIndex1\nEND INTERFACE\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"This function returns indices, representing the location of all degrees of freedom define on a given node number."}),"\n",(0,r.jsxs)(n.li,{children:["The size of these indices is equal to the total number of ",(0,r.jsx)(n.code,{children:"DOF"})," in obj"]}),"\n",(0,r.jsxs)(n.li,{children:["In this way, ",(0,r.jsx)(n.code,{children:"ans(ii)"})," represents the location of ",(0,r.jsx)(n.code,{children:"ii"})," ",(0,r.jsx)(n.code,{children:"dof"})," at node number ",(0,r.jsx)(n.code,{children:"nodenum"})]}),"\n",(0,r.jsxs)(n.li,{children:["It is user's responsibility to ensure that for every physical variable the ",(0,r.jsx)(n.code,{children:"nodenumber"})," is lesser than the total number of nodes defined for that physical variable."]}),"\n",(0,r.jsxs)(n.li,{children:["The returned indices can be used to extract values from an instance of ",(0,r.jsx)(n.code,{children:"RealVector"})," or Fortran vector."]}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["The size of returned vector ",(0,r.jsx)(n.code,{children:"ans"})," will be the total number of degrees of freedom in the ",(0,r.jsx)(n.code,{children:"DOF"})," object."]})}),"\n",(0,r.jsx)(n.h2,{id:"interface-2",children:"Interface 2"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE PURE FUNCTION GetIndex2(obj, nodenum, ivar) RESULT(ans)\n    CLASS(DOF_), INTENT(IN) :: obj\n    INTEGER(I4B), INTENT(IN) :: nodenum\n    INTEGER(I4B), INTENT(IN) :: ivar\n    INTEGER(I4B), ALLOCATABLE :: ans(:)\n  END FUNCTION GetIndex2\nEND INTERFACE\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["This function returns indices, representing the locations of all the degrees of freedom of a given physical variable ",(0,r.jsx)(n.code,{children:"ivar"})," at a given node number ",(0,r.jsx)(n.code,{children:"nodenum"})]}),"\n",(0,r.jsxs)(n.li,{children:["The physical variable is defined by ",(0,r.jsx)(n.code,{children:"ivar"})]}),"\n",(0,r.jsxs)(n.li,{children:["The size of these indices is equal to the total number of DOF defined for the ",(0,r.jsx)(n.code,{children:"ivar"})," physical variable."]}),"\n",(0,r.jsxs)(n.li,{children:["It is user's responsibility to ensure that for the selected physical var the ",(0,r.jsx)(n.code,{children:"nodenum"})," is lesser than the total number of nodes defined for that physical variable."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"interface-3",children:"Interface 3"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE PURE FUNCTION GetIndex3(obj, nodenum, varname) RESULT(ans)\n    CLASS(DOF_), INTENT(IN) :: obj\n    INTEGER(I4B), INTENT(IN) :: nodenum\n    CHARACTER(1), INTENT(IN) :: varname\n    INTEGER(I4B), ALLOCATABLE :: ans(:)\n  END FUNCTION GetIndex3\nEND INTERFACE\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Same as ",(0,r.jsx)(n.a,{href:"#interface-2",children:"Interface 2"}),", but physical variable is selected by it name."]}),"\n",(0,r.jsx)(n.h2,{id:"interface-4",children:"Interface 4"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE PURE FUNCTION GetIndex4(obj, nodenum) RESULT(ans)\n    CLASS(DOF_), INTENT(IN) :: obj\n    INTEGER(I4B), INTENT(IN) :: nodenum(:)\n    INTEGER(I4B), ALLOCATABLE :: ans(:)\n  END FUNCTION GetIndex4\nEND INTERFACE\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"This function returns indices, representing the location of all the degrees of freedom defined at node numbers specified by nodenum."}),"\n",(0,r.jsxs)(n.li,{children:["The size of these indices is equal to the total number of DOF in obj times the size of ",(0,r.jsx)(n.code,{children:"nodenum(:)"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"interface-5",children:"Interface 5"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE PURE FUNCTION GetIndex5(obj, nodenum, ivar) RESULT(ans)\n    CLASS(DOF_), INTENT(IN) :: obj\n    INTEGER(I4B), INTENT(IN) :: nodenum(:)\n    INTEGER(I4B), INTENT(IN) :: ivar\n    INTEGER(I4B), ALLOCATABLE :: ans(:)\n  END FUNCTION GetIndex5\nEND INTERFACE\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["This function returns indices, representing the location of all the degrees of freedom of physical variable given by ",(0,r.jsx)(n.code,{children:"ivar"}),", at nodes given in ",(0,r.jsx)(n.code,{children:"nodenum"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["The physical variable is defined by ",(0,r.jsx)(n.code,{children:"ivar"})]}),"\n",(0,r.jsxs)(n.li,{children:["The size of these indices is equal to the total number of ",(0,r.jsx)(n.code,{children:"DOF"})," defined for the ",(0,r.jsx)(n.code,{children:"ivar"})," physical variable times the size of ",(0,r.jsx)(n.code,{children:"nodenum"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"interface-6",children:"Interface 6"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE PURE FUNCTION GetIndex6(obj, nodenum, varname) RESULT(ans)\n    CLASS(DOF_), INTENT(IN) :: obj\n    INTEGER(I4B), INTENT(IN) :: nodenum(:)\n    CHARACTER(1), INTENT(IN) :: varname\n    INTEGER(I4B), ALLOCATABLE :: ans(:)\n  END FUNCTION GetIndex6\nEND INTERFACE\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"This function returns a vector of integers (indices) for a given node number and a given physical Variable."}),"\n",(0,r.jsxs)(n.li,{children:["The physical variable is defined by ",(0,r.jsx)(n.code,{children:"varname"})]}),"\n",(0,r.jsxs)(n.li,{children:["The size of these indices is equal to the total number of DOF defined for the ",(0,r.jsx)(n.code,{children:"varname"})," physical variable."]}),"\n",(0,r.jsxs)(n.li,{children:["The returned indices represent the degrees of freedom of physical variable ",(0,r.jsx)(n.code,{children:"varname"})," defined on each node."]}),"\n",(0,r.jsxs)(n.li,{children:["It is user's responsibility to ensure that for the selected physical var the ",(0,r.jsx)(n.code,{children:"nodenumber"})," is lesser than the total number of nodes defined for that physical variable."]}),"\n",(0,r.jsx)(n.li,{children:"The returned indices can be used for getting the dof (all dof) defined on the nodenum for the given physical variable."}),"\n",(0,r.jsxs)(n.li,{children:["The returned indices can be used to extract values from an instance of ",(0,r.jsx)(n.a,{href:"/docs-api/RealVector/RealVector_",children:"RealVector"})," or fortran vector of real numbers."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"interface-7",children:"Interface 7"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",children:"INTERFACE GetIndex\n  MODULE PROCEDURE dof_getNodeLoc5\nEND INTERFACE GetIndex\n"})}),"\n",(0,r.jsx)(n.h2,{id:"interface-8",children:"Interface 8"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",children:"INTERFACE GetIndex\n  MODULE PROCEDURE dof_getNodeLoc6\nEND INTERFACE GetIndex\n"})}),"\n",(0,r.jsx)(n.h2,{id:"interface-9",children:"Interface 9"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",children:"INTERFACE GetIndex\n  MODULE PROCEDURE dof_getNodeLoc7\nEND INTERFACE GetIndex\n"})}),"\n",(0,r.jsx)(n.h2,{id:"interface-10",children:"Interface 10"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",children:"INTERFACE GetIndex\n  MODULE PROCEDURE dof_getNodeLoc8\nEND INTERFACE GetIndex\n"})}),"\n",(0,r.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsxs)(i,{children:[(0,r.jsx)("summary",{children:"See examples"}),(0,r.jsx)("div",{children:(0,r.jsx)(a,{})})]})]})}function f(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(x,{...e})}):x(e)}},54213:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>a});var d=i(36672);const r={},o=d.createContext(r);function s(e){const n=d.useContext(o);return d.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),d.createElement(o.Provider,{value:n},e.children)}}}]);