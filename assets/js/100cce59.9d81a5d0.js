"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[81049],{95177:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"AbstractBC/AbstractBC_","title":"Structure","description":"AbstractBC_ is Abstract class for handling boundary conditions in finite element methods.","source":"@site/docs/docs-api/AbstractBC/AbstractBC_.md","sourceDirName":"AbstractBC","slug":"/AbstractBC/AbstractBC_","permalink":"/docs-api/AbstractBC/AbstractBC_","draft":false,"unlisted":false,"editUrl":"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/AbstractBC/AbstractBC_.md","tags":[],"version":"current","lastUpdatedAt":1724304782000,"sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"AbstractBC","permalink":"/docs-api/AbstractBC/"},"next":{"title":"SetAbstractBCParam","permalink":"/docs-api/AbstractBC/SetAbstractBCParam"}}');var a=n(23420),r=n(54213);const i={sidebar_position:2},o="Structure",c={},d=[{value:"Structure",id:"structure-1",level:2}];function u(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"structure",children:"Structure"})}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"AbstractBC_"})," is Abstract class for handling boundary conditions in finite element methods."]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{href:"https://github.com/vickysharma0812/easifem-classes/blob/master/src/modules/AbstractBC/src/AbstractBC_Class.F90",children:"See on GitHub"})}),"\n",(0,a.jsx)(t.h2,{id:"structure-1",children:"Structure"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-fortran",children:"TYPE, ABSTRACT :: AbstractBC_\n  LOGICAL(LGT) :: isInitiated = .FALSE.\n  !! It is true if the object is initiated\n  TYPE(String) :: name\n  !! name of boundary condition\n  INTEGER(I4B) :: idof = default_idof\n  !! degree of freedom number\n  INTEGER(I4B) :: nodalValueType = default_nodalValueType\n  !! Constant, Space, SpaceTime, Time\n  LOGICAL(LGT) :: isNormal = default_isNormal\n  !! True if the boundary condition is normal to the boundary\n  LOGICAL(LGT) :: isTangent = default_isTangent\n  !! True if the boundary condition is tangent to the boundary\n  LOGICAL(LGT) :: useExternal = default_useExternal\n  !! if true then nodal values are used externally\n  !! depending upon the context.\n  !! Basically we do not use the nodal value stored in the\n  !! instance of AbstractBC_\n  LOGICAL(LGT) :: isUserFunction = default_isUserFunction\n  !! True if userFunction is set\n  REAL(DFP), ALLOCATABLE :: nodalValue(:, :)\n  !! nodal values are kept here,\n  !! nodalValues( :, its ) denotes nodal values at time step its\n  CLASS(UserFunction_), POINTER :: func => NULL()\n  !! User function\n  TYPE(MeshSelection_) :: boundary\n  !! Boundary\n  CLASS(Domain_), POINTER :: dom => NULL()\n  !! Domain\n"})})]})}function l(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},54213:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var s=n(36672);const a={},r=s.createContext(a);function i(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);