"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[72528],{45011:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>F,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"FortranFile/FortranFile_","title":"Structure","description":"FortranFile is an extension of AbstractFile. It provides a simplified interface to the native Fortran file capabilities and includes error checking.","source":"@site/docs/docs-api/FortranFile/FortranFile_.md","sourceDirName":"FortranFile","slug":"/FortranFile/FortranFile_","permalink":"/docs-api/FortranFile/FortranFile_","draft":false,"unlisted":false,"editUrl":"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/FortranFile/FortranFile_.md","tags":[],"version":"current","lastUpdatedAt":1724304782000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Delete","permalink":"/docs-api/FortranFile/Delete"},"next":{"title":"GetRecLen","permalink":"/docs-api/FortranFile/GetRecLen"}}');var i=n(23420),o=n(54213);const a={},s="Structure",c={},l=[];function d(e){const t={a:"a",code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"structure",children:"Structure"})}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"FortranFile_"})," is an extension of ",(0,i.jsx)(t.code,{children:"AbstractFile_"}),". It provides a simplified interface to the native Fortran file capabilities and includes error checking."]}),"\n",(0,i.jsxs)(t.p,{children:["Note that ",(0,i.jsx)(t.code,{children:"FortranFile_"})," does not provide any method to write and read data from the file."]}),"\n",(0,i.jsxs)(t.p,{children:["This is because the data may be written in ASCII or Binary format. For this reason ",(0,i.jsx)(t.code,{children:"FortranFile_"})," is extended to following file formats."]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"/docs-api/TxtFile",children:"TxtFile_"})}),"\n",(0,i.jsx)(t.li,{children:"DA32File (TODO)"}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-fortran",children:"TYPE, EXTENDS(AbstractFile_) :: FortranFile_\n  PRIVATE\n  LOGICAL(LGT) :: initstat = .FALSE.\n    !! file initiated or not\n  INTEGER(I4B) :: unitno = -1\n    !! unit number\n  INTEGER(I4B) :: reclval = -1\n    !! record length for direct access\n  LOGICAL(LGT) :: formatstat = .FALSE.\n    !! file is formatted or not\n  LOGICAL(LGT) :: accessstat = .FALSE.\n    !! direct or sequential access\n  LOGICAL(LGT) :: newstat = .FALSE.\n    !! the new status of a file\n  LOGICAL(LGT) :: overwrite = .FALSE.\n    !! replace or not\n  LOGICAL(LGT) :: padstat = .FALSE.\n    !! Whether or not the file is being padded\n  LOGICAL(LGT) :: getNewUnit = .FALSE.\n  CHARACTER(LEN=6) :: posopt = 'ASIS  '\n  CHARACTER(LEN=1) :: comment = hash\n  CHARACTER(LEN=1) :: separator = comma\n  CHARACTER(LEN=2) :: delimiter = \"\\n\"\n"})})]})}function F(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},54213:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>s});var r=n(36672);const i={},o=r.createContext(i);function a(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(o.Provider,{value:t},e.children)}}}]);