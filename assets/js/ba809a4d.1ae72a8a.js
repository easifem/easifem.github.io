"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[5238],{74232:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>x,frontMatter:()=>l,metadata:()=>a,toc:()=>p});const a=JSON.parse('{"id":"AppendUtility/Expand","title":"Expand","description":"Expand method expands a vector (if necessary) and add an element to it.","source":"@site/docs/docs-api/AppendUtility/Expand.md","sourceDirName":"AppendUtility","slug":"/AppendUtility/Expand","permalink":"/docs-api/AppendUtility/Expand","draft":false,"unlisted":false,"editUrl":"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/AppendUtility/Expand.md","tags":[],"version":"current","lastUpdatedAt":1724304782000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"ColConcat","permalink":"/docs-api/AppendUtility/ColConcat"},"next":{"title":"RowConcat","permalink":"/docs-api/AppendUtility/RowConcat"}}');var i=t(23420),s=t(54213);function c(e){const n={code:"code",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"program main\nuse easifemBase\nimplicit none\n\ninteger(I4B), allocatable :: aintvec(:)\ninteger(I4B) :: n, val\n"})}),"\n",(0,i.jsx)(n.p,{children:"First call\nWe set n = 0, as aintvec is not allocated."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:'val = 1\nn = 0\nCALL Expand(vec=aintvec, n=n, chunk_size=10_I4B, val=val, finished=.FALSE.)\n\nCALL Display(aintvec, "aintvec = ")\nCALL Display(n, "n = ")\nCALL Display(size(aintvec), "size of aintvec = " )\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-txt",metastring:'title="results"',children:"n = 1\nsize of aintvec = 10\n"})}),"\n",(0,i.jsx)(n.p,{children:"Let's finish."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:'val = 2\nCALL Expand(vec=aintvec, n=n, chunk_size=10_I4B, val=val, finished=.TRUE.)\n\nCALL Display(aintvec, "aintvec= ")\nCALL Display(n, "n = ")\nCALL Display(size(aintvec), "size of aintvec = " )\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-txt",metastring:'title="results"',children:"aintvec= \n---------\n    1    \n    2    \n\nn = 2\n\nsize of aintvec = 2\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"end program main\n"})})]})}function r(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}const l={},o="Expand",d={},p=[{value:"Interface",id:"interface",level:2}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components},{TabItem:t,Tabs:a}=n;return t||u("TabItem",!0),a||u("Tabs",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"expand",children:"Expand"})}),"\n",(0,i.jsx)(n.p,{children:"Expand method expands a vector (if necessary) and add an element to it."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://github.com/jacobwilliams/fortran-csv-module/blob/master/src/csv_utilities.f90",children:"Reference"})}),"\n",(0,i.jsx)(n.p,{children:"Calling example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"CALL Expand(vec, n=0, chunk_size)\nCALL Expand(vec, n, chunk_size, finished=.TRUE.)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"interface",children:"Interface"}),"\n",(0,i.jsxs)(a,{children:[(0,i.jsx)(t,{value:"interface",label:"\u0700 Interface",default:!0,children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"MODULE PURE SUBROUTINE Expand(vec, n, chunk_size, val, finished)\n  INTEGER(Int8| Int16 | Int32 | Int64) | REAL(Real32| Real64), ALLOCATABLE, INTENT(INOUT) :: vec(:)\n  INTEGER(I4B), INTENT(INOUT) :: n\n  !! counter for last element added to `vec`.\n  !! must be initialized to `size(vec)`\n  !! (or 0 if not allocated) before first call\n  INTEGER(I4B), INTENT(IN) :: chunk_size\n  !! allocate `vec` in blocks of this size (>0)\n  INTEGER(Int8| Int16 | Int32 | Int64) | REAL(Real32| Real64), OPTIONAL, INTENT(IN) :: val\n  !! the value to add to `vec`\n  LOGICAL(LGT), OPTIONAL, INTENT(IN) :: finished\n  !! set to true to return `vec`\n  !! as its correct size (`n`)\nEND SUBROUTINE Expand\n"})})}),(0,i.jsx)(t,{value:"example",label:"\ufe0f\u0700 See example",children:(0,i.jsx)(r,{})}),(0,i.jsx)(t,{value:"close",label:"\u21a2 "})]})]})}function x(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}function u(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},54213:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>r});var a=t(36672);const i={},s=a.createContext(i);function c(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);