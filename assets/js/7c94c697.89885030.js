"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[30813],{86895:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>P,contentTitle:()=>D,default:()=>U,frontMatter:()=>O,metadata:()=>l,toc:()=>v});const l=JSON.parse('{"id":"STScalarFieldLis/Set","title":"Set","description":"Set entries in STScalarField.","source":"@site/docs/docs-api/STScalarFieldLis/Set.md","sourceDirName":"STScalarFieldLis","slug":"/STScalarFieldLis/Set","permalink":"/docs-api/STScalarFieldLis/Set","draft":false,"unlisted":false,"editUrl":"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/STScalarFieldLis/Set.md","tags":[],"version":"current","lastUpdatedAt":1724304782000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Norm2","permalink":"/docs-api/STScalarFieldLis/Norm2"},"next":{"title":"SetSTScalarFieldParam","permalink":"/docs-api/STScalarFieldLis/SetSTScalarFieldParam"}}');var i=a(23420),t=a(54213),s=a(36492),r=a(92492);function o(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["In this example we test ",(0,i.jsx)(n.a,{href:"/docs-api/STScalarFieldLis/Set",children:"Set"})," method."]}),"\n",(0,i.jsx)(n.p,{children:"In this example we set the space-time value at a single node."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:'program main\n  use easifemBase\n  use easifemClasses\n  implicit none\n\n  type( domain_ ) :: dom\n  type( STScalarFieldLis_ ) :: obj\n  TYPE( HDF5File_ ) :: meshfile\n  type( ParameterList_ ) :: param\n  integer( i4b ) :: ierr\n  INTEGER( I4B ), Parameter :: timeCompo=2\n  CHARACTER( LEN = * ), Parameter :: engine="LIS_OMP"\n\n  call meshfile%initiate( filename="./mesh.h5", mode="READ" )\n  call meshfile%open()\n  call dom%initiate( meshfile, "" )\n  call meshfile%Deallocate()\n\n  CALL FPL_INIT()\n  CALL param%initiate()\n  CALL SetSTScalarFieldParam( &\n    & param=param, &\n    & name="U", &\n    & fieldType=FIELD_TYPE_NORMAL, &\n    & engine=engine, &\n    & timeCompo=timeCompo)\n\n  call obj%initiate( param, dom )\n  \n  !> set a single entry\n  call obj%set( &\n    & value=linspace(1.0_DFP, 10.0_DFP, timeCompo), &\n    & globalNode=1 )\n\n  !> set a single entry\n  call obj%set( &\n    & value=linspace(10.0_DFP, 20.0_DFP, timeCompo), &\n    & globalNode=3 )\n\n  call obj%display( "obj = ")\n\n  call obj%Deallocate()\n  call dom%Deallocate()\n  call param%Deallocate()\n  call FPL_FINALIZE()\nend program main\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-txt",metastring:'title="results"',children:"#obj =\n# isInitiated : TRUE\n# name :U\n# fieldType : NORMAL\n# engine :LIS_OMP\n# comm: 0\n# myRank: 0\n# numProcs: 1\n# global_n: 62\n# local_n: 62\n# is: 1\n# ie: 63\n# lis_ptr: 94918120762096\n# domain : ASSOCIATED\n# domains : NOT ALLOCATED\n# tSize : 62\n# # DOF data :\n# Total Physical Variables :1\n# Name : U\n# Space Components : 1\n# Time Components : 2\n# Total Nodes : 31\n# Storage Format : Nodes\n# Value Map : \n--------------\n       1      \n      32      \n      63      \n# VAR :U\n DOF-1 ,   DOF-2 ,   \n-------,  -------,   \n 1.0000,  10.0000,   \n 0.0000,   0.0000,   \n10.0000,  20.0000,   \n"})})]})}function c(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}function d(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["In this example we test ",(0,i.jsx)(n.a,{href:"/docs-api/STScalarFieldLis/Set",children:"Set"})," method."]}),"\n",(0,i.jsx)(n.p,{children:"In this example we set the space-time value at all spatial nodes."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:'program main\n  use easifemBase\n  use easifemClasses\n  implicit none\n\n  type( domain_ ) :: dom\n  type( STScalarFieldLis_ ) :: obj\n  TYPE( HDF5File_ ) :: meshfile\n  type( ParameterList_ ) :: param\n  integer( i4b ) :: ierr\n  INTEGER( I4B ), Parameter :: timeCompo=2\n  CHARACTER( LEN = * ), Parameter :: engine="LIS_OMP"\n\n  call meshfile%initiate( filename="./mesh.h5", mode="READ" )\n  call meshfile%open()\n  call dom%initiate( meshfile, "" )\n  call meshfile%Deallocate()\n\n  CALL FPL_INIT()\n  CALL param%initiate()\n  CALL SetSTScalarFieldParam( &\n    & param=param, &\n    & name="U", &\n    & fieldType=FIELD_TYPE_NORMAL, &\n    & engine=engine, &\n    & timeCompo=timeCompo)\n\n  call obj%initiate( param, dom )\n  \n  !> set all entries\n  call obj%set( &\n    & value=linspace(1.0_DFP, 10.0_DFP, timeCompo) )\n\n  call obj%display( "obj = ")\n\n  call obj%Deallocate()\n  call dom%Deallocate()\n  call param%Deallocate()\n  call FPL_FINALIZE()\nend program main\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-txt",metastring:'title="results"',children:"#obj =\n# isInitiated : TRUE\n# name :U\n# fieldType : NORMAL\n# engine :LIS_OMP\n# comm: 0\n# myRank: 0\n# numProcs: 1\n# global_n: 62\n# local_n: 62\n# is: 1\n# ie: 63\n# lis_ptr: 94813641005808\n# domain : ASSOCIATED\n# domains : NOT ALLOCATED\n# tSize : 62\n# # DOF data :\n# Total Physical Variables :1\n# Name : U\n# Space Components : 1\n# Time Components : 2\n# Total Nodes : 31\n# Storage Format : Nodes\n# Value Map : \n--------------\n       1      \n      32      \n      63      \n# VAR :U\n DOF-1 ,   DOF-2 ,   \n-------,  -------,   \n1.00000,  10.0000,   \n1.00000,  10.0000,   \n1.00000,  10.0000,   \n1.00000,  10.0000,   \n1.00000,  10.0000,   \n1.00000,  10.0000,   \n"})})]})}function m(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}function p(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["In this example we test ",(0,i.jsx)(n.a,{href:"/docs-api/STScalarFieldLis/Set",children:"Set"})," method."]}),"\n",(0,i.jsx)(n.p,{children:"In this example we set the space-time value at all spatial nodes of a given timeCompo."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:'program main\n  use easifemBase\n  use easifemClasses\n  implicit none\n\n  type( domain_ ) :: dom\n  type( STScalarFieldLis_ ) :: obj\n  TYPE( HDF5File_ ) :: meshfile\n  type( ParameterList_ ) :: param\n  integer( i4b ) :: ierr\n  INTEGER( I4B ), Parameter :: timeCompo=2\n  CHARACTER( LEN = * ), Parameter :: engine="LIS_OMP"\n\n  call meshfile%initiate( filename="./mesh.h5", mode="READ" )\n  call meshfile%open()\n  call dom%initiate( meshfile, "" )\n  call meshfile%Deallocate()\n\n  CALL FPL_INIT()\n  CALL param%initiate()\n  CALL SetSTScalarFieldParam( &\n    & param=param, &\n    & name="U", &\n    & fieldType=FIELD_TYPE_NORMAL, &\n    & engine=engine, &\n    & timeCompo=timeCompo)\n\n  call obj%initiate( param, dom )\n  \n  !> set all entries\n  call obj%set( value=1.0_DFP, timeCompo=1_I4B )\n  call obj%set( value=2.0_DFP, timeCompo=2_I4B )\n\n  call obj%display( "obj = ")\n\n  call obj%Deallocate()\n  call dom%Deallocate()\n  call param%Deallocate()\n  call FPL_FINALIZE()\nend program main\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-txt",metastring:'title="results"',children:"#obj =\n# isInitiated : TRUE\n# name :U\n# fieldType : NORMAL\n# engine :LIS_OMP\n# comm: 0\n# myRank: 0\n# numProcs: 1\n# global_n: 62\n# local_n: 62\n# is: 1\n# ie: 63\n# lis_ptr: 94207752727280\n# domain : ASSOCIATED\n# domains : NOT ALLOCATED\n# tSize : 62\n# # DOF data :\n# Total Physical Variables :1\n# Name : U\n# Space Components : 1\n# Time Components : 2\n# Total Nodes : 31\n# Storage Format : Nodes\n# Value Map : \n--------------\n       1      \n      32      \n      63      \n# VAR :U\n DOF-1 ,   DOF-2 ,   \n-------,  -------,   \n1.00000,  2.00000,   \n1.00000,  2.00000,   \n1.00000,  2.00000,   \n1.00000,  2.00000,   \n1.00000,  2.00000,   \n1.00000,  2.00000,   \n1.00000,  2.00000,   \n"})})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}function N(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["In this example we test ",(0,i.jsx)(n.a,{href:"/docs-api/STScalarFieldLis/Set",children:"Set"})," method."]}),"\n",(0,i.jsx)(n.p,{children:"In this example we set the all values by using a space-time vector."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:'program main\n  use easifemBase\n  use easifemClasses\n  implicit none\n\n  type( domain_ ) :: dom\n  type( STScalarFieldLis_ ) :: obj\n  TYPE( HDF5File_ ) :: meshfile\n  type( ParameterList_ ) :: param\n  integer( i4b ) :: ierr\n  INTEGER( I4B ), Parameter :: timeCompo=2\n  CHARACTER( LEN = * ), Parameter :: engine="LIS_OMP"\n  REAL( DFP ), ALLOCATABLE :: value(:, :)\n  INTEGER( I4B ) ::tNodes\n\n  call meshfile%initiate( filename="./mesh.h5", mode="READ" )\n  call meshfile%open()\n  call dom%initiate( meshfile, "" )\n  call meshfile%Deallocate()\n\n  CALL FPL_INIT()\n  CALL param%initiate()\n  CALL SetSTScalarFieldParam( &\n    & param=param, &\n    & name="U", &\n    & fieldType=FIELD_TYPE_NORMAL, &\n    & engine=engine, &\n    & timeCompo=timeCompo)\n\n  call obj%initiate( param, dom )\n  \n  !> set all entries\n  tNodes = dom%getTotalNodes()\n  CALL Reallocate(value, timeCompo, tNodes)\n  CALL RANDOM_NUMBER(value)\n\n  CALL obj%set(value)\n\n  CALL display(value(:, 1:5), "value(:, 1:5) = " )\n  call obj%display( "obj = ")\n\n  call obj%Deallocate()\n  call dom%Deallocate()\n  call param%Deallocate()\n  call FPL_FINALIZE()\nend program main\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-txt",metastring:'title="results"',children:"                value(:, 1:5) =                 \n------------------------------------------------\n0.926851  0.727974  0.267881  0.823990  0.764518\n0.616465  0.360218  0.996750  0.639337  0.011806\n\n#obj =\n# isInitiated : TRUE\n# name :U\n# fieldType : NORMAL\n# engine :LIS_OMP\n# comm: 0\n# myRank: 0\n# numProcs: 1\n# global_n: 62\n# local_n: 62\n# is: 1\n# ie: 63\n# lis_ptr: 93988982946544\n# domain : ASSOCIATED\n# domains : NOT ALLOCATED\n# tSize : 62\n# # DOF data :\n# Total Physical Variables :1\n# Name : U\n# Space Components : 1\n# Time Components : 2\n# Total Nodes : 31\n# Storage Format : Nodes\n# Value Map : \n--------------\n       1      \n      32      \n      63      \n# VAR :U\n  DOF-1 ,    DOF-2 ,   \n--------,  --------,   \n0.926851,  0.616465,   \n0.727974,  0.360218,   \n0.267881,  0.996750,   \n0.823990,  0.639337,   \n0.764518,  0.011806,   \n"})})]})}function L(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(N,{...e})}):N(e)}function T(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["In this example we test ",(0,i.jsx)(n.a,{href:"/docs-api/STScalarFieldLis/Set",children:"Set"})," method."]}),"\n",(0,i.jsx)(n.p,{children:"In this example we set the all values of a timeCompo by using a vector of real."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:'program main\n  use easifemBase\n  use easifemClasses\n  implicit none\n\n  type( domain_ ) :: dom\n  type( STScalarFieldLis_ ) :: obj\n  TYPE( HDF5File_ ) :: meshfile\n  type( ParameterList_ ) :: param\n  integer( i4b ) :: ierr\n  INTEGER( I4B ), Parameter :: timeCompo=2\n  CHARACTER( LEN = * ), Parameter :: engine="LIS_OMP"\n  REAL( DFP ), ALLOCATABLE :: value(:, :)\n  INTEGER( I4B ) ::tNodes\n\n  call meshfile%initiate( filename="./mesh.h5", mode="READ" )\n  call meshfile%open()\n  call dom%initiate( meshfile, "" )\n  call meshfile%Deallocate()\n\n  CALL FPL_INIT()\n  CALL param%initiate()\n  CALL SetSTScalarFieldParam( &\n    & param=param, &\n    & name="U", &\n    & fieldType=FIELD_TYPE_NORMAL, &\n    & engine=engine, &\n    & timeCompo=timeCompo)\n\n  call obj%initiate( param, dom )\n  \n  !> set all entries\n  tNodes = dom%getTotalNodes()\n  CALL Reallocate(value, timeCompo, tNodes)\n  CALL RANDOM_NUMBER(value)\n\n  CALL obj%set( value=value(1,:), timeCompo=1 )\n  CALL obj%set( value=value(2,:), timeCompo=2 )\n\n  CALL display(value(:, 1:5), "value(:, 1:5) = " )\n  call obj%display( "obj = ")\n\n  call obj%Deallocate()\n  call dom%Deallocate()\n  call param%Deallocate()\n  call FPL_FINALIZE()\nend program main\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-txt",metastring:'title="results"',children:"\n                value(:, 1:5) =                 \n------------------------------------------------\n0.092312  0.463958  0.375566  0.521316  0.103649\n0.835652  0.507362  0.215718  0.664761  0.815387\n\n#obj =\n# isInitiated : TRUE\n# name :U\n# fieldType : NORMAL\n# engine :LIS_OMP\n# comm: 0\n# myRank: 0\n# numProcs: 1\n# global_n: 62\n# local_n: 62\n# is: 1\n# ie: 63\n# lis_ptr: 94384562440944\n# domain : ASSOCIATED\n# domains : NOT ALLOCATED\n# tSize : 62\n# # DOF data :\n# Total Physical Variables :1\n# Name : U\n# Space Components : 1\n# Time Components : 2\n# Total Nodes : 31\n# Storage Format : Nodes\n# Value Map : \n--------------\n       1      \n      32      \n      63      \n# VAR :U\n  DOF-1 ,    DOF-2 ,   \n--------,  --------,   \n0.092312,  0.835652,   \n0.463958,  0.507362,   \n0.375566,  0.215718,   \n0.521316,  0.664761,   \n0.103649,  0.815387,   \n"})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(T,{...e})}):T(e)}function E(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["In this example we test ",(0,i.jsx)(n.a,{href:"/docs-api/STScalarFieldLis/Set",children:"Set"})," method."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:'program main\n  use easifemBase\n  use easifemClasses\n  implicit none\n\n  type( domain_ ) :: dom\n  type( STScalarFieldLis_ ) :: obj\n  type( ScalarFieldLis_ ) :: obj2\n  TYPE( HDF5File_ ) :: meshfile\n  type( ParameterList_ ) :: param\n  integer( i4b ) :: ierr\n  INTEGER( I4B ), Parameter :: timeCompo=2\n  CHARACTER( LEN = * ), Parameter :: engine="LIS_OMP"\n  REAL( DFP ), ALLOCATABLE :: value(:, :)\n  INTEGER( I4B ) ::tNodes\n\n  call meshfile%initiate( filename="./mesh.h5", mode="READ" )\n  call meshfile%open()\n  call dom%initiate( meshfile, "" )\n  call meshfile%Deallocate()\n\n  CALL FPL_INIT()\n  CALL param%initiate()\n  CALL SetSTScalarFieldParam( &\n    & param=param, &\n    & name="U", &\n    & fieldType=FIELD_TYPE_NORMAL, &\n    & engine=engine, &\n    & timeCompo=timeCompo)\n\n  call obj%initiate( param, dom )\n\n\n  CALL SetScalarFieldParam( &\n    & param=param, &\n    & name="U", &\n    & fieldType=FIELD_TYPE_NORMAL, &\n    & engine=engine)\n\n  call obj2%initiate( param, dom )\n\n  !> set all entries\n  tNodes = dom%getTotalNodes()\n  CALL Reallocate(value, timeCompo, tNodes)\n  CALL RANDOM_NUMBER(value)\n  CALL obj2%set(value=value(1,:))\n  CALL obj%set( value=obj2, timeCompo=1 )\n\n  CALL obj2%set(value=value(2,:))\n  CALL obj%set( value=obj2, timeCompo=2 )\n\n  CALL display(value(:, 1:5), "value(:, 1:5) = " )\n  CALL obj%display( "obj = ")\n\n  call obj%Deallocate()\n  call obj2%Deallocate()\n  call dom%Deallocate()\n  call param%Deallocate()\n  call FPL_FINALIZE()\nend program main\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-txt",metastring:'title="results"',children:"\n                value(:, 1:5) =                 \n------------------------------------------------\n0.040207  0.491438  0.943856  0.172155  0.719283\n0.183957  0.697048  0.376879  0.552362  0.539996\n#obj =\n# isInitiated : TRUE\n# name :U\n# fieldType : NORMAL\n# engine :LIS_OMP\n# comm: 0\n# myRank: 0\n# numProcs: 1\n# global_n: 62\n# local_n: 62\n# is: 1\n# ie: 63\n# lis_ptr: 94380060994288\n# domain : ASSOCIATED\n# domains : NOT ALLOCATED\n# tSize : 62\n# # DOF data :\n# Total Physical Variables :1\n# Name : U\n# Space Components : 1\n# Time Components : 2\n# Total Nodes : 31\n# Storage Format : Nodes\n# Value Map : \n--------------\n       1      \n      32      \n      63      \n# VAR :U\n  DOF-1 ,    DOF-2 ,   \n--------,  --------,   \n0.040207,  0.183957,   \n0.491438,  0.697048,   \n0.943856,  0.376879,   \n0.172155,  0.552362,   \n0.719283,  0.539996,   \n"})})]})}function I(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(E,{...e})}):E(e)}function A(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["In this example we test ",(0,i.jsx)(n.a,{href:"/docs-api/STScalarFieldLis/Set",children:"Set"})," method."]}),"\n",(0,i.jsx)(n.p,{children:"In this example we set multiple entries."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:'program main\n  use easifemBase\n  use easifemClasses\n  implicit none\n\n  type( domain_ ) :: dom\n  type( STScalarFieldLis_ ) :: obj\n  TYPE( HDF5File_ ) :: meshfile\n  type( ParameterList_ ) :: param\n  integer( i4b ) :: ierr\n  INTEGER( I4B ), Parameter :: timeCompo=2\n  CHARACTER( LEN = * ), Parameter :: engine="LIS_OMP"\n  REAL( DFP ), ALLOCATABLE :: value(:, :)\n  INTEGER( I4B ) ::tNodes\n\n  call meshfile%initiate( filename="./mesh.h5", mode="READ" )\n  call meshfile%open()\n  call dom%initiate( meshfile, "" )\n  call meshfile%Deallocate()\n\n  CALL FPL_INIT()\n  CALL param%initiate()\n  CALL SetSTScalarFieldParam( &\n    & param=param, &\n    & name="U", &\n    & fieldType=FIELD_TYPE_NORMAL, &\n    & engine=engine, &\n    & timeCompo=timeCompo)\n\n  call obj%initiate( param, dom )\n\n  !> set multiple entries\n  CALL Reallocate(value, timeCompo, 1)\n  CALL RANDOM_NUMBER(value)\n\n  CALL obj%set( value=value(:,1), globalNode=arange(1,10,2) )\n\n  CALL display( value(:, 1), "value(:, 1) = " )\n  CALL obj%display( "obj = ")\n\n  call obj%Deallocate()\n  call dom%Deallocate()\n  call param%Deallocate()\n  call FPL_FINALIZE()\nend program main\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-txt",metastring:'title="results"',children:"value(:, 1) = \n--------------\n   0.662859   \n   0.512173   \n#obj =\n# isInitiated : TRUE\n# name :U\n# fieldType : NORMAL\n# engine :LIS_OMP\n# comm: 0\n# myRank: 0\n# numProcs: 1\n# global_n: 62\n# local_n: 62\n# is: 1\n# ie: 63\n# lis_ptr: 93919708392176\n# domain : ASSOCIATED\n# domains : NOT ALLOCATED\n# tSize : 62\n# # DOF data :\n# Total Physical Variables :1\n# Name : U\n# Space Components : 1\n# Time Components : 2\n# Total Nodes : 31\n# Storage Format : Nodes\n# Value Map : \n--------------\n       1      \n      32      \n      63      \n# VAR :U\n DOF-1 ,   DOF-2 ,   \n-------,  -------,   \n0.66286,  0.51217,   \n0.00000,  0.00000,   \n0.66286,  0.51217,   \n0.00000,  0.00000,   \n0.66286,  0.51217,   \n0.00000,  0.00000,   \n0.66286,  0.51217,   \n0.00000,  0.00000,   \n0.66286,  0.51217,   \n\n"})})]})}function j(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(A,{...e})}):A(e)}function S(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["In this example we test ",(0,i.jsx)(n.a,{href:"/docs-api/STScalarFieldLis/Set",children:"Set"})," method."]}),"\n",(0,i.jsx)(n.p,{children:"In this example we set multiple entries."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:'program main\n  use easifemBase\n  use easifemClasses\n  implicit none\n\n  type( domain_ ) :: dom\n  type( STScalarFieldLis_ ) :: obj\n  TYPE( HDF5File_ ) :: meshfile\n  type( ParameterList_ ) :: param\n  integer( i4b ) :: ierr\n  INTEGER( I4B ), Parameter :: timeCompo=2\n  CHARACTER( LEN = * ), Parameter :: engine="LIS_OMP"\n  REAL( DFP ), ALLOCATABLE :: value(:, :)\n  INTEGER( I4B ) ::tNodes\n\n  call meshfile%initiate( filename="./mesh.h5", mode="READ" )\n  call meshfile%open()\n  call dom%initiate( meshfile, "" )\n  call meshfile%Deallocate()\n\n  CALL FPL_INIT()\n  CALL param%initiate()\n  CALL SetSTScalarFieldParam( &\n    & param=param, &\n    & name="U", &\n    & fieldType=FIELD_TYPE_NORMAL, &\n    & engine=engine, &\n    & timeCompo=timeCompo)\n\n  call obj%initiate( param, dom )\n\n  !> set multiple entries\n  CALL Reallocate(value, timeCompo, 5)\n  CALL RANDOM_NUMBER(value)\n\n  CALL obj%set( value=value, globalNode=arange(1,10,2) )\n\n  CALL display(transpose(value(:, 1:5)), "value(:, 1:10) = " )\n  CALL obj%display( "obj = ")\n\n  call obj%Deallocate()\n  call dom%Deallocate()\n  call param%Deallocate()\n  call FPL_FINALIZE()\nend program main\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-txt",metastring:'title="results"',children:"\n value(:, 1:10) = \n------------------\n0.342982  0.188825\n0.445002  0.148488\n0.201990  0.782645\n0.099369  0.353710\n0.248980  0.880695\n#obj =\n# isInitiated : TRUE\n# name :U\n# fieldType : NORMAL\n# engine :LIS_OMP\n# comm: 0\n# myRank: 0\n# numProcs: 1\n# global_n: 62\n# local_n: 62\n# is: 1\n# ie: 63\n# lis_ptr: 94584136927984\n# domain : ASSOCIATED\n# domains : NOT ALLOCATED\n# tSize : 62\n# # DOF data :\n# Total Physical Variables :1\n# Name : U\n# Space Components : 1\n# Time Components : 2\n# Total Nodes : 31\n# Storage Format : Nodes\n# Value Map : \n--------------\n       1      \n      32      \n      63      \n# VAR :U\n DOF-1 ,   DOF-2 ,   \n-------,  -------,   \n0.34298,  0.18882,   \n0.00000,  0.00000,   \n0.44500,  0.14849,   \n0.00000,  0.00000,   \n0.20199,  0.78265,   \n0.00000,  0.00000,   \n0.09937,  0.35371,   \n0.00000,  0.00000,   \n0.24898,  0.88070,   \n"})})]})}function x(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(S,{...e})}):S(e)}function f(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["In this example we test ",(0,i.jsx)(n.a,{href:"/docs-api/STScalarFieldLis/Set",children:"Set"})," method."]}),"\n",(0,i.jsx)(n.p,{children:"In this example we set multiple entries."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:'program main\n  use easifemBase\n  use easifemClasses\n  implicit none\n\n  type( domain_ ) :: dom\n  type( STScalarFieldLis_ ) :: obj\n  TYPE( HDF5File_ ) :: meshfile\n  type( ParameterList_ ) :: param\n  integer( i4b ) :: ierr\n  INTEGER( I4B ), Parameter :: timeCompo=2\n  CHARACTER( LEN = * ), Parameter :: engine="LIS_OMP"\n  REAL( DFP ), ALLOCATABLE :: value(:, :)\n  INTEGER( I4B ) ::tNodes\n\n  call meshfile%initiate( filename="./mesh.h5", mode="READ" )\n  call meshfile%open()\n  call dom%initiate( meshfile, "" )\n  call meshfile%Deallocate()\n\n  CALL FPL_INIT()\n  CALL param%initiate()\n  CALL SetSTScalarFieldParam( &\n    & param=param, &\n    & name="U", &\n    & fieldType=FIELD_TYPE_NORMAL, &\n    & engine=engine, &\n    & timeCompo=timeCompo)\n\n  call obj%initiate( param, dom )\n\n  !> set multiple entries\n  CALL Reallocate(value, timeCompo, 5)\n  CALL RANDOM_NUMBER(value)\n\n  CALL obj%set( value=value(1,:), globalNode=arange(1,10,2), timeCompo=1 )\n  CALL obj%set( value=value(2,:), globalNode=arange(1,10,2), timeCompo=2 )\n\n  CALL display(transpose(value(:, 1:5)), "value = " )\n  CALL obj%display( "obj = ")\n\n  call obj%Deallocate()\n  call dom%Deallocate()\n  call param%Deallocate()\n  call FPL_FINALIZE()\nend program main\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-txt",metastring:'title="results"',children:" value = \n------------------\n0.292455  0.677448\n0.968783  0.509839\n0.287100  0.279204\n0.225393  0.909298\n0.249951  0.347530\n#obj =\n# isInitiated : TRUE\n# name :U\n# fieldType : NORMAL\n# engine :LIS_OMP\n# comm: 0\n# myRank: 0\n# numProcs: 1\n# global_n: 62\n# local_n: 62\n# is: 1\n# ie: 63\n# lis_ptr: 94207269784304\n# domain : ASSOCIATED\n# domains : NOT ALLOCATED\n# tSize : 62\n# # DOF data :\n# Total Physical Variables :1\n# Name : U\n# Space Components : 1\n# Time Components : 2\n# Total Nodes : 31\n# Storage Format : Nodes\n# Value Map : \n--------------\n       1      \n      32      \n      63      \n# VAR :U\n DOF-1 ,   DOF-2 ,   \n-------,  -------,   \n0.29245,  0.67745,   \n0.00000,  0.00000,   \n0.96878,  0.50984,   \n0.00000,  0.00000,   \n0.28710,  0.27920,   \n0.00000,  0.00000,   \n0.22539,  0.90930,   \n0.00000,  0.00000,   \n0.24995,  0.34753,   \n"})})]})}function b(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(f,{...e})}):f(e)}function C(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["In this example we test ",(0,i.jsx)(n.a,{href:"/docs-api/STScalarFieldLis/Set",children:"Set"})," method."]}),"\n",(0,i.jsx)(n.p,{children:"In this example we set multiple entries by using FEVariable"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:'program main\n  use easifemBase\n  use easifemClasses\n  implicit none\n\n  type( domain_ ) :: dom\n  type( STScalarFieldLis_ ) :: obj\n  TYPE( HDF5File_ ) :: meshfile\n  type( ParameterList_ ) :: param\n  integer( i4b ) :: ierr\n  INTEGER( I4B ), Parameter :: timeCompo=2\n  CHARACTER( LEN = * ), Parameter :: engine="LIS_OMP"\n  TYPE(FEVariable_) :: fevar\n  REAL( DFP ), ALLOCATABLE :: value(:, :)\n  INTEGER( I4B ) ::tNodes\n\n  call meshfile%initiate( filename="./mesh.h5", mode="READ" )\n  call meshfile%open()\n  call dom%initiate( meshfile, "" )\n  call meshfile%Deallocate()\n\n  CALL FPL_INIT()\n  CALL param%initiate()\n  CALL SetSTScalarFieldParam( &\n    & param=param, &\n    & name="U", &\n    & fieldType=FIELD_TYPE_NORMAL, &\n    & engine=engine, &\n    & timeCompo=timeCompo)\n\n  call obj%initiate( param, dom )\n\n  !> set multiple entries\n  CALL Reallocate(value, timeCompo, 5)\n  CALL RANDOM_NUMBER(value)\n\n  fevar = NodalVariable(value, TypeFEVariableScalar, TypeFEVariableSpaceTime)\n\n  CALL obj%set( value=fevar, globalNode=arange(1,10,2) )\n\n  CALL Display(fevar, "fevar = ")\n  CALL obj%display( "obj = ")\n\n  call obj%Deallocate()\n  call dom%Deallocate()\n  call param%Deallocate()\n  call FPL_FINALIZE()\n  CALL Deallocate(fevar)\nend program main\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-txt",metastring:'title="results"',children:"\nfevar = \n# RANK :: 0 (SCALAR)\n# VarType: SPACE & TIME\n                    # VALUE:                    \n------------------------------------------------\n0.364310  0.982040  0.642988  0.875825  0.827356\n0.736854  0.852561  0.825102  0.919856  0.946324\n#obj =\n# isInitiated : TRUE\n# name :U\n# fieldType : NORMAL\n# engine :LIS_OMP\n# comm: 0\n# myRank: 0\n# numProcs: 1\n# global_n: 62\n# local_n: 62\n# is: 1\n# ie: 63\n# lis_ptr: 93943052417776\n# domain : ASSOCIATED\n# domains : NOT ALLOCATED\n# tSize : 62\n# # DOF data :\n# Total Physical Variables :1\n# Name : U\n# Space Components : 1\n# Time Components : 2\n# Total Nodes : 31\n# Storage Format : Nodes\n# Value Map : \n--------------\n       1      \n      32      \n      63      \n# VAR :U\n DOF-1 ,   DOF-2 ,   \n-------,  -------,   \n0.36431,  0.73685,   \n0.00000,  0.00000,   \n0.98204,  0.85256,   \n0.00000,  0.00000,   \n0.64299,  0.82510,   \n0.00000,  0.00000,   \n0.87583,  0.91986,   \n0.00000,  0.00000,   \n0.82736,  0.94632,   \n"})})]})}function g(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(C,{...e})}):C(e)}function F(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["In this example we test ",(0,i.jsx)(n.a,{href:"/docs-api/STScalarFieldLis/Set",children:"Set"})," method."]}),"\n",(0,i.jsx)(n.p,{children:"In this example we set all entries."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:'program main\n  use easifemBase\n  use easifemClasses\n  implicit none\n\n  type( domain_ ) :: dom\n  type( STScalarFieldLis_ ) :: obj\n  TYPE( HDF5File_ ) :: meshfile\n  type( ParameterList_ ) :: param\n  integer( i4b ) :: ierr\n  INTEGER( I4B ), Parameter :: timeCompo=2\n  CHARACTER( LEN = * ), Parameter :: engine="LIS_OMP"\n  INTEGER( I4B ) ::tNodes\n\n  call meshfile%initiate( filename="./mesh.h5", mode="READ" )\n  call meshfile%open()\n  call dom%initiate( meshfile, "" )\n  call meshfile%Deallocate()\n\n  CALL FPL_INIT()\n  CALL param%initiate()\n  CALL SetSTScalarFieldParam( &\n    & param=param, &\n    & name="U", &\n    & fieldType=FIELD_TYPE_NORMAL, &\n    & engine=engine, &\n    & timeCompo=timeCompo)\n\n  call obj%initiate( param, dom )\n\n  call obj%set(value=2.0_DFP)\n  CALL obj%display( "obj = ")\n\n  call obj%Deallocate()\n  call dom%Deallocate()\n  call param%Deallocate()\n  call FPL_FINALIZE()\nend program main\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-txt",metastring:'title="results"',children:"#obj =\n# isInitiated : TRUE\n# name :U\n# fieldType : NORMAL\n# engine :LIS_OMP\n# comm: 0\n# myRank: 0\n# numProcs: 1\n# global_n: 62\n# local_n: 62\n# is: 1\n# ie: 63\n# lis_ptr: 93898635594480\n# domain : ASSOCIATED\n# domains : NOT ALLOCATED\n# tSize : 62\n# # DOF data :\n# Total Physical Variables :1\n# Name : U\n# Space Components : 1\n# Time Components : 2\n# Total Nodes : 31\n# Storage Format : Nodes\n# Value Map : \n--------------\n       1      \n      32      \n      63      \n# VAR :U\n DOF-1 ,   DOF-2 ,   \n-------,  -------,   \n2.00000,  2.00000,   \n2.00000,  2.00000,   \n2.00000,  2.00000,   \n2.00000,  2.00000,   \n2.00000,  2.00000,   \n"})})]})}function R(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(F,{...e})}):F(e)}const O={},D="Set",P={},v=[{value:"Interface 1",id:"interface-1",level:2},{value:"Interface 2",id:"interface-2",level:2},{value:"Interface 3",id:"interface-3",level:2},{value:"Interface 4",id:"interface-4",level:2},{value:"Interface 5",id:"interface-5",level:2},{value:"Interface 6",id:"interface-6",level:2},{value:"Interface 7",id:"interface-7",level:2},{value:"Interface 8",id:"interface-8",level:2},{value:"Interface 9",id:"interface-9",level:2},{value:"Interface 10",id:"interface-10",level:2},{value:"Interface 11",id:"interface-11",level:2},{value:"Interface 12",id:"interface-12",level:2},{value:"Interface 13",id:"interface-13",level:2},{value:"Interface 14",id:"interface-14",level:2}];function _(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"set",children:"Set"})}),"\n",(0,i.jsxs)(n.p,{children:["Set entries in ",(0,i.jsx)(n.code,{children:"STScalarField"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Calling example:"}),"\n",(0,i.jsx)("span",{class:"badge badge--primary",children:" Set single entry "}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"    CLASS(STScalarFieldLis_), INTENT(INOUT) :: obj\n    INTEGER(I4B):: globalNode\n    REAL(DFP):: VALUE(:)\n    REAL(DFP):: scale\n    LOGICAL(LGT):: addContribution\n"})}),"\n",(0,i.jsx)("span",{class:"badge badge--primary",children:" Set all entries "}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"    CLASS(STScalarFieldLis_):: obj\n    REAL(DFP):: VALUE(:)\n    REAL(DFP):: scale\n    LOGICAL(LGT):: addContribution\n"})}),"\n",(0,i.jsx)("span",{class:"badge badge--primary",children:" Set all enties of timecompo"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"    CLASS(STScalarFieldLis_):: obj\n    REAL(DFP):: VALUE\n    INTEGER(I4B):: timeCompo\n    REAL(DFP):: scale\n    LOGICAL(LGT):: addContribution\n"})}),"\n",(0,i.jsx)("span",{class:"badge badge--primary",children:" Set all entries "}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"    REAL(DFP):: VALUE(:, :)\n    REAL(DFP):: scale\n    LOGICAL(LGT):: addContribution\n"})}),"\n",(0,i.jsx)("span",{class:"badge badge--primary",children:" Set all entries of timeCompo "}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"    CLASS(STScalarFieldLis_):: obj\n    REAL(DFP):: VALUE(:)\n    INTEGER(I4B):: timeCompo\n    REAL(DFP):: scale\n    LOGICAL(LGT):: addContribution\n"})}),"\n",(0,i.jsx)("span",{class:"badge badge--primary",children:" Set single entries of timeCompo"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"    CLASS(STScalarFieldLis_):: obj\n    TYPE(ScalarField_):: VALUE\n    INTEGER(I4B):: timeCompo\n    REAL(DFP):: scale\n    LOGICAL(LGT):: addContribution\n"})}),"\n",(0,i.jsx)("span",{class:"badge badge--primary",children:" Set the multiple entries "}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"    CLASS(STScalarFieldLis_):: obj\n    INTEGER(I4B):: globalNode(:)\n    REAL(DFP):: VALUE(:)\n    REAL(DFP):: scale\n    LOGICAL(LGT):: addContribution\n"})}),"\n",(0,i.jsx)("span",{class:"badge badge--primary",children:" Set multiple entries "}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"    CLASS(STScalarFieldLis_):: obj\n    INTEGER(I4B):: globalNode(:)\n    REAL(DFP):: VALUE(:, :)\n    REAL(DFP):: scale\n    LOGICAL(LGT):: addContribution\n"})}),"\n",(0,i.jsx)("span",{class:"badge badge--primary",children:" Set multiple entries of timeCompo "}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"    CLASS(STScalarFieldLis_):: obj\n    REAL(DFP):: VALUE(:)\n    INTEGER(I4B):: globalNode(:)\n    INTEGER(I4B):: timeCompo\n    REAL(DFP):: scale\n    LOGICAL(LGT):: addContribution\n"})}),"\n",(0,i.jsx)("span",{class:"badge badge--primary",children:" Set single entry of a timeCompo "}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"    CLASS(STScalarFieldLis_):: obj\n    REAL(DFP):: VALUE\n    INTEGER(I4B):: globalNode\n    INTEGER(I4B):: timeCompo\n    REAL(DFP):: scale\n    LOGICAL(LGT):: addContribution\n"})}),"\n",(0,i.jsx)("span",{class:"badge badge--primary",children:" Set multiple entries using triplets"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"    CLASS(STScalarFieldLis_):: obj\n    INTEGER(I4B):: istart\n    INTEGER(I4B):: iend\n    INTEGER(I4B):: stride\n    REAL(DFP):: VALUE(:)\n    REAL(DFP):: scale\n    LOGICAL(LGT):: addContribution\n"})}),"\n",(0,i.jsx)("span",{class:"badge badge--primary",children:" Set multiple entries using triplets"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"    CLASS(STScalarFieldLis_):: obj\n    REAL(DFP):: VALUE(:, :)\n    INTEGER(I4B):: istart\n    INTEGER(I4B):: iend\n    INTEGER(I4B):: stride\n    REAL(DFP):: scale\n    LOGICAL(LGT):: addContribution\n"})}),"\n",(0,i.jsx)("span",{class:"badge badge--primary",children:" Set multiple entries using FEVariable "}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"    CLASS(STScalarFieldLis_):: obj\n    TYPE(FEVariable_):: VALUE\n    INTEGER(I4B):: globalNode(:)\n    REAL(DFP):: scale\n    LOGICAL(LGT):: addContribution\n"})}),"\n",(0,i.jsx)("span",{class:"badge badge--primary",children:" Set all values "}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"    CLASS(STScalarFieldLis_):: obj\n    REAL(DFP):: VALUE\n    REAL(DFP):: scale\n    LOGICAL(LGT):: addContribution\n"})}),"\n","\n",(0,i.jsx)(n.h2,{id:"interface-1",children:"Interface 1"}),"\n",(0,i.jsxs)(s.A,{children:[(0,i.jsxs)(r.A,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE Set1(obj, globalNode, VALUE, scale, &\n      & addContribution)\n    CLASS(STScalarFieldLis_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: globalNode\n    REAL(DFP), INTENT(IN) :: VALUE(:)\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\n  END SUBROUTINE Set1\nEND INTERFACE\n"})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"This routine sets the single entry of the STScalarField."}),"\n",(0,i.jsxs)(n.li,{children:["Here, ",(0,i.jsx)(n.code,{children:"value"})," should be a space-time scalar representing the components of a STScalar."]}),"\n",(0,i.jsxs)(n.li,{children:["The size of ",(0,i.jsx)(n.code,{children:"value"})," should be same as ",(0,i.jsx)(n.code,{children:"obj%timeCompo"}),"."]}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-txt",children:"In simple words it does following.\nSTScalar( :, globalNode ) = value( : )\n"})})]}),(0,i.jsx)(r.A,{value:"example",label:"\ufe0f\u0700 See example",children:(0,i.jsx)(c,{})}),(0,i.jsx)(r.A,{value:"close",label:"\u21a2 "})]}),"\n",(0,i.jsx)(n.h2,{id:"interface-2",children:"Interface 2"}),"\n",(0,i.jsxs)(s.A,{children:[(0,i.jsxs)(r.A,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:" INTERFACE\n  MODULE SUBROUTINE Set2(obj, VALUE, scale, addContribution)\n    CLASS(STScalarFieldLis_), TARGET, INTENT(INOUT) :: obj\n    REAL(DFP), INTENT(IN) :: VALUE(:)\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\n  END SUBROUTINE Set2\nEND INTERFACE\n"})}),(0,i.jsx)(n.p,{children:"This routine work as follows."}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The size of ",(0,i.jsx)(n.code,{children:"value"})," should be same as ",(0,i.jsx)(n.code,{children:"obj%timeCompo"}),", then this value is set for all the nodal values."]}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-txt",children:"STScalar( 1:timeCompo, i ) = value( 1:timeCompo ), for i = 1, tNodes\n"})})]}),(0,i.jsx)(r.A,{value:"example",label:"\ufe0f\u0700 See example",children:(0,i.jsx)(m,{})}),(0,i.jsx)(r.A,{value:"close",label:"\u21a2 "})]}),"\n",(0,i.jsx)(n.h2,{id:"interface-3",children:"Interface 3"}),"\n",(0,i.jsxs)(s.A,{children:[(0,i.jsxs)(r.A,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:" INTERFACE\n  MODULE SUBROUTINE Set3(obj, VALUE, timeCompo, scale, &\n    & addContribution)\n    CLASS(STScalarFieldLis_), INTENT(INOUT) :: obj\n    REAL(DFP), INTENT(IN) :: VALUE\n    INTEGER(I4B), INTENT(IN) :: timeCompo\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\n  END SUBROUTINE Set3\nEND INTERFACE\n"})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["This routine sets all values of ",(0,i.jsx)(n.code,{children:"timeCompo"})," component of the STScalarField to given scalar value ",(0,i.jsx)(n.code,{children:"value"})]}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-txt",children:"STScalar( timeCompo, i ) = value, for i = 1, tNodes\n"})})]}),(0,i.jsx)(r.A,{value:"example",label:"\ufe0f\u0700 See example",children:(0,i.jsx)(u,{})}),(0,i.jsx)(r.A,{value:"close",label:"\u21a2 "})]}),"\n",(0,i.jsx)(n.h2,{id:"interface-4",children:"Interface 4"}),"\n",(0,i.jsxs)(s.A,{children:[(0,i.jsxs)(r.A,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:" INTERFACE\n  MODULE SUBROUTINE Set4(obj, VALUE, scale, addContribution)\n    CLASS(STScalarFieldLis_), INTENT(INOUT) :: obj\n    REAL(DFP), INTENT(IN) :: VALUE(:, :)\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\n  END SUBROUTINE Set4\nEND INTERFACE\n"})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["This routine sets all entries of STScalar field to a given ",(0,i.jsx)(n.code,{children:"STScalarFieldLis_"})]}),"\n",(0,i.jsxs)(n.li,{children:["Here, shape of ",(0,i.jsx)(n.code,{children:"value"})," should be ",(0,i.jsx)(n.code,{children:"value(1:timeCompo, tNodes)"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Rows of ",(0,i.jsx)(n.code,{children:"value"})," denotes the time components"]}),"\n",(0,i.jsxs)(n.li,{children:["Columns of ",(0,i.jsx)(n.code,{children:"value"})," represents the spatial nodes."]}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"STScalar( :, : ) = value( :, : )\n"})})]}),(0,i.jsx)(r.A,{value:"example",label:"\ufe0f\u0700 See example",children:(0,i.jsx)(L,{})}),(0,i.jsx)(r.A,{value:"close",label:"\u21a2 "})]}),"\n",(0,i.jsx)(n.h2,{id:"interface-5",children:"Interface 5"}),"\n",(0,i.jsxs)(s.A,{children:[(0,i.jsxs)(r.A,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:" INTERFACE\n  MODULE SUBROUTINE Set5(obj, VALUE, timeCompo, scale, &\n    & addContribution)\n    CLASS(STScalarFieldLis_), INTENT(INOUT) :: obj\n    REAL(DFP), INTENT(IN) :: VALUE(:)\n    INTEGER(I4B), INTENT(IN) :: timeCompo\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\n  END SUBROUTINE Set5\nEND INTERFACE\n"})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["This routine sets all entries of the component ",(0,i.jsx)(n.code,{children:"timeCompo"})," of STScalarField to ",(0,i.jsx)(n.code,{children:"value"})]}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-txt",children:"STScalar( timeCompo, 1:tNodes ) = value( 1:tNodes )\n"})}),(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["The size of ",(0,i.jsx)(n.code,{children:"value"})," should be equal to the total number of spatial nodes."]})})]}),(0,i.jsx)(r.A,{value:"example",label:"\ufe0f\u0700 See example",children:(0,i.jsx)(h,{})}),(0,i.jsx)(r.A,{value:"close",label:"\u21a2 "})]}),"\n",(0,i.jsx)(n.h2,{id:"interface-6",children:"Interface 6"}),"\n",(0,i.jsxs)(s.A,{children:[(0,i.jsxs)(r.A,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:" INTERFACE\n  MODULE SUBROUTINE Set6(obj, VALUE, timeCompo, scale, &\n    & addContribution)\n    CLASS(STScalarFieldLis_), INTENT(INOUT) :: obj\n    TYPE(ScalarField_), INTENT(IN) :: VALUE\n    INTEGER(I4B), INTENT(IN) :: timeCompo\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\n  END SUBROUTINE Set6\nEND INTERFACE\n"})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["This routine sets all entries of the component ",(0,i.jsx)(n.code,{children:"timeCompo"})," of STScalarField to given ScalarField ",(0,i.jsx)(n.code,{children:"value"})]}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-txt",children:"STScalar( timeCompo, 1:tNodes ) = value(1:tNodes)\n"})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The size of value should be same as the total number of nodes in ",(0,i.jsx)(n.code,{children:"obj"}),"."]}),"\n"]})]}),(0,i.jsx)(r.A,{value:"example",label:"\ufe0f\u0700 See example",children:(0,i.jsx)(I,{})}),(0,i.jsx)(r.A,{value:"close",label:"\u21a2 "})]}),"\n",(0,i.jsx)(n.h2,{id:"interface-7",children:"Interface 7"}),"\n",(0,i.jsxs)(s.A,{children:[(0,i.jsxs)(r.A,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:" INTERFACE\n  MODULE SUBROUTINE Set7(obj, VALUE, globalNode, scale, &\n    & addContribution)\n    CLASS(STScalarFieldLis_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: globalNode(:)\n    REAL(DFP), INTENT(IN) :: VALUE(:)\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\n  END SUBROUTINE Set7\nEND INTERFACE\n"})}),(0,i.jsxs)(n.p,{children:["This method sets the selected enties of a STScalarField to ",(0,i.jsx)(n.code,{children:"value( : )"})]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-txt",children:"Effectively it does the following:\nSTScalar( 1:timeCompo, globalNode ) = value( 1:timeCompo ), for entries in global nodes\n"})}),(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["size of ",(0,i.jsx)(n.code,{children:"value"})," should be equal to the ",(0,i.jsx)(n.code,{children:"obj%timeCompo"})]})})]}),(0,i.jsx)(r.A,{value:"example",label:"\ufe0f\u0700 See example",children:(0,i.jsx)(j,{})}),(0,i.jsx)(r.A,{value:"close",label:"\u21a2 "})]}),"\n",(0,i.jsx)(n.h2,{id:"interface-8",children:"Interface 8"}),"\n",(0,i.jsxs)(s.A,{children:[(0,i.jsxs)(r.A,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:" INTERFACE\n  MODULE SUBROUTINE Set8(obj, globalNode, VALUE, scale, &\n    & addContribution)\n    CLASS(STScalarFieldLis_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: globalNode(:)\n    REAL(DFP), INTENT(IN) :: VALUE(:, :)\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\n  END SUBROUTINE Set8\nEND INTERFACE\n"})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"This routine sets selected entries of STScalarField."}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-txt",children:"STScalar( 1:timeCompo, globalNode ) = value( 1:timeCompo, 1:size(globalNode) )\n"})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"SIZE(value, 1)"})," should be equal to ",(0,i.jsx)(n.code,{children:"obj%timeCompo"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"SIZE(value, 2)"})," should be equal to ",(0,i.jsx)(n.code,{children:"SIZE(globalNode)"})]}),"\n"]})]}),(0,i.jsx)(r.A,{value:"example",label:"\ufe0f\u0700 See example",children:(0,i.jsx)(x,{})}),(0,i.jsx)(r.A,{value:"close",label:"\u21a2 "})]}),"\n",(0,i.jsx)(n.h2,{id:"interface-9",children:"Interface 9"}),"\n",(0,i.jsxs)(s.A,{children:[(0,i.jsxs)(r.A,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:" INTERFACE\n  MODULE SUBROUTINE Set9(obj, VALUE, globalNode, timeCompo, scale, &\n    & addContribution)\n    CLASS(STScalarFieldLis_), INTENT(INOUT) :: obj\n    REAL(DFP), INTENT(IN) :: VALUE(:)\n    INTEGER(I4B), INTENT(IN) :: globalNode(:)\n    INTEGER(I4B), INTENT(IN) :: timeCompo\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\n  END SUBROUTINE Set9\nEND INTERFACE\n"})}),(0,i.jsx)(n.p,{children:"This routine sets the selected components of selected nodes to given value."}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-txt",children:"STScalar( timeCompo, globalNode ) = value( 1:SIZE(globalNode) )\n"})}),(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"size of globalNode should be equal to the size of value."})})]}),(0,i.jsx)(r.A,{value:"example",label:"\ufe0f\u0700 See example",children:(0,i.jsx)(b,{})}),(0,i.jsx)(r.A,{value:"close",label:"\u21a2 "})]}),"\n",(0,i.jsx)(n.h2,{id:"interface-10",children:"Interface 10"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:" INTERFACE\n  MODULE SUBROUTINE Set10(obj, VALUE, globalNode, timeCompo, scale, &\n    & addContribution)\n    CLASS(STScalarFieldLis_), INTENT(INOUT) :: obj\n    REAL(DFP), INTENT(IN) :: VALUE\n    INTEGER(I4B), INTENT(IN) :: globalNode\n    INTEGER(I4B), INTENT(IN) :: timeCompo\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\n  END SUBROUTINE Set10\nEND INTERFACE\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"This routine sets the single entry of a given time components."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"interface-11",children:"Interface 11"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:" INTERFACE\n  MODULE SUBROUTINE Set11(obj, VALUE, istart, iend, stride, scale, &\n    & addContribution)\n    CLASS(STScalarFieldLis_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: istart\n    INTEGER(I4B), INTENT(IN) :: iend\n    INTEGER(I4B), INTENT(IN) :: stride\n    REAL(DFP), INTENT(IN) :: VALUE(:)\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\n  END SUBROUTINE Set11\nEND INTERFACE\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Set multiple entries using triad"}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["The size of value should be equal to ",(0,i.jsx)(n.code,{children:"obj%timeCompo"})]})}),"\n",(0,i.jsx)(n.h2,{id:"interface-12",children:"Interface 12"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE Set12(obj, VALUE, istart, iend, stride, scale, &\n    & addContribution)\n    CLASS(STScalarFieldLis_), INTENT(INOUT) :: obj\n    REAL(DFP), INTENT(IN) :: VALUE(:, :)\n    INTEGER(I4B), INTENT(IN) :: istart\n    INTEGER(I4B), INTENT(IN) :: iend\n    INTEGER(I4B), INTENT(IN) :: stride\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\n  END SUBROUTINE Set12\nEND INTERFACE\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Set multiple entries using triad"}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["The number of rows in value should be equal to ",(0,i.jsx)(n.code,{children:"obj%timeCompo"})]})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["The number of cols in value should be equal to size of ",(0,i.jsx)(n.code,{children:"istart:iend:stride"})]})}),"\n",(0,i.jsx)(n.h2,{id:"interface-13",children:"Interface 13"}),"\n",(0,i.jsxs)(s.A,{children:[(0,i.jsxs)(r.A,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:" INTERFACE\n  MODULE SUBROUTINE Set13(obj, VALUE, globalNode, scale, &\n    & addContribution)\n    CLASS(STScalarFieldLis_), INTENT(INOUT) :: obj\n    TYPE(FEVariable_), INTENT(IN) :: VALUE\n    INTEGER(I4B), INTENT(IN) :: globalNode(:)\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\n  END SUBROUTINE Set13\nEND INTERFACE\n"})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Set the value by using FEVariable"}),"\n"]})]}),(0,i.jsx)(r.A,{value:"example",label:"\ufe0f\u0700 See example",children:(0,i.jsx)(g,{})}),(0,i.jsx)(r.A,{value:"close",label:"\u21a2 "})]}),"\n",(0,i.jsx)(n.h2,{id:"interface-14",children:"Interface 14"}),"\n",(0,i.jsxs)(s.A,{children:[(0,i.jsxs)(r.A,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE Set14(obj, VALUE, scale, addContribution)\n    CLASS(STScalarFieldLis_), INTENT(INOUT) :: obj\n    REAL(DFP), INTENT(IN) :: VALUE\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\n  END SUBROUTINE Set14\nEND INTERFACE\n"})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Set all the values of STScalarField to a scalar value ",(0,i.jsx)(n.code,{children:"Value"})]}),"\n"]})]}),(0,i.jsx)(r.A,{value:"example",label:"\ufe0f\u0700 See example",children:(0,i.jsx)(R,{})}),(0,i.jsx)(r.A,{value:"close",label:"\u21a2 "})]})]})}function U(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(_,{...e})}):_(e)}},92492:(e,n,a)=>{a.d(n,{A:()=>s});a(36672);var l=a(28923);const i={tabItem:"tabItem_VSPN"};var t=a(23420);function s(e){let{children:n,hidden:a,className:s}=e;return(0,t.jsx)("div",{role:"tabpanel",className:(0,l.A)(i.tabItem,s),hidden:a,children:n})}},36492:(e,n,a)=>{a.d(n,{A:()=>S});var l=a(36672),i=a(28923),t=a(19929),s=a(85291),r=a(5581),o=a(80034),c=a(12715),d=a(62741);function m(e){return l.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,l.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:n,children:a}=e;return(0,l.useMemo)((()=>{const e=n??function(e){return m(e).map((e=>{let{props:{value:n,label:a,attributes:l,default:i}}=e;return{value:n,label:a,attributes:l,default:i}}))}(a);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,a])}function u(e){let{value:n,tabValues:a}=e;return a.some((e=>e.value===n))}function N(e){let{queryString:n=!1,groupId:a}=e;const i=(0,s.W6)(),t=function(e){let{queryString:n=!1,groupId:a}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:n,groupId:a});return[(0,o.aZ)(t),(0,l.useCallback)((e=>{if(!t)return;const n=new URLSearchParams(i.location.search);n.set(t,e),i.replace({...i.location,search:n.toString()})}),[t,i])]}function L(e){const{defaultValue:n,queryString:a=!1,groupId:i}=e,t=p(e),[s,o]=(0,l.useState)((()=>function(e){let{defaultValue:n,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!u({value:n,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const l=a.find((e=>e.default))??a[0];if(!l)throw new Error("Unexpected error: 0 tabValues");return l.value}({defaultValue:n,tabValues:t}))),[c,m]=N({queryString:a,groupId:i}),[L,T]=function(e){let{groupId:n}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(n),[i,t]=(0,d.Dv)(a);return[i,(0,l.useCallback)((e=>{a&&t.set(e)}),[a,t])]}({groupId:i}),h=(()=>{const e=c??L;return u({value:e,tabValues:t})?e:null})();(0,r.A)((()=>{h&&o(h)}),[h]);return{selectedValue:s,selectValue:(0,l.useCallback)((e=>{if(!u({value:e,tabValues:t}))throw new Error(`Can't select invalid tab value=${e}`);o(e),m(e),T(e)}),[m,T,t]),tabValues:t}}var T=a(32111);const h={tabList:"tabList_csSQ",tabItem:"tabItem_Bcmo"};var E=a(23420);function I(e){let{className:n,block:a,selectedValue:l,selectValue:s,tabValues:r}=e;const o=[],{blockElementScrollPositionUntilNextRender:c}=(0,t.a_)(),d=e=>{const n=e.currentTarget,a=o.indexOf(n),i=r[a].value;i!==l&&(c(n),s(i))},m=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const a=o.indexOf(e.currentTarget)+1;n=o[a]??o[0];break}case"ArrowLeft":{const a=o.indexOf(e.currentTarget)-1;n=o[a]??o[o.length-1];break}}n?.focus()};return(0,E.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":a},n),children:r.map((e=>{let{value:n,label:a,attributes:t}=e;return(0,E.jsx)("li",{role:"tab",tabIndex:l===n?0:-1,"aria-selected":l===n,ref:e=>{o.push(e)},onKeyDown:m,onClick:d,...t,className:(0,i.A)("tabs__item",h.tabItem,t?.className,{"tabs__item--active":l===n}),children:a??n},n)}))})}function A(e){let{lazy:n,children:a,selectedValue:t}=e;const s=(Array.isArray(a)?a:[a]).filter(Boolean);if(n){const e=s.find((e=>e.props.value===t));return e?(0,l.cloneElement)(e,{className:(0,i.A)("margin-top--md",e.props.className)}):null}return(0,E.jsx)("div",{className:"margin-top--md",children:s.map(((e,n)=>(0,l.cloneElement)(e,{key:n,hidden:e.props.value!==t})))})}function j(e){const n=L(e);return(0,E.jsxs)("div",{className:(0,i.A)("tabs-container",h.tabList),children:[(0,E.jsx)(I,{...n,...e}),(0,E.jsx)(A,{...n,...e})]})}function S(e){const n=(0,T.A)();return(0,E.jsx)(j,{...e,children:m(e.children)},String(n))}},54213:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>r});var l=a(36672);const i={},t=l.createContext(i);function s(e){const n=l.useContext(t);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),l.createElement(t.Provider,{value:n},e.children)}}}]);