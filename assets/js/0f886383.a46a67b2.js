"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[89759],{84458:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>N,frontMatter:()=>d,metadata:()=>o,toc:()=>h});const o=JSON.parse('{"id":"DOF/tNodes","title":"tNodes","description":"This method returns the total number of nodes in DOF object.","source":"@site/docs/docs-api/DOF/tNodes.md","sourceDirName":"DOF","slug":"/DOF/tNodes","permalink":"/docs-api/DOF/tNodes","draft":false,"unlisted":false,"editUrl":"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/DOF/tNodes.md","tags":[],"version":"current","lastUpdatedAt":1724304782000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"tNames","permalink":"/docs-api/DOF/tNames"},"next":{"title":"tSpaceComponents","permalink":"/docs-api/DOF/tSpaceComponents"}}');var t=s(23420),i=s(54213);function r(e){const n={code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["This example shows the usage of ",(0,t.jsx)(n.code,{children:".tNodes."})," to get total number of nodes of degree of freedom."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"PROGRAM main\n    USE easifemBase\n    IMPLICIT NONE\n    TYPE( DOF_ ) :: obj\n    CALL Initiate( obj, tNodes=[10], names=[\"U\"], spaceCompo=[3],  &\n      & timeCompo=[1], storageFMT = FMT_DOF )\n    CALL OK( (.tNodes. obj) .EQ. 30, '.tNodes. obj [30] : ' )\n    CALL OK( (obj .tNodes. 1) .EQ. 10, 'obj .tNodes. 1: ' )\n    CALL OK( (obj .tNodes. 2) .EQ. 10, 'obj .tNodes. 2: ' )\n    CALL OK( (obj .tNodes. 3) .EQ. 10, 'obj .tNodes. 3: ' )\n    CALL OK( (obj .tNodes. [1,2,3]) .EQ. 30, 'obj .tNodes. [1,2,3]: ' )\n    CALL Deallocate( obj )\nEND PROGRAM main\n"})})]})}function a(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(r,{...e})}):r(e)}const d={},l="tNodes",c={},h=[{value:"Interface 1",id:"interface-1",level:2},{value:"Interface 2",id:"interface-2",level:2},{value:"Interface 3",id:"interface-3",level:2},{value:"Interface 4",id:"interface-4",level:2},{value:"Examples",id:"examples",level:2}];function f(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"tnodes",children:"tNodes"})}),"\n",(0,t.jsx)(n.p,{children:"This method returns the total number of nodes in DOF object."}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["You can also use the generic method called ",(0,t.jsx)(n.code,{children:"SIZE"})]})}),"\n",(0,t.jsx)(n.p,{children:"Calling examples:"}),"\n",(0,t.jsxs)(n.p,{children:["Use ",(0,t.jsx)(n.code,{children:".tNodes."})," operator to get the total number of nodes for ",(0,t.jsx)(n.code,{children:"DOF_"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"ans=.tNodes. obj\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This returns the size of ",(0,t.jsx)(n.code,{children:"DOF_"})," object. If you want to get the total nodes in a given degree of freedom then we can use the following."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"ans=obj .tNodes. idof\n"})}),"\n",(0,t.jsx)(n.p,{children:"If you want the size of several degrees of freedom then use"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"ans=obj .tNodes. [idof1, idof2, idof3]\n"})}),"\n",(0,t.jsx)(n.p,{children:"If you want to know the size of a physical variable, then use the name of physical variable"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:'ans= obj .tNodes. "U"\n'})}),"\n",(0,t.jsx)(n.h2,{id:"interface-1",children:"Interface 1"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE PURE FUNCTION Size(obj) RESULT(ans)\n    CLASS(DOF_), INTENT(IN) :: obj\n    INTEGER(I4B) :: ans\n  END FUNCTION Size\nEND INTERFACE\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["This method is also available as the generic method called ",(0,t.jsx)(n.code,{children:"SIZE"})]})}),"\n",(0,t.jsx)(n.h2,{id:"interface-2",children:"Interface 2"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE PURE FUNCTION Size(obj, idof) RESULT(ans)\n    CLASS(DOF_), INTENT(IN) :: obj\n    INTEGER(I4B), INTENT(IN) :: idof\n    INTEGER(I4B) :: ans\n  END FUNCTION Size\nEND INTERFACE\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["This function returns the total number of nodes for a given degree of freedom number\n",(0,t.jsx)(n.code,{children:"idof"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"idof"})," should be lesser than the total degree of freedom."]}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["This method is also available as the generic method called ",(0,t.jsx)(n.code,{children:"SIZE"})]})}),"\n",(0,t.jsx)(n.h2,{id:"interface-3",children:"Interface 3"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE PURE FUNCTION Size(obj, varname) RESULT(ans)\n    CLASS(DOF_), INTENT(IN) :: obj\n    CHARACTER(*), INTENT(IN) :: varname\n    INTEGER(I4B) :: ans\n  END FUNCTION Size\nEND INTERFACE\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"This function returns the total number of nodes for a physical variable."}),"\n",(0,t.jsx)(n.li,{children:"The physical variable is given by its name."}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["This method is also available as the generic method called ",(0,t.jsx)(n.code,{children:"SIZE"})]})}),"\n",(0,t.jsx)(n.h2,{id:"interface-4",children:"Interface 4"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE PURE FUNCTION Size(obj, idof) RESULT(ans)\n    CLASS(DOF_), INTENT(IN) :: obj\n    INTEGER(I4B), INTENT(IN) :: idof(:)\n    INTEGER(I4B) :: ans\n  END FUNCTION Size\nEND INTERFACE\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"This function returns the total number of nodes in multiple degrees of freedom number."}),"\n",(0,t.jsxs)(n.li,{children:["All degrees of freedom specified in ",(0,t.jsx)(n.code,{children:"idof"})," should be lesser than the total degree of freedom."]}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["This method is also available as the generic method called ",(0,t.jsx)(n.code,{children:"SIZE"})]})}),"\n",(0,t.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n","\n",(0,t.jsx)(a,{})]})}function N(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(f,{...e})}):f(e)}},54213:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>a});var o=s(36672);const t={},i=o.createContext(t);function r(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);