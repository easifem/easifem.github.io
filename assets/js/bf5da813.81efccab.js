"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[35611],{82286:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"TriangleInterface/quality","title":"Quality meshing: angle and size constraints","description":"Triangle generates a conforming constrained Delaunay triangulation whenever the -q, -a, or -u, switch is used. These switches set constraints on angles and triangle sizes in the mesh.","source":"@site/docs/docs-api/TriangleInterface/quality.md","sourceDirName":"TriangleInterface","slug":"/TriangleInterface/quality","permalink":"/docs-api/TriangleInterface/quality","draft":false,"unlisted":false,"editUrl":"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/TriangleInterface/quality.md","tags":[],"version":"current","lastUpdatedAt":1724304782000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"poly (PSLG)","permalink":"/docs-api/TriangleInterface/poly"},"next":{"title":"Refinement","permalink":"/docs-api/TriangleInterface/refinement"}}');var a=t(23420),i=t(54213);const r={},l="Quality meshing: angle and size constraints",o={},c=[];function h(e){const n={admonition:"admonition",h1:"h1",header:"header",img:"img",p:"p",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"quality-meshing-angle-and-size-constraints",children:"Quality meshing: angle and size constraints"})}),"\n",(0,a.jsx)(n.p,{children:"Triangle generates a conforming constrained Delaunay triangulation whenever the -q, -a, or -u, switch is used. These switches set constraints on angles and triangle sizes in the mesh."}),"\n",(0,a.jsx)(n.p,{children:"The -q switch sets a minimum angle constraint. A number may follow the `q'; otherwise, the default minimum angle is twenty degrees. For the vertex set spiral.node below, consider the differences among"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.img,{src:"https://www.cs.cmu.edu/~quake/spiral.node.gif",alt:"spiral node"}),"\n",(0,a.jsx)(n.img,{src:"https://www.cs.cmu.edu/~quake/spiral.ele.gif",alt:"spiral ele"}),"\n",(0,a.jsx)(n.img,{src:"https://www.cs.cmu.edu/~quake/spiral.ele.20.gif",alt:"spiral ele"}),"\n",(0,a.jsx)(n.img,{src:"https://www.cs.cmu.edu/~quake/spiral.ele.32.5.gif",alt:"spiral ele"})]}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsx)(n.p,{children:"Note that the angle constraint does not apply to small angles between input segments; such angles cannot be removed."})}),"\n",(0,a.jsx)(n.p,{children:"The -a switch sets a maximum area constraint. There are three ways to use this switch. The first way is to specify a maximum area on the command line. The next example is a mesh in which no triangle has area greater than 0.2."}),"\n",(0,a.jsx)(n.p,{children:"The second manner of using the -a switch is applicable only when creating a new mesh from a PSLG. The file describing the PSLG itself contains area constraints, each of which is applied to a segment-bounded region; see the .poly file format for details. For an example, look at the last seven lines of la.poly, which describes a vertical cross section of soil in the Los Angeles Basin. Below is an illustration of the results when the -a switch is or is not invoked."}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.img,{src:"https://www.cs.cmu.edu/~quake/la.poly.gif",alt:"la poly"}),"\n",(0,a.jsx)(n.img,{src:"https://www.cs.cmu.edu/~quake/la.ele.gif",alt:"la ele"}),"\n",(0,a.jsx)(n.img,{src:"https://www.cs.cmu.edu/~quake/la.ele.a.gif",alt:"la ele"})]})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},54213:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var s=t(36672);const a={},i=s.createContext(a);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);