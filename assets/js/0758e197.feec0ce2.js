"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[49753],{48760:(e,l,a)=>{a.r(l),a.d(l,{assets:()=>s,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"VectorFieldLis/test_VectorField","title":"test_VectorField","description":"","source":"@site/docs/docs-api/VectorFieldLis/test_VectorField.md","sourceDirName":"VectorFieldLis","slug":"/VectorFieldLis/test_VectorField","permalink":"/docs-api/VectorFieldLis/test_VectorField","draft":false,"unlisted":false,"editUrl":"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/VectorFieldLis/test_VectorField.md","tags":[],"version":"current","lastUpdatedAt":1724304782000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Size","permalink":"/docs-api/VectorFieldLis/Size"},"next":{"title":"VectorMeshField","permalink":"/docs-api/VectorMeshField/"}}');var t=a(23420),o=a(54213);const i={},r=void 0,s={},c=[];function m(e){const l={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,t.jsx)(l.pre,{children:(0,t.jsx)(l.code,{className:"language-fortran",children:'! This program is a part of EASIFEM library\n! Copyright (C) 2020-2021  Vikas Sharma, Ph.D\n!\n! This program is free software: you can redistribute it and/or modify\n! it under the terms of the GNU General Public License as published by\n! the Free Software Foundation, either version 3 of the License, or\n! (at your option) any later version.\n!\n! This program is distributed in the hope that it will be useful,\n! but WITHOUT ANY WARRANTY; without even the implied warranty of\n! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n! GNU General Public License for more details.\n!\n! You should have received a copy of the GNU General Public License\n! along with this program.  If not, see <https: //www.gnu.org/licenses/>\n!\n\nmodule test_m\nuse easifemBase\nuse easifemClasses\nimplicit none\ncontains\n\n!----------------------------------------------------------------------------\n!\n!----------------------------------------------------------------------------\n\nsubroutine test0\n  type( domain_ ) :: dom\n  type( VectorField_ ) :: obj\n  type( ScalarField_ ) :: scalarObj\n  type( HDF5File_ ) :: meshfile\n  type( ParameterList_ ) :: param\n  integer( i4b ) :: ierr\n  real( DFP ), ALLOCATABLE :: real1( : ), real2( :, : )\n  real( DFP ) :: real0\n\n  call display( "Testing get methods for normal data" )\n  CALL FPL_INIT()\n  CALL param%initiate()\n  ierr = param%set(key="name", value="U" )\n  ierr = param%set(key="fieldType", value=FIELD_TYPE_NORMAL)\n  ierr = param%set(key="spaceCompo", value=3)\n  call meshfile%initiate( filename="./mesh.h5", mode="READ" )\n  call meshfile%open()\n  call dom%initiate( meshfile )\n\n  call obj%initiate( param, dom )\n  call obj%set( globalNode = 10, value= 10.0_DFP*[1,2,3] )\n  call obj%get( globalNode = 10, value = real1 )\n  call display( real1, "test-1: get() = " )\n\n  call obj%set( value= -10.0_DFP, spaceCompo=1 )\n  call obj%set( value= -20.0_DFP, spaceCompo=2 )\n  call obj%set( value= -30.0_DFP, spaceCompo=3 )\n  call obj%get( value = real1, spaceCompo = 1 )\n  call display( real1, "test-2: get() = " )\n\n  call reallocate( real2, 3, 4 )\n  real2( :, 1 ) = [1,2,3]\n  real2( :, 2 ) = [4,5,6]\n  real2( :, 3 ) = [7,8,9]\n  real2( :, 4 ) = [10,11,12]\n  call obj%set( value=real2, globalNode=[3,5,7,9])\n  call obj%get( value=real2, globalNode=[3,5,7,9])\n  call display( real2, "test-3: get() = ")\n\n  call obj%get( value=real1, globalNode=[3,5,7,9], spaceCompo=1)\n  call display( real1, "test-4: get() = ")\n\n  call obj%get( value=real0, globalNode=5, spaceCompo=1)\n  call display( real0, "test-5: get() = ")\n  call obj%get( value=real0, globalNode=5, spaceCompo=2)\n  call display( real0, "test-5: get() = ")\n  call obj%get( value=real0, globalNode=5, spaceCompo=3)\n  call display( real0, "test-5: get() = ")\n\n  call obj%Deallocate()\n  call dom%Deallocate()\n  call meshfile%close()\n  call meshfile%Deallocate()\n  call param%Deallocate()\n  call FPL_FINALIZE()\nend subroutine\n\n!----------------------------------------------------------------------------\n!\n!----------------------------------------------------------------------------\n\nsubroutine test3\n  type( domain_ ) :: dom\n  type( VectorField_ ) :: obj\n  type( ScalarField_ ) :: scalarObj\n  type( HDF5File_ ) :: meshfile\n  type( ParameterList_ ) :: param\n  integer( i4b ) :: ierr\n  real( DFP ), ALLOCATABLE :: real1( : ), real2( :, : )\n  call display( "Testing set methods for normal data" )\n  CALL FPL_INIT()\n  CALL param%initiate()\n  ierr = param%set(key="name", value="U" )\n  ierr = param%set(key="fieldType", value=FIELD_TYPE_NORMAL)\n  ierr = param%set(key="spaceCompo", value=3)\n  call meshfile%initiate( filename="./mesh.h5", mode="READ" )\n  call meshfile%open()\n  call dom%initiate( meshfile )\n  call obj%initiate( param, dom )\n\n\n  call obj%set( globalNode = 10, value= 100.0_DFP*[1,1,1] )\n  call obj%display( "test-1: vector field = ")\n\n  call obj%set( value= 10.0_DFP*[1,1,1] )\n  call obj%display( "test-2: vector field = ")\n\n  call obj%set( value= -10.0_DFP, spaceCompo=1 )\n  call obj%set( value= -20.0_DFP, spaceCompo=2 )\n  call obj%set( value= -30.0_DFP, spaceCompo=3 )\n  call obj%display( "test-3: vector field = ")\n\n  call reallocate( real2, 3, dom%getTotalNodes() )\n  real2 = 1.0_DFP\n  call obj%set( value=real2 )\n  call obj%display( "test-4: vector field = " )\n\n  call reallocate( real1, dom%getTotalNodes() )\n  real1 = 3.0_DFP\n  call obj%set( value=real1, spaceCompo=3 )\n  call obj%display( "test-5: vector field = " )\n\n  call scalarObj%initiate( param, dom )\n  call scalarObj%set( value = 2.0_DFP )\n  call obj%set( value=scalarObj, spaceCompo=2 )\n  call obj%display( "test-6: vector field = ")\n  ierr = param%set( key="fieldType", value=FIELD_TYPE_CONSTANT)\n  call scalarObj%Deallocate()\n  call scalarObj%initiate( param, dom )\n  call scalarObj%set( value=10.0_DFP )\n  call obj%set( value=scalarObj, spaceCompo=1 )\n  call obj%display( "test-7: vector field = ")\n\n\n  ierr = param%set( key="fieldType", value=FIELD_TYPE_NORMAL)\n\n  call reallocate( real2, 3, 4)\n  real2( :, 1 ) = -1.0; real2( :, 2 ) = -2.0; real2( :, 3 ) = -3.0\n  real2( :, 4 ) = -4.0\n  call obj%set( value=real2, globalNode=[1,3,5,7] )\n  call obj%display( "test-8: vector field = ")\n\n  call reallocate( real1, 4)\n  real1 = [1,10,100,1000]\n  call obj%set( value=real1, globalNode=[1,3,5,7], spaceCompo=1 )\n  call obj%display( "test-9: vector field = " )\n\n  call obj%Deallocate()\n  call dom%Deallocate()\n  call meshfile%close()\n  call meshfile%Deallocate()\n  call param%Deallocate()\n  call FPL_FINALIZE()\nend subroutine\n\n!----------------------------------------------------------------------------\n!\n!----------------------------------------------------------------------------\n\nsubroutine test2\n  type( domain_ ) :: dom\n  type( VectorField_ ) :: obj\n  type( HDF5File_ ) :: meshfile\n  type( ParameterList_ ) :: param\n  integer( i4b ) :: ierr\n\n  call display( "Testing Initiate and Deallocate for normal data" )\n  CALL FPL_INIT()\n  CALL param%initiate()\n  ierr = param%set(key="name", value="U" )\n  ierr = param%set(key="fieldType", value=FIELD_TYPE_NORMAL)\n  ierr = param%set(key="spaceCompo", value=3)\n  call meshfile%initiate( filename="./mesh.h5", mode="READ" )\n  call meshfile%open()\n  call dom%initiate( meshfile )\n  call obj%initiate( param, dom )\n  call obj%display( "vector field = ")\n  call obj%Deallocate()\n  call dom%Deallocate()\n  call meshfile%close()\n  call meshfile%Deallocate()\n  call param%Deallocate()\n  call FPL_FINALIZE()\nend subroutine\n\n!----------------------------------------------------------------------------\n!\n!----------------------------------------------------------------------------\n\nsubroutine test1\n  type( domain_ ) :: dom\n  type( VectorField_ ) :: obj\n  type( HDF5File_ ) :: meshfile\n  type( ParameterList_ ) :: param\n  integer( i4b ) :: ierr\n\n  call display( "Testing Initiate and Deallocate for constant data" )\n  CALL FPL_INIT()\n  CALL param%initiate()\n  ierr = param%set(key="name", value="U" )\n  ierr = param%set(key="fieldType", value=FIELD_TYPE_CONSTANT)\n  ierr = param%set(key="spaceCompo", value=3)\n  call meshfile%initiate( filename="./mesh.h5", mode="READ" )\n  call meshfile%open()\n  call dom%initiate( meshfile )\n\n  call obj%initiate( param, dom )\n  call obj%display( "vector field = ")\n  call obj%Deallocate()\n\n  call dom%Deallocate()\n  call meshfile%close()\n  call meshfile%Deallocate()\n  call param%Deallocate()\n  call FPL_FINALIZE()\nend subroutine\n\n!----------------------------------------------------------------------------\n!\n!----------------------------------------------------------------------------\n\nsubroutine exportMesh\n  TYPE( MSH_ ) :: mshFile\n  CALL mshFile%initiate( file="./mesh.msh", NSD=2 )\n  CALL mshFile%ExportMesh( file="./mesh.h5" )\n  CALL mshFile%Deallocate()\nend\n\n\nend module test_m\n\n!----------------------------------------------------------------------------\n!\n!----------------------------------------------------------------------------\n\nprogram main\nuse test_m\nimplicit none\n! call exportMesh\ncall test0\nend program main\n'})})}function p(e={}){const{wrapper:l}={...(0,o.R)(),...e.components};return l?(0,t.jsx)(l,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}},54213:(e,l,a)=>{a.d(l,{R:()=>i,x:()=>r});var n=a(36672);const t={},o=n.createContext(t);function i(e){const l=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(l):{...l,...e}}),[l,e])}function r(e){let l;return l=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),n.createElement(o.Provider,{value:l},e.children)}}}]);