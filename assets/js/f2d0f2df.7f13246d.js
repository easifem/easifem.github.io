"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[25497],{90021:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"IntVector/IntVector_","title":"Structure","description":"Intvector contains a dynamic array of rank 1 of integer type. It can be used to construct ragged vectors. Or vector or arrays of intvector.","source":"@site/docs/docs-api/IntVector/IntVector_.md","sourceDirName":"IntVector","slug":"/IntVector/IntVector_","permalink":"/docs-api/IntVector/IntVector_","draft":false,"unlisted":false,"editUrl":"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/IntVector/IntVector_.md","tags":[],"version":"current","lastUpdatedAt":1724304782000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"IntVector","permalink":"/docs-api/IntVector/"},"next":{"title":"IntVector example 1","permalink":"/docs-api/IntVector/IntVector_test_1"}}');var o=n(23420),r=n(54213);const s={},c="Structure",a={},l=[{value:"tDimension",id:"tdimension",level:3},{value:"Val",id:"val",level:3},{value:"Constructor methods",id:"constructor-methods",level:2},{value:"Shape",id:"shape",level:3},{value:"Size",id:"size",level:3},{value:"GetTotalDimension",id:"gettotaldimension",level:3},{value:"Allocate",id:"allocate",level:3},{value:"Deallocate",id:"deallocate",level:3},{value:"Initiate",id:"initiate",level:3},{value:"IntVector",id:"intvector",level:3},{value:"IntVector_Pointer",id:"intvector_pointer",level:3},{value:"isAllocated",id:"isallocated",level:3},{value:"isInitiated",id:"isinitiated",level:3},{value:"IO methods",id:"io-methods",level:2},{value:"Display",id:"display",level:3},{value:"Get methods",id:"get-methods",level:2},{value:"Operator(.in.)",id:"operatorin",level:3},{value:"Get",id:"get",level:3},{value:"Set methods",id:"set-methods",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"structure",children:"Structure"})}),"\n",(0,o.jsx)(t.p,{children:"Intvector contains a dynamic array of rank 1 of integer type. It can be used to construct ragged vectors. Or vector or arrays of intvector."}),"\n",(0,o.jsx)(t.p,{children:"The structure of [[IntVector_]] is given below."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-fortran",children:"TYPE :: IntVector_\n  INTEGER(I4B) :: tDimension = 1_I4B\n  INTEGER(I4B), ALLOCATABLE :: Val(:)\nEND TYPE IntVector_\n"})}),"\n",(0,o.jsx)(t.h3,{id:"tdimension",children:"tDimension"}),"\n",(0,o.jsx)(t.p,{children:"Total dimension of the array, it is always one"}),"\n",(0,o.jsx)(t.h3,{id:"val",children:"Val"}),"\n",(0,o.jsx)(t.p,{children:"Vectors of integers."}),"\n",(0,o.jsx)(t.h2,{id:"constructor-methods",children:"Constructor methods"}),"\n",(0,o.jsx)(t.h3,{id:"shape",children:"Shape"}),"\n",(0,o.jsx)(t.p,{children:'!!! note ""\nReturn the shape of IntVector in a fortran vector of size 1. See example [[IntVector_test_1]]'}),"\n",(0,o.jsx)(t.h3,{id:"size",children:"Size"}),"\n",(0,o.jsx)(t.p,{children:'!!! note ""\nReturn the size of IntVector, If the instance of intvector is not allocated then it will return 0. See example [[IntVector_test_1]]'}),"\n",(0,o.jsx)(t.h3,{id:"gettotaldimension",children:"GetTotalDimension"}),"\n",(0,o.jsx)(t.p,{children:'!!! note ""\nReturn a integer scalar, total dimension of IntVector. It will return 1.\nSee example [[IntVector_test_1]]'}),"\n",(0,o.jsx)(t.h3,{id:"allocate",children:"Allocate"}),"\n",(0,o.jsx)(t.p,{children:'!!! note ""\nAllocate the size of IntVector. See example [[IntVector_test_1]]'}),"\n",(0,o.jsx)(t.h3,{id:"deallocate",children:"Deallocate"}),"\n",(0,o.jsx)(t.p,{children:'!!! note ""\nDeallocate the data stored inside IntVector. See example [[IntVector_test_1]]'}),"\n",(0,o.jsx)(t.h3,{id:"initiate",children:"Initiate"}),"\n",(0,o.jsx)(t.p,{children:'!!! note ""\nInitiate an instance of IntVector. See example [[IntVector_test_2]] for more details.'}),"\n",(0,o.jsx)(t.h3,{id:"intvector",children:"IntVector"}),"\n",(0,o.jsx)(t.p,{children:'!!! note ""\nThis is a function, which returns an intance of [[IntVector_]]. You can find more details about this function here \ud83d\udc49\u26a1  [[IntVector_test_3]].'}),"\n",(0,o.jsx)(t.h3,{id:"intvector_pointer",children:"IntVector_Pointer"}),"\n",(0,o.jsx)(t.p,{children:'!!! note ""\nThis is a function, which returns a pointer to a newly created instance of [[IntVector_]]. You can find more details about this function here \ud83d\udc49\u26a1  [[IntVector_test_4]].'}),"\n",(0,o.jsx)(t.h3,{id:"isallocated",children:"isAllocated"}),"\n",(0,o.jsx)(t.p,{children:'!!! note ""\nThis function returns true if the instance of intvector is allocated. See [[IntVector_test_1]] for usage.'}),"\n",(0,o.jsx)(t.h3,{id:"isinitiated",children:"isInitiated"}),"\n",(0,o.jsx)(t.p,{children:'!!! note ""\nAlias to isAllocated method.'}),"\n",(0,o.jsx)(t.h2,{id:"io-methods",children:"IO methods"}),"\n",(0,o.jsx)(t.h3,{id:"display",children:"Display"}),"\n",(0,o.jsx)(t.p,{children:'!!! note ""\nThis function displays the content of intvector. You can find more details about this function here \ud83d\udc49\u26a1  [[IntVector_test_1]] [[IntVector_test_2]] [[IntVector_test_3]] [[IntVector_test_4]].'}),"\n",(0,o.jsx)(t.h2,{id:"get-methods",children:"Get methods"}),"\n",(0,o.jsx)(t.h3,{id:"operatorin",children:"Operator(.in.)"}),"\n",(0,o.jsx)(t.p,{children:'!!! note ""\nThe operator (.in.) returns true if a integer set is subset of another integer set. You can find the usage and more details about this method \ud83d\udc49\ud83d\udd25 [[IntVector_test_5]]'}),"\n",(0,o.jsx)(t.h3,{id:"get",children:"Get"}),"\n",(0,o.jsx)(t.p,{children:'!!! note ""\nReturns the values stored inside intvector. See, \ud83d\udc49\ud83d\udd25 [[IntVector_test_6]] for more details. This routine has all the features of fortran for native integer vectors.'}),"\n",(0,o.jsx)(t.h2,{id:"set-methods",children:"Set methods"})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},54213:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>c});var i=n(36672);const o={},r=i.createContext(o);function s(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);