"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[72837],{97682:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>c,default:()=>l,frontMatter:()=>i,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"IterationData/IterationData_","title":"Structure","description":"","source":"@site/docs/docs-api/IterationData/IterationData_.md","sourceDirName":"IterationData","slug":"/IterationData/IterationData_","permalink":"/docs-api/IterationData/IterationData_","draft":false,"unlisted":false,"editUrl":"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/IterationData/IterationData_.md","tags":[],"version":"current","lastUpdatedAt":1724304782000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"IterationData","permalink":"/docs-api/IterationData/"},"next":{"title":"Jacobi1D","permalink":"/docs-api/Jacobi1D/"}}');var o=t(23420),a=t(54213);const i={},c="Structure",s={},u=[];function d(e){const n={code:"code",h1:"h1",header:"header",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"structure",children:"Structure"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:"TYPE :: IterationData_\n  INTEGER(I4B) :: maxIter = 100\n    !! Maximum number of iterations allowed\n  INTEGER(I4B) :: iterationNumber = 1\n    !! Iteration number\n  REAL(DFP) :: residualError0 = 0.0\n    !! Initial Residual error\n  REAL(DFP) :: residualError = 0.0\n    !! Current residual error\n  REAL(DFP) :: residualTolerance = 1.0E-5\n    !! Tolerance for checking convergence in residual\n  REAL(DFP) :: solutionError0 = 0.0\n    !! Initial solution error\n  REAL(DFP) :: solutionError = 0.0\n    !! Current solution error\n  REAL(DFP) :: solutionTolerance = 1.0E-5\n    !! Tolerance for checking convergence in solution\n  INTEGER(I4B) :: convergenceType = RelativeConvergence\n    !! Type of convergence\n  INTEGER(I4B) :: convergenceIn = ConvergenceInRes\n    !! Check Convergence in solution and/ or residual\n  INTEGER(I4B) :: normType = NormL2\n    !! Error norm type\n  LOGICAL(LGT) :: converged = .FALSE.\n    !! Status of convergence\n  REAL(DFP) :: timeAtStart = 0.0\n    !! Starting time\n  REAL(DFP) :: timeAtEnd = 0.0\n    !! Present time\n  REAL(DFP), ALLOCATABLE :: convergenceData(:, :)\n    !! history of convergence data\n    !! each column corresponding to a iteration\n  TYPE(String), ALLOCATABLE :: header(:)\n    !! header for convergenceData\nEND TYPE IterationData_\n"})})]})}function l(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},54213:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>c});var r=t(36672);const o={},a=r.createContext(o);function i(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);