"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[11453],{4902:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>i,default:()=>a,frontMatter:()=>T,metadata:()=>N,toc:()=>E});const N=JSON.parse('{"id":"CSRMatrix/SuperluLinSolve","title":"SuperluLinSolve","description":"Interface","source":"@site/docs/docs-api/CSRMatrix/SuperluLinSolve.md","sourceDirName":"CSRMatrix","slug":"/CSRMatrix/SuperluLinSolve","permalink":"/docs-api/CSRMatrix/SuperluLinSolve","draft":false,"unlisted":false,"editUrl":"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/CSRMatrix/SuperluLinSolve.md","tags":[],"version":"current","lastUpdatedAt":1724304782000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Size","permalink":"/docs-api/CSRMatrix/Size"},"next":{"title":"SymLargestEigenval","permalink":"/docs-api/CSRMatrix/SymLargestEigenval"}}');var o=t(23420),I=t(54213);const T={},i="SuperluLinSolve",r={},E=[{value:"Interface",id:"interface",level:2}];function s(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",pre:"pre",...(0,I.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"superlulinsolve",children:"SuperluLinSolve"})}),"\n",(0,o.jsx)(n.h2,{id:"interface",children:"Interface"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE LinSolve1(X, A, B, isTranspose, isFactored, &\n    & ColPerm, Equil, IterRefine, PivotGrowth, DiagPivotThresh, &\n    & ConditionNumber, SymmetricMode, PrintStat, info)\n    REAL(DFP), INTENT(INOUT) :: X(:)\n    !! Solution\n    TYPE(CSRMatrix_), INTENT(INOUT) :: A\n    !! CSRMatrix\n    REAL(DFP), INTENT(IN) :: B(:)\n    !! RHS, it will not be modified, we will make a copy of it\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: isTranspose\n    !! Should we solve `A*X=B` or `transpose(A)*X=B`\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: isFactored\n    !! is A already factored\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: ColPerm\n    !! Colperm_t%NATURAL\n    !! Colperm_t%MMD_ATA\n    !! Colperm_t%MMD_AT_PLUS_A\n    !! Colperm_t%COLAMD\n    !! Colperm_t%MY_PERMC\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: Equil\n    !! yes_no_t%YES\n    !! yes_no_t%NO\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: IterRefine\n    !! IterRefine_t%NO\n    !! IterRefine_t%SLU_SINGLE\n    !! IterRefine_t%SLU_DOUBLE\n    !! IterRefine_t%SLU_EXTRA\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: PivotGrowth\n    !! yes_no_t%YES\n    !! yes_no_t%NO\n    REAL(DFP), OPTIONAL, INTENT(IN) :: DiagPivotThresh\n    !! between 0 and 1\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: ConditionNumber\n    !! yes_no_t%YES\n    !! yes_no_t%NO\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: SymmetricMode\n    !! yes_no_t%YES\n    !! yes_no_t%NO\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: PrintStat\n    !! yes_no_t%YES\n    !! yes_no_t%NO\n    INTEGER(I4B), OPTIONAL, INTENT(OUT) :: info\n    !! if info equal  to zero then success, else failure\n  END SUBROUTINE LinSolve1\nEND INTERFACE\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE LinSolve2(X, A, B, isTranspose, isFactored, &\n    & ColPerm, Equil, IterRefine, PivotGrowth, DiagPivotThresh, &\n    & ConditionNumber, SymmetricMode, PrintStat, info)\n    REAL(DFP), INTENT(INOUT) :: X(:, :)\n    !! Solution\n    TYPE(CSRMatrix_), INTENT(INOUT) :: A\n    !! CSRMatrix\n    REAL(DFP), INTENT(IN) :: B(:, :)\n    !! RHS, it will not be modified, we will make a copy of it\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: isTranspose\n    !! Should we solve `A*X=B` or `transpose(A)*X=B`\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: isFactored\n    !! is A already factored\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: ColPerm\n    !! Colperm_t%NATURAL\n    !! Colperm_t%MMD_ATA\n    !! Colperm_t%MMD_AT_PLUS_A\n    !! Colperm_t%COLAMD\n    !! Colperm_t%MY_PERMC\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: Equil\n    !! yes_no_t%YES\n    !! yes_no_t%NO\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: IterRefine\n    !! IterRefine_t%NO\n    !! IterRefine_t%SLU_SINGLE\n    !! IterRefine_t%SLU_DOUBLE\n    !! IterRefine_t%SLU_EXTRA\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: PivotGrowth\n    !! yes_no_t%YES\n    !! yes_no_t%NO\n    REAL(DFP), OPTIONAL, INTENT(IN) :: DiagPivotThresh\n    !! between 0 and 1\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: ConditionNumber\n    !! yes_no_t%YES\n    !! yes_no_t%NO\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: SymmetricMode\n    !! yes_no_t%YES\n    !! yes_no_t%NO\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: PrintStat\n    !! yes_no_t%YES\n    !! yes_no_t%NO\n    INTEGER(I4B), OPTIONAL, INTENT(OUT) :: info\n    !! if info equal  to zero then success, else failure\n  END SUBROUTINE LinSolve2\nEND INTERFACE\n\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE LinSolve3(A, B, isTranspose, isFactored, &\n    & ColPerm, Equil, IterRefine, PivotGrowth, DiagPivotThresh, &\n    & ConditionNumber, SymmetricMode, PrintStat, info)\n    TYPE(CSRMatrix_), INTENT(INOUT) :: A\n    !! CSRMatrix\n    REAL(DFP), INTENT(INOUT) :: B(:)\n    !! RHS, it will not be modified, we will make a copy of it\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: isTranspose\n    !! Should we solve `A*X=B` or `transpose(A)*X=B`\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: isFactored\n    !! is A already factored\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: ColPerm\n    !! Colperm_t%NATURAL\n    !! Colperm_t%MMD_ATA\n    !! Colperm_t%MMD_AT_PLUS_A\n    !! Colperm_t%COLAMD\n    !! Colperm_t%MY_PERMC\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: Equil\n    !! yes_no_t%YES\n    !! yes_no_t%NO\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: IterRefine\n    !! IterRefine_t%NO\n    !! IterRefine_t%SLU_SINGLE\n    !! IterRefine_t%SLU_DOUBLE\n    !! IterRefine_t%SLU_EXTRA\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: PivotGrowth\n    !! yes_no_t%YES\n    !! yes_no_t%NO\n    REAL(DFP), OPTIONAL, INTENT(IN) :: DiagPivotThresh\n    !! between 0 and 1\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: ConditionNumber\n    !! yes_no_t%YES\n    !! yes_no_t%NO\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: SymmetricMode\n    !! yes_no_t%YES\n    !! yes_no_t%NO\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: PrintStat\n    !! yes_no_t%YES\n    !! yes_no_t%NO\n    INTEGER(I4B), OPTIONAL, INTENT(OUT) :: info\n    !! if info equal  to zero then success, else failure\n  END SUBROUTINE LinSolve3\nEND INTERFACE\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE LinSolve4(A, B, isTranspose, isFactored, &\n    & ColPerm, Equil, IterRefine, PivotGrowth, DiagPivotThresh, &\n    & ConditionNumber, SymmetricMode, PrintStat, info)\n    TYPE(CSRMatrix_), INTENT(INOUT) :: A\n    !! CSRMatrix\n    REAL(DFP), INTENT(INOUT) :: B(:, :)\n    !! RHS, it will be modified on return, solution is in B\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: isTranspose\n    !! Should we solve `A*X=B` or `transpose(A)*X=B`\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: isFactored\n    !! is A already factored\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: ColPerm\n    !! Colperm_t%NATURAL\n    !! Colperm_t%MMD_ATA\n    !! Colperm_t%MMD_AT_PLUS_A\n    !! Colperm_t%COLAMD\n    !! Colperm_t%MY_PERMC\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: Equil\n    !! yes_no_t%YES\n    !! yes_no_t%NO\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: IterRefine\n    !! IterRefine_t%NO\n    !! IterRefine_t%SLU_SINGLE\n    !! IterRefine_t%SLU_DOUBLE\n    !! IterRefine_t%SLU_EXTRA\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: PivotGrowth\n    !! yes_no_t%YES\n    !! yes_no_t%NO\n    REAL(DFP), OPTIONAL, INTENT(IN) :: DiagPivotThresh\n    !! between 0 and 1\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: ConditionNumber\n    !! yes_no_t%YES\n    !! yes_no_t%NO\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: SymmetricMode\n    !! yes_no_t%YES\n    !! yes_no_t%NO\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: PrintStat\n    !! yes_no_t%YES\n    !! yes_no_t%NO\n    INTEGER(I4B), OPTIONAL, INTENT(OUT) :: info\n    !! if info equal  to zero then success, else failure\n  END SUBROUTINE LinSolve4\nEND INTERFACE\n\n"})})]})}function a(e={}){const{wrapper:n}={...(0,I.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(s,{...e})}):s(e)}},54213:(e,n,t)=>{t.d(n,{R:()=>T,x:()=>i});var N=t(36672);const o={},I=N.createContext(o);function T(e){const n=N.useContext(I);return N.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:T(e.components),N.createElement(I.Provider,{value:n},e.children)}}}]);