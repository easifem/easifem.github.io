"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[17590],{26569:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>I,frontMatter:()=>T,metadata:()=>r,toc:()=>s});const r=JSON.parse('{"id":"LinSolverLis/GetLinSolverParam","title":"GetLinSolverParam","description":"Get the essential parameters required to construct an instance of linear solver.","source":"@site/docs/docs-api/LinSolverLis/GetLinSolverParam.md","sourceDirName":"LinSolverLis","slug":"/LinSolverLis/GetLinSolverParam","permalink":"/docs-api/LinSolverLis/GetLinSolverParam","draft":false,"unlisted":false,"editUrl":"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/LinSolverLis/GetLinSolverParam.md","tags":[],"version":"current","lastUpdatedAt":1724304782000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"GetLinSolverNameFromCode","permalink":"/docs-api/LinSolverLis/GetLinSolverNameFromCode"},"next":{"title":"GetParam","permalink":"/docs-api/LinSolverLis/GetParam"}}');var a=i(23420),t=i(54213);const T={},o="GetLinSolverParam",l={},s=[{value:"Interface",id:"interface",level:2}];function N(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"getlinsolverparam",children:"GetLinSolverParam"})}),"\n",(0,a.jsx)(n.p,{children:"Get the essential parameters required to construct an instance of linear solver."}),"\n",(0,a.jsx)(n.h2,{id:"interface",children:"Interface"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE getLinSolverParam( &\n    & param, &\n    & solverName, &\n    & preconditionOption, &\n    & convergenceIn, &\n    & convergenceType, &\n    & maxIter, &\n    & relativeToRHS, &\n    & KrylovSubspaceSize, &\n    & rtol, &\n    & atol,  &\n    & scale, &\n    & initx_zeros, &\n    & bicgstab_ell, &\n    & sor_omega, &\n    & p_name, &\n    & p_ilu_lfil, &\n    & p_ilu_mbloc, &\n    & p_ilu_droptol, &\n    & p_ilu_permtol, &\n    & p_ilu_alpha, &\n    & p_ilu_fill, &\n    & p_ssor_omega, &\n    & p_hybrid_i, &\n    & p_hybrid_maxiter, &\n    & p_hybrid_tol, &\n    & p_hybrid_omega, &\n    & p_hybrid_ell, &\n    & p_hybrid_restart, &\n    & p_is_alpha, &\n    & p_is_m, &\n    & p_sainv_drop, &\n    & p_saamg_unsym, &\n    & p_saamg_theta, &\n    & p_iluc_drop, &\n    & p_iluc_rate, &\n    & p_adds, &\n    & p_adds_iter &\n    & )\n    TYPE(ParameterList_), INTENT(IN) :: param\n    INTEGER(I4B), OPTIONAL, INTENT(OUT) :: solverName\n    INTEGER(I4B), OPTIONAL, INTENT(OUT) :: preconditionOption\n    INTEGER(I4B), OPTIONAL, INTENT(OUT) :: convergenceIn\n    INTEGER(I4B), OPTIONAL, INTENT(OUT) :: convergenceType\n    INTEGER(I4B), OPTIONAL, INTENT(OUT) :: maxIter\n    LOGICAL(LGT), OPTIONAL, INTENT(OUT) :: relativeToRHS\n    INTEGER(I4B), OPTIONAL, INTENT(OUT) :: KrylovSubspaceSize\n    REAL(DFP), OPTIONAL, INTENT(OUT) :: rtol\n    REAL(DFP), OPTIONAL, INTENT(OUT) :: atol\n    INTEGER(I4B), OPTIONAL, INTENT(OUT) :: scale\n    !! LIS, Solver digonal scaling\n    !! scale_none: No scaling\n    !! scale_jacobi: jacobi scaling inv(D)Ax = inv(D)b\n    !! scale_symm_diag: sqrt(inv(D)) A sqrt(inv(D)) x = sqrt(inv(D))b\n    LOGICAL(LGT), OPTIONAL, INTENT(OUT) :: initx_zeros\n    !! if True, then we set sol=0.0 as initial guess.\n    INTEGER(I4B), OPTIONAL, INTENT(OUT) :: bicgstab_ell\n    !! Needed for solver BiCGSTABL\n    REAL(DFP), OPTIONAL, INTENT(OUT) :: sor_omega\n    !! The relaxation coefficient\n    INTEGER(I4B), OPTIONAL, INTENT(OUT) :: p_name\n    !! Name of preconditioner\n    INTEGER(I4B), OPTIONAL, INTENT(OUT) :: p_ilu_lfil\n    !! Sparsekit, ilu\n    INTEGER(I4B), OPTIONAL, INTENT(OUT) :: p_ilu_mbloc\n    !! Sparsekit, ilu\n    REAL(DFP), OPTIONAL, INTENT(OUT) :: p_ilu_droptol\n    !! Sparsekit, ilu\n    REAL(DFP), OPTIONAL, INTENT(OUT) :: p_ilu_permtol\n    !! Sparsekit, ilu\n    REAL(DFP), OPTIONAL, INTENT(OUT) :: p_ilu_alpha\n    !! Sparsekit, ilu, alpha\n    INTEGER(I4B), OPTIONAL, INTENT(OUT) :: p_ilu_fill\n    !! ILU, fill-in\n    REAL(DFP), OPTIONAL, INTENT(OUT) :: p_ssor_omega\n    !! The relaxation coefficient omega in (0.0, 2.0)\n    INTEGER(I4B), OPTIONAL, INTENT(OUT) :: p_hybrid_i\n    !! Hybrid, the linear solver, for example, SSOR, GMRES,\n    INTEGER(I4B), OPTIONAL, INTENT(OUT) :: p_hybrid_maxiter\n    !! Hybrid, maximum number of iterations\n    REAL(DFP), OPTIONAL, INTENT(OUT) :: p_hybrid_tol\n    !! Hybrid, convergence tolerance\n    REAL(DFP), OPTIONAL, INTENT(OUT) :: p_hybrid_omega\n    !! Hybrid, The relaxation coefficient omega of the SOR\n    !! omega should be in (0.0, 2.0)\n    INTEGER(I4B), OPTIONAL, INTENT(OUT) :: p_hybrid_ell\n    !!Hybrid, The degree l of the BiCGSTAB(l)\n    INTEGER(I4B), OPTIONAL, INTENT(OUT) :: p_hybrid_restart\n    !! Hybrid, The restart value of GMRES and Orthomin\n    REAL(DFP), OPTIONAL, INTENT(OUT) :: p_is_alpha\n    !! I+S, The parameter alpha of $I + \\alpha {S}^{m}$\n    INTEGER(I4B), OPTIONAL, INTENT(OUT) :: p_is_m\n    !! I+S, The parameter m of $I + \\alpha {S}^{m}$\n    REAL(DFP), OPTIONAL, INTENT(OUT) :: p_sainv_drop\n    !! SA-AMG, The drop criteria\n    LOGICAL(LGT), OPTIONAL, INTENT(OUT) :: p_saamg_unsym\n    !! SA-AMG, Select the unsymmetric version\n    !! The matrix structure must be symmetric\n    REAL(DFP), OPTIONAL, INTENT(OUT) :: p_saamg_theta\n    !! SA-AMG, The drop criteria\n    REAL(DFP), OPTIONAL, INTENT(OUT) :: p_iluc_drop\n    !! Crout ILU, default is 0.05, The drop criteria\n    REAL(DFP), OPTIONAL, INTENT(OUT) :: p_iluc_rate\n    !! Crout ILU, The ratio of the maximum fill-in\n    LOGICAL(LGT), OPTIONAL, INTENT(OUT) :: p_adds\n    !! ilut Additive Schwarz, default is true\n    INTEGER(I4B), OPTIONAL, INTENT(OUT) :: p_adds_iter\n    !! default value is 1\n    !! ILUT Additive Schwarz number of iteration\n  END SUBROUTINE getLinSolverParam\nEND INTERFACE\n"})})]})}function I(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(N,{...e})}):N(e)}},54213:(e,n,i)=>{i.d(n,{R:()=>T,x:()=>o});var r=i(36672);const a={},t=r.createContext(a);function T(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:T(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);