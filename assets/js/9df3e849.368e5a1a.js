"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[24207],{60780:(e,i,a)=>{a.r(i),a.d(i,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"programming-fem/solidMaterial/index","title":"Solid material","description":"SolidMaterial is a subclass of AbstractMaterial class. Its purpose is to handle solid materials, like steel, brass, copper, among others.","source":"@site/docs/guides/programming-fem/solidMaterial/index.mdx","sourceDirName":"programming-fem/solidMaterial","slug":"/programming-fem/solidMaterial/","permalink":"/guides/programming-fem/solidMaterial/","draft":false,"unlisted":false,"editUrl":"https://github.com/easifem/easifem.github.io/tree/main/docs/guides/programming-fem/solidMaterial/index.mdx","tags":[{"inline":true,"label":"materials","permalink":"/guides/tags/materials"},{"inline":true,"label":"materialModels","permalink":"/guides/tags/material-models"},{"inline":true,"label":"models","permalink":"/guides/tags/models"},{"inline":true,"label":"solidMechanics","permalink":"/guides/tags/solid-mechanics"},{"inline":true,"label":"easifemClasses","permalink":"/guides/tags/easifem-classes"}],"version":"current","lastUpdatedAt":1724304782000,"sidebarPosition":1,"frontMatter":{"sidebar_position":1,"date":"2023-08-05T00:00:00.000Z","update":"2023-08-05T00:00:00.000Z","status":"stable","docs":"done","extpkgs":"none","category":["SolidMechanics","Models","MaterialModels"],"tags":["materials","materialModels","models","solidMechanics","easifemClasses"]},"sidebar":"tutorialSidebar","previous":{"title":"Import from toml-file (spatial user function)","permalink":"/guides/programming-fem/dirichletBC/dbc_toml_userfunc_space"},"next":{"title":"Import from HDF5 file","permalink":"/guides/programming-fem/solidMaterial/import_hdf_1"}}');var n=a(23420),r=a(54213);const s={sidebar_position:1,date:new Date("2023-08-05T00:00:00.000Z"),update:new Date("2023-08-05T00:00:00.000Z"),status:"stable",docs:"done",extpkgs:"none",category:["SolidMechanics","Models","MaterialModels"],tags:["materials","materialModels","models","solidMechanics","easifemClasses"]},l="Solid material",o={},d=[{value:"How to initiate?",id:"how-to-initiate",level:2},{value:"Step 1: Set parameter",id:"step-1-set-parameter",level:3},{value:"Step 2: Initiate",id:"step-2-initiate",level:3},{value:"Step 3: Add material",id:"step-3-add-material",level:3},{value:"Step 4: Get material pointer",id:"step-4-get-material-pointer",level:3},{value:"Further reading",id:"further-reading",level:2}];function c(e){const i={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",...(0,r.R)(),...e.components},{Card:a,CardSection:t,Details:s}=i;return a||p("Card",!0),t||p("CardSection",!0),s||p("Details",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i.header,{children:(0,n.jsx)(i.h1,{id:"solid-material",children:"Solid material"})}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs-api/SolidMaterial/SolidMaterial_",children:"SolidMaterial_"})," is a subclass of ",(0,n.jsx)(i.a,{href:"/docs-api/AbstractMaterial",children:"AbstractMaterial"})," class. Its purpose is to handle solid materials, like steel, brass, copper, among others."]}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.code,{children:"SolidMaterial_"})," also encapsulates the abstract model for defining the material constitutive behavior. The structure of ",(0,n.jsx)(i.code,{children:"SolidMaterial_"})," is given below."]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-fortran",children:"TYPE, EXTENDS(AbstractMaterial_) :: SolidMaterial_\n  CLASS(AbstractSolidMechanicsModel_), POINTER :: stressStrainModel => NULL()\n    !! Pointer to stress strain material behavior of solids\nEND TYPE\n"})}),"\n",(0,n.jsx)(i.h2,{id:"how-to-initiate",children:"How to initiate?"}),"\n",(0,n.jsxs)(i.p,{children:["There are three ways to initiate an instance of ",(0,n.jsx)(i.code,{children:"SolidMaterial_"}),". In this section we will cover constructing the instance by using ",(0,n.jsx)(i.a,{href:"/docs-api/SolidMaterial/Initiate",children:"Initiate"}),"."]}),"\n",(0,n.jsxs)(i.admonition,{type:"info",children:[(0,n.jsx)(i.mdxAdmonitionTitle,{}),(0,n.jsxs)(i.p,{children:["We will consider the following example to learn about the ",(0,n.jsx)(i.code,{children:"SolidMaterial_"}),"."]})]}),"\n",(0,n.jsxs)(s,{children:[(0,n.jsx)("summary",{children:"Click here to see example"}),(0,n.jsx)("div",{children:(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-fortran",children:'PROGRAM main\nUSE easifemBase\nUSE easifemClasses\nUSE easifemMaterials\n\nCHARACTER(*), PARAMETER :: myName = "main"\nCHARACTER(*), PARAMETER :: modName = "main"\nTYPE(SolidMaterial_) :: obj\nTYPE(ParameterList_) :: param\nCLASS(UserFunction_), POINTER :: func => NULL()\nINTEGER(I4B) :: ierr\n\nCALL FPL_Init(); CALL param%Initiate()\n\n! Set parameter\nCALL SetSolidMaterialParam(param=param, name="SolidMaterial")\n\n! Initiate an instance of `SolidMaterial_`\nCALL obj%Initiate(param)\n\n! Adding a material property\nCALL obj%AddMaterial("massDensity")\n\nfunc => obj%GetMaterialPointer("massDensity")\n\nIF (.NOT. ASSOCIATED(func)) THEN\n  CALL e%RaiseError(modName//\'::\'//myName//\' - \'// &\n    & \'[error 1]\')\nEND IF\n\nCALL SetUserFunctionParam(param=param, name="massDensity",  &\n  & returnType=Scalar, argType=Constant)\nCALL func%Initiate(param)\nCALL func%Set(scalarValue=1.0_DFP)\n\nCALL obj%Display(msg="SolidMaterial")\n\nCALL FPL_FINALIZE; CALL param%DEALLOCATE()\nEND PROGRAM main\n'})})})]}),"\n",(0,n.jsxs)(i.p,{children:["To initiate an instance of ",(0,n.jsx)(i.code,{children:"SolidMaterial_"})," follow the steps give below."]}),"\n",(0,n.jsx)(i.h3,{id:"step-1-set-parameter",children:"Step 1: Set parameter"}),"\n",(0,n.jsxs)(i.p,{children:["First, we call ",(0,n.jsx)(i.a,{href:"/docs-api/SolidMaterial/SetSolidMaterialParam",children:"SetSolidMaterialParam"})," method."]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-fortran",children:'CALL SetSolidMaterialParam(param=param, name="SolidMaterial")\n'})}),"\n",(0,n.jsx)(i.h3,{id:"step-2-initiate",children:"Step 2: Initiate"}),"\n",(0,n.jsxs)(i.p,{children:["Then, we will call ",(0,n.jsx)(i.a,{href:"/docs-api/SolidMaterial/Initiate",children:"Initiate"})," method."]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-fortran",children:"CALL obj%Initiate(param)\n"})}),"\n",(0,n.jsx)(i.h3,{id:"step-3-add-material",children:"Step 3: Add material"}),"\n",(0,n.jsxs)(i.p,{children:["After we have initiated an instance of ",(0,n.jsx)(i.code,{children:"AbstractMaterial_"}),", we will ADD material to it by calling ",(0,n.jsx)(i.a,{href:"/docs-api/AbstractMaterial/AddMaterial",children:"AddMaterial"}),"."]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-fortran",children:'CALL obj%AddMaterial("massDensity")\n'})}),"\n",(0,n.jsx)(i.admonition,{type:"note",children:(0,n.jsxs)(i.p,{children:["This routine just register a material name and allocate space for defining materal as a ",(0,n.jsx)(i.code,{children:"UserFunction"}),"."]})}),"\n",(0,n.jsx)(i.h3,{id:"step-4-get-material-pointer",children:"Step 4: Get material pointer"}),"\n",(0,n.jsxs)(i.p,{children:["After registering a material, we can get the pointer of ",(0,n.jsx)(i.a,{href:"/docs-api/UserFunction",children:"UserFunction"})," by calling the method ",(0,n.jsx)(i.a,{href:"/docs-api/AbstractMaterial/GetMaterialPointer",children:"GetMaterialPointer"}),".\nWe should initiate this pointer as described in the documentation of ",(0,n.jsx)(i.a,{href:"/docs-api/UserFunction",children:"UserFunction"}),"."]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-fortran",children:"! Adding a material property\nCALL obj%AddMaterial(\"massDensity\")\n\nfunc => obj%GetMaterialPointer(\"massDensity\")\n\nIF (.NOT. ASSOCIATED(func)) THEN\n  CALL e%RaiseError(modName//'::'//myName//' - '// &\n    & '[error 1]')\nEND IF\n\nCALL SetUserFunctionParam(param=param, name=\"massDensity\",  &\n  & returnType=Scalar, argType=Constant)\nCALL func%Initiate(param)\nCALL func%Set(scalarValue=1.0_DFP)\n"})}),"\n",(0,n.jsx)(i.h2,{id:"further-reading",children:"Further reading"}),"\n",(0,n.jsxs)(i.p,{children:["There is more to ",(0,n.jsx)(i.code,{children:"SolidMaterial_"}),", and you can learn about them from following pages."]}),"\n",(0,n.jsxs)(t,{id:"quadraturePoints",children:[(0,n.jsx)(a,{title:"Construct by HDF5 file",to:"/guides/programming-fem/solidMaterial/import_hdf_1",description:"This example shows how to initiate SolidMaterial by using reading data from HDF5 file."}),(0,n.jsx)(a,{title:"Construct by toml file",to:"/guides/programming-fem/solidMaterial/import_toml_1",description:"This example shows how to initiate SolidMaterial by using toml-file."}),(0,n.jsx)(a,{title:"Toml file constant value",to:"/guides/programming-fem/dirichletBC/dbc_toml_const",description:"This example shows how to initiate DBC by reading a toml-file. Constant boundary condition, $u=\\alpha$"}),(0,n.jsx)(a,{title:"Toml file constant function",to:"/guides/programming-fem/dirichletBC/dbc_toml_userfunc_const",description:"This example shows how to initiate DBC by reading a toml-file. Constant boundary condition, $u=\\alpha$"}),(0,n.jsx)(a,{title:"Toml file space function",to:"/guides/programming-fem/dirichletBC/dbc_toml_userfunc_const",description:"This example shows how to initiate DBC by reading a toml-file. Space boundary condition, $u=g(x,y,z)$"})]})]})}function m(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}function p(e,i){throw new Error("Expected "+(i?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},54213:(e,i,a)=>{a.d(i,{R:()=>s,x:()=>l});var t=a(36672);const n={},r=t.createContext(n);function s(e){const i=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function l(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:s(e.components),t.createElement(r.Provider,{value:i},e.children)}}}]);