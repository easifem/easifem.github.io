"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[16847,51437],{74993:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>d,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"AbstractBC/Get","title":"Get","description":"Get node number and nodal value from the boundary condition.","source":"@site/docs/docs-api/AbstractBC/Get.md","sourceDirName":"AbstractBC","slug":"/AbstractBC/Get","permalink":"/docs-api/AbstractBC/Get","draft":false,"unlisted":false,"editUrl":"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/AbstractBC/Get.md","tags":[],"version":"current","lastUpdatedAt":1724304782000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Export","permalink":"/docs-api/AbstractBC/Export"},"next":{"title":"GetDOFNo","permalink":"/docs-api/AbstractBC/GetDOFNo"}}');var o=t(23420),s=t(54213);const d={},r="Get",c={},a=[{value:"Interface",id:"interface",level:2}];function l(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"get",children:"Get"})}),"\n",(0,o.jsx)(n.p,{children:"Get node number and nodal value from the boundary condition."}),"\n",(0,o.jsx)("span",{class:"badge badge--secondary",children:" @GetMethods "}),"\n",(0,o.jsx)(n.h2,{id:"interface",children:"Interface"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE Get(obj, nodeNum, nodalValue, times)\n    CLASS(AbstractBC_), INTENT(IN) :: obj\n    INTEGER(I4B), ALLOCATABLE, INTENT(INOUT) :: nodeNum(:)\n    REAL(DFP), OPTIONAL, ALLOCATABLE, INTENT(INOUT) :: nodalValue(:, :)\n    REAL(DFP), OPTIONAL, INTENT(IN) :: times(:)\n  END SUBROUTINE Get\nEND INTERFACE\n"})}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsx)(n.mdxAdmonitionTitle,{children:(0,o.jsx)(n.code,{children:"nodeNum"})})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"nodeNum(:)"})," is the global node number of boundary nodes where boundary conditions is prescribed"]}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsx)(n.mdxAdmonitionTitle,{children:(0,o.jsx)(n.code,{children:"nodalValue"})})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["If present ",(0,o.jsx)(n.code,{children:"nodalValue(:,:)"})," then nodal values of prescribed boundary conditions are returned."]}),"\n",(0,o.jsxs)(n.li,{children:["The row size of ",(0,o.jsx)(n.code,{children:"nodalValue"})," is always equal to the size of ",(0,o.jsx)(n.code,{children:"nodeNum"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:["The number of columns in ",(0,o.jsx)(n.code,{children:"nodalValue"})," depends upon the ",(0,o.jsx)(n.code,{children:"nodalValueType"}),". If ",(0,o.jsx)(n.code,{children:"nodalValueType"})," is ",(0,o.jsx)(n.code,{children:"Time"})," or ",(0,o.jsx)(n.code,{children:"SpaceTime"}),", then the column size is equal to the size of ",(0,o.jsx)(n.code,{children:"times"})," (if present) otherwise 1."]}),"\n"]}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsxs)(n.p,{children:["If ",(0,o.jsx)(n.code,{children:"IsUserFunction"})," is true then ",(0,o.jsx)(n.code,{children:"func"})," is used for computing the nodal values at the boundary."]})}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsxs)(n.p,{children:["If ",(0,o.jsx)(n.code,{children:"IsUserFunction"})," is false then ",(0,o.jsx)(n.code,{children:"nodalValue"})," should be allocated. In this case, this function checks the ",(0,o.jsx)(n.code,{children:"nodalValueType"}),", and accordingly returns ",(0,o.jsx)(n.code,{children:"nodalValue"})," ."]})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},51053:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"DirichletBC/Get","title":"Get","description":"","source":"@site/docs/docs-api/DirichletBC/Get.md","sourceDirName":"DirichletBC","slug":"/DirichletBC/Get","permalink":"/docs-api/DirichletBC/Get","draft":false,"unlisted":false,"editUrl":"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/DirichletBC/Get.md","tags":[],"version":"current","lastUpdatedAt":1724304782000,"sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"Set","permalink":"/docs-api/DirichletBC/Set"},"next":{"title":"AddDirichletBC","permalink":"/docs-api/DirichletBC/AddDirichletBC"}}');var o=t(23420),s=t(54213),d=t(74993);const r={sidebar_position:6},c="Get",a={},l=[...d.toc];function h(e){const n={h1:"h1",header:"header",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"get",children:"Get"})}),"\n","\n",(0,o.jsx)(d.default,{})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},54213:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>r});var i=t(36672);const o={},s=i.createContext(o);function d(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:d(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);