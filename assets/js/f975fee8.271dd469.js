"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[41624],{75162:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>E,frontMatter:()=>l,metadata:()=>t,toc:()=>T});const t=JSON.parse('{"id":"SteadyStokes111/SetSteadyStokes111Param","title":"SetSteadyStokes111Param","description":"Set SteadyStokes111 parameter.","source":"@site/docs/docs-api/SteadyStokes111/SetSteadyStokes111Param.md","sourceDirName":"SteadyStokes111","slug":"/SteadyStokes111/SetSteadyStokes111Param","permalink":"/docs-api/SteadyStokes111/SetSteadyStokes111Param","draft":false,"unlisted":false,"editUrl":"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/SteadyStokes111/SetSteadyStokes111Param.md","tags":[],"version":"current","lastUpdatedAt":1724304782000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Set","permalink":"/docs-api/SteadyStokes111/Set"},"next":{"title":"Solve","permalink":"/docs-api/SteadyStokes111/Solve"}}');var a=r(23420),o=r(54213);function s(e){const n={code:"code",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"This example shows how to set the parameters for steady stokes flow kernel"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-fortran",children:'PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  USE easifemMaterials\n  USE easifemKernels\n  USE SteadyStokes111_Class\n  IMPLICIT NONE\n  TYPE( SteadyStokes111_ ) :: obj\n  TYPE( ParameterList_ ) :: param\n  TYPE( HDF5File_ ) :: domainFile\n  TYPE( Domain_ ) :: dom\n  INTEGER( I4B ), PARAMETER :: refPressureNode=2\n  REAL( DFP ), PARAMETER :: refPressure = 0.0_DFP\n  INTEGER( I4B ), PARAMETER :: tDirichletBCForVelocity = 2\n  INTEGER( I4B ), PARAMETER :: tDirichletBCForPressure = 0\n  INTEGER( I4B ), PARAMETER :: tFluidMaterials= 1\n  INTEGER( I4B ), PARAMETER :: stabParamOption= 1\n  LOGICAL( LGT ), PARAMETER :: isSubscalePressure = .FALSE.\n  LOGICAL( LGT ), PARAMETER :: isBoundarySubscale = .FALSE.\n  REAL( DFP ), PARAMETER :: gravity(3)=[0.0, -9.8, 0.0]\n  LOGICAL( LGT ), PARAMETER :: isConservativeForm = .TRUE.\n  CHARACTER( * ), PARAMETER :: engine="NATIVE_SERIAL"\n  CHARACTER( * ), PARAMETER :: domainFileName="./mesh.h5"\n  INTEGER( I4B ), PARAMETER :: CoordinateSystem = KERNEL_CARTESIAN\n  INTEGER( I4B ), PARAMETER :: maxIter = 100\n  REAL( DFP ), PARAMETER :: rtoleranceForPressure = 1.0E-6\n  REAL( DFP ), PARAMETER :: rtoleranceForVelocity = 1.0E-6\n  REAL( DFP ), PARAMETER :: atoleranceForPressure = 1.0E-6\n  REAL( DFP ), PARAMETER :: atoleranceForVelocity = 1.0E-6\n  REAL( DFP ), PARAMETER :: toleranceForSteadyState = 1.0E-6\n  CHARACTER(*), PARAMETER :: baseInterpolationForSpace="LagrangeInterpolation"\n  CHARACTER(*), PARAMETER :: baseContinuityForSpace="H1"\n  CHARACTER(*), PARAMETER :: quadratureTypeForSpace="GaussLegendre"\n'})}),"\n",(0,a.jsx)(n.p,{children:"Set parameters for kernel."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-fortran",children:"  CALL FPL_INIT(); CALL param%Initiate()\n"})}),"\n",(0,a.jsx)(n.p,{children:"Set parameters for the kernel."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-fortran",children:"  CALL SetSteadyStokes111Param( &\n    & param=param, &\n    & isConservativeForm=isConservativeForm, &\n    & gravity = gravity, &\n    & isSubscalePressure = isSubscalePressure, &\n    & isBoundarySubscale = isBoundarySubscale, &\n    & stabParamOption = stabParamOption, &\n    & domainFile = domainFileName, &\n    & engine=engine, &\n    & CoordinateSystem=KERNEL_CARTESIAN, &\n    & maxIter =maxIter, &\n    & rtoleranceForPressure = rtoleranceForPressure, &\n    & rtoleranceForVelocity = rtoleranceForVelocity, &\n    & atoleranceForPressure = atoleranceForPressure, &\n    & atoleranceForVelocity = atoleranceForVelocity, &\n    & toleranceForSteadyState = toleranceForSteadyState, &\n    & tFluidMaterials=tFluidMaterials, &\n    & tDirichletBCForPressure=tDirichletBCForPressure, &\n    & tDirichletBCForVelocity=tDirichletBCForVelocity, &\n    & baseInterpolationForSpace=baseInterpolationForSpace, &\n    & baseContinuityForSpace=baseContinuityForSpace, &\n    & quadratureTypeForSpace=quadratureTypeForSpace, &\n    & refPressureNode=refPressureNode, &\n    & refPressure=refPressure &\n    & )\n"})}),"\n",(0,a.jsx)(n.p,{children:"Let us print the parameter list."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-fortran",children:"    CALL param%Print()\n"})}),"\n",(0,a.jsx)(n.p,{children:"Let us check the essential parameter."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-fortran",children:"  CALL obj%CheckEssentialParam( param )\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\n  END PROGRAM main\n"})})]})}function i(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(s,{...e})}):s(e)}const l={},c="SetSteadyStokes111Param",d={},T=[{value:"Interface",id:"interface",level:2},{value:"Example",id:"example",level:2}];function u(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"setsteadystokes111param",children:"SetSteadyStokes111Param"})}),"\n",(0,a.jsx)(n.p,{children:"Set SteadyStokes111 parameter."}),"\n",(0,a.jsx)(n.h2,{id:"interface",children:"Interface"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-fortran",children:'INTERFACE\n  MODULE SUBROUTINE setSteadyStokes111Param( &\n    & param, &\n    & isConservativeForm, &\n    & gravity, &\n    & isSubscalePressure, &\n    & isBoundarySubscale, &\n    & stabParamOption, &\n    & domainFile,&\n    & materialInterfaces, &\n    & engine, &\n    & coordinateSystem, &\n    & nnt, &\n    & dt, &\n    & startTime, &\n    & endTime, &\n    & maxIter, &\n    & rtoleranceForPressure, &\n    & rtoleranceForVelocity, &\n    & atoleranceForPressure, &\n    & atoleranceForVelocity, &\n    & toleranceForSteadyState, &\n    & tFluidMaterials, &\n    & tDirichletBCForPressure, &\n    & tDirichletBCForVelocity, &\n    & baseInterpolationForSpace, &\n    & baseContinuityForSpace, &\n    & quadratureTypeForSpace, &\n    & baseInterpolationForTime, &\n    & baseContinuityForTime, &\n    & quadratureTypeForTime, &\n    & postProcessOpt, &\n    & refPressureNode, &\n    & refPressure)\n    !!\n    TYPE(ParameterList_), INTENT(INOUT) :: param\n    CHARACTER(*), INTENT(IN) :: domainFile\n    !! Mesh/domain file for pressure and velocity\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: isConservativeForm\n    !! True if we are using conservative form\n    REAL(DFP), OPTIONAL, INTENT(IN) :: gravity(3)\n    !! Acceleration due to gravity, default is zero\n    !! If gravity is zero then we use piezometric pressure\n    !! If gravity is nonzero then we use thermodynamic pressure\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: isSubscalePressure\n    !! If true then we consider the subscale pressure in stabilization\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: isBoundarySubscale\n    !! If true then we consider the subscale at interelement boundary\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: stabParamOption\n    !! option for stabilization parameter, default is 1\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: materialInterfaces(:)\n    !! porous-fluid-interface\n    CHARACTER(*), OPTIONAL, INTENT(IN) :: engine\n    !! engine, default value is "NATIVE_SERIAL"\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: coordinateSystem\n    !! coordinate system, default value is KERNEL_CARTESIAN\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: nnt\n    !! number of nodes in time, it has no effect, so ignore it\n    REAL(DFP), OPTIONAL, INTENT(IN) :: dt\n    !! Initial time increment, has no effect\n    REAL(DFP), OPTIONAL, INTENT(IN) :: startTime\n    !! Starting time t0 of simulation, default=0.0, has no effect\n    REAL(DFP), OPTIONAL, INTENT(IN) :: endTime\n    !! Final time of simulation, default 0.0, has no effect\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: maxIter\n    !! maximum iteration for Newton-method\n    REAL(DFP), OPTIONAL, INTENT(IN) :: rtoleranceForPressure\n    !! toleranceForPressure\n    REAL(DFP), OPTIONAL, INTENT(IN) :: rtoleranceForVelocity\n    !! toleranceForVelocity\n    REAL(DFP), OPTIONAL, INTENT(IN) :: atoleranceForPressure\n    !! toleranceForPressure\n    REAL(DFP), OPTIONAL, INTENT(IN) :: atoleranceForVelocity\n    !! toleranceForVelocity\n    REAL(DFP), OPTIONAL, INTENT(IN) :: toleranceForSteadyState\n    !!\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: tFluidMaterials\n    !! Total number of fluid materials; default=1\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: tDirichletBCForPressure\n    !! Total number of Dirichlet domain for pressure, default=0\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: tDirichletBCForVelocity\n    !! Total number of Dirichlet domain for velocity, default=0\n    CHARACTER(*), OPTIONAL, INTENT(IN) :: baseInterpolationForSpace\n    !! Type of interpolation function used for basis function\n    CHARACTER(*), OPTIONAL, INTENT(IN) :: baseContinuityForSpace\n    !! Type of continuity of basis function for pressure\n    CHARACTER(*), OPTIONAL, INTENT(IN) :: quadratureTypeForSpace\n    !! Type of quadrature for pressure field\n    CHARACTER(*), OPTIONAL, INTENT(IN) :: baseInterpolationForTime\n    !! Type of interpolation function used for Time\n    CHARACTER(*), OPTIONAL, INTENT(IN) :: baseContinuityForTime\n    !! Type of continuity of basis function for Time\n    CHARACTER(*), OPTIONAL, INTENT(IN) :: quadratureTypeForTime\n    !! Type of quadrature for time\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: postProcessOpt\n    !! postProcessing option\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: refPressureNode\n    REAL(DFP), OPTIONAL, INTENT(IN) :: refPressure\n  END SUBROUTINE setSteadyStokes111Param\nEND INTERFACE\n'})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"isConservativeForm"}),": optional, default is .TRUE."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"gravity"}),": optional, default is 0"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"isSubscalePressure"}),", optional, default is ",(0,a.jsx)(n.code,{children:".FALSE."})]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"isBoundarySubscale"}),", optional, default is ",(0,a.jsx)(n.code,{children:".FALSE."})]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"stabParamOption"}),", optional, default is 1"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"domainFile"}),": domainFile for pressure and velocity"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"materialInterfaces"}),", optional, default is 0"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"engine"}),", optional, default is NATIVE_SERIAL"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"CoordinateSystem"}),", optional, default is KERNEL_CARTESIAN"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"nnt"}),", optional, default 1"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"dt"}),", optional, default 0"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"startTime"}),", optional, default is 0"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"endTime"}),", optional, default is 0"]}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"maxIter"})}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"rtoleranceForPressure"}),": optional, default is 1.0E-6"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"rtoleranceForVelocity"}),": optional, default is 1.0E-6"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"atoleranceForPressure"}),": optional, default is 1.0E-6"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"atoleranceForVelocity"}),": optional, default is 1.0E-6"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"toleranceForSteadyState"}),": optional, default is 1.0E-6"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"tFluidMaterials"}),", optional, default is 1"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"tDirichletBCForPressure"}),", optional, default is 0"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"tDirichletBCForVelocity"}),", optional, default is 0"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"baseInterpolationForSpace"}),", optional"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"baseContinuityForSpace"}),", optional"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"quadratureTypeForSpace"}),", optional"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"example",children:"Example"}),"\n","\n",(0,a.jsx)(i,{})]})}function E(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},54213:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>i});var t=r(36672);const a={},o=t.createContext(a);function s(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);