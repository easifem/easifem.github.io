"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[25864],{10759:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"BlockMatrixField/ILUSolve","title":"ILUSolve","description":"ILU Solver","source":"@site/docs/docs-api/BlockMatrixField/ILUSolve.md","sourceDirName":"BlockMatrixField","slug":"/BlockMatrixField/ILUSolve","permalink":"/docs-api/BlockMatrixField/ILUSolve","draft":false,"unlisted":false,"editUrl":"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/BlockMatrixField/ILUSolve.md","tags":[],"version":"current","lastUpdatedAt":1724304782000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"GetRow","permalink":"/docs-api/BlockMatrixField/GetRow"},"next":{"title":"Import","permalink":"/docs-api/BlockMatrixField/Import"}}');var o=t(23420),r=t(54213);const i={},a="ILUSolve",l={},c=[{value:"Interface",id:"interface",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"ilusolve",children:"ILUSolve"})}),"\n",(0,o.jsx)(n.p,{children:"ILU Solver"}),"\n",(0,o.jsx)(n.h2,{id:"interface",children:"Interface"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:"! If transp is absent or it is false then:\n! This routine solves (LU) sol = rhs\n! sol and rhs are fortran real vector\n! The LU decomposition is stored inside the BlockMatrixField_.\n! Note that sol should be allocated by the user, and size of sol should be\n! same as the size of rhs\n!\n! If transp is present and it is true then:\n!\n! If transp is present and it is true then this subroutine solves\n! (LU)^T sol = rhs\n\nINTERFACE\n  SUBROUTINE ILUSOLVE1(obj, sol, rhs, isTranspose)\n    CLASS(BlockMatrixField_), INTENT(INOUT) :: obj\n    REAL(DFP), INTENT(INOUT) :: sol(:)\n    !! Output vector y=Ax\n    REAL(DFP), INTENT(IN) :: rhs(:)\n    !! Input vector in y=Ax\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: isTranspose\n  END SUBROUTINE ILUSOLVE1\nEND INTERFACE\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:"! If transp is not present or it is false then:\n! This routine solves (LU) sol = rhs\n! sol and rhs are [[AbstractNodeField_]]\n! The LU decomposition is stored inside the BlockMatrixField_.\n!\n! If transp is present and it is true then this subroutine solves\n! (LU)^T sol = rhs\n\n\nINTERFACE\n  SUBROUTINE ILUSOLVE2(obj, sol, rhs, isTranspose)\n    CLASS(BlockMatrixField_), INTENT(INOUT) :: obj\n    CLASS(AbstractNodeField_), INTENT(INOUT) :: sol\n    !! Output vector\n    CLASS(AbstractNodeField_), INTENT(IN) :: rhs\n    !! Input vector, rhs\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: isTranspose\n  END SUBROUTINE ILUSOLVE2\nEND INTERFACE\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},54213:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var s=t(36672);const o={},r=s.createContext(o);function i(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);