"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[9022],{28734:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>N,contentTitle:()=>T,default:()=>l,frontMatter:()=>o,metadata:()=>a,toc:()=>I});const a=JSON.parse('{"id":"AbstractKernel/SetAbstractKernelParam","title":"SetAbstractKernelParam","description":"Set the kernel parameters in parameter list.","source":"@site/docs/docs-api/AbstractKernel/SetAbstractKernelParam.md","sourceDirName":"AbstractKernel","slug":"/AbstractKernel/SetAbstractKernelParam","permalink":"/docs-api/AbstractKernel/SetAbstractKernelParam","draft":false,"unlisted":false,"editUrl":"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/AbstractKernel/SetAbstractKernelParam.md","tags":[],"version":"current","lastUpdatedAt":1735776220000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Set","permalink":"/docs-api/AbstractKernel/Set"},"next":{"title":"SetCurrentTimeStep","permalink":"/docs-api/AbstractKernel/SetCurrentTimeStep"}}');var r=t(23420),i=t(54213);const o={},T="SetAbstractKernelParam",N={},I=[{value:"Interface",id:"interface",level:2}];function s(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"setabstractkernelparam",children:"SetAbstractKernelParam"})}),"\n",(0,r.jsx)(n.p,{children:"Set the kernel parameters in parameter list."}),"\n",(0,r.jsx)(n.h2,{id:"interface",children:"Interface"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE SetAbstractKernelParam( &\n    param, prefix, problemType, name, engine, coordinateSystem, &\n    domainFile, isCommonDomain, gravity, timeDependency, &\n    maxIter, nsd, nnt, tdof, dt, startTime, endTime, &\n    currentTime, currentTimeStep, totalTimeStep, &\n    baseInterpolationForSpace, baseContinuityForSpace, &\n    quadratureTypeForSpace, ipTypeForSpace, &\n    basisTypeForSpace, alphaForSpace, &\n    betaForSpace, lambdaForSpace, baseInterpolationForTime, &\n    baseContinuityForTime, quadratureTypeForTime, ipTypeForTime, &\n    basisTypeForTime, alphaForTime, betaForTime, lambdaForTime, &\n    postProcessOpt, tDirichletBC, tNeumannBC, tWeakDirichletBC, &\n    isSymNitsche, nitscheAlpha, &\n    materialInterfaces, isConstantMatProp, tSolidMaterials, &\n    algorithm, vtkOutputFreq, isIsotropic, isIncompressible, &\n    rtoleranceForDisplacement, atoleranceForDisplacement, &\n    rtoleranceForVelocity, atoleranceForVelocity, &\n    rtoleranceForResidual, atoleranceForResidual, tanmatProp, &\n    tanmatName, tOverlappedMaterials, outputPath, tPointSource, showTime, &\n    unifyVTK, createPVD)\n\n    CHARACTER(*), INTENT(IN) :: prefix\n    !! prefix\n    INTEGER(I4B), INTENT(IN) :: problemType\n    !! Kernel problem type. Problem can be scalar, vector, or multi-physics\n    !! TypeKernelProblemOpt%Scalar\n    !! TypeKernelProblemOpt%Vector\n    !! TypeKernelProblemOpt%MultiPhysics\n    CHARACTER(*), OPTIONAL, INTENT(IN) :: baseContinuityForSpace\n    !! Type of continuity of basis function for Space\n    !! NOTE: Default value is given in AbstractKernelParam\n    CHARACTER(*), OPTIONAL, INTENT(IN) :: baseContinuityForTime\n    !! Type of continuity of basis function for Time\n    !! NOTE: Default value is given in AbstractKernelParam\n    CHARACTER(*), OPTIONAL, INTENT(IN) :: baseInterpolationForSpace\n    !! Type of interpolation function used for Space\n    !! NOTE: Default value is given in AbstractKernelParam\n    CHARACTER(*), OPTIONAL, INTENT(IN) :: baseInterpolationForTime\n    !! Type of interpolation function used for Time\n    !! NOTE: Default value is given in AbstractKernelParam\n    CHARACTER(*), OPTIONAL, INTENT(IN) :: domainFile\n    !! Name of domain file\n    CHARACTER(*), OPTIONAL, INTENT(IN) :: engine\n    !! Engine of the kernel\n    CHARACTER(*), OPTIONAL, INTENT(IN) :: name\n    !! name of the kernel\n    CHARACTER(*), OPTIONAL, INTENT(IN) :: quadratureTypeForSpace\n    !! Type of quadrature for space\n    !! NOTE: Default value is given in AbstractKernelParam\n    CHARACTER(*), OPTIONAL, INTENT(IN) :: quadratureTypeForTime\n    !! Type of quadrature for time\n    !! NOTE: Default value is given in AbstractKernelParam\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: coordinateSystem\n    !! Coordinate system of the problem\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: currentTimeStep\n    !! Current time step\n    !! INFO: Default value is 1\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: maxIter\n    !! maximum number of iterations, required for iterData\n    !! NOTE: Default value is given in AbstractKernelParam\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: nnt\n    !! Number of nodes in time element.\n    !! NOTE: This variable is needed only in the case of\n    !! space-time finite element method.\n    !! The default value is 1\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: nsd\n    !! Spatial dimension of the problem\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: postProcessOpt\n    !! Postprocessing option for writeData\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: tdof\n    !! Total degree of freedom per nodes in the problem\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: timeDependency\n    !! time dependency of the problem\n    !! INFO: Default value is KERNEL_STEADY\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: totalTimeStep\n    !!Total number of time steps\n    !! INFO: Default value is 1\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: isCommonDomain\n    !! Is domain comman or different domain for multi-physics\n    REAL(DFP), OPTIONAL, INTENT(IN) :: currentTime\n    !! Current time step of the simulation\n    !! INFO: Default value if 0.0_DFP\n    REAL(DFP), OPTIONAL, INTENT(IN) :: dt\n    !! Time step size\n    !! INFO: Default value is 0.0\n    REAL(DFP), OPTIONAL, INTENT(IN) :: endTime\n    !! Last time of simulation\n    !! INFO: Default value is 0.0_DFP\n    REAL(DFP), OPTIONAL, INTENT(IN) :: gravity(3)\n    !! Acceleration due to gravity\n    !! INFO: Default value if [0,0,0]\n    REAL(DFP), OPTIONAL, INTENT(IN) :: startTime\n    !! Start time of the simulation\n    !! INFO: Default value is 0.0\n    TYPE(ParameterList_), INTENT(INOUT) :: param\n    !! Put parameters here\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: ipTypeForSpace\n    !! Interpolation point type in space\n    !! Default is Equidistance\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: ipTypeForTime\n    !! Interpolation point type in time\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: basisTypeForSpace\n    !! Basis type used for constructing the shape functions\n    !! Like monomials, Legendre, Chebyshev, Jacobi\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: basisTypeForTime\n    !! Basis type used for constructing the shape function in time\n    REAL(DFP), OPTIONAL, INTENT(IN) :: alphaForSpace\n    !! Jacobi polynomial parameter  in space\n    REAL(DFP), OPTIONAL, INTENT(IN) :: alphaForTime\n    !! Jacobi polynomial parameter in time\n    REAL(DFP), OPTIONAL, INTENT(IN) :: betaForSpace\n    !! Jacobi polynomial parameter in space\n    REAL(DFP), OPTIONAL, INTENT(IN) :: betaForTime\n    !! Jacobi polynomial parameter in time\n    REAL(DFP), OPTIONAL, INTENT(IN) :: lambdaForSpace\n    !! Ultraspherical polynomial parameter in space\n    REAL(DFP), OPTIONAL, INTENT(IN) :: lambdaForTime\n    !! Ultraspherical polynomial parameter in time\n    !!\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: tDirichletBC\n    !! Total number of Dirichlet domain for pressure, default=0\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: tWeakDirichletBC\n    !! Total number of Nitsche boundary conditions for displacement\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: tNeumannBC\n    !! Total number of Neumann domain for pressure, default=0\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: isSymNitsche\n    !! True if symmetric Nitsche formulation\n    REAL(DFP), OPTIONAL, INTENT(IN) :: nitscheAlpha\n    !! Alpha parameter used in Nitsche formulation\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: materialInterfaces(:)\n    !! Mesh-IDs of materialInterfaces\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: tSolidMaterials\n    !! total number of materials\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: isConstantMatProp\n    !! It is true if the material properties are constant\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: algorithm\n    !! algorithm\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: vtkOutputFreq\n    !! frequency of output with WriteData_vtk\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: isIsotropic\n    !! It is true if the material is isotropic\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: isIncompressible\n    !! It is true if the material is incompressible\n    REAL(DFP), OPTIONAL, INTENT(IN) :: rtoleranceForDisplacement\n    !! relative tolerance for convergence in displacement field\n    REAL(DFP), OPTIONAL, INTENT(IN) :: rtoleranceForVelocity\n    !! relative tolerance for convergence in velocity field\n    REAL(DFP), OPTIONAL, INTENT(IN) :: rtoleranceForResidual\n    !! relative tolerance for velocity field\n    REAL(DFP), OPTIONAL, INTENT(IN) :: atoleranceForDisplacement\n    !! absolute tolerance for convergence in displacement field\n    REAL(DFP), OPTIONAL, INTENT(IN) :: atoleranceForVelocity\n    !! absolute tolerance for convergence in velocity field\n    REAL(DFP), OPTIONAL, INTENT(IN) :: atoleranceForResidual\n    !! absolute tolerance for velocity\n    CHARACTER(*), OPTIONAL, INTENT(IN) :: tanmatProp\n    !! Tangent matrix properties\n    CHARACTER(*), OPTIONAL, INTENT(IN) :: tanmatName\n    !! Tangent matrix name\n    !! MATRIX, BLOCKMATRIX\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: tOverlappedMaterials\n    !! Total number of overlapped materials\n    CHARACTER(*), OPTIONAL, INTENT(IN) :: outputPath\n    !! path where output of kernel will be written\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: tPointSource\n    !! total number of point sources, size of nbcPointSource\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: showTime\n    !! Show time of each steps\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: unifyVTK\n    !! unified write data to vtk file\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: createPVD\n    !! create the paraview data file\n  END SUBROUTINE SetAbstractKernelParam\nEND INTERFACE\n"})})]})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(s,{...e})}):s(e)}},54213:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>T});var a=t(36672);const r={},i=a.createContext(r);function o(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function T(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);