"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[6437],{85837:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"MatrixField/SetMatrixFieldParam","title":"SetMatrixFieldParam","description":"Set parameters necessary for constructing MatrixField","source":"@site/docs/docs-api/MatrixField/SetMatrixFieldParam.md","sourceDirName":"MatrixField","slug":"/MatrixField/SetMatrixFieldParam","permalink":"/docs-api/MatrixField/SetMatrixFieldParam","draft":false,"unlisted":false,"editUrl":"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/MatrixField/SetMatrixFieldParam.md","tags":[],"version":"current","lastUpdatedAt":1724304782000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"SetColumn","permalink":"/docs-api/MatrixField/SetColumn"},"next":{"title":"SetMatrixFieldPrecondParam","permalink":"/docs-api/MatrixField/SetMatrixFieldPrecondParam"}}');var r=t(23420),n=t(54213);const s={},o="SetMatrixFieldParam",c={},l=[{value:"Interface",id:"interface",level:2}];function d(e){const a={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.header,{children:(0,r.jsx)(a.h1,{id:"setmatrixfieldparam",children:"SetMatrixFieldParam"})}),"\n",(0,r.jsxs)(a.p,{children:["Set parameters necessary for constructing ",(0,r.jsx)(a.a,{href:"/docs-api/MatrixField/MatrixField_",children:"MatrixField_"})]}),"\n",(0,r.jsx)(a.h2,{id:"interface",children:"Interface"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-fortran",children:'INTERFACE\n  MODULE SUBROUTINE setBlockMatrixFieldParam(param, name, matrixProp, &\n    & physicalVarNames, spaceCompo, timeCompo, engine, fieldType)\n    TYPE(ParameterList_), INTENT(INOUT) :: param\n    !! Options to create [[BlockMatrixField_]] will be stored in this\n    CHARACTER(*), INTENT(IN) :: name\n    !! Name of the matrix field\n    CHARACTER(*), INTENT(IN) :: matrixProp\n    !! Matrix property, "SYM" or "UNSYM"\n    CHARACTER(*), INTENT(IN) :: physicalVarNames(:)\n    !! Name of physical variables\n    INTEGER(I4B), INTENT(IN) :: spaceCompo(:)\n    !! Number of space-components in each physicalVarNames, see [[DOF_]]\n    INTEGER(I4B), INTENT(IN) :: timeCompo(:)\n    !! Number of time-components in each physicalVarNames, see [[DOF_]]\n    CHARACTER(*), INTENT(IN) :: engine\n    !! engine\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: fieldType\n    !! fieldType can be following\n    !! FIELD_TYPE_NORMAL <-- DEFAULT\n    !! FIELD_TYPE_CONSTANT\n    !! FIELD_TYPE_CONSTANT_SPACE\n    !! FIELD_TYPE_CONSTANT_TIME\n  END SUBROUTINE setBlockMatrixFieldParam\nEND INTERFACE\n'})})]})}function m(e={}){const{wrapper:a}={...(0,n.R)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},54213:(e,a,t)=>{t.d(a,{R:()=>s,x:()=>o});var i=t(36672);const r={},n=i.createContext(r);function s(e){const a=i.useContext(n);return i.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function o(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(n.Provider,{value:a},e.children)}}}]);