"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[28111],{45633:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>N});const o=JSON.parse('{"id":"MatrixField/Set","title":"Set","description":"Set entries of MatrixField.","source":"@site/docs/docs-api/MatrixField/Set.md","sourceDirName":"MatrixField","slug":"/MatrixField/Set","permalink":"/docs-api/MatrixField/Set","draft":false,"unlisted":false,"editUrl":"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/MatrixField/Set.md","tags":[],"version":"current","lastUpdatedAt":1724304782000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"ReversePermutation","permalink":"/docs-api/MatrixField/ReversePermutation"},"next":{"title":"SetColumn","permalink":"/docs-api/MatrixField/SetColumn"}}');var d=i(23420),r=i(54213),l=i(36492),s=i(92492);const a={},t="Set",c={},N=[{value:"Interface 1",id:"interface-1",level:2},{value:"Interface 2",id:"interface-2",level:2},{value:"Interface 3",id:"interface-3",level:2},{value:"Interface 4",id:"interface-4",level:2},{value:"Interface 5",id:"interface-5",level:2},{value:"Interface 6",id:"interface-6",level:2},{value:"Interface 7",id:"interface-7",level:2},{value:"Interface 8",id:"interface-8",level:2},{value:"Interface 9",id:"interface-9",level:2},{value:"Interface 10",id:"interface-10",level:2}];function h(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(n.header,{children:(0,d.jsx)(n.h1,{id:"set",children:"Set"})}),"\n",(0,d.jsx)(n.p,{children:"Set entries of MatrixField."}),"\n",(0,d.jsx)(n.p,{children:"Calling example:"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-fortran",metastring:"{6,7}",children:"Set( \n  MatrixField_::obj\n  int::globalNode(:)\n  real::value(:,:)\n  int::storageFMT\n  <real::scale>\n  <bool::addContribution> \n)\n"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-fortran",metastring:"{2,4,5}",children:"CALL Set(\nMatrixField_::obj\n<int::globalNode(:)>\nreal::value \n<int::scale >\n<bool::addContribution>\n)\n"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-fortran",metastring:"{8,9}",children:"CALL Set(\n  MatrixField_ :: obj\n  int :: iNodeNum\n  int :: jNodeNum\n  int :: idof\n  int :: jdof\n  real :: value\n  <real :: scale>\n  <bool :: addContribution>\n)\n"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-fortran",metastring:"{8,9}",children:"Set( \n  MatrixField_ :: obj\n  int :: iNodeNum(:)\n  int ::  jNodeNum(:)\n  int ::  ivar\n  int :: jvar\n  real::  value(:,:)\n  <real:: scale>\n  <bool:: addContribution>\n)\n"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-fortran",metastring:"{10,11}",children:"CALL Set( \n  MatrixField_ :: obj\n  int :: iNodeNum(:)\n  int :: jNodeNum(:)\n  int :: ivar\n  int :: jvar\n  int :: idof\n  int :: jdof\n  real:: value(:,:)\n  <real:: scale>\n  <bool:: addContribution>\n)\n"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-fortran",metastring:"{10,11}",children:"CALL Set( \n  MatrixField_:: obj\n  int :: iNodeNum(:)\n  int :: jNodeNum(:)\n  int :: ivar\n  int :: jvar\n  int :: idof\n  int :: jdof\n  real :: value(:,:)\n  <real :: scale>\n  <bool :: addContribution>\n  )\n"})}),"\n","\n",(0,d.jsx)(n.h2,{id:"interface-1",children:"Interface 1"}),"\n",(0,d.jsx)(l.A,{children:(0,d.jsxs)(s.A,{value:"interface-1",label:"\ud805\uddcd Set  1",default:!0,children:[(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\nMODULE SUBROUTINE Set( obj, globalNode, value, storageFMT, scale,  &\n  & addContribution )\n  CLASS( MatrixField_ ), INTENT( INOUT ) :: obj\n  INTEGER( I4B ), INTENT( IN ) :: globalNode(:)\n  REAL( DFP ), INTENT( IN ) :: value(:,:)\n  INTEGER( I4B ), INTENT( IN ) :: storageFMT\n  REAL( DFP ), OPTIONAL, INTENT( IN ) :: scale\n  LOGICAL( LGT ), OPTIONAL, INTENT( IN ) :: addContribution\nEND SUBROUTINE Set\nEND INTERFACE\n"})}),(0,d.jsxs)(n.p,{children:["IF ",(0,d.jsx)(n.code,{children:"addContribution"})," and ",(0,d.jsx)(n.code,{children:"scale"})," is ABSENT then:"]}),(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"This subroutine sets a block of data to matrix."}),"\n",(0,d.jsxs)(n.li,{children:["This block data is contained in ",(0,d.jsx)(n.code,{children:"value(:,:)"})]}),"\n",(0,d.jsxs)(n.li,{children:["The size of ",(0,d.jsx)(n.code,{children:"value"})," should be ",(0,d.jsx)(n.code,{children:"tdof *size( globalNode )"}),", where\n",(0,d.jsx)(n.code,{children:"tdof"})," is the total degrees of freedom"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"globalNode"})," contains the global node number"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"storageFMT"})," is the storage format of ",(0,d.jsx)(n.code,{children:"value(:,:)"}),", it can be ",(0,d.jsx)(n.code,{children:"DOF_FMT"}),", or\n",(0,d.jsx)(n.code,{children:"FMT_NODES"}),"."]}),"\n"]}),(0,d.jsxs)(n.p,{children:["If ",(0,d.jsx)(n.code,{children:"addContribution"})," and ",(0,d.jsx)(n.code,{children:"scale"})," are present then:"]}),(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"This subroutine adds a block of data to matrix."}),"\n",(0,d.jsxs)(n.li,{children:["This block data is contained in ",(0,d.jsx)(n.code,{children:"value(:,:)"})]}),"\n",(0,d.jsxs)(n.li,{children:["The size of ",(0,d.jsx)(n.code,{children:"value"})," should be ",(0,d.jsx)(n.code,{children:"tdof* size( globalNode )"})]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"globalNode"})," contains the global node number"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"storageFMT"})," is the storage format of ",(0,d.jsx)(n.code,{children:"value(:,:)"}),", it can be ",(0,d.jsx)(n.code,{children:"DOF_FMT"}),", or ",(0,d.jsx)(n.code,{children:"FMT_NODES"}),"."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"scale"})," is scaling used for value."]}),"\n"]}),(0,d.jsx)(n.admonition,{type:"caution",children:(0,d.jsx)(n.p,{children:"This method cannot be called for Rectangle MatrixField"})})]})}),"\n",(0,d.jsx)(n.h2,{id:"interface-2",children:"Interface 2"}),"\n",(0,d.jsx)(l.A,{children:(0,d.jsxs)(s.A,{value:"interface-2",label:"\ud805\uddcd Set  2",children:[(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\nMODULE SUBROUTINE Set( obj, globalNode, value, scale, &\n  & addContribution )\n  CLASS( MatrixField_ ), INTENT( INOUT ) :: obj\n  INTEGER( I4B ), OPTIONAL, INTENT( IN ) :: globalNode(:)\n  REAL( DFP ), INTENT( IN ) :: value\n  REAL( DFP ), OPTIONAL, INTENT( IN ) :: scale\n  LOGICAL( LGT ), OPTIONAL, INTENT( IN ) :: addContribution\nEND SUBROUTINE Set\nEND INTERFACE\n"})}),(0,d.jsxs)(n.p,{children:["IF ",(0,d.jsx)(n.code,{children:"addContribution"})," and ",(0,d.jsx)(n.code,{children:"scale"})," are ABSENT then:"]}),(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["This subroutine sets a scalar value ",(0,d.jsx)(n.code,{children:"value"})," to all or selected the entries of the matrix."]}),"\n",(0,d.jsxs)(n.li,{children:["If ",(0,d.jsx)(n.code,{children:"globalNode"})," is present then this routine sets a scalar value ",(0,d.jsx)(n.code,{children:"value"})," to select the entries of the matrix. These entries are spacified by the ",(0,d.jsx)(n.code,{children:"globalNode(:)"})," vector, which denotes the global node numbers. Then, symbolically, we perform ",(0,d.jsx)(n.code,{children:"obj(glocalNode)=value"}),"."]}),"\n",(0,d.jsxs)(n.li,{children:["If ",(0,d.jsx)(n.code,{children:"globalNode"})," is absent then all entries are set to the scalar values. Then, symbolically, we peform ",(0,d.jsx)(n.code,{children:"obj=value"})]}),"\n"]}),(0,d.jsxs)(n.p,{children:["IF ",(0,d.jsx)(n.code,{children:"addContribution"})," and ",(0,d.jsx)(n.code,{children:"scale"})," NOT PRESENT"]}),(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["If ",(0,d.jsx)(n.code,{children:"globalNode"})," is not present then, this subroutine adds a scalar value ",(0,d.jsx)(n.code,{children:"value"})," to all the entries of the matrix. Symbolically, we perform ",(0,d.jsx)(n.code,{children:"obj=obj+scale*value"})]}),"\n",(0,d.jsxs)(n.li,{children:["If ",(0,d.jsx)(n.code,{children:"globalNode"})," is present then, This subroutine adds a scalar value ",(0,d.jsx)(n.code,{children:"value"})," to select the entries of the matrix. These entries are spacified by the ",(0,d.jsx)(n.code,{children:"globalNode(:)"})," vector, which denotes the global node numbers. Symbolically, we perform ",(0,d.jsx)(n.code,{children:"obj(glocalNode)=obj(globalNode)+scale*value"})]}),"\n"]}),(0,d.jsx)(n.admonition,{type:"caution",children:(0,d.jsxs)(n.mdxAdmonitionTitle,{children:["When ",(0,d.jsx)(n.code,{children:"globalNode"})," is present, then this method cannot be called for Rectangle MatrixField."]})})]})}),"\n",(0,d.jsx)(n.h2,{id:"interface-3",children:"Interface 3"}),"\n",(0,d.jsx)(l.A,{children:(0,d.jsxs)(s.A,{value:"interface-3",label:"\ud805\uddcd Set  3",children:[(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\nMODULE SUBROUTINE Set( obj, iNodeNum, jNodeNum, idof, &\n  & jdof, value, scale, addContribution )\n  CLASS( MatrixField_ ), INTENT( INOUT ) :: obj\n  INTEGER( I4B ), INTENT( IN ) :: iNodeNum\n  INTEGER( I4B ), INTENT( IN ) :: jNodeNum\n  INTEGER( I4B ), INTENT( IN ) :: idof\n  INTEGER( I4B ), INTENT( IN ) :: jdof\n  REAL( DFP ), INTENT( IN ) :: value\n  REAL( DFP ), OPTIONAL, INTENT( IN ) :: scale\n  LOGICAL( LGT ), OPTIONAL, INTENT( IN ) :: addContribution\nEND SUBROUTINE Set\nEND INTERFACE\n"})}),(0,d.jsx)(n.admonition,{type:"info",children:(0,d.jsx)(n.p,{children:"This routine can be called for rectangle matrix."})}),(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["If addContribution and scale not present then","\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["This subroutine sets a scalar value ",(0,d.jsx)(n.code,{children:"value"})," to a single entry of the matrix."]}),"\n",(0,d.jsxs)(n.li,{children:["This entry is specified by the ",(0,d.jsx)(n.code,{children:"iNodeNum"})," and ",(0,d.jsx)(n.code,{children:"jNodeNum"}),", which are global node number."]}),"\n",(0,d.jsxs)(n.li,{children:["The exact location of the entry is computed using ",(0,d.jsx)(n.code,{children:"iNodeNum"}),", ",(0,d.jsx)(n.code,{children:"iDOF"}),", ",(0,d.jsx)(n.code,{children:"jNodeNum"})," and ",(0,d.jsx)(n.code,{children:"jDOF"}),"."]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["If addContribution and scale present then:","\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["This subroutine adds a scalar value ",(0,d.jsx)(n.code,{children:"value"})," to a single entry of the matrix."]}),"\n",(0,d.jsxs)(n.li,{children:["This entry is specified by the ",(0,d.jsx)(n.code,{children:"iNodeNum"})," and ",(0,d.jsx)(n.code,{children:"jNodeNum"}),"."]}),"\n",(0,d.jsxs)(n.li,{children:["The exact location of the entry is computed using ",(0,d.jsx)(n.code,{children:"iNodeNum"}),", ",(0,d.jsx)(n.code,{children:"iDOF"}),", ",(0,d.jsx)(n.code,{children:"jNodeNum"})," and ",(0,d.jsx)(n.code,{children:"jDOF"}),"."]}),"\n"]}),"\n"]}),"\n"]})]})}),"\n",(0,d.jsx)(n.h2,{id:"interface-4",children:"Interface 4"}),"\n",(0,d.jsx)(l.A,{children:(0,d.jsxs)(s.A,{value:"interface-4",label:"\ud805\uddcd Set  4",children:[(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\nMODULE SUBROUTINE Set( obj, iNodeNum, jNodeNum, ivar, &\n  & jvar, value, scale, addContribution )\n  CLASS( MatrixField_ ), INTENT( INOUT ) :: obj\n  INTEGER( I4B ), INTENT( IN ) :: iNodeNum(:)\n  INTEGER( I4B ), INTENT( IN ) :: jNodeNum(:)\n  INTEGER( I4B ), INTENT( IN ) :: ivar\n  INTEGER( I4B ), INTENT( IN ) :: jvar\n  REAL( DFP ), INTENT( IN ) :: value(:,:)\n  REAL( DFP ), OPTIONAL, INTENT( IN ) :: scale\n  LOGICAL( LGT ), OPTIONAL, INTENT( IN ) :: addContribution\nEND SUBROUTINE Set\nEND INTERFACE\n"})}),(0,d.jsx)(n.admonition,{type:"info",children:(0,d.jsx)(n.p,{children:"This routine can be called for rectangle matrix."})}),(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["If addContribution and scale not present then","\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"This subroutine sets a block of data to matrix."}),"\n",(0,d.jsxs)(n.li,{children:["This block data is contained in ",(0,d.jsx)(n.code,{children:"value(:,:)"}),"."]}),"\n",(0,d.jsxs)(n.li,{children:["The number of rows in ",(0,d.jsx)(n.code,{children:"value"})," should be ",(0,d.jsx)(n.code,{children:"SIZE( iNodeNum ) * itdof"}),", where ",(0,d.jsx)(n.code,{children:"itdof"})," is the total degrees of freedom in row dimension."]}),"\n",(0,d.jsxs)(n.li,{children:["The number of columns in ",(0,d.jsx)(n.code,{children:"value"})," should be ",(0,d.jsx)(n.code,{children:"SIZE( jNodeNum ) * jtdof"}),", where ",(0,d.jsx)(n.code,{children:"jtdof"})," is the total degrees of freedom in column dimension."]}),"\n",(0,d.jsx)(n.li,{children:"globalNode contains the global node number"}),"\n",(0,d.jsxs)(n.li,{children:["This entry is specified by the ",(0,d.jsx)(n.code,{children:"iNodeNum"})," and ",(0,d.jsx)(n.code,{children:"jNodeNum"}),", which are global node number."]}),"\n",(0,d.jsxs)(n.li,{children:["The exact location of the entry is computed using ",(0,d.jsx)(n.code,{children:"iNodeNum"}),", ",(0,d.jsx)(n.code,{children:"ivar"}),", ",(0,d.jsx)(n.code,{children:"jNodeNum"})," and ",(0,d.jsx)(n.code,{children:"jvar"}),"."]}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(n.li,{children:"If addContribution and scale present then we add contribution to matrix, instead of setting the value."}),"\n"]}),(0,d.jsx)(n.admonition,{type:"info",children:(0,d.jsxs)(n.p,{children:["Storage format of ",(0,d.jsx)(n.code,{children:"value"})," should be ",(0,d.jsx)(n.code,{children:"FMT_NODES"})," because the storage format of MatrixField_ is ",(0,d.jsx)(n.code,{children:"FMT_NODES"}),"."]})})]})}),"\n",(0,d.jsx)(n.h2,{id:"interface-5",children:"Interface 5"}),"\n",(0,d.jsx)(l.A,{children:(0,d.jsxs)(s.A,{value:"interface-5",label:"\ud805\uddcd Set  5",children:[(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\nMODULE SUBROUTINE Set( obj, iNodeNum, jNodeNum, ivar, &\n  & jvar, idof, jdof, value, scale, addContribution )\n  CLASS( MatrixField_ ), INTENT( INOUT ) :: obj\n  INTEGER( I4B ), INTENT( IN ) :: iNodeNum(:)\n  INTEGER( I4B ), INTENT( IN ) :: jNodeNum(:)\n  INTEGER( I4B ), INTENT( IN ) :: ivar\n  INTEGER( I4B ), INTENT( IN ) :: jvar\n  INTEGER( I4B ), INTENT( IN ) :: idof\n  INTEGER( I4B ), INTENT( IN ) :: jdof\n  REAL( DFP ), INTENT( IN ) :: value(:,:)\n  REAL( DFP ), OPTIONAL, INTENT( IN ) :: scale\n  LOGICAL( LGT ), OPTIONAL, INTENT( IN ) :: addContribution\nEND SUBROUTINE Set\nEND INTERFACE\n"})}),(0,d.jsx)(n.admonition,{type:"info",children:(0,d.jsx)(n.p,{children:"This routine can be called for rectangle matrix."})}),(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["If addContribution and scale not present then","\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"This subroutine sets a block of data to matrix."}),"\n",(0,d.jsxs)(n.li,{children:["This block data is contained in ",(0,d.jsx)(n.code,{children:"value(:,:)"})]}),"\n",(0,d.jsxs)(n.li,{children:["The size of ",(0,d.jsx)(n.code,{children:"value"})," should be ",(0,d.jsx)(n.code,{children:"SIZE(iNodeNum)"}),", ",(0,d.jsx)(n.code,{children:"SIZE(jNodeNum)"})]}),"\n",(0,d.jsx)(n.li,{children:"globalNode contains the global node number"}),"\n",(0,d.jsxs)(n.li,{children:["This entry is specified by the ",(0,d.jsx)(n.code,{children:"iNodeNum"})," and ",(0,d.jsx)(n.code,{children:"jNodeNum"}),", which are global node number."]}),"\n",(0,d.jsxs)(n.li,{children:["The exact location of the entry is computed using ",(0,d.jsx)(n.code,{children:"iNodeNum"}),", ",(0,d.jsx)(n.code,{children:"ivar"}),", ",(0,d.jsx)(n.code,{children:"idof"}),", ",(0,d.jsx)(n.code,{children:"jNodeNum"})," and ",(0,d.jsx)(n.code,{children:"jvar"}),", ",(0,d.jsx)(n.code,{children:"jdof"}),"."]}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(n.li,{children:"If addContribution and scale present then we add contribution to matrix, instead of setting the value."}),"\n"]})]})}),"\n",(0,d.jsx)(n.h2,{id:"interface-6",children:"Interface 6"}),"\n",(0,d.jsx)(l.A,{children:(0,d.jsxs)(s.A,{value:"interface-6",label:"\ud805\uddcd Set  6",children:[(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\nMODULE SUBROUTINE Set( obj, iNodeNum, jNodeNum, ivar, jvar, &\n  & idof, jdof, value, scale, addContribution )\n  CLASS( MatrixField_ ), INTENT( INOUT ) :: obj\n  INTEGER( I4B ), INTENT( IN ) :: iNodeNum\n  INTEGER( I4B ), INTENT( IN ) :: jNodeNum\n  INTEGER( I4B ), INTENT( IN ) :: ivar\n  INTEGER( I4B ), INTENT( IN ) :: jvar\n  INTEGER( I4B ), INTENT( IN ) :: idof\n  INTEGER( I4B ), INTENT( IN ) :: jdof\n  REAL( DFP ), INTENT( IN ) :: value\n  REAL( DFP ), OPTIONAL, INTENT( IN ) :: scale\n  LOGICAL( LGT ), OPTIONAL, INTENT( IN ) :: addContribution\nEND SUBROUTINE Set\nEND INTERFACE\n"})}),(0,d.jsxs)(n.p,{children:["If ",(0,d.jsx)(n.code,{children:"addContribution"})," and ",(0,d.jsx)(n.code,{children:"scale"})," NOT PRESENT, then:"]}),(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["This subroutine sets a scalar value ",(0,d.jsx)(n.code,{children:"value"})," to a single entry of the matrix."]}),"\n",(0,d.jsxs)(n.li,{children:["This entry is specified by the ",(0,d.jsx)(n.code,{children:"iNodeNum"})," and ",(0,d.jsx)(n.code,{children:"jNodeNum"}),"."]}),"\n",(0,d.jsxs)(n.li,{children:["The exact location of the entry is computed using ",(0,d.jsx)(n.code,{children:"iNodeNum"}),", ",(0,d.jsx)(n.code,{children:"idof"}),", ",(0,d.jsx)(n.code,{children:"ivar"}),", and ",(0,d.jsx)(n.code,{children:"jNodeNum"}),", ",(0,d.jsx)(n.code,{children:"jdof"}),", ",(0,d.jsx)(n.code,{children:"jvar"}),"."]}),"\n"]}),(0,d.jsxs)(n.p,{children:["If ",(0,d.jsx)(n.code,{children:"addContribution"})," and ",(0,d.jsx)(n.code,{children:"scale"})," are PRESENT then:"]}),(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["This subroutine adds a scalar value ",(0,d.jsx)(n.code,{children:"value"})," to a single entry of the matrix."]}),"\n",(0,d.jsxs)(n.li,{children:["This entry is specified by the ",(0,d.jsx)(n.code,{children:"iNodeNum"})," and ",(0,d.jsx)(n.code,{children:"jNodeNum"}),"."]}),"\n",(0,d.jsxs)(n.li,{children:["The exact location of the entry is computed using ",(0,d.jsx)(n.code,{children:"iNodeNum"}),", ",(0,d.jsx)(n.code,{children:"idof"}),", ",(0,d.jsx)(n.code,{children:"ivar"}),", and ",(0,d.jsx)(n.code,{children:"jNodeNum"}),", ",(0,d.jsx)(n.code,{children:"jdof"}),", ",(0,d.jsx)(n.code,{children:"jvar"}),"."]}),"\n"]})]})}),"\n",(0,d.jsx)(n.h2,{id:"interface-7",children:"Interface 7"}),"\n",(0,d.jsx)(l.A,{children:(0,d.jsxs)(s.A,{value:"interface-7",label:"\ud805\uddcd Set  7",children:[(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\nMODULE SUBROUTINE Set( obj, iNodeNum, jNodeNum, ivar, jvar, &\n  & ispacecompo, itimecompo, jspacecompo, jtimecompo, value, scale, &\n  & addContribution )\n  CLASS( MatrixField_ ), INTENT( INOUT ) :: obj\n  INTEGER( I4B ), INTENT( IN ) :: iNodeNum\n  INTEGER( I4B ), INTENT( IN ) :: jNodeNum\n  INTEGER( I4B ), INTENT( IN ) :: ivar\n  INTEGER( I4B ), INTENT( IN ) :: jvar\n  INTEGER( I4B ), INTENT( IN ) :: ispacecompo\n  INTEGER( I4B ), INTENT( IN ) :: itimecompo\n  INTEGER( I4B ), INTENT( IN ) :: jspacecompo\n  INTEGER( I4B ), INTENT( IN ) :: jtimecompo\n  REAL( DFP ), INTENT( IN ) :: value\n  REAL( DFP ), OPTIONAL, INTENT( IN ) :: scale\n  LOGICAL( LGT ), OPTIONAL, INTENT( IN ) :: addContribution\nEND SUBROUTINE Set\nEND INTERFACE\n"})}),(0,d.jsx)(n.p,{children:"If addContribution and scale are not present then:"}),(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["This subroutine sets a scalar value ",(0,d.jsx)(n.code,{children:"value"})," to a single entry of the matrix."]}),"\n",(0,d.jsxs)(n.li,{children:["This entry is specified by the ",(0,d.jsx)(n.code,{children:"iNodeNum"})," and ",(0,d.jsx)(n.code,{children:"jNodeNum"}),"."]}),"\n",(0,d.jsxs)(n.li,{children:["The exact location of the entry is computed using (",(0,d.jsx)(n.code,{children:"iNodeNum"}),", ",(0,d.jsx)(n.code,{children:"ivar"}),", ",(0,d.jsx)(n.code,{children:"ispacecompo"}),", ",(0,d.jsx)(n.code,{children:"itimecompo"}),") and (",(0,d.jsx)(n.code,{children:"jNodeNum"}),", ",(0,d.jsx)(n.code,{children:"jvar"}),", ",(0,d.jsx)(n.code,{children:"jspacecompo"}),", ",(0,d.jsx)(n.code,{children:"jtimecompo"}),")."]}),"\n"]}),(0,d.jsxs)(n.p,{children:["If addContribution and scale present, then this subroutine adds a scalar value ",(0,d.jsx)(n.code,{children:"value"})," to a single entry of the matrix."]})]})}),"\n",(0,d.jsx)(n.h2,{id:"interface-8",children:"Interface 8"}),"\n",(0,d.jsx)(l.A,{children:(0,d.jsxs)(s.A,{value:"interface-8",label:"\ud805\uddcd Set  8",children:[(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\nMODULE SUBROUTINE Set( obj, iNodeNum, jNodeNum, ivar, jvar, &\n  & ispacecompo, itimecompo, jspacecompo, jtimecompo, value, scale, &\n  & addContribution )\n  CLASS( MatrixField_ ), INTENT( INOUT ) :: obj\n  INTEGER( I4B ), INTENT( IN ) :: iNodeNum(:)\n  INTEGER( I4B ), INTENT( IN ) :: jNodeNum(:)\n  INTEGER( I4B ), INTENT( IN ) :: ivar\n  INTEGER( I4B ), INTENT( IN ) :: jvar\n  INTEGER( I4B ), INTENT( IN ) :: ispacecompo\n  INTEGER( I4B ), INTENT( IN ) :: itimecompo\n  INTEGER( I4B ), INTENT( IN ) :: jspacecompo\n  INTEGER( I4B ), INTENT( IN ) :: jtimecompo\n  REAL( DFP ), INTENT( IN ) :: value\n  REAL( DFP ), OPTIONAL, INTENT( IN ) :: scale\n  LOGICAL( LGT ), OPTIONAL, INTENT( IN ) :: addContribution\nEND SUBROUTINE Set\nEND INTERFACE\n"})}),(0,d.jsx)(n.p,{children:"If addContribution and scale are not present then:"}),(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["This subroutine sets ",(0,d.jsx)(n.code,{children:"value"})," to the matrix."]}),"\n",(0,d.jsxs)(n.li,{children:["This entry is specified by the ",(0,d.jsx)(n.code,{children:"iNodeNum"})," and ",(0,d.jsx)(n.code,{children:"jNodeNum"}),"."]}),"\n",(0,d.jsxs)(n.li,{children:["The exact location of the entry is computed using (",(0,d.jsx)(n.code,{children:"iNodeNum"}),", ",(0,d.jsx)(n.code,{children:"ivar"}),", ",(0,d.jsx)(n.code,{children:"ispacecompo"}),", ",(0,d.jsx)(n.code,{children:"itimecompo"}),") and (",(0,d.jsx)(n.code,{children:"jNodeNum"}),", ",(0,d.jsx)(n.code,{children:"jvar"}),", ",(0,d.jsx)(n.code,{children:"jspacecompo"}),", ",(0,d.jsx)(n.code,{children:"jtimecompo"}),")."]}),"\n"]}),(0,d.jsxs)(n.p,{children:["If addContribution and scale present, then this subroutine adds ",(0,d.jsx)(n.code,{children:"value"})," to the matrix."]})]})}),"\n",(0,d.jsx)(n.h2,{id:"interface-9",children:"Interface 9"}),"\n",(0,d.jsx)(l.A,{children:(0,d.jsxs)(s.A,{value:"interface-9",label:"\ud805\uddcd Set  9",children:[(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-fortran",metastring:'title "Set Set 9"',children:"INTERFACE\nMODULE SUBROUTINE Set( obj, iNodeNum, jNodeNum, ivar, jvar, &\n  & ispacecompo, itimecompo, jspacecompo, jtimecompo, value, scale, &\n  & addContribution )\n  CLASS( MatrixField_ ), INTENT( INOUT ) :: obj\n  INTEGER( I4B ), INTENT( IN ) :: iNodeNum(:)\n  INTEGER( I4B ), INTENT( IN ) :: jNodeNum(:)\n  INTEGER( I4B ), INTENT( IN ) :: ivar\n  INTEGER( I4B ), INTENT( IN ) :: jvar\n  INTEGER( I4B ), INTENT( IN ) :: ispacecompo\n  INTEGER( I4B ), INTENT( IN ) :: itimecompo(:)\n  INTEGER( I4B ), INTENT( IN ) :: jspacecompo\n  INTEGER( I4B ), INTENT( IN ) :: jtimecompo(:)\n  REAL( DFP ), INTENT( IN ) :: value\n  REAL( DFP ), OPTIONAL, INTENT( IN ) :: scale\n  LOGICAL( LGT ), OPTIONAL, INTENT( IN ) :: addContribution\nEND SUBROUTINE Set\nEND INTERFACE\n"})}),(0,d.jsx)(n.p,{children:"If addContribution and scale are not present then:"}),(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["This subroutine sets ",(0,d.jsx)(n.code,{children:"value"})," to the matrix."]}),"\n",(0,d.jsxs)(n.li,{children:["This entry is specified by the ",(0,d.jsx)(n.code,{children:"iNodeNum"})," and ",(0,d.jsx)(n.code,{children:"jNodeNum"}),"."]}),"\n",(0,d.jsxs)(n.li,{children:["The exact location of the entry is computed using (",(0,d.jsx)(n.code,{children:"iNodeNum"}),", ",(0,d.jsx)(n.code,{children:"ivar"}),", ",(0,d.jsx)(n.code,{children:"ispacecompo"}),", ",(0,d.jsx)(n.code,{children:"itimecompo"}),") and (",(0,d.jsx)(n.code,{children:"jNodeNum"}),", ",(0,d.jsx)(n.code,{children:"jvar"}),", ",(0,d.jsx)(n.code,{children:"jspacecompo"}),", ",(0,d.jsx)(n.code,{children:"jtimecompo"}),")."]}),"\n"]}),(0,d.jsxs)(n.p,{children:["If addContribution and scale present, then this subroutine adds ",(0,d.jsx)(n.code,{children:"value"})," to the matrix."]})]})}),"\n",(0,d.jsx)(n.h2,{id:"interface-10",children:"Interface 10"}),"\n",(0,d.jsx)(l.A,{children:(0,d.jsxs)(s.A,{value:"interface-10",label:"\ud805\uddcd Set  10",default:!0,children:[(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\nMODULE SUBROUTINE Set( obj, iNodeNum, jNodeNum, ivar, jvar, &\n  & ispacecompo, itimecompo, jspacecompo, jtimecompo, value, scale, &\n  & addContribution )\n  CLASS( MatrixField_ ), INTENT( INOUT ) :: obj\n  INTEGER( I4B ), INTENT( IN ) :: iNodeNum(:)\n  INTEGER( I4B ), INTENT( IN ) :: jNodeNum(:)\n  INTEGER( I4B ), INTENT( IN ) :: ivar\n  INTEGER( I4B ), INTENT( IN ) :: jvar\n  INTEGER( I4B ), INTENT( IN ) :: ispacecompo(:)\n  INTEGER( I4B ), INTENT( IN ) :: itimecompo\n  INTEGER( I4B ), INTENT( IN ) :: jspacecompo(:)\n  INTEGER( I4B ), INTENT( IN ) :: jtimecompo\n  REAL( DFP ), INTENT( IN ) :: value\n  REAL( DFP ), OPTIONAL, INTENT( IN ) :: scale\n  LOGICAL( LGT ), OPTIONAL, INTENT( IN ) :: addContribution\nEND SUBROUTINE Set\nEND INTERFACE\n"})}),(0,d.jsx)(n.p,{children:"If addContribution and scale are not present then:"}),(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["This subroutine sets ",(0,d.jsx)(n.code,{children:"value"})," to the matrix."]}),"\n",(0,d.jsxs)(n.li,{children:["This entry is specified by the ",(0,d.jsx)(n.code,{children:"iNodeNum"})," and ",(0,d.jsx)(n.code,{children:"jNodeNum"}),"."]}),"\n",(0,d.jsxs)(n.li,{children:["The exact location of the entry is computed using (",(0,d.jsx)(n.code,{children:"iNodeNum"}),", ",(0,d.jsx)(n.code,{children:"ivar"}),", ",(0,d.jsx)(n.code,{children:"ispacecompo"}),", ",(0,d.jsx)(n.code,{children:"itimecompo"}),") and (",(0,d.jsx)(n.code,{children:"jNodeNum"}),", ",(0,d.jsx)(n.code,{children:"jvar"}),", ",(0,d.jsx)(n.code,{children:"jspacecompo"}),", ",(0,d.jsx)(n.code,{children:"jtimecompo"}),")."]}),"\n"]}),(0,d.jsxs)(n.p,{children:["If addContribution and scale present, then this subroutine adds ",(0,d.jsx)(n.code,{children:"value"})," to the matrix."]})]})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(h,{...e})}):h(e)}},92492:(e,n,i)=>{i.d(n,{A:()=>l});i(36672);var o=i(28923);const d={tabItem:"tabItem_VSPN"};var r=i(23420);function l(e){let{children:n,hidden:i,className:l}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,o.A)(d.tabItem,l),hidden:i,children:n})}},36492:(e,n,i)=>{i.d(n,{A:()=>p});var o=i(36672),d=i(28923),r=i(19929),l=i(85291),s=i(5581),a=i(80034),t=i(12715),c=i(62741);function N(e){return o.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,o.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:i}=e;return(0,o.useMemo)((()=>{const e=n??function(e){return N(e).map((e=>{let{props:{value:n,label:i,attributes:o,default:d}}=e;return{value:n,label:i,attributes:o,default:d}}))}(i);return function(e){const n=(0,t.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,i])}function u(e){let{value:n,tabValues:i}=e;return i.some((e=>e.value===n))}function j(e){let{queryString:n=!1,groupId:i}=e;const d=(0,l.W6)(),r=function(e){let{queryString:n=!1,groupId:i}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!i)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return i??null}({queryString:n,groupId:i});return[(0,a.aZ)(r),(0,o.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(d.location.search);n.set(r,e),d.replace({...d.location,search:n.toString()})}),[r,d])]}function I(e){const{defaultValue:n,queryString:i=!1,groupId:d}=e,r=h(e),[l,a]=(0,o.useState)((()=>function(e){let{defaultValue:n,tabValues:i}=e;if(0===i.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!u({value:n,tabValues:i}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${i.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const o=i.find((e=>e.default))??i[0];if(!o)throw new Error("Unexpected error: 0 tabValues");return o.value}({defaultValue:n,tabValues:r}))),[t,N]=j({queryString:i,groupId:d}),[I,T]=function(e){let{groupId:n}=e;const i=function(e){return e?`docusaurus.tab.${e}`:null}(n),[d,r]=(0,c.Dv)(i);return[d,(0,o.useCallback)((e=>{i&&r.set(e)}),[i,r])]}({groupId:d}),x=(()=>{const e=t??I;return u({value:e,tabValues:r})?e:null})();(0,s.A)((()=>{x&&a(x)}),[x]);return{selectedValue:l,selectValue:(0,o.useCallback)((e=>{if(!u({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);a(e),N(e),T(e)}),[N,T,r]),tabValues:r}}var T=i(32111);const x={tabList:"tabList_csSQ",tabItem:"tabItem_Bcmo"};var E=i(23420);function m(e){let{className:n,block:i,selectedValue:o,selectValue:l,tabValues:s}=e;const a=[],{blockElementScrollPositionUntilNextRender:t}=(0,r.a_)(),c=e=>{const n=e.currentTarget,i=a.indexOf(n),d=s[i].value;d!==o&&(t(n),l(d))},N=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const i=a.indexOf(e.currentTarget)+1;n=a[i]??a[0];break}case"ArrowLeft":{const i=a.indexOf(e.currentTarget)-1;n=a[i]??a[a.length-1];break}}n?.focus()};return(0,E.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,d.A)("tabs",{"tabs--block":i},n),children:s.map((e=>{let{value:n,label:i,attributes:r}=e;return(0,E.jsx)("li",{role:"tab",tabIndex:o===n?0:-1,"aria-selected":o===n,ref:e=>{a.push(e)},onKeyDown:N,onClick:c,...r,className:(0,d.A)("tabs__item",x.tabItem,r?.className,{"tabs__item--active":o===n}),children:i??n},n)}))})}function f(e){let{lazy:n,children:i,selectedValue:r}=e;const l=(Array.isArray(i)?i:[i]).filter(Boolean);if(n){const e=l.find((e=>e.props.value===r));return e?(0,o.cloneElement)(e,{className:(0,d.A)("margin-top--md",e.props.className)}):null}return(0,E.jsx)("div",{className:"margin-top--md",children:l.map(((e,n)=>(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==r})))})}function b(e){const n=I(e);return(0,E.jsxs)("div",{className:(0,d.A)("tabs-container",x.tabList),children:[(0,E.jsx)(m,{...n,...e}),(0,E.jsx)(f,{...n,...e})]})}function p(e){const n=(0,T.A)();return(0,E.jsx)(b,{...e,children:N(e.children)},String(n))}},54213:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>s});var o=i(36672);const d={},r=o.createContext(d);function l(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:l(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);