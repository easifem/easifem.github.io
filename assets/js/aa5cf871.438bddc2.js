"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[34915],{42933:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>N,frontMatter:()=>s,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"DOF/GetValue","title":"GetValue","description":"Get the entries from the Fortran vector or realvector using the DOF object.","source":"@site/docs/docs-api/DOF/GetValue.md","sourceDirName":"DOF","slug":"/DOF/GetValue","permalink":"/docs-api/DOF/GetValue","draft":false,"unlisted":false,"editUrl":"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/DOF/GetValue.md","tags":[],"version":"current","lastUpdatedAt":1724304782000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Get","permalink":"/docs-api/DOF/Get"},"next":{"title":"NE","permalink":"/docs-api/DOF/NE"}}');var r=t(23420),i=t(54213);const s={},a="GetValue",c={},d=[{value:"Interface",id:"interface",level:2},{value:"Interface 2",id:"interface-2",level:2},{value:"Interface 3",id:"interface-3",level:2}];function l(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"getvalue",children:"GetValue"})}),"\n",(0,r.jsxs)(n.p,{children:["Get the entries from the Fortran vector or ",(0,r.jsx)(n.code,{children:"realvector"})," using the ",(0,r.jsx)(n.code,{children:"DOF"})," object."]}),"\n",(0,r.jsx)(n.h2,{id:"interface",children:"Interface"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE PURE SUBROUTINE GetValue(v, val, obj, idof, storageFMT, &\n    nodenum)\n    REAL(DFP), ALLOCATABLE, INTENT(INOUT) :: v(:)\n    REAL(DFP), INTENT(IN) :: val(:)\n    CLASS(DOF_), INTENT(IN) :: obj\n    INTEGER(I4B), INTENT(IN) :: idof(:)\n    INTEGER(I4B), INTENT(IN) :: storageFMT\n    INTEGER(I4B), INTENT(IN) :: nodenum(:)\n  END SUBROUTINE GetValue\nEND INTERFACE\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["This subroutine extracts the values from ",(0,r.jsx)(n.code,{children:"val"})," corresponding to degrees of freedom specified by ",(0,r.jsx)(n.code,{children:"idof(:)"}),". The results are returned in ",(0,r.jsx)(n.code,{children:"V"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"StorageFMT"})," can be ",(0,r.jsx)(n.code,{children:"NODES_FMT"})," or ",(0,r.jsx)(n.code,{children:"DOF_FMT"}),", which specifies the storage format of the returned vector."]}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["This routine will allocate the memory for ",(0,r.jsx)(n.code,{children:"v"}),". If you do not want this behavior, then you should call ",(0,r.jsx)(n.code,{children:"GetValue_"})," subroutine instead. The interface is given below."]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n MODULE PURE SUBROUTINE GetValue_(v, tsize, val, obj, idof, storageFMT, &\n                                        nodenum)\n    REAL(DFP), INTENT(INOUT) :: v(:)\n    !! values to return\n    INTEGER(I4B), INTENT(OUT) :: tsize\n    !! size of data written in v\n    REAL(DFP), INTENT(IN) :: val(:)\n    !! values to extract from\n    TYPE(DOF_), INTENT(IN) :: obj\n    !! degree of freedom object\n    INTEGER(I4B), INTENT(IN) :: idof(:)\n    !! degrees of freedom to extract\n    INTEGER(I4B), INTENT(IN) :: storageFMT\n    !! storage format of returned vector\n    INTEGER(I4B), INTENT(IN) :: nodenum(:)\n    !! node numbers to extract\n  END SUBROUTINE GetValue_\nEND INTERFACE\n"})}),"\n",(0,r.jsx)(n.h2,{id:"interface-2",children:"Interface 2"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE PURE SUBROUTINE GetValue(v, val, obj, idof, force3D)\n    REAL(DFP), ALLOCATABLE, INTENT(INOUT) :: v(:, :)\n    REAL(DFP), INTENT(IN) :: val(:)\n    CLASS(DOF_), INTENT(IN) :: obj\n    INTEGER(I4B), INTENT(IN) :: idof(:)\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: force3D\n  END SUBROUTINE GetValue\nEND INTERFACE\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This subroutine extracts all the values from ",(0,r.jsx)(n.code,{children:"val"})," corresponding to degrees of freedom specified by ",(0,r.jsx)(n.code,{children:"idof(:)"})," and returns it in ",(0,r.jsx)(n.code,{children:"V(:,:)"}),". Values in ",(0,r.jsx)(n.code,{children:"v(:,:)"})," are stored in xiJ format."]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Force3D"})," will return a vector in 3D. If there are only two components, then it will set the third component to 0."]})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["This routine will allocate the memory for ",(0,r.jsx)(n.code,{children:"v"}),". If you do not want this behavior, then you should call ",(0,r.jsx)(n.code,{children:"GetValue_"})," subroutine instead. The interface is given below."]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",children:"INTERFACE GetValue_\n MODULE PURE SUBROUTINE GetValue_(v, val, nrow, ncol, obj, idof, force3D)\n    REAL(DFP), INTENT(INOUT) :: v(:, :)\n    !! Data to be returned\n    INTEGER(I4B), INTENT(OUT) :: nrow, ncol\n    !! number of rows and columns written in v\n    REAL(DFP), INTENT(IN) :: val(:)\n    !! values to extract from\n    TYPE(DOF_), INTENT(IN) :: obj\n    !! degree of freedom object for val\n    INTEGER(I4B), INTENT(IN) :: idof(:)\n    !! degrees of freedom to extract\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: force3D\n    !! if true then return 3D vector\n  END SUBROUTINE GetValue_\nEND INTERFACE GetValue_\n"})}),"\n",(0,r.jsx)(n.h2,{id:"interface-3",children:"Interface 3"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",children:" INTERFACE\n  MODULE PURE SUBROUTINE GetValue(v, val, obj, idof, storageFMT)\n    REAL(DFP), ALLOCATABLE, INTENT(INOUT) :: v(:)\n    REAL(DFP), INTENT(IN) :: val(:)\n    CLASS(DOF_), INTENT(IN) :: obj\n    INTEGER(I4B), INTENT(IN) :: idof(:)\n    INTEGER(I4B), INTENT(IN) :: storageFMT\n  END SUBROUTINE GetValue\nEND INTERFACE\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This subroutine extracts the values from ",(0,r.jsx)(n.code,{children:"val"})," corresponding to degrees of freedom specified by ",(0,r.jsx)(n.code,{children:"idof(:)"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["It returns the results in ",(0,r.jsx)(n.code,{children:"V"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"StorageFMT"})," can be ",(0,r.jsx)(n.code,{children:"Nodes_FMT"})," or ",(0,r.jsx)(n.code,{children:"DOF_FMT"}),", specifying the returned vector's storage format."]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["This routine will allocate the memory for ",(0,r.jsx)(n.code,{children:"v"}),". If you do not want this behavior, then you should call ",(0,r.jsx)(n.code,{children:"GetValue_"})," subroutine instead. The interface is given below."]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",children:"INTERFACE GetValue_\n  MODULE PURE SUBROUTINE GetValue_(v, tsize, val, obj, idof, storageFMT)\n    REAL(DFP), INTENT(INOUT) :: v(:)\n    !! values to be returned\n    INTEGER(I4B), INTENT(OUT) :: tsize\n    !! size of data written in v\n    REAL(DFP), INTENT(IN) :: val(:)\n    !! values to extract from\n    TYPE(DOF_), INTENT(IN) :: obj\n    !! degree of freedom object\n    INTEGER(I4B), INTENT(IN) :: idof(:)\n    !! degrees of freedom to extract\n    INTEGER(I4B), INTENT(IN) :: storageFMT\n    !! stroage format of returned vector\n  END SUBROUTINE GetValue_\nEND INTERFACE GetValue_\n"})})]})}function N(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},54213:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var o=t(36672);const r={},i=o.createContext(r);function s(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);