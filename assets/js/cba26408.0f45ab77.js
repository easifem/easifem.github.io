"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[3459],{16051:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>c,frontMatter:()=>l,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"AbstractKernel/KernelMeshFields","title":"KernelMeshFields","description":"This class contains the mesh fields of the kernel.","source":"@site/docs/docs-api/AbstractKernel/KernelMeshFields.md","sourceDirName":"AbstractKernel","slug":"/AbstractKernel/KernelMeshFields","permalink":"/docs-api/AbstractKernel/KernelMeshFields","draft":false,"unlisted":false,"editUrl":"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/AbstractKernel/KernelMeshFields.md","tags":[],"version":"current","lastUpdatedAt":1735776220000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"KernelMaterials","permalink":"/docs-api/AbstractKernel/KernelMaterials"},"next":{"title":"KernelOpt","permalink":"/docs-api/AbstractKernel/KernelOpt"}}');var i=s(23420),a=s(54213);const l={},r="KernelMeshFields",o={},d=[{value:"Structure",id:"structure",level:2}];function m(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"kernelmeshfields",children:"KernelMeshFields"})}),"\n",(0,i.jsx)(n.p,{children:"This class contains the mesh fields of the kernel."}),"\n",(0,i.jsx)(n.p,{children:"Its structure is given below:"}),"\n",(0,i.jsx)(n.h2,{id:"structure",children:"Structure"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"TYPE :: KernelMeshFields_\n  TYPE(AbstractScalarMeshFieldPointer_), ALLOCATABLE :: scalarFields(:)\n  !! Scalar mesh fields\n\n  TYPE(AbstractVectorMeshFieldPointer_), ALLOCATABLE :: vectorFields(:)\n  !! Vector mesh fields\n\n  TYPE(AbstractTensorMeshFieldPointer_), ALLOCATABLE :: tensorFields(:)\n  !! tensor mesh fields\n\n  CLASS(AbstractScalarMeshField_), POINTER :: massDensity => NULL()\n  !! Mass density, scalar mesh field\n\n  INTEGER(I4B) :: massDensityFieldType = TypeField%normal\n  !! field type for mass density\n  !! normal means the field will change from one element to another\n\n  INTEGER(I4B) :: massDensityVarType = TypeField%constant\n  !! varType denotes how the field is changing inside the element\n  !! constant means the field is constant inside the element\n  !! space means the field changes in space element\n  !! spaceTime means the field changes in space-time element\n  !! time means the field changes in time element\n\n  INTEGER(I4B) :: massDensityDefineOn = TypeFEVariableOpt%quadrature\n  !! mass density is defined on quadrature points\n\n  INTEGER(I4B) :: massDensityMaxNNS = 0\n  !! maximum number of nodes in space for mass density\n\n  INTEGER(I4B) :: massDensityMaxNNT = 0\n  !! maximum number of nodes in time for mass density\n\n  CLASS(AbstractScalarMeshField_), POINTER :: shearModulus => NULL()\n  !! Lame parameter\n  !! NOTE: It is need in the case of Isotropic elasticity\n  !! This will be a scalar mesh field\n\n  INTEGER(I4B) :: shearModulusFieldType = TypeField%normal\n  !! field type for mass density\n  !! normal means the field will change from one element to another\n\n  INTEGER(I4B) :: shearModulusVarType = TypeField%constant\n  !! varType denotes how the field is changing inside the element\n  !! constant means the field is constant inside the element\n  !! space means the field changes in space element\n  !! spaceTime means the field changes in space-time element\n  !! time means the field changes in time element\n\n  INTEGER(I4B) :: shearModulusDefineOn = TypeFEVariableOpt%quadrature\n  !! mass density is defined on quadrature points\n\n  INTEGER(I4B) :: shearModulusMaxNNS = 0\n  !! maximum number of nodes in space for mass density\n\n  INTEGER(I4B) :: shearModulusMaxNNT = 0\n  !! maximum number of nodes in time for mass density\n\n  CLASS(AbstractScalarMeshField_), POINTER :: youngsModulus => NULL()\n  !! Lame parameter\n  !! NOTE: It is need in the case of Isotropic elasticity\n  !! This will be a scalar mesh field\n\n  INTEGER(I4B) :: youngsModulusFieldType = TypeField%normal\n  !! field type for mass density\n  !! normal means the field will change from one element to another\n\n  INTEGER(I4B) :: youngsModulusVarType = TypeField%constant\n  !! varType denotes how the field is changing inside the element\n  !! constant means the field is constant inside the element\n  !! space means the field changes in space element\n  !! spaceTime means the field changes in space-time element\n  !! time means the field changes in time element\n\n  INTEGER(I4B) :: youngsModulusDefineOn = TypeFEVariableOpt%quadrature\n  !! mass density is defined on quadrature points\n\n  INTEGER(I4B) :: youngsModulusMaxNNS = 0\n  !! maximum number of nodes in space for mass density\n\n  INTEGER(I4B) :: youngsModulusMaxNNT = 0\n  !! maximum number of nodes in time for mass density\n\n  CLASS(AbstractScalarMeshField_), POINTER :: dampCoeff_alpha => NULL()\n  !! Rayleigh damping coefficient alpha\n\n  CLASS(AbstractScalarMeshField_), POINTER :: dampCoeff_beta => NULL()\n  !! Rayleigh damping coefficient beta\n\n  INTEGER(I4B) :: dampCoeffFieldType = TypeField%normal\n  !! field type for mass density\n  !! normal means the field will change from one element to another\n\n  INTEGER(I4B) :: dampCoeffVarType = TypeField%constant\n  !! varType denotes how the field is changing inside the element\n  !! constant means the field is constant inside the element\n  !! space means the field changes in space element\n  !! spaceTime means the field changes in space-time element\n  !! time means the field changes in time element\n\n  INTEGER(I4B) :: dampCoeffDefineOn = TypeFEVariableOpt%quadrature\n  !! mass density is defined on quadrature points\n\n  INTEGER(I4B) :: dampCoeffMaxNNS = 0\n  !! maximum number of nodes in space for mass density\n\n  INTEGER(I4B) :: dampCoeffMaxNNT = 0\n  !! maximum number of nodes in time for mass density\n\n  CLASS(AbstractScalarMeshField_), POINTER :: scalarCoeff => NULL()\n  !! it can be phase velocity or coefficient of permiabillity for\n  !! isotropic medium this will be a scalar mesh field\n\n  INTEGER(I4B) :: scalarCoeffFieldType = TypeField%normal\n  !! field type for mass density\n  !! normal means the field will change from one element to another\n\n  INTEGER(I4B) :: scalarCoeffVarType = TypeField%constant\n  !! varType denotes how the field is changing inside the element\n  !! constant means the field is constant inside the element\n  !! space means the field changes in space element\n  !! spaceTime means the field changes in space-time element\n  !! time means the field changes in time element\n\n  INTEGER(I4B) :: scalarCoeffDefineOn = TypeFEVariableOpt%quadrature\n  !! mass density is defined on quadrature points\n\n  INTEGER(I4B) :: scalarCoeffMaxNNS = 0\n  !! maximum number of nodes in space for mass density\n\n  INTEGER(I4B) :: scalarCoeffMaxNNT = 0\n  !! maximum number of nodes in time for mass density\n\n  CLASS(AbstractScalarMeshField_), POINTER :: phase_velocity => NULL()\n  !! phase_velocity ! This will be a scalar mesh field\n\n  CLASS(AbstractVectorMeshField_), POINTER :: stress => NULL()\n  !! Stress tensor ! This will be a tensor mesh field\n\n  CLASS(AbstractVectorMeshField_), POINTER :: strain => NULL()\n  !! Strain tensor ! This will be a tensor mesh field\n\n  CLASS(AbstractVectorMeshField_), POINTER :: solidMechData => NULL()\n  !! Constitutive data for solid materials\n\n  CLASS(AbstractTensorMeshField_), POINTER :: Cijkl => NULL()\n  !! Elasticity tensor\n  !! NOTE: It is used for non Isotropic elasticity\n  !! This will be a tensor mesh field\n\n  INTEGER(I4B) :: cijklFieldType = TypeField%normal\n  !! field type for mass density\n  !! normal means the field will change from one element to another\n\n  INTEGER(I4B) :: cijklVarType = TypeField%constant\n  !! varType denotes how the field is changing inside the element\n  !! constant means the field is constant inside the element\n  !! space means the field changes in space element\n  !! spaceTime means the field changes in space-time element\n  !! time means the field changes in time element\n\n  INTEGER(I4B) :: cijklDefineOn = TypeFEVariableOpt%quadrature\n  !! mass density is defined on quadrature points\n\n  INTEGER(I4B) :: cijklMaxNNS = 0\n  !! maximum number of nodes in space for mass density\n\n  INTEGER(I4B) :: cijklMaxNNT = 0\n  !! maximum number of nodes in time for mass density\n\n  INTEGER(I4B) :: cijklDim1 = 0\n  !! dimension of elasticity tensor\n\n  INTEGER(I4B) :: cijklDim2 = 0\n  !! dimension of elasticity tensor\n\nEND TYPE KernelMeshFields_\n"})})]})}function c(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}},54213:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>r});var t=s(36672);const i={},a=t.createContext(i);function l(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);