"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[51919],{80156:(a,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>t,toc:()=>T});const t=JSON.parse('{"id":"ElemshapeData/GetHRQIParam","title":"GetHRQIParam","description":"Stabilization and discontinuity-capturing parameters for space-time flow computations with finite element and isogeometric discretizations, Takizawa, Tezduyar, Otoguro, Computational Mechanics (2018)","source":"@site/docs/docs-api/ElemshapeData/GetHRQIParam.md","sourceDirName":"ElemshapeData","slug":"/ElemshapeData/GetHRQIParam","permalink":"/docs-api/ElemshapeData/GetHRQIParam","draft":false,"unlisted":false,"editUrl":"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/ElemshapeData/GetHRQIParam.md","tags":[],"version":"current","lastUpdatedAt":1724304782000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"GetHRGNParam","permalink":"/docs-api/ElemshapeData/GetHRGNParam"},"next":{"title":"GetInterpolation","permalink":"/docs-api/ElemshapeData/GetInterpolation"}}');var r=n(23420),i=n(54213);const o={},s="GetHRQIParam",c={},T=[];function N(a){const e={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,i.R)(),...a.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"gethrqiparam",children:"GetHRQIParam"})}),"\n",(0,r.jsx)(e.p,{children:"Stabilization and discontinuity-capturing parameters for space-time flow computations with finite element and isogeometric discretizations, Takizawa, Tezduyar, Otoguro, Computational Mechanics (2018)"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-fortran",children:"MODULE PURE SUBROUTINE GetHRQIParam1(obj, h, val, hmax, hmin, &\n  & r, opt)\n  CLASS(ElemshapeData_), INTENT(IN) :: obj\n    !! obj can be an instance of [[STElemshapeData_]]\n  REAL(DFP), ALLOCATABLE, INTENT(INOUT) :: h( : )\n    !! h is a scalar, and defined on quadrature points\n  TYPE(FEVariable_), INTENT(IN) :: val\n    !! val can be a vector or a scalar\n  REAL(DFP), OPTIONAL, ALLOCATABLE, INTENT(INOUT) :: hmax( : )\n  REAL(DFP), OPTIONAL, ALLOCATABLE, INTENT(INOUT) :: hmin( : )\n  REAL(DFP), OPTIONAL, ALLOCATABLE, INTENT(INOUT) :: r( :, : )\n  INTEGER(I4B), OPTIONAL, INTENT(IN) :: opt\n    !! currently, opt is not used, but it may be used in future\nEND SUBROUTINE GetHRQIParam1\n"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-fortran",children:"MODULE PURE SUBROUTINE GetHRQIParam2(obj, h, val, hmax, &\n  & hmin, r, opt)\n  CLASS(ElemshapeData_), INTENT(IN) :: obj\n    !! obj can be an instance of [[STElemshapeData_]]\n  TYPE(FEVariable_), INTENT(INOUT) :: h\n    !! h is a scalar, and defined on quadrature points\n  TYPE(FEVariable_), INTENT(IN) :: val\n    !! val can be a vector or a scalar\n  TYPE(FEVariable_), OPTIONAL, INTENT(INOUT) :: hmax, hmin, r\n    !! h is a scalar, and defined on quadrature points\n  INTEGER(I4B), OPTIONAL, INTENT(IN) :: opt\n    !! currently, opt is not used, but it may be used in future\nEND SUBROUTINE GetHRQIParam2\n"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-fortran",children:"MODULE PURE SUBROUTINE GetHRQIParam3(obj, h, val, hmax, &\n  & hmin, r, opt)\n  CLASS(STElemshapeData_), INTENT(IN) :: obj(:)\n    !! Spacetime shape function data, obj(ipt) denotes data at\n    !! ipt quadrature point in time domain\n  REAL(DFP), ALLOCATABLE, INTENT(INOUT) :: h( :, : )\n    !! scalar variable, defined on space-time quadrature points\n  TYPE(FEVariable_), INTENT(IN) :: val\n    !! it can be a scalar, defined on space or space-time quadrature points\n  REAL(DFP), OPTIONAL, ALLOCATABLE, INTENT(INOUT) :: hmax( :, : )\n  REAL(DFP), OPTIONAL, ALLOCATABLE, INTENT(INOUT) :: hmin( :, : )\n  REAL(DFP), OPTIONAL, ALLOCATABLE, INTENT(INOUT) :: r( :, :, : )\n    !! scalar variable, defined on space-time quadrature points\n  INTEGER(I4B), OPTIONAL, INTENT(IN) :: opt\nEND SUBROUTINE GetHRQIParam3\n"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-fortran",children:"MODULE PURE SUBROUTINE GetHRQIParam4(obj, h, val, hmax, &\n  & hmin, r, opt)\n  CLASS(STElemshapeData_), INTENT(IN) :: obj(:)\n    !! Spacetime shape function data, obj(ipt) denotes data at\n    !! ipt quadrature point in time domain\n  TYPE(FEVariable_), INTENT(INOUT) :: h\n    !! scalar variable, defined on space-time quadrature points\n  TYPE(FEVariable_), INTENT(IN) :: val\n    !! it can be a scalar, defined on space or space-time quadrature points\n  TYPE(FEVariable_), OPTIONAL, INTENT(INOUT) :: hmax, hmin, r\n  INTEGER(I4B), OPTIONAL, INTENT(IN) :: opt\nEND SUBROUTINE GetHRQIParam4\n"})})]})}function d(a={}){const{wrapper:e}={...(0,i.R)(),...a.components};return e?(0,r.jsx)(e,{...a,children:(0,r.jsx)(N,{...a})}):N(a)}},54213:(a,e,n)=>{n.d(e,{R:()=>o,x:()=>s});var t=n(36672);const r={},i=t.createContext(r);function o(a){const e=t.useContext(i);return t.useMemo((function(){return"function"==typeof a?a(e):{...e,...a}}),[e,a])}function s(a){let e;return e=a.disableParentContext?"function"==typeof a.components?a.components(r):a.components||r:o(a.components),t.createElement(i.Provider,{value:e},a.children)}}}]);