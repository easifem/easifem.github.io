"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[35538],{13274:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>T,contentTitle:()=>p,default:()=>D,frontMatter:()=>f,metadata:()=>t,toc:()=>I});const t=JSON.parse('{"id":"DomainConnectivity/InitiateFacetToCellData","title":"InitiateFacetToCellData","description":"This method creates the facet to cell element-data.","source":"@site/docs/docs-api/DomainConnectivity/InitiateFacetToCellData.md","sourceDirName":"DomainConnectivity","slug":"/DomainConnectivity/InitiateFacetToCellData","permalink":"/docs-api/DomainConnectivity/InitiateFacetToCellData","draft":false,"unlisted":false,"editUrl":"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/DomainConnectivity/InitiateFacetToCellData.md","tags":[],"version":"current","lastUpdatedAt":1724304782000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"InitiateCellToCellData","permalink":"/docs-api/DomainConnectivity/InitiateCellToCellData"},"next":{"title":"InitiateNodeToNodeData","permalink":"/docs-api/DomainConnectivity/InitiateNodeToNodes"}}');var l=a(23420),i=a(54213),s=a(36492),c=a(92492);function r(e){const n={code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(n.p,{children:["In this example we will see how to use ",(0,l.jsx)(n.code,{children:"InitiateFacetToCellData"}),". We use\nthis routine to compute the facet to cell data between a cell mesh and a facet mesh. The facet mesh is the boundary of the mesh."]}),"\n",(0,l.jsx)(n.p,{children:"Importing modules and variables"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:'PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  IMPLICIT NONE\n  TYPE( DomainConnectivity_ ) :: obj\n  TYPE( Domain_ ) :: cellDomain\n  TYPE( HDF5File_ ) :: cellDomainFile\n  CHARACTER( LEN=* ), PARAMETER :: cellDomainFileName="./mesh_tri3.h5"\n  CLASS( Mesh_ ), POINTER :: cellMesh\n  CLASS( Mesh_ ), POINTER :: facetMesh\n  CLASS( ReferenceElement_ ), POINTER :: refelem\n  INTEGER( I4B ) :: ii, iel\n'})}),"\n",(0,l.jsx)(n.p,{children:"Open the mesh file for cellDomain"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:'CALL cellDomainFile%Initiate( FileName=cellDomainFileName, MODE="READ" )\nCALL cellDomainFile%Open()\n'})}),"\n",(0,l.jsx)(n.p,{children:"Initiate the cellDomain"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:'CALL cellDomain%Initiate( cellDomainFile, "")\n'})}),"\n",(0,l.jsx)(n.p,{children:"Make a pointer to cellMesh and facet mesh"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"cellMesh => cellDomain%getMeshPointer( dim=2, entityNum=1)\nfacetMesh => cellDomain%getMeshPointer( dim=1, entityNum=2 )\n"})}),"\n",(0,l.jsx)(n.p,{children:"Initiate FacetTOCellData."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:'CALL obj%InitiateFacetToCellData( facetMesh=facetMesh, &\n  & cellMesh=cellMesh, dim=2, entityNum=1, isMaster=.TRUE. )\nCALL obj%DisplayFacetToCellData( msg="facetToCell=" )\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"  CALL cellDomainFile%Deallocate()\n  CALL cellDomain%Deallocate()\n  CALL obj%Deallocate()\nEND PROGRAM main\n"})})]})}function o(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(r,{...e})}):r(e)}function h(e){const n={code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(n.p,{children:["In this example we will see how to use ",(0,l.jsx)(n.code,{children:"InitiateFacetToCellData"}),". We use\nthis routine to compute the facet to cell data between a cell mesh and a facet mesh. The facet mesh is the boundary of the mesh. This example is similar to the example 21, but in this case we use ",(0,l.jsx)(n.code,{children:"isMaster=.FALSE."})]}),"\n",(0,l.jsx)(n.p,{children:"Importing modules and variables"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:'PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  IMPLICIT NONE\n  TYPE( DomainConnectivity_ ) :: obj\n  TYPE( Domain_ ) :: cellDomain\n  TYPE( HDF5File_ ) :: cellDomainFile\n  CHARACTER( LEN=* ), PARAMETER :: cellDomainFileName="./mesh_tri3b.h5"\n  CLASS( Mesh_ ), POINTER :: cellMesh\n  CLASS( Mesh_ ), POINTER :: facetMesh\n  CLASS( ReferenceElement_ ), POINTER :: refelem\n  INTEGER( I4B ) :: ii, iel\n'})}),"\n",(0,l.jsx)(n.p,{children:"Open the mesh file for cellDomain"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:'CALL cellDomainFile%Initiate( FileName=cellDomainFileName, MODE="READ" )\nCALL cellDomainFile%Open()\n'})}),"\n",(0,l.jsx)(n.p,{children:"Initiate the cellDomain"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:'CALL cellDomain%Initiate( cellDomainFile, "")\n'})}),"\n",(0,l.jsx)(n.p,{children:"Make a pointer to cellMesh and facet mesh"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"cellMesh => cellDomain%getMeshPointer( dim=2, entityNum=1)\nfacetMesh => cellDomain%getMeshPointer( dim=1, entityNum=7 )\n"})}),"\n",(0,l.jsx)(n.p,{children:"Initiate FacetTOCellData."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:'CALL obj%InitiateFacetToCellData( facetMesh=facetMesh, &\n  & cellMesh=cellMesh, dim=2, entityNum=1, isMaster=.TRUE. )\nCALL obj%DisplayFacetToCellData( msg="facetToCell=" )\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"  CALL cellDomainFile%Deallocate()\n  CALL cellDomain%Deallocate()\n  CALL obj%Deallocate()\nEND PROGRAM main\n"})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(h,{...e})}):h(e)}function m(e){const n={code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(n.p,{children:["In this example we will see how to use ",(0,l.jsx)(n.code,{children:"InitiateFacetToCellData"}),". We use this routine to compute the facet to cell data between a cell domain and a facet mesh. The facet mesh is the internal boundary of the domain."]}),"\n",(0,l.jsx)(n.p,{children:"Importing modules and variables"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:'PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  IMPLICIT NONE\n  TYPE( DomainConnectivity_ ) :: obj\n  TYPE( Domain_ ) :: cellDomain\n  TYPE( HDF5File_ ) :: cellDomainFile\n  CHARACTER( LEN=* ), PARAMETER :: cellDomainFileName="./mesh_tri3.h5"\n  CLASS( Mesh_ ), POINTER :: cellMesh\n  CLASS( Mesh_ ), POINTER :: facetMesh\n  CLASS( ReferenceElement_ ), POINTER :: refelem\n  INTEGER( I4B ) :: ii, iel\n'})}),"\n",(0,l.jsx)(n.p,{children:"Open the mesh file for cellDomain"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:'CALL cellDomainFile%Initiate( FileName=cellDomainFileName, MODE="READ" )\nCALL cellDomainFile%Open()\n'})}),"\n",(0,l.jsx)(n.p,{children:"Initiate the cellDomain"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:'CALL cellDomain%Initiate( cellDomainFile, "")\n'})}),"\n",(0,l.jsx)(n.p,{children:"Make a pointer to cellMesh and facet mesh"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"facetMesh => cellDomain%getMeshPointer( dim=1, entityNum=2 )\n"})}),"\n",(0,l.jsx)(n.p,{children:"Initiate FacetTOCellData."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:'CALL obj%InitiateFacetToCellData( facetMesh=facetMesh, &\n  & cellDomain=cellDomain )\nCALL obj%DisplayFacetToCellData( msg="facetToCell=" )\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"  CALL cellDomainFile%Deallocate()\n  CALL cellDomain%Deallocate()\n  CALL obj%Deallocate()\nEND PROGRAM main\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(m,{...e})}):m(e)}const f={},p="InitiateFacetToCellData",T={},I=[{value:"Interface1",id:"interface1",level:2},{value:"Interface2",id:"interface2",level:2},{value:"Interface3",id:"interface3",level:2},{value:"Interface4",id:"interface4",level:2}];function N(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"initiatefacettocelldata",children:"InitiateFacetToCellData"})}),"\n",(0,l.jsx)(n.p,{children:"This method creates the facet to cell element-data."}),"\n",(0,l.jsx)(n.p,{children:"In this method we set the relation between element of a facet mesh (Facet elements) and master and slave domain."}),"\n",(0,l.jsx)(n.p,{children:"A facet mesh usually denotes the boundary or part of boundary of master and slave domain."}),"\n",(0,l.jsx)(n.admonition,{type:"caution",children:(0,l.jsxs)(n.p,{children:["Please make sure that ",(0,l.jsx)(n.code,{children:"nodeToElements"})," data is initiated in the cell mesh (or domain) before calling this routine."]})}),"\n",(0,l.jsx)(n.h2,{id:"interface1",children:"Interface1"}),"\n","\n",(0,l.jsxs)(s.A,{children:[(0,l.jsxs)(c.A,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE InitiateFacetToCellData(obj, facetMesh, &\n    & cellMesh, dim, entityNum, isMaster)\n    CLASS(DomainConnectivity_), INTENT(INOUT) :: obj\n    !! Domain connectivity data\n    CLASS(Mesh_), INTENT(INOUT) :: facetMesh\n    !! Mesh of facet elements\n    CLASS(Mesh_), INTENT(INOUT) :: cellMesh\n    !! Master mesh\n    INTEGER(I4B), INTENT(IN) :: dim\n    INTEGER(I4B), INTENT(IN) :: entityNum\n    LOGICAL(LGT), INTENT(IN) :: isMaster\n    !! if true then cell Mesh is master cell\n    !! if false then cell mesh is slave cell\n  END SUBROUTINE InitiateFacetToCellData\nEND INTERFACE\n"})}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["This routine initiate ",(0,l.jsx)(n.code,{children:"facetToCell"})," for given facetMesh and CellMesh"]}),"\n",(0,l.jsx)(n.li,{children:"In this case facetMesh should be a boundary of cellMesh"}),"\n",(0,l.jsx)(n.li,{children:"This routine should not be used for internal boundary."}),"\n"]})]}),(0,l.jsx)(c.A,{value:"1",label:"\ufe0f\u0700 Example 1",children:(0,l.jsx)(o,{})}),(0,l.jsx)(c.A,{value:"2",label:"\ufe0f\u0700 Example 2",children:(0,l.jsx)(d,{})}),(0,l.jsx)(c.A,{value:"close",label:"\u21a2 "})]}),"\n",(0,l.jsx)(n.h2,{id:"interface2",children:"Interface2"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE InitiateFacetToCellData(obj, facetMesh, &\n    & masterDomain, slaveDomain)\n    CLASS(DomainConnectivity_), INTENT(INOUT) :: obj\n    !! Mesh connectivity data\n    CLASS(Mesh_), INTENT(INOUT) :: facetMesh\n    !! Mesh of facet elements\n    CLASS(Domain_), INTENT(INOUT) :: masterDomain\n    !! Domain of master elements\n    CLASS(Domain_), INTENT(INOUT) :: slaveDomain\n    !! Domain of slave elements\n  END SUBROUTINE InitiateFacetToCellData\nEND INTERFACE\n"})}),"\n",(0,l.jsx)(n.p,{children:"This subroutine generates the faceToCell connectivity data between masterDomain, slaveDomain and faceMesh."}),"\n",(0,l.jsxs)(n.p,{children:["In this case facetMesh should a boundary of masterDomain and slaveDomain. In otherwords, facetMesh cannot represent the internal boundary.\nThis routine calls ",(0,l.jsx)(n.code,{children:"InitiateFacetToCellData1"})," routine."]}),"\n",(0,l.jsx)(n.h2,{id:"interface3",children:"Interface3"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE dc_InitiateFacetToCellData3(obj, facetMesh, &\n    & cellMesh, dim, entityNum)\n    CLASS(DomainConnectivity_), INTENT(INOUT) :: obj\n    !! Domain connectivity data\n    CLASS(Mesh_), INTENT(INOUT) :: facetMesh\n    !! Mesh of facet elements\n    CLASS(Mesh_), INTENT(INOUT) :: cellMesh\n    !! Master mesh\n    INTEGER(I4B), INTENT(IN) :: dim\n    INTEGER(I4B), INTENT(IN) :: entityNum\n  END SUBROUTINE dc_InitiateFacetToCellData3\nEND INTERFACE\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["This routine initiate ",(0,l.jsx)(n.code,{children:"facetToCell"})," for given facetMesh and CellMesh"]}),"\n",(0,l.jsx)(n.li,{children:"In this case facetMesh can be an internal boundary of cellMesh"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"interface4",children:"Interface4"}),"\n",(0,l.jsxs)(s.A,{children:[(0,l.jsxs)(c.A,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE InitiateFacetToCellData(obj, facetMesh, cellDomain)\n    CLASS(DomainConnectivity_), INTENT(INOUT) :: obj\n    !! Domain connectivity data\n    CLASS(Mesh_), INTENT(INOUT) :: facetMesh\n    !! Mesh of facet elements\n    CLASS(Domain_), INTENT(INOUT) :: cellDomain\n    !! Master mesh\n  END SUBROUTINE InitiateFacetToCellData\nEND INTERFACE\n"})}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["This routine initiates ",(0,l.jsx)(n.code,{children:"facetToCell"})," for given facetMesh and CellMesh"]}),"\n",(0,l.jsx)(n.li,{children:"In this case facetMesh can be an internal boundary of cellMesh"}),"\n"]})]}),(0,l.jsx)(c.A,{value:"example",label:"\ufe0f\u0700 See example",children:(0,l.jsx)(u,{})}),(0,l.jsx)(c.A,{value:"close",label:"\u21a2 "})]})]})}function D(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(N,{...e})}):N(e)}},92492:(e,n,a)=>{a.d(n,{A:()=>s});a(36672);var t=a(28923);const l={tabItem:"tabItem_VSPN"};var i=a(23420);function s(e){let{children:n,hidden:a,className:s}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,t.A)(l.tabItem,s),hidden:a,children:n})}},36492:(e,n,a)=>{a.d(n,{A:()=>E});var t=a(36672),l=a(28923),i=a(19929),s=a(85291),c=a(5581),r=a(80034),o=a(12715),h=a(62741);function d(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function m(e){const{values:n,children:a}=e;return(0,t.useMemo)((()=>{const e=n??function(e){return d(e).map((e=>{let{props:{value:n,label:a,attributes:t,default:l}}=e;return{value:n,label:a,attributes:t,default:l}}))}(a);return function(e){const n=(0,o.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,a])}function u(e){let{value:n,tabValues:a}=e;return a.some((e=>e.value===n))}function f(e){let{queryString:n=!1,groupId:a}=e;const l=(0,s.W6)(),i=function(e){let{queryString:n=!1,groupId:a}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:n,groupId:a});return[(0,r.aZ)(i),(0,t.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(l.location.search);n.set(i,e),l.replace({...l.location,search:n.toString()})}),[i,l])]}function p(e){const{defaultValue:n,queryString:a=!1,groupId:l}=e,i=m(e),[s,r]=(0,t.useState)((()=>function(e){let{defaultValue:n,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!u({value:n,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=a.find((e=>e.default))??a[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:i}))),[o,d]=f({queryString:a,groupId:l}),[p,T]=function(e){let{groupId:n}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(n),[l,i]=(0,h.Dv)(a);return[l,(0,t.useCallback)((e=>{a&&i.set(e)}),[a,i])]}({groupId:l}),I=(()=>{const e=o??p;return u({value:e,tabValues:i})?e:null})();(0,c.A)((()=>{I&&r(I)}),[I]);return{selectedValue:s,selectValue:(0,t.useCallback)((e=>{if(!u({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);r(e),d(e),T(e)}),[d,T,i]),tabValues:i}}var T=a(32111);const I={tabList:"tabList_csSQ",tabItem:"tabItem_Bcmo"};var N=a(23420);function D(e){let{className:n,block:a,selectedValue:t,selectValue:s,tabValues:c}=e;const r=[],{blockElementScrollPositionUntilNextRender:o}=(0,i.a_)(),h=e=>{const n=e.currentTarget,a=r.indexOf(n),l=c[a].value;l!==t&&(o(n),s(l))},d=e=>{let n=null;switch(e.key){case"Enter":h(e);break;case"ArrowRight":{const a=r.indexOf(e.currentTarget)+1;n=r[a]??r[0];break}case"ArrowLeft":{const a=r.indexOf(e.currentTarget)-1;n=r[a]??r[r.length-1];break}}n?.focus()};return(0,N.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.A)("tabs",{"tabs--block":a},n),children:c.map((e=>{let{value:n,label:a,attributes:i}=e;return(0,N.jsx)("li",{role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:e=>{r.push(e)},onKeyDown:d,onClick:h,...i,className:(0,l.A)("tabs__item",I.tabItem,i?.className,{"tabs__item--active":t===n}),children:a??n},n)}))})}function j(e){let{lazy:n,children:a,selectedValue:i}=e;const s=(Array.isArray(a)?a:[a]).filter(Boolean);if(n){const e=s.find((e=>e.props.value===i));return e?(0,t.cloneElement)(e,{className:(0,l.A)("margin-top--md",e.props.className)}):null}return(0,N.jsx)("div",{className:"margin-top--md",children:s.map(((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==i})))})}function x(e){const n=p(e);return(0,N.jsxs)("div",{className:(0,l.A)("tabs-container",I.tabList),children:[(0,N.jsx)(D,{...n,...e}),(0,N.jsx)(j,{...n,...e})]})}function E(e){const n=(0,T.A)();return(0,N.jsx)(x,{...e,children:d(e.children)},String(n))}},54213:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>c});var t=a(36672);const l={},i=t.createContext(l);function s(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:s(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);