"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[17519],{32910:(n,e,a)=>{a.r(e),a.d(e,{assets:()=>l,contentTitle:()=>d,default:()=>L,frontMatter:()=>s,metadata:()=>t,toc:()=>m});const t=JSON.parse('{"id":"AbstractBC/Initiate","title":"Initiate","description":"Initiate the AbstractBC","source":"@site/docs/docs-api/AbstractBC/Initiate.md","sourceDirName":"AbstractBC","slug":"/AbstractBC/Initiate","permalink":"/docs-api/AbstractBC/Initiate","draft":false,"unlisted":false,"editUrl":"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/AbstractBC/Initiate.md","tags":[],"version":"current","lastUpdatedAt":1724304782000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"ImportFromToml","permalink":"/docs-api/AbstractBC/ImportFromToml"},"next":{"title":"IsUseFunction","permalink":"/docs-api/AbstractBC/IsUseFunction"}}');var i=a(23420),o=a(54213),r=a(1e3);const s={},d="Initiate",l={},m=[{value:"Interface",id:"interface",level:2},...r.RM];function c(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.R)(),...n.components},{TabItem:a,Tabs:t}=e;return a||A("TabItem",!0),t||A("Tabs",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"initiate",children:"Initiate"})}),"\n",(0,i.jsxs)(e.p,{children:["Initiate the ",(0,i.jsx)(e.a,{href:"/docs-api/AbstractBC/AbstractBC_",children:"AbstractBC"})]}),"\n",(0,i.jsx)("span",{class:"badge badge--secondary",children:" @ConstructorMethods "}),"\n",(0,i.jsx)(e.h2,{id:"interface",children:"Interface"}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)(a,{value:"interface",label:"\u0700 Interface",default:!0,children:(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-fortran",children:"ABSTRACT INTERFACE\n  SUBROUTINE Initiate(obj, param, boundary, dom)\n    IMPORT :: AbstractBC_, ParameterList_, MeshSelection_, Domain_\n    CLASS(AbstractBC_), INTENT(INOUT) :: obj\n    TYPE(ParameterList_), INTENT(IN) :: param\n    TYPE(MeshSelection_), INTENT(IN) :: boundary\n    CLASS(Domain_), TARGET, INTENT(IN) :: dom\n  END SUBROUTINE Initiate\nEND INTERFACE\n"})})}),(0,i.jsx)(a,{value:"example",label:"\ufe0f\u0700 See example",children:(0,i.jsx)(r.Ay,{})}),(0,i.jsx)(a,{value:"close",label:"\u21a2 "})]})]})}function L(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(c,{...n})}):c(n)}function A(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}},1e3:(n,e,a)=>{a.d(e,{Ay:()=>s,RM:()=>o});var t=a(23420),i=a(54213);const o=[];function r(n){const e={code:"code",p:"p",pre:"pre",...(0,i.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:["Initiate an instance of ",(0,t.jsx)(e.code,{children:"DirichletBC"}),"."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-fortran",children:'!> author: Vikas Sharma, Ph. D.\n! date:  2023-11-27\n! summary:  Initiate an instance of DirichletBC\n!\n!# Introduction\n!\n! Initiate an instance of DirichletBC  for\n! Constant boundary condition\n\nPROGRAM main\nUSE easifemBase\nUSE easifemClasses\nIMPLICIT NONE\n\nTYPE(DirichletBC_) :: obj\nTYPE(MeshSelection_) :: boundary\nTYPE(ParameterList_) :: param\nTYPE(Domain_) :: dom\nTYPE(HDF5File_) :: domainfile\nCHARACTER(*), PARAMETER :: domainfilename = "./mesh3D.h5"\nINTEGER(I4B) :: bottom = 1, top = 2, left = 3, right = 4,  &\n  & front = 5, behind = 6, nsd\nINTEGER(I4B), ALLOCATABLE :: nodeNum(:)\nREAL(DFP), ALLOCATABLE :: nodalValue(:, :)\n\nCALL FPL_Init; CALL param%Initiate()\nCALL domainfile%Initiate(filename=domainfilename, mode="READ")\nCALL domainfile%OPEN()\nCALL dom%Initiate(domainfile, group="")\n\nnsd = dom%GetNSD()\n\n! We call Set SetAbstractBCParam to set the parameter for boundary condition\nCALL SetAbstractBCParam(param=param, prefix=obj%GetPrefix(),  &\n  & name="ZeroBC", idof=1, nodalValueType=Constant)\n\n! We call SetMeshSelectionParam to set the parameter for boundary condition\nCALL SetMeshSelectionParam(param=param, prefix=boundary%GetPrefix(),  &\n  & isSelectionByMeshID=.TRUE.)\n\nCALL boundary%Initiate(param)\n\nCALL boundary%Add(dom=dom, dim=nsd - 1, meshID=[top])\nCALL boundary%Set()\n\nCALL boundary%Display("boundary")\n\nCALL obj%Initiate(param=param, boundary=boundary, dom=dom)\n\nCALL obj%Set(constantNodalValue=0.0_DFP)\n\nCALL obj%Display("dbc"//CHAR_LF)\n\nCALL obj%Get(nodeNum=nodeNum, nodalValue=nodalValue)\n\nCALL Display(nodeNum, "nodeNum", advance="NO")\nCALL Display(nodalValue, "nodalValue", advance="YES")\n\nCALL domainfile%DEALLOCATE()\nCALL dom%DEALLOCATE()\nCALL param%DEALLOCATE(); CALL FPL_Finalize\nEND PROGRAM main\n'})})]})}function s(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(r,{...n})}):r(n)}},61925:(n,e,a)=>{a.r(e),a.d(e,{assets:()=>C,contentTitle:()=>u,default:()=>h,frontMatter:()=>A,metadata:()=>t,toc:()=>p});const t=JSON.parse('{"id":"DirichletBC/Initiate","title":"Initiate","description":"Examples","source":"@site/docs/docs-api/DirichletBC/Initiate.md","sourceDirName":"DirichletBC","slug":"/DirichletBC/Initiate","permalink":"/docs-api/DirichletBC/Initiate","draft":false,"unlisted":false,"editUrl":"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/DirichletBC/Initiate.md","tags":[],"version":"current","lastUpdatedAt":1747026181000,"sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Structure","permalink":"/docs-api/DirichletBC/DirichletBC_"},"next":{"title":"ImportFromToml","permalink":"/docs-api/DirichletBC/ImportFromToml"}}');var i=a(23420),o=a(54213),r=a(32910),s=a(68913);const d='!> author: Vikas Sharma, Ph. D.\n! date:  2023-11-27\n! summary:  Initiate an instance of DirichletBC\n!\n!# Introduction\n!\n! Initiate an instance of DirichletBC  for\n! Constant boundary condition\n\nPROGRAM main\nUSE GlobalData\nUSE BaseType\nUSE Display_Method\nUSE DirichletBC_Class\nUSE MeshSelection_Class\nUSE FPL\nUSE FEDomain_Class\nUSE HDF5File_Class\nUSE ReallocateUtility\nUSE AbstractBC_Class\n\nIMPLICIT NONE\n\nCHARACTER(*), PARAMETER :: domainfilename = &\n                           "../../Mesh/examples/meshdata/small_mesh.h5"\nINTEGER(I4B), PARAMETER :: bottom = 1, top = 3, left = 4, right = 2\n\nTYPE(DirichletBC_) :: obj\nTYPE(MeshSelection_) :: boundary\nTYPE(ParameterList_) :: param\nTYPE(FEDomain_) :: dom\nTYPE(HDF5File_) :: domainfile\n\nINTEGER(I4B) :: nsd, tsize, nrow, ncol\n\nINTEGER(I4B), ALLOCATABLE :: nodeNum(:)\n\nREAL(DFP), ALLOCATABLE :: nodalValue(:, :)\n\nCALL FPL_Init; CALL param%Initiate()\nCALL domainfile%Initiate(filename=domainfilename, mode="READ")\nCALL domainfile%OPEN()\nCALL dom%Initiate(domainfile, group="")\n\nnsd = dom%GetNSD()\n\n! We call Set SetAbstractBCParam to set the parameter for boundary condition\nCALL SetAbstractBCParam(param=param, prefix=obj%GetPrefix(), &\n                        name="ZeroBC", idof=1, nodalValueType=Constant)\n\n! We call SetMeshSelectionParam to set the parameter for boundary condition\nCALL SetMeshSelectionParam(param=param, prefix=boundary%GetPrefix(), &\n                           isSelectionByMeshID=.TRUE.)\n\nCALL boundary%Initiate(param)\n\nCALL boundary%Add(dom=dom, dim=nsd - 1, meshID=[bottom])\nCALL boundary%Set()\n\nCALL boundary%Display("boundary")\n\nCALL obj%Initiate(param=param, boundary=boundary, dom=dom)\n\nCALL obj%Set(constantNodalValue=0.0_DFP)\n\nCALL obj%Display("dbc"//CHAR_LF)\n\ntsize = obj%GetTotalNodeNum()\n\nCALL Reallocate(nodenum, tsize)\nCALL Reallocate(nodalvalue, tsize, 1)\nCALL obj%Get(nodeNum=nodeNum, nodalValue=nodalValue, nrow=nrow, ncol=ncol)\n\nCALL Display(nodeNum, "nodeNum", advance="NO")\nCALL Display(nodalValue, "nodalValue", advance="YES")\n\nCALL domainfile%DEALLOCATE()\nCALL dom%DEALLOCATE()\nCALL param%DEALLOCATE(); CALL FPL_Finalize\nEND PROGRAM main\n';function l(n){return(0,i.jsx)(s.A,{language:"fortran",children:d})}function m(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(l,{...n})}):l()}var c=a(70082),L=a(28947);const A={sidebar_position:3},u="Initiate",C={},p=[...r.toc,{value:"Examples",id:"examples",level:2},...c.RM,...L.RM];function E(n){const e={h1:"h1",h2:"h2",header:"header",...(0,o.R)(),...n.components},{TabItem:a,Tabs:t}=e;return a||f("TabItem",!0),t||f("Tabs",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"initiate",children:"Initiate"})}),"\n","\n",(0,i.jsx)(r.default,{}),"\n",(0,i.jsx)(e.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)(a,{value:"example",label:"Example 1",children:(0,i.jsx)(m,{})}),(0,i.jsx)(a,{value:"ex2",label:"Example 2",children:(0,i.jsx)(c.Ay,{})}),(0,i.jsx)(a,{value:"ex3",label:"Example 3",children:(0,i.jsx)(L.Ay,{})}),(0,i.jsx)(a,{value:"close",label:"\u21a2 Close",default:!0})]})]})}function h(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(E,{...n})}):E(n)}function f(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}},70082:(n,e,a)=>{a.d(e,{Ay:()=>l,RM:()=>s});var t=a(23420),i=a(54213),o=a(68913);const r='!> author: Vikas Sharma, Ph. D.\n! date:  2023-11-27\n! summary:  Initiate an instance of DirichletBC\n!\n!# Introduction\n!\n! Initiate an instance of DirichletBC  for Constant boundary condition\n! In this example we initiate an instance of [DirichletBC](/docs-api/DirichletBC) by using the [UserFunction](/docs-api/UserFunction). The user function will be configured to give constant value. We will define a pointer to `UserFunction_` and then call [Set](/docs-api/AbstractBC/Set) method. Then, the `Set` method will point to the user supplied `UserFunction`.\n\nPROGRAM main\nUSE easifemBase\nUSE easifemClasses\nIMPLICIT NONE\n\nCHARACTER(*), PARAMETER :: myName = "main"\nCHARACTER(*), PARAMETER :: modName = "main"\nTYPE(DirichletBC_) :: obj\nTYPE(MeshSelection_) :: boundary\nTYPE(ParameterList_) :: param\nTYPE(Domain_) :: dom\nTYPE(HDF5File_) :: domainfile\nCLASS(UserFunction_), POINTER :: func\nCHARACTER(*), PARAMETER :: domainfilename = "./mesh3D.h5"\nINTEGER(I4B) :: bottom = 1, top = 2, left = 3, right = 4,  &\n  & front = 5, behind = 6, nsd\nINTEGER(I4B), ALLOCATABLE :: nodeNum(:)\nREAL(DFP), ALLOCATABLE :: nodalValue(:, :)\n\n! Initiate Domain\n\nCALL FPL_Init; CALL param%Initiate()\nCALL domainfile%Initiate(filename=domainfilename, mode="READ")\nCALL domainfile%OPEN()\nCALL dom%Initiate(domainfile, group="")\n\nnsd = dom%GetNSD()\n\n! We call Set SetAbstractBCParam to set the parameter for boundary condition\nCALL SetAbstractBCParam(param=param, prefix=obj%GetPrefix(),  &\n  & name="ZeroBC", idof=1, nodalValueType=Constant, isUserFunction=.TRUE.)\n\n! We call SetMeshSelectionParam to set the parameter for boundary condition\nCALL SetMeshSelectionParam(param=param, prefix=boundary%GetPrefix(),  &\n  & isSelectionByMeshID=.TRUE.)\n\n! We call SetUserFunctionParam to set the parameter for boundary condition\nCALL SetUserFunctionParam(param=param, name="bc", returnType=Scalar,  &\n  & argType=Constant)\n\n! boundary\nCALL boundary%Initiate(param)\nCALL boundary%Add(dom=dom, dim=nsd - 1, meshID=[top])\nCALL boundary%Set()\n\n! Initiate DirichletBC\nCALL obj%Initiate(param=param, boundary=boundary, dom=dom)\n\n! Initiate user function.\n\nALLOCATE (func)\nCALL func%Initiate(param)\nCALL func%Set(scalarValue=1.0_DFP)\n\n! Set the user function to `DirichletBC` by calling [Set](/docs-api/DirichletBC/Set) method.\nCALL obj%Set(userFunction=func)\n\nCALL obj%Display("dbc"//CHAR_LF)\n\n! Get the value from `DirichletBC` by calling [Get](/docs-api/DirichletBC/Get) method.\nCALL obj%Get(nodeNum=nodeNum, nodalValue=nodalValue)\n\nCALL Display(nodeNum, "nodeNum", advance="NO")\nCALL Display(nodalValue, "nodalValue", advance="YES")\n\nCALL domainfile%DEALLOCATE()\nCALL dom%DEALLOCATE()\nCALL param%DEALLOCATE(); CALL FPL_Finalize\nEND PROGRAM main\n',s=[];function d(n){return(0,t.jsx)(o.A,{language:"fortran",children:r})}function l(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d()}},28947:(n,e,a)=>{a.d(e,{Ay:()=>l,RM:()=>s});var t=a(23420),i=a(54213),o=a(68913);const r='!> author: Vikas Sharma, Ph. D.\n! da\fte: 2025-05-11\n! summary:  Initiate an instance of DirichletBC\n!\n! In this example we initiate an instance of [DirichletBC](/docs-api/DirichletBC) by using the\n![UserFunction](/docs-api/UserFunction).\n!\n! The user function will be configured to give space-dependent value.\n! In other words, we implement following boundary condition.\n!\n! $$\n! u = g(x, y, z)\n! $$\n!\n! We will define a pointer to `UserFunction_` and then call [Set](/docs-api/AbstractBC/Set) method.\n! Then, the `Set` method will point to the user supplied `UserFunction`.\n!\nPROGRAM main\nUSE easifemBase\nUSE easifemClasses\nIMPLICIT NONE\n\nCHARACTER(*), PARAMETER :: myName = "main"\nCHARACTER(*), PARAMETER :: modName = "main"\nTYPE(DirichletBC_) :: obj\nTYPE(MeshSelection_) :: boundary\nTYPE(ParameterList_) :: param\nTYPE(Domain_) :: dom\nTYPE(HDF5File_) :: domainfile\nCLASS(UserFunction_), POINTER :: func\nCHARACTER(*), PARAMETER :: domainfilename = "./mesh3D.h5"\nINTEGER(I4B) :: bottom = 1, top = 2, left = 3, right = 4,  &\n  & front = 5, behind = 6, nsd\nINTEGER(I4B), ALLOCATABLE :: nodeNum(:)\nREAL(DFP), ALLOCATABLE :: nodalValue(:, :)\nPROCEDURE(iface_ScalarFunction), POINTER :: scalarFunction => NULL()\n\nCALL FPL_Init; CALL param%Initiate()\nCALL domainfile%Initiate(filename=domainfilename, mode="READ")\nCALL domainfile%OPEN()\nCALL dom%Initiate(domainfile, group="")\nnsd = dom%GetNSD()\n\nCALL SetAbstractBCParam(param=param, prefix=obj%GetPrefix(),  &\n  & name="ZeroBC", idof=1, nodalValueType=Space, isUserFunction=.TRUE.)\n\nCALL SetMeshSelectionParam(param=param, prefix=boundary%GetPrefix(),  &\n  & isSelectionByMeshID=.TRUE.)\n\nCALL SetUserFunctionParam(param=param, name="bc", returnType=Scalar,  &\n  & argType=Space)\n\nCALL boundary%Initiate(param)\nCALL boundary%Add(dom=dom, dim=nsd - 1, meshID=[top])\nCALL boundary%Set()\n\nCALL obj%Initiate(param=param, boundary=boundary, dom=dom)\n\nALLOCATE (func)\nCALL func%Initiate(param)\nscalarFunction => func1\nCALL func%Set(scalarFunction=scalarFunction)\n\nCALL obj%Set(userFunction=func)\n\nCALL obj%Get(nodeNum=nodeNum, nodalValue=nodalValue)\n\nCALL Display(nodeNum, "nodeNum", advance="NO")\nCALL Display(nodalValue, "nodalValue", advance="YES")\n\nCALL domainfile%DEALLOCATE()\nCALL dom%DEALLOCATE()\nCALL param%DEALLOCATE(); CALL FPL_Finalize\n\nCONTAINS\nPURE FUNCTION func1(x) RESULT(ans)\n  REAL(DFP), OPTIONAL, INTENT(IN) :: x(:)\n  REAL(DFP) :: ans\n  ans = x(1) + x(2) + x(3)\nEND FUNCTION func1\nEND PROGRAM main\n',s=[];function d(n){return(0,t.jsx)(o.A,{language:"fortran",children:r})}function l(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d()}}}]);