"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[77249],{94292:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>r,toc:()=>m});const r=JSON.parse('{"id":"Kdtree2/Kdtree2_r_nearest","title":"Kdtree2_r_nearest","description":"Find the nearest neighbors to point \'idxin\', within SQUARED","source":"@site/docs/docs-api/Kdtree2/Kdtree2_r_nearest.md","sourceDirName":"Kdtree2","slug":"/Kdtree2/Kdtree2_r_nearest","permalink":"/docs-api/Kdtree2/Kdtree2_r_nearest","draft":false,"unlisted":false,"editUrl":"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/Kdtree2/Kdtree2_r_nearest.md","tags":[],"version":"current","lastUpdatedAt":1724304782000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Kdtree2_r_count_around_point","permalink":"/docs-api/Kdtree2/Kdtree2_r_count_around_point"},"next":{"title":"Kdtree2_r_nearest_around_point","permalink":"/docs-api/Kdtree2/Kdtree2_r_nearest_around_point"}}');var s=t(23420),a=t(54213);function i(e){const n={code:"code",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-fortran",children:'PROGRAM main\nUSE GlobalData, ONLY: I4B, LGT, DFP\nUSE Display_Method\nUSE ReallocateUtility\nUSE Kdtree2_Module\nUSE CPUTime_Class\nIMPLICIT NONE\n\nINTEGER(I4B), PARAMETER :: n = 1000000, d = 3, num_run = 50\nTYPE(kdtree2), POINTER :: kd1\nTYPE(kdtree2_result), ALLOCATABLE :: res_tree(:)\nINTEGER(I4B) :: ii, indx, nn\nREAL(DFP) :: areal, ttime\nLOGICAL(LGT) :: problem\nREAL(DFP), ALLOCATABLE :: input_data(:, :), qv(:)\nTYPE(CPUTime_) :: ctime\n\nCALL Reallocate(input_data, d, n)\nCALL RANDOM_NUMBER(input_data)\n\n!! qv is query vector\nCALL Reallocate(qv, d)\n!! We will select qv randomly from input_data\n\nkd1 => kdtree2_create(input_data, sort=.FALSE., rearrange=.TRUE.)\n\nALLOCATE (res_tree(n))\n\nttime = 0\nDO ii = 1, num_run\n  CALL RANDOM_NUMBER(areal)\n  indx = FLOOR(areal * n) + 1\n  qv = input_data(1:d, indx)\n  res_tree(:)%idx = -666\n\n  CALL ctime%SetStartTime()\n  ! nn = kdtree2_r_count(tp=kd1, qv=qv, r2=0.1_DFP)\n  CALL Kdtree2_r_nearest(tp=kd1, qv=qv, r2=0.1_DFP, nfound=indx, &\n                         nalloc=n, results=res_tree)\n  CALL ctime%SetEndTime()\n\n  ttime = ttime + ctime%GetTime()\n\n  CALL Display(ctime%GetTime(), "time in each run: ")\n\nEND DO\n\nCALL Display(ttime / REAL(num_run, DFP), "average time : ")\n\nCALL kdtree2_destroy(kd1)\n\nEND PROGRAM main\n'})})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(i,{...e})}):i(e)}const l={},o="Kdtree2_r_nearest",c={},m=[{value:"Interface",id:"interface",level:2}];function h(e){const n={annotation:"annotation",code:"code",h1:"h1",h2:"h2",header:"header",math:"math",mi:"mi",mn:"mn",mrow:"mrow",msup:"msup",p:"p",pre:"pre",semantics:"semantics",span:"span",...(0,a.R)(),...e.components},{TabItem:t,Tabs:r}=n;return t||u("TabItem",!0),r||u("Tabs",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"kdtree2_r_nearest",children:"Kdtree2_r_nearest"})}),"\n",(0,s.jsxs)(n.p,{children:["Find the nearest neighbors to point '",(0,s.jsx)(n.code,{children:"idxin"}),"', within SQUARED\nEuclidean distance '",(0,s.jsx)(n.code,{children:"r2"}),"'. Upon ENTRY, ",(0,s.jsx)(n.code,{children:"nalloc"})," must be the\nsize of memory allocated for ",(0,s.jsx)(n.code,{children:"results(1:nalloc)"}),". Upon\nEXIT, ",(0,s.jsx)(n.code,{children:"nfound"})," is the number actually found within the ball."]}),"\n",(0,s.jsxs)(n.p,{children:["Note that if ",(0,s.jsx)(n.code,{children:"nfound .gt. nalloc"})," then more neighbors were found\nthan there were storage to store. The resulting list is NOT\nthe smallest ball inside norm ",(0,s.jsxs)(n.span,{className:"katex",children:[(0,s.jsx)(n.span,{className:"katex-mathml",children:(0,s.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(n.semantics,{children:[(0,s.jsx)(n.mrow,{children:(0,s.jsxs)(n.msup,{children:[(0,s.jsx)(n.mi,{children:"r"}),(0,s.jsx)(n.mn,{children:"2"})]})}),(0,s.jsx)(n.annotation,{encoding:"application/x-tex",children:"r^2"})]})})}),(0,s.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"0.8141em"}}),(0,s.jsxs)(n.span,{className:"mord",children:[(0,s.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"r"}),(0,s.jsx)(n.span,{className:"msupsub",children:(0,s.jsx)(n.span,{className:"vlist-t",children:(0,s.jsx)(n.span,{className:"vlist-r",children:(0,s.jsx)(n.span,{className:"vlist",style:{height:"0.8141em"},children:(0,s.jsxs)(n.span,{style:{top:"-3.063em",marginRight:"0.05em"},children:[(0,s.jsx)(n.span,{className:"pstrut",style:{height:"2.7em"}}),(0,s.jsx)(n.span,{className:"sizing reset-size6 size3 mtight",children:(0,s.jsx)(n.span,{className:"mord mtight",children:"2"})})]})})})})})]})]})})]})]}),"\n",(0,s.jsx)(n.p,{children:"Results are NOT sorted unless tree was created with sort option."}),"\n",(0,s.jsx)(n.h2,{id:"interface",children:"Interface"}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)(t,{value:"interface",label:"Interface",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-fortran",children:"SUBROUTINE Kdtree2_r_nearest(tp, qv, r2, nfound, nalloc, results)\n  TYPE(Kdtree2_), POINTER :: tp\n  REAL(kdkind), TARGET, INTENT(In) :: qv(:)\n  REAL(kdkind), INTENT(in) :: r2\n  INTEGER, INTENT(out) :: nfound\n  INTEGER, INTENT(In) :: nalloc\n  TYPE(Kdtree2Result_), TARGET :: results(:)\nEND SUBROUTINE Kdtree2_r_nearest\n"})})}),(0,s.jsx)(t,{value:"example",label:"example",children:(0,s.jsx)(d,{})}),(0,s.jsx)(t,{value:"close",label:"\u21a2 close"})]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}function u(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},54213:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>d});var r=t(36672);const s={},a=r.createContext(s);function i(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);