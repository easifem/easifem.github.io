"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[33661],{31492:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>N,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"AbstractMatrixField/MatVec","title":"MatVec","description":"Perform matrix vector multipliction","source":"@site/docs/docs-api/AbstractMatrixField/MatVec.md","sourceDirName":"AbstractMatrixField","slug":"/AbstractMatrixField/MatVec","permalink":"/docs-api/AbstractMatrixField/MatVec","draft":false,"unlisted":false,"editUrl":"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/AbstractMatrixField/MatVec.md","tags":[],"version":"current","lastUpdatedAt":1724304782000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"IsPreconditionSet","permalink":"/docs-api/AbstractMatrixField/IsPreconditionSet"},"next":{"title":"ReversePermutation","permalink":"/docs-api/AbstractMatrixField/ReversePermutation"}}');var a=n(23420),i=n(54213);const o={},s="MatVec",c={},d=[{value:"Interface",id:"interface",level:2}];function l(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"matvec",children:"MatVec"})}),"\n",(0,a.jsx)(t.p,{children:"Perform matrix vector multipliction"}),"\n",(0,a.jsx)(t.h2,{id:"interface",children:"Interface"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-fortran",children:"INTERFACE\n  SUBROUTINE Matvec1(obj, x, y, isTranspose, addContribution, &\n    & scale)\n    IMPORT :: AbstractMatrixField_, DFP, LGT\n    CLASS(AbstractMatrixField_), INTENT(IN) :: obj\n    REAL(DFP), INTENT(INOUT) :: y(:)\n    !! Output vector y=Ax\n    REAL(DFP), INTENT(IN) :: x(:)\n    !! Input vector in y=Ax\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: isTranspose\n    !! True if we have to use TRANSPOSE of matrix\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\n    !! Default is FALSE\n    !! if true then we do not set y = 0, and perform\n    !! y = y + matvec(obj, x)\n    !! if false, then we perform y = matvec(obj, x)\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\n  END SUBROUTINE Matvec1\nEND INTERFACE\n"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-fortran",children:"INTERFACE\n  SUBROUTINE Matvec2(obj, x, y, isTranspose, addContribution, &\n    & scale)\n    IMPORT :: AbstractMatrixField_, AbstractNodeField_, LGT, DFP\n    CLASS(AbstractMatrixField_), INTENT(IN) :: obj\n    CLASS(AbstractNodeField_), INTENT(INOUT) :: y\n    !! Output vector y=Ax\n    CLASS(AbstractNodeField_), INTENT(IN) :: x\n    !! Input vector in y=Ax\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: isTranspose\n    !! True if we have to use TRANSPOSE of matrix\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\n    !! Default is FALSE\n    !! if true then we do not set y = 0, and perform\n    !! y = y + matvec(obj, x)\n    !! if false, then we perform y = matvec(obj, x)\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\n  END SUBROUTINE Matvec2\nEND INTERFACE\n"})})]})}function N(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},54213:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>s});var r=n(36672);const a={},i=r.createContext(a);function o(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);