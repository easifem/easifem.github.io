"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[23547],{30087:(n,e,a)=>{a.r(e),a.d(e,{assets:()=>f,contentTitle:()=>b,default:()=>P,frontMatter:()=>U,metadata:()=>t,toc:()=>h});const t=JSON.parse('{"id":"ScalarField/Set","title":"Set","description":"Set the entries in the ScalarField.","source":"@site/docs/docs-api/ScalarField/Set.md","sourceDirName":"ScalarField","slug":"/ScalarField/Set","permalink":"/docs-api/ScalarField/Set","draft":false,"unlisted":false,"editUrl":"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/ScalarField/Set.md","tags":[],"version":"current","lastUpdatedAt":1724304782000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Norm2","permalink":"/docs-api/ScalarField/Norm2"},"next":{"title":"SetScalarFieldParam","permalink":"/docs-api/ScalarField/SetScalarFieldParam"}}');var i=a(23420),s=a(54213);function o(n){const e={code:"code",pre:"pre",...(0,s.R)(),...n.components};return(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-fortran",children:'!> author: Vikas Sharma, Ph. D.\n! date: 2024-06-05\n! summary: Set1\n\nPROGRAM main\nUSE FEDomain_Class\nUSE HDF5File_Class\nUSE AbstractMesh_Class\nUSE AbstractField_Class, ONLY: TypeField\nUSE ScalarField_Class\nUSE FPL, ONLY: FPL_Init, FPL_FINALIZE, ParameterList_\nUSE GlobalData\nUSE Test_Method\nUSE FEDOF_Class\nUSE ExceptionHandler_Class, ONLY: e, EXCEPTION_INFORMATION\nUSE ApproxUtility\n\nTYPE(FEDomain_) :: dom\nCLASS(AbstractMesh_), POINTER :: mesh\nTYPE(HDF5File_) :: meshfile\nTYPE(ParameterList_) :: param\nREAL(DFP), ALLOCATABLE :: realVec(:)\nCHARACTER(LEN=*), PARAMETER :: engine = "NATIVE_SERIAL"\nCHARACTER(*), PARAMETER :: meshfilename = &\n                           "../../Mesh/examples/meshdata/small_mesh.h5"\nINTEGER(I4B), PARAMETER :: nsd = 2\nCHARACTER(:), ALLOCATABLE :: msg\nINTEGER(I4B) :: localNode\nREAL(DFP) :: VALUE, tol\nLOGICAL(LGT) :: isok\n\nCALL e%setQuietMode(EXCEPTION_INFORMATION, .TRUE.)\n\nCALL FPL_Init()\nCALL param%Initiate()\n\n!> start creating domain\nCALL meshfile%Initiate(filename=meshfilename, mode="READ")\nCALL meshfile%OPEN()\nCALL dom%Initiate(hdf5=meshfile, group="")\n!> end creating domain\n\nmesh => dom%GetMeshPointer(dim=nsd)\n\nBLOCK\n  INTEGER(I4B), PARAMETER :: order = 1\n  CHARACTER(*), PARAMETER :: baseContinuity = "H1"\n  CHARACTER(*), PARAMETER :: baseInterpolation = "Lagrange"\n  TYPE(FEDOF_) :: fedof\n  TYPE(ScalarField_) :: obj\n\n  CALL fedof%Initiate(baseContinuity=baseContinuity, &\n                  baseInterpolation=baseInterpolation, order=order, mesh=mesh)\n\n  CALL SetScalarFieldParam(param=param, &\n                           fieldType=TypeField%normal, &\n                           name="U", &\n                           engine=engine)\n\n  CALL obj%Initiate(param, fedof)\n\n  msg = "Set1 "\n  localNode = 1\n  CALL obj%Set(globalnode=localNode, VALUE=100.0_DFP, islocal=.TRUE.)\n  CALL obj%Get(globalnode=localNode, VALUE=VALUE, islocal=.TRUE.)\n  tol = 1.0E-5\n  isok = SOFTEQ(100.0_DFP, VALUE, tol)\n  CALL OK(isok, msg)\n\n  localNode = 2\n  CALL obj%Set(globalnode=localNode, VALUE=200.0_DFP, islocal=.TRUE.)\n  CALL obj%Get(globalnode=localNode, VALUE=VALUE, islocal=.TRUE.)\n  tol = 1.0E-5\n  isok = SOFTEQ(200.0_DFP, VALUE, tol)\n  CALL OK(isok, msg)\n\n  CALL obj%DEALLOCATE()\nEND BLOCK\n\nBLOCK\n  INTEGER(I4B), PARAMETER :: order = 2\n  CHARACTER(*), PARAMETER :: baseContinuity = "H1"\n  CHARACTER(*), PARAMETER :: baseInterpolation = "Heirarchical"\n  TYPE(FEDOF_) :: fedof\n  TYPE(ScalarField_) :: obj\n\n  CALL fedof%Initiate(baseContinuity=baseContinuity, &\n                  baseInterpolation=baseInterpolation, order=order, mesh=mesh)\n\n  CALL SetScalarFieldParam(param=param, &\n                           fieldType=TypeField%normal, &\n                           name="U", &\n                           engine=engine)\n\n  CALL obj%Initiate(param, fedof)\n\n  msg = "Set1 "\n  localNode = 3\n  CALL obj%Set(globalnode=localNode, VALUE=100.0_DFP, islocal=.TRUE.)\n  CALL obj%Get(globalnode=localNode, VALUE=VALUE, islocal=.TRUE.)\n  tol = 1.0E-5\n  isok = SOFTEQ(100.0_DFP, VALUE, tol)\n  CALL OK(isok, msg)\n\n  CALL obj%DEALLOCATE()\nEND BLOCK\n\nmesh => NULL()\nCALL dom%DEALLOCATE()\nCALL meshfile%DEALLOCATE()\nCALL param%DEALLOCATE()\nCALL FPL_FINALIZE()\nEND PROGRAM main\n'})})}function l(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(o,{...n})}):o(n)}function E(n){const e={code:"code",pre:"pre",...(0,s.R)(),...n.components};return(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-fortran",children:'!> author: Vikas Sharma, Ph. D.\n! date: 2024-06-05\n! summary: Set2\n\nPROGRAM main\nUSE FEDomain_Class\nUSE HDF5File_Class\nUSE AbstractMesh_Class\nUSE AbstractField_Class, ONLY: TypeField\nUSE ScalarField_Class\nUSE FPL, ONLY: FPL_Init, FPL_FINALIZE, ParameterList_\nUSE GlobalData\nUSE Test_Method\nUSE FEDOF_Class\nUSE ExceptionHandler_Class, ONLY: e, EXCEPTION_INFORMATION\nUSE ApproxUtility\n\nTYPE(FEDomain_) :: dom\nCLASS(AbstractMesh_), POINTER :: mesh\nTYPE(HDF5File_) :: meshfile\nTYPE(ParameterList_) :: param\nCHARACTER(LEN=*), PARAMETER :: engine = "NATIVE_SERIAL"\nCHARACTER(*), PARAMETER :: meshfilename = &\n                           "../../Mesh/examples/meshdata/small_mesh.h5"\nINTEGER(I4B), PARAMETER :: nsd = 2\n\nCALL e%setQuietMode(EXCEPTION_INFORMATION, .TRUE.)\n\nCALL FPL_Init()\nCALL param%Initiate()\n\n!> start creating domain\nCALL meshfile%Initiate(filename=meshfilename, mode="READ")\nCALL meshfile%OPEN()\nCALL dom%Initiate(hdf5=meshfile, group="")\n!> end creating domain\n\nmesh => dom%GetMeshPointer(dim=nsd)\n\nBLOCK\n  INTEGER(I4B), PARAMETER :: order = 1\n  CHARACTER(*), PARAMETER :: baseContinuity = "H1"\n  CHARACTER(*), PARAMETER :: baseInterpolation = "Lagrange"\n  TYPE(FEDOF_) :: fedof\n  TYPE(ScalarField_) :: obj\n  REAL(DFP) :: found(100), want(100), VALUE, tol\n  INTEGER(I4B) :: tsize\n  CHARACTER(:), ALLOCATABLE :: msg\n  LOGICAL(LGT) :: isok\n\n  CALL fedof%Initiate(baseContinuity=baseContinuity, &\n                  baseInterpolation=baseInterpolation, order=order, mesh=mesh)\n\n  CALL SetScalarFieldParam(param=param, &\n                           fieldType=TypeField%normal, &\n                           name="U", &\n                           engine=engine)\n\n  CALL obj%Initiate(param, fedof)\n\n  msg = "Set2 "\n  VALUE = 100.0_DFP\n  CALL obj%Set(VALUE=VALUE)\n  CALL obj%Get(VALUE=found, tsize=tsize)\n\n  want(1:tsize) = VALUE\n  tol = 1.0E-5\n  isok = ALL(SOFTEQ(found(1:tsize), want(1:tsize), tol))\n  CALL OK(isok, msg)\n\n  CALL obj%Set(VALUE=VALUE, scale=2.0_DFP, addContribution=.TRUE.)\n  CALL obj%Get(VALUE=found, tsize=tsize)\n  want(1:tsize) = 3.0_DFP * VALUE\n  tol = 1.0E-5\n  isok = ALL(SOFTEQ(found(1:tsize), want(1:tsize), tol))\n  CALL OK(isok, msg)\n\n  CALL obj%Set(VALUE=VALUE, addContribution=.TRUE.)\n  CALL obj%Get(VALUE=found, tsize=tsize)\n  want(1:tsize) = 4.0_DFP * VALUE\n  tol = 1.0E-5\n  isok = ALL(SOFTEQ(found(1:tsize), want(1:tsize), tol))\n  CALL OK(isok, msg)\n\n  CALL obj%DEALLOCATE()\nEND BLOCK\n\nBLOCK\n  INTEGER(I4B), PARAMETER :: order = 2\n  CHARACTER(*), PARAMETER :: baseContinuity = "H1"\n  CHARACTER(*), PARAMETER :: baseInterpolation = "Heirarchical"\n  TYPE(FEDOF_) :: fedof\n  TYPE(ScalarField_) :: obj\n  REAL(DFP) :: found(100), want(100), VALUE, tol\n  INTEGER(I4B) :: tsize\n  CHARACTER(:), ALLOCATABLE :: msg\n  LOGICAL(LGT) :: isok\n\n  CALL fedof%Initiate(baseContinuity=baseContinuity, &\n                  baseInterpolation=baseInterpolation, order=order, mesh=mesh)\n\n  CALL SetScalarFieldParam(param=param, &\n                           fieldType=TypeField%normal, &\n                           name="U", &\n                           engine=engine)\n\n  CALL obj%Initiate(param, fedof)\n\n  msg = "Set2 "\n  VALUE = 100.0_DFP\n  CALL obj%Set(VALUE=VALUE)\n  CALL obj%Get(VALUE=found, tsize=tsize)\n\n  want(1:tsize) = VALUE\n  tol = 1.0E-5\n  isok = ALL(SOFTEQ(found(1:tsize), want(1:tsize), tol))\n  CALL OK(isok, msg)\n\n  CALL obj%Set(VALUE=VALUE, scale=2.0_DFP, addContribution=.TRUE.)\n  CALL obj%Get(VALUE=found, tsize=tsize)\n  want(1:tsize) = 3.0_DFP * VALUE\n  tol = 1.0E-5\n  isok = ALL(SOFTEQ(found(1:tsize), want(1:tsize), tol))\n  CALL OK(isok, msg)\n\n  CALL obj%Set(VALUE=VALUE, addContribution=.TRUE.)\n  CALL obj%Get(VALUE=found, tsize=tsize)\n  want(1:tsize) = 4.0_DFP * VALUE\n  tol = 1.0E-5\n  isok = ALL(SOFTEQ(found(1:tsize), want(1:tsize), tol))\n  CALL OK(isok, msg)\n\n  CALL obj%DEALLOCATE()\nEND BLOCK\n\nmesh => NULL()\nCALL dom%DEALLOCATE()\nCALL meshfile%DEALLOCATE()\nCALL param%DEALLOCATE()\nCALL FPL_FINALIZE()\nEND PROGRAM main\n'})})}function L(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(E,{...n})}):E(n)}function A(n){const e={code:"code",pre:"pre",...(0,s.R)(),...n.components};return(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-fortran",children:'!> author: Vikas Sharma, Ph. D.\n! date: 2024-06-05\n! summary: Set3\n\nPROGRAM main\nUSE FEDomain_Class\nUSE HDF5File_Class\nUSE AbstractMesh_Class\nUSE AbstractField_Class, ONLY: TypeField\nUSE ScalarField_Class\nUSE FPL, ONLY: FPL_Init, FPL_FINALIZE, ParameterList_\nUSE GlobalData\nUSE Test_Method\nUSE FEDOF_Class\nUSE ExceptionHandler_Class, ONLY: e, EXCEPTION_INFORMATION\nUSE ApproxUtility\nUSE ArangeUtility\n\nTYPE(FEDomain_) :: dom\nCLASS(AbstractMesh_), POINTER :: mesh\nTYPE(HDF5File_) :: meshfile\nTYPE(ParameterList_) :: param\nCHARACTER(LEN=*), PARAMETER :: engine = "NATIVE_SERIAL"\nCHARACTER(*), PARAMETER :: meshfilename = &\n                           "../../Mesh/examples/meshdata/small_mesh.h5"\nINTEGER(I4B), PARAMETER :: nsd = 2\n\nCALL e%setQuietMode(EXCEPTION_INFORMATION, .TRUE.)\n\nCALL FPL_Init()\nCALL param%Initiate()\n\n!> start creating domain\nCALL meshfile%Initiate(filename=meshfilename, mode="READ")\nCALL meshfile%OPEN()\nCALL dom%Initiate(hdf5=meshfile, group="")\n!> end creating domain\n\nmesh => dom%GetMeshPointer(dim=nsd)\n\nBLOCK\n  INTEGER(I4B), PARAMETER :: order = 1\n  CHARACTER(*), PARAMETER :: baseContinuity = "H1"\n  CHARACTER(*), PARAMETER :: baseInterpolation = "Lagrange"\n  TYPE(FEDOF_) :: fedof\n  TYPE(ScalarField_) :: obj\n  REAL(DFP) :: found(100), want(100), VALUE(100), tol\n  INTEGER(I4B) :: tsize\n  CHARACTER(:), ALLOCATABLE :: msg\n  LOGICAL(LGT) :: isok\n\n  CALL fedof%Initiate(baseContinuity=baseContinuity, &\n                  baseInterpolation=baseInterpolation, order=order, mesh=mesh)\n\n  CALL SetScalarFieldParam(param=param, &\n                           fieldType=TypeField%normal, &\n                           name="U", &\n                           engine=engine)\n\n  CALL obj%Initiate(param, fedof)\n\n  msg = "Set3 "\n  tsize = obj%SIZE()\n  VALUE(1:tsize) = arange(1, tsize)\n  CALL obj%Set(VALUE=VALUE(1:tsize))\n  CALL obj%Get(VALUE=found, tsize=tsize)\n\n  want(1:tsize) = VALUE(1:tsize)\n  tol = 1.0E-5\n  isok = ALL(SOFTEQ(found(1:tsize), want(1:tsize), tol))\n  CALL OK(isok, msg)\n\n  CALL obj%Set(VALUE=VALUE(1:tsize), scale=2.0_DFP, addContribution=.TRUE.)\n  CALL obj%Get(VALUE=found, tsize=tsize)\n  want(1:tsize) = 3.0_DFP * VALUE(1:tsize)\n  tol = 1.0E-5\n  isok = ALL(SOFTEQ(found(1:tsize), want(1:tsize), tol))\n  CALL OK(isok, msg)\n\n  CALL obj%Set(VALUE=VALUE(1:tsize), addContribution=.TRUE.)\n  CALL obj%Get(VALUE=found, tsize=tsize)\n  want(1:tsize) = 4.0_DFP * VALUE\n  tol = 1.0E-5\n  isok = ALL(SOFTEQ(found(1:tsize), want(1:tsize), tol))\n  CALL OK(isok, msg)\n\n  CALL obj%DEALLOCATE()\nEND BLOCK\n\nBLOCK\n  INTEGER(I4B), PARAMETER :: order = 2\n  CHARACTER(*), PARAMETER :: baseContinuity = "H1"\n  CHARACTER(*), PARAMETER :: baseInterpolation = "Heirarchical"\n  TYPE(FEDOF_) :: fedof\n  TYPE(ScalarField_) :: obj\n  REAL(DFP) :: found(100), want(100), VALUE, tol\n  INTEGER(I4B) :: tsize\n  CHARACTER(:), ALLOCATABLE :: msg\n  LOGICAL(LGT) :: isok\n\n  CALL fedof%Initiate(baseContinuity=baseContinuity, &\n                  baseInterpolation=baseInterpolation, order=order, mesh=mesh)\n\n  CALL SetScalarFieldParam(param=param, &\n                           fieldType=TypeField%normal, &\n                           name="U", &\n                           engine=engine)\n\n  CALL obj%Initiate(param, fedof)\n\n  msg = "Set3 "\n  VALUE = 100.0_DFP\n  CALL obj%Set(VALUE=VALUE)\n  CALL obj%Get(VALUE=found, tsize=tsize)\n\n  want(1:tsize) = VALUE\n  tol = 1.0E-5\n  isok = ALL(SOFTEQ(found(1:tsize), want(1:tsize), tol))\n  CALL OK(isok, msg)\n\n  CALL obj%Set(VALUE=VALUE, scale=2.0_DFP, addContribution=.TRUE.)\n  CALL obj%Get(VALUE=found, tsize=tsize)\n  want(1:tsize) = 3.0_DFP * VALUE\n  tol = 1.0E-5\n  isok = ALL(SOFTEQ(found(1:tsize), want(1:tsize), tol))\n  CALL OK(isok, msg)\n\n  CALL obj%Set(VALUE=VALUE, addContribution=.TRUE.)\n  CALL obj%Get(VALUE=found, tsize=tsize)\n  want(1:tsize) = 4.0_DFP * VALUE\n  tol = 1.0E-5\n  isok = ALL(SOFTEQ(found(1:tsize), want(1:tsize), tol))\n  CALL OK(isok, msg)\n\n  CALL obj%DEALLOCATE()\nEND BLOCK\n\nmesh => NULL()\nCALL dom%DEALLOCATE()\nCALL meshfile%DEALLOCATE()\nCALL param%DEALLOCATE()\nCALL FPL_FINALIZE()\nEND PROGRAM main\n'})})}function r(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(A,{...n})}):A(n)}function d(n){const e={code:"code",pre:"pre",...(0,s.R)(),...n.components};return(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-fortran",children:'!> author: Vikas Sharma, Ph. D.\n! date: 2024-06-05\n! summary: Set4\n\nPROGRAM main\nUSE FEDomain_Class\nUSE HDF5File_Class\nUSE AbstractMesh_Class\nUSE AbstractField_Class, ONLY: TypeField\nUSE ScalarField_Class\nUSE FPL, ONLY: FPL_Init, FPL_FINALIZE, ParameterList_\nUSE GlobalData\nUSE Test_Method\nUSE FEDOF_Class\nUSE ExceptionHandler_Class, ONLY: e, EXCEPTION_INFORMATION\nUSE ApproxUtility\n\nTYPE(FEDomain_) :: dom\nCLASS(AbstractMesh_), POINTER :: mesh\nTYPE(HDF5File_) :: meshfile\nTYPE(ParameterList_) :: param\nCHARACTER(LEN=*), PARAMETER :: engine = "NATIVE_SERIAL"\nCHARACTER(*), PARAMETER :: meshfilename = &\n                           "../../Mesh/examples/meshdata/small_mesh.h5"\nINTEGER(I4B), PARAMETER :: nsd = 2\n\nCALL e%setQuietMode(EXCEPTION_INFORMATION, .TRUE.)\n\nCALL FPL_Init()\nCALL param%Initiate()\n\n!> start creating domain\nCALL meshfile%Initiate(filename=meshfilename, mode="READ")\nCALL meshfile%OPEN()\nCALL dom%Initiate(hdf5=meshfile, group="")\n!> end creating domain\n\nmesh => dom%GetMeshPointer(dim=nsd)\n\nBLOCK\n  INTEGER(I4B), PARAMETER :: order = 1\n  CHARACTER(*), PARAMETER :: baseContinuity = "H1"\n  CHARACTER(*), PARAMETER :: baseInterpolation = "Lagrange"\n  TYPE(FEDOF_) :: fedof\n  TYPE(ScalarField_) :: obj\n  REAL(DFP) :: found(100), want(100), VALUE, tol\n  INTEGER(I4B) :: tsize, localNode(3)\n  CHARACTER(:), ALLOCATABLE :: msg\n  LOGICAL(LGT) :: isok\n\n  CALL fedof%Initiate(baseContinuity=baseContinuity, &\n                  baseInterpolation=baseInterpolation, order=order, mesh=mesh)\n\n  CALL SetScalarFieldParam(param=param, &\n                           fieldType=TypeField%normal, &\n                           name="U", &\n                           engine=engine)\n\n  CALL obj%Initiate(param, fedof)\n\n  localNode = [1, 3, 5]\n\n  msg = "Set4 "\n  VALUE = 100.0_DFP\n  CALL obj%Set(VALUE=VALUE, globalNode=localNode, islocal=.TRUE.)\n  CALL obj%Get(VALUE=found, tsize=tsize)\n\n  want = 0.0_DFP\n  want(localNode) = VALUE\n  tol = 1.0E-5\n  isok = ALL(SOFTEQ(found(1:tsize), want(1:tsize), tol))\n  CALL OK(isok, msg)\n\n  CALL obj%DEALLOCATE()\nEND BLOCK\n\nBLOCK\n  INTEGER(I4B), PARAMETER :: order = 2\n  CHARACTER(*), PARAMETER :: baseContinuity = "H1"\n  CHARACTER(*), PARAMETER :: baseInterpolation = "Heirarchical"\n  TYPE(FEDOF_) :: fedof\n  TYPE(ScalarField_) :: obj\n  REAL(DFP) :: found(100), want(100), VALUE, tol\n  INTEGER(I4B) :: tsize, localNode(3)\n  CHARACTER(:), ALLOCATABLE :: msg\n  LOGICAL(LGT) :: isok\n\n  CALL fedof%Initiate(baseContinuity=baseContinuity, &\n                  baseInterpolation=baseInterpolation, order=order, mesh=mesh)\n\n  CALL SetScalarFieldParam(param=param, &\n                           fieldType=TypeField%normal, &\n                           name="U", &\n                           engine=engine)\n\n  CALL obj%Initiate(param, fedof)\n\n  localNode = [1, 3, 5]\n\n  msg = "Set4 "\n  VALUE = 100.0_DFP\n  CALL obj%Set(VALUE=VALUE, globalNode=localNode, islocal=.TRUE.)\n  CALL obj%Get(VALUE=found, tsize=tsize)\n\n  want = 0.0_DFP\n  want(localNode) = VALUE\n  tol = 1.0E-5\n  isok = ALL(SOFTEQ(found(1:tsize), want(1:tsize), tol))\n  CALL OK(isok, msg)\n\n  CALL obj%DEALLOCATE()\nEND BLOCK\n\nmesh => NULL()\nCALL dom%DEALLOCATE()\nCALL meshfile%DEALLOCATE()\nCALL param%DEALLOCATE()\nCALL FPL_FINALIZE()\nEND PROGRAM main\n'})})}function C(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}function c(n){const e={code:"code",pre:"pre",...(0,s.R)(),...n.components};return(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-fortran",children:'!> author: Vikas Sharma, Ph. D.\n! date: 2024-06-05\n! summary: Set5\n\nPROGRAM main\nUSE FEDomain_Class\nUSE HDF5File_Class\nUSE AbstractMesh_Class\nUSE AbstractField_Class, ONLY: TypeField\nUSE ScalarField_Class\nUSE FPL, ONLY: FPL_Init, FPL_FINALIZE, ParameterList_\nUSE GlobalData\nUSE Test_Method\nUSE FEDOF_Class\nUSE ExceptionHandler_Class, ONLY: e, EXCEPTION_INFORMATION\nUSE ApproxUtility\n\nTYPE(FEDomain_) :: dom\nCLASS(AbstractMesh_), POINTER :: mesh\nTYPE(HDF5File_) :: meshfile\nTYPE(ParameterList_) :: param\nCHARACTER(LEN=*), PARAMETER :: engine = "NATIVE_SERIAL"\nCHARACTER(*), PARAMETER :: meshfilename = &\n                           "../../Mesh/examples/meshdata/small_mesh.h5"\nINTEGER(I4B), PARAMETER :: nsd = 2\n\nCALL e%setQuietMode(EXCEPTION_INFORMATION, .TRUE.)\n\nCALL FPL_Init()\nCALL param%Initiate()\n\n!> start creating domain\nCALL meshfile%Initiate(filename=meshfilename, mode="READ")\nCALL meshfile%OPEN()\nCALL dom%Initiate(hdf5=meshfile, group="")\n!> end creating domain\n\nmesh => dom%GetMeshPointer(dim=nsd)\n\nBLOCK\n  INTEGER(I4B), PARAMETER :: order = 1\n  CHARACTER(*), PARAMETER :: baseContinuity = "H1"\n  CHARACTER(*), PARAMETER :: baseInterpolation = "Lagrange"\n  TYPE(FEDOF_) :: fedof\n  TYPE(ScalarField_) :: obj\n  REAL(DFP) :: found(100), want(100), VALUE(100), tol\n  INTEGER(I4B) :: tsize, localNode(3)\n  CHARACTER(:), ALLOCATABLE :: msg\n  LOGICAL(LGT) :: isok\n\n  CALL fedof%Initiate(baseContinuity=baseContinuity, &\n                  baseInterpolation=baseInterpolation, order=order, mesh=mesh)\n\n  CALL SetScalarFieldParam(param=param, &\n                           fieldType=TypeField%normal, &\n                           name="U", &\n                           engine=engine)\n\n  CALL obj%Initiate(param, fedof)\n\n  localNode = [1, 3, 5]\n\n  msg = "Set5 "\n\n  VALUE(1:3) = [10, 20, 30]\n  CALL obj%Set(VALUE=VALUE(1:3), globalNode=localNode, islocal=.TRUE.)\n  CALL obj%Get(VALUE=found, tsize=tsize)\n  want = 0.0_DFP\n  want(localNode) = VALUE(1:3)\n  tol = 1.0E-5\n  isok = ALL(SOFTEQ(found(1:tsize), want(1:tsize), tol))\n  CALL OK(isok, msg)\n\n  VALUE(1:3) = [10, 20, 30]\n  CALL obj%Set(VALUE=VALUE(1:3), globalNode=localNode, islocal=.TRUE., &\n               addContribution=.TRUE., scale=2.0_DFP)\n  CALL obj%Get(VALUE=found, tsize=tsize)\n  want = 0.0_DFP\n  want(localNode) = 3 * VALUE(1:3)\n  tol = 1.0E-5\n  isok = ALL(SOFTEQ(found(1:tsize), want(1:tsize), tol))\n  CALL OK(isok, msg)\n\n  VALUE(1:3) = [10, 20, 30]\n  CALL obj%Set(VALUE=VALUE(1:3), globalNode=localNode, islocal=.TRUE., &\n               addContribution=.TRUE.)\n\n  CALL obj%Get(VALUE=found, tsize=tsize)\n  want = 0.0_DFP\n  want(localNode) = 4 * VALUE(1:3)\n  tol = 1.0E-5\n  isok = ALL(SOFTEQ(found(1:tsize), want(1:tsize), tol))\n  CALL OK(isok, msg)\n\n  CALL obj%DEALLOCATE()\nEND BLOCK\n\nBLOCK\n  INTEGER(I4B), PARAMETER :: order = 2\n  CHARACTER(*), PARAMETER :: baseContinuity = "H1"\n  CHARACTER(*), PARAMETER :: baseInterpolation = "Heirarchical"\n  TYPE(FEDOF_) :: fedof\n  TYPE(ScalarField_) :: obj\n  REAL(DFP) :: found(100), want(100), VALUE(100), tol\n  INTEGER(I4B) :: tsize, localNode(3)\n  CHARACTER(:), ALLOCATABLE :: msg\n  LOGICAL(LGT) :: isok\n\n  CALL fedof%Initiate(baseContinuity=baseContinuity, &\n                  baseInterpolation=baseInterpolation, order=order, mesh=mesh)\n\n  CALL SetScalarFieldParam(param=param, &\n                           fieldType=TypeField%normal, &\n                           name="U", &\n                           engine=engine)\n\n  CALL obj%Initiate(param, fedof)\n\n  localNode = [1, 3, 5]\n\n  msg = "Set5 "\n  VALUE(1:3) = [10, 20, 30]\n  CALL obj%Set(VALUE=VALUE(1:3), globalNode=localNode, islocal=.TRUE.)\n  CALL obj%Get(VALUE=found, tsize=tsize)\n\n  want = 0.0_DFP\n  want(localNode) = VALUE(1:3)\n  tol = 1.0E-5\n  isok = ALL(SOFTEQ(found(1:tsize), want(1:tsize), tol))\n  CALL OK(isok, msg)\n\n  CALL obj%DEALLOCATE()\nEND BLOCK\n\nmesh => NULL()\nCALL dom%DEALLOCATE()\nCALL meshfile%DEALLOCATE()\nCALL param%DEALLOCATE()\nCALL FPL_FINALIZE()\nEND PROGRAM main\n'})})}function T(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(c,{...n})}):c(n)}function N(n){const e={code:"code",pre:"pre",...(0,s.R)(),...n.components};return(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-fortran",children:'!> author: Vikas Sharma, Ph. D.\n! date: 2024-06-05\n! summary: Set5\n\nPROGRAM main\nUSE FEDomain_Class\nUSE HDF5File_Class\nUSE AbstractMesh_Class\nUSE AbstractField_Class, ONLY: TypeField\nUSE ScalarField_Class\nUSE FPL, ONLY: FPL_Init, FPL_FINALIZE, ParameterList_\nUSE GlobalData\nUSE Test_Method\nUSE FEDOF_Class\nUSE ExceptionHandler_Class, ONLY: e, EXCEPTION_INFORMATION\nUSE ApproxUtility\n\nTYPE(FEDomain_) :: dom\nCLASS(AbstractMesh_), POINTER :: mesh\nTYPE(HDF5File_) :: meshfile\nTYPE(ParameterList_) :: param\nCHARACTER(LEN=*), PARAMETER :: engine = "NATIVE_SERIAL"\nCHARACTER(*), PARAMETER :: meshfilename = &\n                           "../../Mesh/examples/meshdata/small_mesh.h5"\nINTEGER(I4B), PARAMETER :: nsd = 2\n\nCALL e%setQuietMode(EXCEPTION_INFORMATION, .TRUE.)\n\nCALL FPL_Init()\nCALL param%Initiate()\n\n!> start creating domain\nCALL meshfile%Initiate(filename=meshfilename, mode="READ")\nCALL meshfile%OPEN()\nCALL dom%Initiate(hdf5=meshfile, group="")\n!> end creating domain\n\nmesh => dom%GetMeshPointer(dim=nsd)\n\nBLOCK\n  INTEGER(I4B), PARAMETER :: order = 1\n  CHARACTER(*), PARAMETER :: baseContinuity = "H1"\n  CHARACTER(*), PARAMETER :: baseInterpolation = "Lagrange"\n  TYPE(FEDOF_) :: fedof\n  TYPE(ScalarField_) :: obj\n  REAL(DFP) :: found(100), want(100), VALUE(100), tol\n  INTEGER(I4B) :: tsize, localNode(3)\n  CHARACTER(:), ALLOCATABLE :: msg\n  LOGICAL(LGT) :: isok\n\n  CALL fedof%Initiate(baseContinuity=baseContinuity, &\n                  baseInterpolation=baseInterpolation, order=order, mesh=mesh)\n\n  CALL SetScalarFieldParam(param=param, &\n                           fieldType=TypeField%normal, &\n                           name="U", &\n                           engine=engine)\n\n  CALL obj%Initiate(param, fedof)\n\n  localNode = [1, 3, 5]\n\n  msg = "Set5 "\n\n  VALUE(1:3) = [10, 20, 30]\n  CALL obj%Set(VALUE=VALUE(1:3), globalNode=localNode, islocal=.TRUE.)\n  CALL obj%Get(VALUE=found, tsize=tsize)\n  want = 0.0_DFP\n  want(localNode) = VALUE(1:3)\n  tol = 1.0E-5\n  isok = ALL(SOFTEQ(found(1:tsize), want(1:tsize), tol))\n  CALL OK(isok, msg)\n\n  VALUE(1:3) = [10, 20, 30]\n  CALL obj%Set(VALUE=VALUE(1:3), globalNode=localNode, islocal=.TRUE., &\n               addContribution=.TRUE., scale=2.0_DFP)\n  CALL obj%Get(VALUE=found, tsize=tsize)\n  want = 0.0_DFP\n  want(localNode) = 3 * VALUE(1:3)\n  tol = 1.0E-5\n  isok = ALL(SOFTEQ(found(1:tsize), want(1:tsize), tol))\n  CALL OK(isok, msg)\n\n  VALUE(1:3) = [10, 20, 30]\n  CALL obj%Set(VALUE=VALUE(1:3), globalNode=localNode, islocal=.TRUE., &\n               addContribution=.TRUE.)\n\n  CALL obj%Get(VALUE=found, tsize=tsize)\n  want = 0.0_DFP\n  want(localNode) = 4 * VALUE(1:3)\n  tol = 1.0E-5\n  isok = ALL(SOFTEQ(found(1:tsize), want(1:tsize), tol))\n  CALL OK(isok, msg)\n\n  CALL obj%DEALLOCATE()\nEND BLOCK\n\nBLOCK\n  INTEGER(I4B), PARAMETER :: order = 2\n  CHARACTER(*), PARAMETER :: baseContinuity = "H1"\n  CHARACTER(*), PARAMETER :: baseInterpolation = "Heirarchical"\n  TYPE(FEDOF_) :: fedof\n  TYPE(ScalarField_) :: obj\n  REAL(DFP) :: found(100), want(100), VALUE(100), tol\n  INTEGER(I4B) :: tsize, localNode(3)\n  CHARACTER(:), ALLOCATABLE :: msg\n  LOGICAL(LGT) :: isok\n\n  CALL fedof%Initiate(baseContinuity=baseContinuity, &\n                  baseInterpolation=baseInterpolation, order=order, mesh=mesh)\n\n  CALL SetScalarFieldParam(param=param, &\n                           fieldType=TypeField%normal, &\n                           name="U", &\n                           engine=engine)\n\n  CALL obj%Initiate(param, fedof)\n\n  localNode = [1, 3, 5]\n\n  msg = "Set5 "\n  VALUE(1:3) = [10, 20, 30]\n  CALL obj%Set(VALUE=VALUE(1:3), globalNode=localNode, islocal=.TRUE.)\n  CALL obj%Get(VALUE=found, tsize=tsize)\n\n  want = 0.0_DFP\n  want(localNode) = VALUE(1:3)\n  tol = 1.0E-5\n  isok = ALL(SOFTEQ(found(1:tsize), want(1:tsize), tol))\n  CALL OK(isok, msg)\n\n  CALL obj%DEALLOCATE()\nEND BLOCK\n\nmesh => NULL()\nCALL dom%DEALLOCATE()\nCALL meshfile%DEALLOCATE()\nCALL param%DEALLOCATE()\nCALL FPL_FINALIZE()\nEND PROGRAM main\n'})})}function I(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(N,{...n})}):N(n)}function m(n){const e={code:"code",pre:"pre",...(0,s.R)(),...n.components};return(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-fortran",children:'!> author: Vikas Sharma, Ph. D.\n! date: 2024-06-05\n! summary: Set7\n\nPROGRAM main\nUSE FEDomain_Class\nUSE HDF5File_Class\nUSE AbstractMesh_Class\nUSE AbstractField_Class, ONLY: TypeField\nUSE ScalarField_Class\nUSE FPL, ONLY: FPL_Init, FPL_FINALIZE, ParameterList_\nUSE GlobalData\nUSE Test_Method\nUSE FEDOF_Class\nUSE ExceptionHandler_Class, ONLY: e, EXCEPTION_INFORMATION\nUSE ApproxUtility\n\nTYPE(FEDomain_) :: dom\nCLASS(AbstractMesh_), POINTER :: mesh\nTYPE(HDF5File_) :: meshfile\nTYPE(ParameterList_) :: param\nCHARACTER(LEN=*), PARAMETER :: engine = "NATIVE_SERIAL"\nCHARACTER(*), PARAMETER :: meshfilename = &\n                           "../../Mesh/examples/meshdata/small_mesh.h5"\nINTEGER(I4B), PARAMETER :: nsd = 2\n\nCALL e%setQuietMode(EXCEPTION_INFORMATION, .TRUE.)\n\nCALL FPL_Init()\nCALL param%Initiate()\n\n!> start creating domain\nCALL meshfile%Initiate(filename=meshfilename, mode="READ")\nCALL meshfile%OPEN()\nCALL dom%Initiate(hdf5=meshfile, group="")\n!> end creating domain\n\nmesh => dom%GetMeshPointer(dim=nsd)\n\nBLOCK\n  INTEGER(I4B), PARAMETER :: order = 1\n  CHARACTER(*), PARAMETER :: baseContinuity = "H1"\n  CHARACTER(*), PARAMETER :: baseInterpolation = "Lagrange"\n  TYPE(FEDOF_) :: fedof\n  TYPE(ScalarField_) :: obj, VALUE\n  REAL(DFP) :: found(100), want(100), tol\n  INTEGER(I4B) :: tsize, localNode(3)\n  CHARACTER(:), ALLOCATABLE :: msg\n  LOGICAL(LGT) :: isok\n\n  CALL fedof%Initiate(baseContinuity=baseContinuity, &\n                  baseInterpolation=baseInterpolation, order=order, mesh=mesh)\n\n  CALL SetScalarFieldParam(param=param, &\n                           fieldType=TypeField%normal, &\n                           name="U", &\n                           engine=engine)\n\n  CALL obj%Initiate(param, fedof)\n  CALL VALUE%Initiate(param, fedof)\n\n  localNode = [1, 3, 5]\n\n  msg = "Set7 "\n\n  DO ii = 1, SIZE(localNode)\n    CALL VALUE%Set(VALUE=REAL(localNode(ii), kind=DFP), &\n                   globalNode=localNode(ii), islocal=.TRUE.)\n  END DO\n\n  CALL obj%Set(VALUE=VALUE)\n  CALL obj%Get(VALUE=found, tsize=tsize)\n  want = 0.0_DFP\n  want(localNode) = localNode\n  tol = 1.0E-5\n  isok = ALL(SOFTEQ(found(1:tsize), want(1:tsize), tol))\n  CALL OK(isok, msg)\n\n  CALL obj%Set(0.0_DFP)\n  obj = VALUE\n  CALL obj%Get(VALUE=found, tsize=tsize)\n  want = 0.0_DFP\n  want(localNode) = localNode\n  tol = 1.0E-5\n  isok = ALL(SOFTEQ(found(1:tsize), want(1:tsize), tol))\n  CALL OK(isok, msg)\n\n  CALL obj%DEALLOCATE()\nEND BLOCK\n\nmesh => NULL()\nCALL dom%DEALLOCATE()\nCALL meshfile%DEALLOCATE()\nCALL param%DEALLOCATE()\nCALL FPL_FINALIZE()\nEND PROGRAM main\n'})})}function R(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(m,{...n})}):m(n)}function S(n){const e={code:"code",pre:"pre",...(0,s.R)(),...n.components};return(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-fortran",children:'!> author: Vikas Sharma, Ph. D.\n! date: 2024-06-05\n! summary: Set8\n\nPROGRAM main\nUSE FEDomain_Class\nUSE HDF5File_Class\nUSE AbstractMesh_Class\nUSE AbstractField_Class, ONLY: TypeField\nUSE ScalarField_Class\nUSE FPL, ONLY: FPL_Init, FPL_FINALIZE, ParameterList_\nUSE GlobalData\nUSE Test_Method\nUSE FEDOF_Class\nUSE ExceptionHandler_Class, ONLY: e, EXCEPTION_INFORMATION\nUSE ApproxUtility\n\nTYPE(FEDomain_) :: dom\nCLASS(AbstractMesh_), POINTER :: mesh\nTYPE(HDF5File_) :: meshfile\nTYPE(ParameterList_) :: param\nCHARACTER(LEN=*), PARAMETER :: engine = "NATIVE_SERIAL"\nCHARACTER(*), PARAMETER :: meshfilename = &\n                           "../../Mesh/examples/meshdata/small_mesh.h5"\nINTEGER(I4B), PARAMETER :: nsd = 2\n\nCALL e%setQuietMode(EXCEPTION_INFORMATION, .TRUE.)\n\nCALL FPL_Init()\nCALL param%Initiate()\n\n!> start creating domain\nCALL meshfile%Initiate(filename=meshfilename, mode="READ")\nCALL meshfile%OPEN()\nCALL dom%Initiate(hdf5=meshfile, group="")\n!> end creating domain\n\nmesh => dom%GetMeshPointer(dim=nsd)\n\nBLOCK\n  INTEGER(I4B), PARAMETER :: order = 1\n  CHARACTER(*), PARAMETER :: baseContinuity = "H1"\n  CHARACTER(*), PARAMETER :: baseInterpolation = "Lagrange"\n  TYPE(FEDOF_) :: fedof\n  TYPE(ScalarField_) :: obj, VALUE\n  REAL(DFP) :: found(100), want(100), tol\n  INTEGER(I4B) :: tsize, localNode(3)\n  CHARACTER(:), ALLOCATABLE :: msg\n  LOGICAL(LGT) :: isok\n\n  CALL fedof%Initiate(baseContinuity=baseContinuity, &\n                  baseInterpolation=baseInterpolation, order=order, mesh=mesh)\n\n  CALL SetScalarFieldParam(param=param, &\n                           fieldType=TypeField%normal, &\n                           name="U", &\n                           engine=engine)\n\n  CALL obj%Initiate(param, fedof)\n  CALL VALUE%Initiate(param, fedof)\n\n  localNode = [1, 3, 5]\n\n  msg = "Set8 "\n\n  DO ii = 1, SIZE(localNode)\n    CALL VALUE%Set(VALUE=REAL(localNode(ii), kind=DFP), &\n                   globalNode=localNode(ii), islocal=.TRUE.)\n  END DO\n\n  CALL obj%Set(VALUE=VALUE)\n  CALL obj%Get(VALUE=found, tsize=tsize)\n  want = 0.0_DFP\n  want(localNode) = localNode\n  tol = 1.0E-5\n  isok = ALL(SOFTEQ(found(1:tsize), want(1:tsize), tol))\n  CALL OK(isok, msg)\n\n  CALL obj%Set(VALUE=VALUE, scale=2.0_DFP, addContribution=.TRUE.)\n  CALL obj%Get(VALUE=found, tsize=tsize)\n  want = 0.0_DFP\n  want(localNode) = 3 * localNode\n  tol = 1.0E-5\n  isok = ALL(SOFTEQ(found(1:tsize), want(1:tsize), tol))\n  CALL OK(isok, msg)\n\n  CALL obj%DEALLOCATE()\nEND BLOCK\n\nmesh => NULL()\nCALL dom%DEALLOCATE()\nCALL meshfile%DEALLOCATE()\nCALL param%DEALLOCATE()\nCALL FPL_FINALIZE()\nEND PROGRAM main\n'})})}function F(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(S,{...n})}):S(n)}const U={},b="Set",f={},h=[{value:"Interface 1",id:"interface-1",level:2},{value:"Interface 2",id:"interface-2",level:2},{value:"Interface 3",id:"interface-3",level:2},{value:"Interface 4",id:"interface-4",level:2},{value:"Interface 5",id:"interface-5",level:2},{value:"Interface 6",id:"interface-6",level:2},{value:"Interface 7",id:"interface-7",level:2},{value:"Interface 8",id:"interface-8",level:2},{value:"Interface 9",id:"interface-9",level:2},{value:"Interface 10",id:"interface-10",level:2},{value:"Interface 11",id:"interface-11",level:2}];function O(n){const e={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...n.components},{TabItem:a,Tabs:t}=e;return a||u("TabItem",!0),t||u("Tabs",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"set",children:"Set"})}),"\n",(0,i.jsxs)(e.p,{children:["Set the entries in the ",(0,i.jsx)(e.code,{children:"ScalarField"}),"."]}),"\n",(0,i.jsx)(e.p,{children:"Calling example:"}),"\n",(0,i.jsx)("span",{class:"badge badge--success",children:(0,i.jsx)(e.p,{children:"Set a single entry"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-fortran",children:"CALL Set(\n    CLASS(ScalarField_):: obj\n    INTEGER(I4B):: globalNode\n    REAL(DFP):: VALUE\n    REAL(DFP):: scale\n    LOGICAL(LGT):: addContribution\n)\n"})}),"\n",(0,i.jsx)("span",{class:"badge badge--success",children:(0,i.jsx)(e.p,{children:"Set all entries to a single scalar value"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-fortran",children:"CALL Set(\n    CLASS(ScalarField_):: obj\n    REAL(DFP):: VALUE\n    REAL(DFP):: scale\n    LOGICAL(LGT):: addContribution\n)\n"})}),"\n",(0,i.jsx)("span",{class:"badge badge--success",children:(0,i.jsx)(e.p,{children:"Set all entries of scalar field to a given vector."})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-fortran",children:"CALL Set(\n    CLASS(ScalarField_):: obj\n    REAL(DFP):: VALUE(:)\n    REAL(DFP):: scale\n    LOGICAL(LGT):: addContribution\n)\n"})}),"\n",(0,i.jsx)("span",{class:"badge badge--success",children:(0,i.jsx)(e.p,{children:"Set selected entries to a single value."})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-fortran",children:"CALL Set(\n    CLASS(ScalarField_):: obj\n    INTEGER(I4B):: globalNode(:)\n    REAL(DFP):: VALUE\n    REAL(DFP):: scale\n    LOGICAL(LGT):: addContribution\n)\n"})}),"\n",(0,i.jsx)("span",{class:"badge badge--success",children:(0,i.jsx)(e.p,{children:"Set multiple entries to different values."})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-fortran",children:"CALL Set(\n    CLASS(ScalarField_):: obj\n    INTEGER(I4B):: globalNode(:)\n    REAL(DFP):: VALUE(:)\n    REAL(DFP):: scale\n    LOGICAL(LGT):: addContribution\n)\n"})}),"\n",(0,i.jsx)("span",{class:"badge badge--success",children:(0,i.jsx)(e.p,{children:"Select multiple enties using triads."})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-fortran",children:"CALL Set(\n    CLASS(ScalarField_):: obj\n    INTEGER(I4B):: istart\n    INTEGER(I4B):: iend\n    INTEGER(I4B):: stride\n    REAL(DFP):: VALUE\n    REAL(DFP):: scale\n    LOGICAL(LGT):: addContribution\n)\n"})}),"\n",(0,i.jsx)("span",{class:"badge badge--success",children:(0,i.jsx)(e.p,{children:"Select multiple enties using triads."})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-fortran",children:"CALL Set(\n    CLASS(ScalarField_):: obj\n    INTEGER(I4B):: istart\n    INTEGER(I4B):: iend\n    INTEGER(I4B):: stride\n    REAL(DFP):: VALUE(:)\n    REAL(DFP):: scale\n    LOGICAL(LGT):: addContribution\n)\n"})}),"\n",(0,i.jsx)("span",{class:"badge badge--success",children:(0,i.jsx)(e.p,{children:"Copy obj2 in obj."})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-fortran",children:"CALL Set(\n    CLASS(ScalarField_):: obj\n    CLASS(ScalarField_):: obj2\n)\n"})}),"\n",(0,i.jsx)("span",{class:"badge badge--success",children:(0,i.jsx)(e.p,{children:"Select multiple values using FEVariable."})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-fortran",children:"CALL Set(\n    CLASS(ScalarField_):: obj\n    INTEGER(I4B):: globalNode(:)\n    TYPE(FEVariable_):: VALUE\n    REAL(DFP):: scale\n    LOGICAL(LGT):: addContribution\n)\n"})}),"\n",(0,i.jsx)("span",{class:"badge badge--success",children:(0,i.jsx)(e.p,{children:"Copy obj2 into obj like AXPY."})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-fortran",children:"CALL Set(\n    CLASS(ScalarField_):: obj\n    CLASS(ScalarField_):: obj2\n    REAL(DFP):: scale\n    LOGICAL(LGT):: addContribution\n)\n"})}),"\n",(0,i.jsx)(e.h2,{id:"interface-1",children:"Interface 1"}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsxs)(a,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE set1(obj, globalNode, VALUE, scale, &\n    & addContribution)\n    CLASS(ScalarField_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: globalNode\n    REAL(DFP), INTENT(IN) :: VALUE\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\n  END SUBROUTINE set1\nEND INTERFACE\n"})}),(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Set single entry."}),"\n"]})]}),(0,i.jsx)(a,{value:"example",label:"\ufe0f\u0700 See example",children:(0,i.jsx)(l,{})}),(0,i.jsx)(a,{value:"close",label:"\u21a2 "})]}),"\n",(0,i.jsx)(e.h2,{id:"interface-2",children:"Interface 2"}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsxs)(a,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE set2(obj, VALUE, scale, addContribution)\n    CLASS(ScalarField_), INTENT(INOUT) :: obj\n    REAL(DFP), INTENT(IN) :: VALUE\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\n  END SUBROUTINE set2\nEND INTERFACE\n"})}),(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Set all values of scalar field to a given scalar."}),"\n"]})]}),(0,i.jsx)(a,{value:"example",label:"\ufe0f\u0700 See example",children:(0,i.jsx)(L,{})}),(0,i.jsx)(a,{value:"close",label:"\u21a2 "})]}),"\n",(0,i.jsx)(e.h2,{id:"interface-3",children:"Interface 3"}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsxs)(a,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE set3(obj, VALUE, scale, addContribution)\n    CLASS(ScalarField_), INTENT(INOUT) :: obj\n    REAL(DFP), INTENT(IN) :: VALUE(:)\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\n  END SUBROUTINE set3\nEND INTERFACE\n"})}),(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Set all values of scalarfield using a vector of reals."}),"\n",(0,i.jsx)(e.li,{children:"The size of value should be same as the size of scalar field."}),"\n"]})]}),(0,i.jsx)(a,{value:"example",label:"\ufe0f\u0700 See example",children:(0,i.jsx)(r,{})}),(0,i.jsx)(a,{value:"close",label:"\u21a2 "})]}),"\n",(0,i.jsx)(e.h2,{id:"interface-4",children:"Interface 4"}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsxs)(a,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-fortran",children:"INTERFACE\n MODULE SUBROUTINE set4(obj, globalNode, VALUE, scale, addContribution)\n    CLASS(ScalarField_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: globalNode(:)\n    REAL(DFP), INTENT(IN) :: VALUE\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\n  END SUBROUTINE set4\nEND INTERFACE\n"})}),(0,i.jsx)(e.p,{children:"Set multiple values to a scalar value."})]}),(0,i.jsx)(a,{value:"example",label:"\ufe0f\u0700 See example",children:(0,i.jsx)(C,{})}),(0,i.jsx)(a,{value:"close",label:"\u21a2 "})]}),"\n",(0,i.jsx)(e.h2,{id:"interface-5",children:"Interface 5"}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsxs)(a,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-fortran",children:"INTERFACE\n MODULE SUBROUTINE set5(obj, globalNode, VALUE, scale, addContribution)\n    CLASS(ScalarField_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: globalNode(:)\n    REAL(DFP), INTENT(IN) :: VALUE(:)\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\n  END SUBROUTINE set5\nEND INTERFACE\n"})}),(0,i.jsx)(e.p,{children:"Set multiple values of scalar field."})]}),(0,i.jsx)(a,{value:"example",label:"\ufe0f\u0700 See example",children:(0,i.jsx)(T,{})}),(0,i.jsx)(a,{value:"close",label:"\u21a2 "})]}),"\n",(0,i.jsx)(e.h2,{id:"interface-6",children:"Interface 6"}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsxs)(a,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE set6(obj, istart, iend, stride, VALUE, &\n    & scale, addContribution)\n    CLASS(ScalarField_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: istart\n    INTEGER(I4B), INTENT(IN) :: iend\n    INTEGER(I4B), INTENT(IN) :: stride\n    REAL(DFP), INTENT(IN) :: VALUE\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\n  END SUBROUTINE set6\nEND INTERFACE\n"})}),(0,i.jsxs)(e.p,{children:["Set multiple values by using triplets ",(0,i.jsx)(e.code,{children:"istart:iend:stride"})]})]}),(0,i.jsx)(a,{value:"example",label:"\ufe0f\u0700 See example",children:(0,i.jsx)(I,{})}),(0,i.jsx)(a,{value:"close",label:"\u21a2 "})]}),"\n",(0,i.jsx)(e.h2,{id:"interface-7",children:"Interface 7"}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsxs)(a,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE set7(obj, istart, iend, stride, VALUE, &\n    & scale, addContribution)\n    CLASS(ScalarField_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: istart\n    INTEGER(I4B), INTENT(IN) :: iend\n    INTEGER(I4B), INTENT(IN) :: stride\n    REAL(DFP), INTENT(IN) :: VALUE(:)\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\n  END SUBROUTINE set7\nEND INTERFACE\n"})}),(0,i.jsx)(e.p,{children:"Set multiple values using triplets."})]}),(0,i.jsx)(a,{value:"example",label:"\ufe0f\u0700 See example",children:(0,i.jsx)(R,{})}),(0,i.jsx)(a,{value:"close",label:"\u21a2 "})]}),"\n",(0,i.jsx)(e.h2,{id:"interface-8",children:"Interface 8"}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)(a,{value:"interface",label:"\u0700 Interface",default:!0,children:(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE set8(obj, obj2)\n    CLASS(ScalarField_), INTENT(INOUT) :: obj\n    CLASS(ScalarField_), INTENT(IN) :: obj2\n  END SUBROUTINE set8\nEND INTERFACE\n"})})}),(0,i.jsx)(a,{value:"example",label:"\ufe0f\u0700 See example",children:(0,i.jsx)(F,{})}),(0,i.jsx)(a,{value:"close",label:"\u21a2 "})]}),"\n",(0,i.jsx)(e.h2,{id:"interface-9",children:"Interface 9"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-fortran",children:"INTERFACE\n MODULE SUBROUTINE set9(obj, globalNode, VALUE, scale, addContribution)\n    CLASS(ScalarField_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: globalNode(:)\n    TYPE(FEVariable_), INTENT(IN) :: VALUE\n  !! Scalar, Nodal, FEVariable (Space or Constant)\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\n  END SUBROUTINE set9\nEND INTERFACE\n"})}),"\n",(0,i.jsx)(e.h2,{id:"interface-10",children:"Interface 10"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-fortran",children:" INTERFACE\n  MODULE SUBROUTINE set10(obj, obj2, scale, addContribution)\n    CLASS(ScalarField_), INTENT(INOUT) :: obj\n    CLASS(ScalarField_), INTENT(IN) :: obj2\n    REAL(DFP), INTENT(IN) :: scale\n    LOGICAL(LGT), INTENT(IN) :: addContribution\n  END SUBROUTINE set10\nEND INTERFACE\n"})}),"\n",(0,i.jsx)(e.h2,{id:"interface-11",children:"Interface 11"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-fortran",children:" INTERFACE\n  MODULE SUBROUTINE Set11(obj, ivar, idof, VALUE, ivar_value, &\n    & idof_value, scale, addContribution)\n    CLASS(ScalarField_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: ivar\n    INTEGER(I4B), INTENT(IN) :: idof\n    CLASS(AbstractNodeField_), INTENT(IN) :: VALUE\n    INTEGER(I4B), INTENT(IN) :: ivar_value\n    INTEGER(I4B), INTENT(IN) :: idof_value\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\n  END SUBROUTINE Set11\nEND INTERFACE\n"})})]})}function P(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(O,{...n})}):O(n)}function u(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}},54213:(n,e,a)=>{a.d(e,{R:()=>o,x:()=>l});var t=a(36672);const i={},s=t.createContext(i);function o(n){const e=t.useContext(s);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:o(n.components),t.createElement(s.Provider,{value:e},n.children)}}}]);