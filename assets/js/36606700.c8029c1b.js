"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[28419],{85020:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>o,default:()=>f,frontMatter:()=>i,metadata:()=>c,toc:()=>l});const c=JSON.parse('{"id":"AbstractMesh/GetFacetConnectivity","title":"GetFacetConnectivity","description":"Interface","source":"@site/docs/docs-api/AbstractMesh/GetFacetConnectivity.md","sourceDirName":"AbstractMesh","slug":"/AbstractMesh/GetFacetConnectivity","permalink":"/docs-api/AbstractMesh/GetFacetConnectivity","draft":false,"unlisted":false,"editUrl":"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/AbstractMesh/GetFacetConnectivity.md","tags":[],"version":"current","lastUpdatedAt":1746669288000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"GetElementToElements","permalink":"/docs-api/AbstractMesh/GetElementToElements"},"next":{"title":"GetFacetElementType","permalink":"/docs-api/AbstractMesh/GetFacetElementType"}}');var a=n(23420),s=n(54213);const i={},o="GetFacetConnectivity",r={},l=[{value:"Interface",id:"interface",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"getfacetconnectivity",children:"GetFacetConnectivity"})}),"\n",(0,a.jsx)(t.h2,{id:"interface",children:"Interface"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-fortran",children:"  MODULE PURE FUNCTION getFacetConnectivity( obj, facetElement, &\n    & elementType, isMaster, facetBoundary ) RESULT( ans )\n    CLASS( Mesh_ ), INTENT( IN ) :: obj\n    INTEGER( I4B ), INTENT( IN ) :: facetElement\n    INTEGER( I4B ), INTENT( IN ) :: elementType\n    LOGICAL( LGT ), INTENT( IN ) :: isMaster\n      !! if isMaster is true then connectivity of facet in master-cell\n      !! is returned, otherwise connectivity of facet in slave-cell\n      !! is returned. This is only applicable for internal facet element\n      !! because for domain facet we do not have slave-cell.\n      !! Currently, we do not support slave-cell for meshFacet because\n      !! the slave of meshFacet lives in different instance of\n    INTEGER( I4B ), OPTIONAL, INTENT( IN ) :: facetBoundary\n    INTEGER( I4B ), ALLOCATABLE :: ans( : )\n  END FUNCTION getFacetConnectivity\n"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-fortran",children:"  MODULE PURE FUNCTION getFacetConnectivity( obj, globalElement, &\n    & iface ) RESULT( ans )\n    CLASS( Mesh_ ), INTENT( IN ) :: obj\n    INTEGER( I4B ), INTENT( IN ) :: globalElement\n    INTEGER( I4B ), INTENT( IN ) :: iface\n    INTEGER( I4B ), ALLOCATABLE :: ans( : )\n  END FUNCTION getFacetConnectivity\n"})})]})}function f(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},54213:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var c=n(36672);const a={},s=c.createContext(a);function i(e){const t=c.useContext(s);return c.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),c.createElement(s.Provider,{value:t},e.children)}}}]);