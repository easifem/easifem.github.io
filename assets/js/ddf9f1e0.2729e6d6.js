"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[68324],{50420:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>n,toc:()=>u});const n=JSON.parse('{"id":"Kdtree2/Kdtree2_Create","title":"Kdtree_Create","description":"Create the actual tree structure by giving an input array of data.","source":"@site/docs/docs-api/Kdtree2/Kdtree2_Create.md","sourceDirName":"Kdtree2","slug":"/Kdtree2/Kdtree2_Create","permalink":"/docs-api/Kdtree2/Kdtree2_Create","draft":false,"unlisted":false,"editUrl":"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/Kdtree2/Kdtree2_Create.md","tags":[],"version":"current","lastUpdatedAt":1724304782000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Kdtree2Result","permalink":"/docs-api/Kdtree2/Kdtree2Result_"},"next":{"title":"Kdtree2_Destroy","permalink":"/docs-api/Kdtree2/Kdtree2_Destroy"}}');var a=r(23420),d=r(54213);function s(e){const t={code:"code",pre:"pre",...(0,d.R)(),...e.components};return(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-fortran",children:"PROGRAM main\nUSE easifemBase\nUSE Kdtree2_Module\nIMPLICIT NONE\n\nTYPE(kdtree2), POINTER :: kd\nREAL(DFP), ALLOCATABLE :: input_data(:, :)\n\n! FUNCTION kdtree2_create(input_data, dim, sort, rearrange) RESULT(mr)\nCALL Reallocate(input_data, 3, 100)\nCALL RANDOM_NUMBER(input_data)\n\nkd => kdtree2_create(input_data, sort=.TRUE., rearrange=.TRUE.)\n! CALL kdtree2_destroy(kd)\n\nEND PROGRAM main\n"})})}function i(e={}){const{wrapper:t}={...(0,d.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(s,{...e})}):s(e)}const o={},c="Kdtree_Create",l={},u=[{value:"Interface",id:"interface",level:2}];function p(e){const t={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,d.R)(),...e.components},{TabItem:r,Tabs:n}=t;return r||m("TabItem",!0),n||m("Tabs",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"kdtree_create",children:"Kdtree_Create"})}),"\n",(0,a.jsx)(t.p,{children:"Create the actual tree structure by giving an input array of data."}),"\n",(0,a.jsx)(t.admonition,{type:"note",children:(0,a.jsxs)(t.p,{children:["Input data is ",(0,a.jsx)(t.code,{children:"input_data(1:d,1:N)"}),", NOT the other way around."]})}),"\n",(0,a.jsxs)(t.p,{children:["Optional arguments: If 'dim' is specified, then the tree will only search the first 'dim' components of input_data, otherwise, dim is inferred from ",(0,a.jsx)(t.code,{children:"SIZE(input_data,1)"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:["If ",(0,a.jsx)(t.code,{children:"sort"})," is true then output results will be sorted by increasing distance. The default is false, as it is faster to not sort."]}),"\n",(0,a.jsxs)(t.p,{children:["If ",(0,a.jsx)(t.code,{children:"rearrange"})," is true then an internal copy of the data, rearranged by terminal node, will be made for cache friendliness. The default is true, as it speeds searches, but building takes longer, and extra memory is used."]}),"\n",(0,a.jsx)(t.h2,{id:"interface",children:"Interface"}),"\n",(0,a.jsxs)(n,{children:[(0,a.jsx)(r,{value:"interface",label:"Interface",default:!0,children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-fortran",children:"FUNCTION Kdtree2_create(input_data, dim, sort, rearrange) RESULT(mr)\n  TYPE(Kdtree2_), POINTER :: mr\n  INTEGER, INTENT(IN), OPTIONAL :: dim\n  LOGICAL, INTENT(IN), OPTIONAL :: sort\n  LOGICAL, INTENT(IN), OPTIONAL :: rearrange\n  REAL(kdkind), TARGET :: input_data(:, :)\nEND FUNCTION\n"})})}),(0,a.jsx)(r,{value:"example",label:"example",children:(0,a.jsx)(i,{})}),(0,a.jsx)(r,{value:"close",label:"\u21a2 close"})]})]})}function h(e={}){const{wrapper:t}={...(0,d.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}function m(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},54213:(e,t,r)=>{r.d(t,{R:()=>s,x:()=>i});var n=r(36672);const a={},d=n.createContext(a);function s(e){const t=n.useContext(d);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),n.createElement(d.Provider,{value:t},e.children)}}}]);