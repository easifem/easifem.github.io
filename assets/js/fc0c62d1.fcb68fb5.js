"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[61344],{24856:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>r,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>c});const l=JSON.parse('{"id":"Polynomial2D/Polynomial2D_","title":"Structure","description":"[[Polynomial2D_]] is a class for two dimensional polynomial.","source":"@site/docs/docs-api/Polynomial2D/Polynomial2D_.md","sourceDirName":"Polynomial2D","slug":"/Polynomial2D/Polynomial2D_","permalink":"/docs-api/Polynomial2D/Polynomial2D_","draft":false,"unlisted":false,"editUrl":"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/Polynomial2D/Polynomial2D_.md","tags":[],"version":"current","lastUpdatedAt":1724304782000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Polynomial2D","permalink":"/docs-api/Polynomial2D/"},"next":{"title":"Polynomial2D example 1","permalink":"/docs-api/Polynomial2D/Polynomial2D_test_1"}}');var a=o(23420),t=o(54213);const i={},s="Structure",r={},c=[{value:"Constructor Methods",id:"constructor-methods",level:2},{value:"Polynomial2D Function",id:"polynomial2d-function",level:3},{value:"Polynomial2D_Pointer",id:"polynomial2d_pointer",level:3},{value:"Deallocate",id:"deallocate",level:3},{value:"IO Methods",id:"io-methods",level:2},{value:"Set Methods",id:"set-methods",level:2},{value:"Get Methods",id:"get-methods",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"structure",children:"Structure"})}),"\n",(0,a.jsx)(n.p,{children:"[[Polynomial2D_]] is a class for two dimensional polynomial."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-fortran",children:"TYPE, EXTENDS( AbstractFunction1D_ ) :: Polynomial2D_\n  PRIVATE\n  INTEGER( I4B ), ALLOCATABLE :: degree( :, : )\n    !! power of each monomial\n  REAL( DFP ), ALLOCATABLE :: coeff( : )\n    !! coefficient\n  TYPE( Monomial2D_ ), ALLOCATABLE :: x( : )\n    !! Monomial2D\n  CONTAINS\n"})}),"\n",(0,a.jsx)(n.h2,{id:"constructor-methods",children:"Constructor Methods"}),"\n",(0,a.jsx)(n.h3,{id:"polynomial2d-function",children:"Polynomial2D Function"}),"\n",(0,a.jsx)(n.p,{children:"Creates an instance of [[Polynomial2D_]]."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\nMODULE PURE FUNCTION Polynomial2D( coeff, degree, name1, name2) &\n  & RESULT( ans )\n  REAL( DFP ), INTENT( IN ) :: coeff( : )\n  !! coefficients\n  INTEGER( I4B ), INTENT( IN ) :: degree( :, : )\n  !! degrees of x and y\n  CHARACTER( LEN = * ), INTENT( IN ) :: name1\n  !! variable x\n  CHARACTER( LEN = * ), INTENT( IN ) :: name2\n  !! variable y\n  TYPE( Polynomial2D_ ) :: ans\nEND FUNCTION Polynomial2D\nEND INTERFACE\n"})}),"\n",(0,a.jsx)(n.h3,{id:"polynomial2d_pointer",children:"Polynomial2D_Pointer"}),"\n",(0,a.jsx)(n.p,{children:"Creates a pointer of recently created [[Polynomial2D_]]."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\nMODULE FUNCTION Polynomial2D_Pointer( coeff, degree, name1, name2) &\n  & RESULT( ans )\n  REAL( DFP ), INTENT( IN ) :: coeff( : )\n  !! coefficients\n  INTEGER( I4B ), INTENT( IN ) :: degree( :, : )\n  !! degree of x and y\n  CHARACTER( LEN = * ), INTENT( IN ) :: name1\n  !! x\n  CHARACTER( LEN = * ), INTENT( IN ) :: name2\n  !! y\n  CLASS( Polynomial2D_ ), POINTER :: ans\nEND FUNCTION Polynomial2D_Pointer\nEND INTERFACE\n"})}),"\n",(0,a.jsx)(n.h3,{id:"deallocate",children:"Deallocate"}),"\n",(0,a.jsx)(n.p,{children:"Deallocate the data."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE Deallocate( obj )\n    CLASS( Polynomial2D_ ), INTENT( INOUT ) :: obj\n  END SUBROUTINE Deallocate\nEND INTERFACE\n"})}),"\n",(0,a.jsx)(n.h2,{id:"io-methods",children:"IO Methods"}),"\n",(0,a.jsx)(n.h2,{id:"set-methods",children:"Set Methods"}),"\n",(0,a.jsx)(n.h2,{id:"get-methods",children:"Get Methods"})]})}function m(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},54213:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>s});var l=o(36672);const a={},t=l.createContext(a);function i(e){const n=l.useContext(t);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),l.createElement(t.Provider,{value:n},e.children)}}}]);