"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[85864],{76690:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>f,contentTitle:()=>x,default:()=>u,frontMatter:()=>h,metadata:()=>i,toc:()=>j});const i=JSON.parse('{"id":"LineInterpolationUtility/LagrangeEvalAll_Line","title":"LagrangeEvalAll_Line","description":"Evaluate Lagrangepolynomials at single point or several points.","source":"@site/docs/docs-api/LineInterpolationUtility/LagrangeEvalAll_Line.md","sourceDirName":"LineInterpolationUtility","slug":"/LineInterpolationUtility/LagrangeEvalAll_Line","permalink":"/docs-api/LineInterpolationUtility/LagrangeEvalAll_Line","draft":false,"unlisted":false,"editUrl":"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/LineInterpolationUtility/LagrangeEvalAll_Line.md","tags":[],"version":"current","lastUpdatedAt":1724304782000,"frontMatter":{"sidebar_label":"LagrangeEvalAll"},"sidebar":"tutorialSidebar","previous":{"title":"LagrangeDegree","permalink":"/docs-api/LineInterpolationUtility/LagrangeDegree_Line"},"next":{"title":"LagrangeInDOF","permalink":"/docs-api/LineInterpolationUtility/LagrangeInDOF_Line"}}');var a=l(23420),o=l(54213);function t(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-fortran",children:'program main\n  use easifemBase\n  implicit none\n  integer(i4b) :: order\n  real(dfp), parameter :: tol = 1.0E-10\n  real(dfp), allocatable :: x(:), coeff(:,:), ans(:), xij(:,:)\n  character( len = * ), parameter :: layout="VEFC" \n  integer(i4b) :: ipType\n  !! "INCREASING"\n  x = [0,1]\n  order = 4_I4B\n  iptype = Equidistance\n  xij = reshape(InterpolationPoint_Line(order=order, iptype=iptype, layout=layout, xij=x), [1, order+1])\n  call display(xij, "xij: ")\n  coeff = zeros(order+1, order+1, 1.0_DFP)\n\n  ans = LagrangeEvalAll_Line(order, xij(1,1), xij, coeff, firstCall=.true.)\n  call ok(ans(1) .approxeq. 1.0_DFP, "tests(1):")\n  call ok(all(ans(2:) .approxeq. 0.0_DFP), "tests(2):")\n\n  ans = LagrangeEvalAll_Line(order, xij(1,2),  xij, coeff, firstCall=.false.)\n  call ok(softeq( ans(1), 0.0_DFP, tol), "tests(3):")\n  call ok(softeq( ans(2), 1.0_DFP, tol), "tests(4):")\n\n  ans = LagrangeEvalAll_Line(order, xij(1,3),  xij, coeff, firstCall=.false.)\n  call ok(all(softeq( ans(1:2), 0.0_DFP, tol)), "tests(5):")\n  call ok(softeq( ans(3), 1.0_DFP, tol), "tests(6):")\n\n  ans = LagrangeEvalAll_Line(order, xij(1,4),  xij, coeff, firstCall=.false.)\n  call ok(all(softeq( ans(1:3), 0.0_DFP, tol)), "tests(7):")\n  call ok(softeq( ans(4), 1.0_DFP, tol), "tests(8):")\nend program main\n'})})}function s(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(t,{...e})}):t(e)}function r(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-fortran",children:'program main\n  use easifemBase\n  implicit none\n  integer(i4b) :: order\n  real(dfp), parameter :: tol = 1.0E-10\n  real(dfp), allocatable :: x(:), coeff(:,:), ans(:), xij(:,:)\n  character( len = * ), parameter :: layout="VEFC" \n  integer(i4b) :: ipType\n  !! "INCREASING"\n  x = [0,1]\n  order = 4_I4B\n  iptype = GaussLegendreLobatto\n  xij = reshape(InterpolationPoint_Line(order=order, iptype=iptype, layout=layout, xij=x), [1, order+1])\n  call display(xij, "xij: ")\n  coeff = zeros(order+1, order+1, 1.0_DFP)\n\n  ans = LagrangeEvalAll_Line(order, xij(1,1), xij, coeff, firstCall=.true.)\n  call ok(ans(1) .approxeq. 1.0_DFP, "tests(1):")\n  call ok(all(ans(2:) .approxeq. 0.0_DFP), "tests(2):")\n\n  ans = LagrangeEvalAll_Line(order, xij(1,2),  xij, coeff, firstCall=.false.)\n  call ok(softeq( ans(1), 0.0_DFP, tol), "tests(3):")\n  call ok(softeq( ans(2), 1.0_DFP, tol), "tests(4):")\n\n  ans = LagrangeEvalAll_Line(order, xij(1,3),  xij, coeff, firstCall=.false.)\n  call ok(all(softeq( ans(1:2), 0.0_DFP, tol)), "tests(5):")\n  call ok(softeq( ans(3), 1.0_DFP, tol), "tests(6):")\n\n  ans = LagrangeEvalAll_Line(order, xij(1,4),  xij, coeff, firstCall=.false.)\n  call ok(all(softeq( ans(1:3), 0.0_DFP, tol)), "tests(7):")\n  call ok(softeq( ans(4), 1.0_DFP, tol), "tests(8):")\n\nend program main\n'})})}function c(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(r,{...e})}):r(e)}function d(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-fortran",children:'program main\n  use easifemBase\n  implicit none\n  integer(i4b) :: order\n  real(dfp), parameter :: tol = 1.0E-10\n  real(dfp), allocatable :: x(:), coeff(:,:), ans(:,:), xij(:,:)\n  character( len = * ), parameter :: layout="VEFC" \n  integer(i4b) :: ipType\n  !! "INCREASING"\n  x = [0,1]\n  order = 4_I4B\n  iptype = GaussLegendreLobatto\n  xij = reshape(InterpolationPoint_Line(order=order, iptype=iptype, layout=layout, xij=x), [1, order+1])\n  call display(xij, "xij: ")\n  coeff = zeros(order+1, order+1, 1.0_DFP)\n\n  ans = LagrangeEvalAll_Line(order, xij(1,:), xij, coeff, firstCall=.true.)\n  call ok(all(softeq(ans, eye(order+1, 1.0_DFP), tol ) ), "tests(1):")\n\nend program main\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-txt",metastring:'title="results"',children:" 1.00000   0.00000  -0.00000   0.00000  -0.00000\n 0.00000   1.00000   0.00000  -0.00000   0.00000\n 0.00000   0.00000   1.00000   0.00000  -0.00000\n 0.00000   0.00000  -0.00000   1.00000  -0.00000\n 0.00000  -0.00000   0.00000  -0.00000   1.00000\n"})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}const h={sidebar_label:"LagrangeEvalAll"},x="LagrangeEvalAll_Line",f={},j=[{value:"Interface 1",id:"interface-1",level:2},{value:"Interface 2",id:"interface-2",level:2}];function m(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",input:"input",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components},{TabItem:l,Tabs:i}=n;return l||L("TabItem",!0),i||L("Tabs",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"lagrangeevalall_line",children:"LagrangeEvalAll_Line"})}),"\n",(0,a.jsx)(n.p,{children:"Evaluate Lagrangepolynomials at single point or several points."}),"\n",(0,a.jsx)(n.h2,{id:"interface-1",children:"Interface 1"}),"\n",(0,a.jsxs)(i,{children:[(0,a.jsxs)(l,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-fortran",children:"INTERFACE LagrangeEvalAll_Line\n  MODULE FUNCTION LagrangeEvalAll_Line1(order, x, xij, coeff, firstCall, &\n    & orthopol, alpha, beta, lambda) &\n    & RESULT(ans)\n    INTEGER(I4B), INTENT(IN) :: order\n    !! order of Lagrange polynomials\n    REAL(DFP), INTENT(IN) :: x\n    !! point of evaluation\n    REAL(DFP), OPTIONAL, INTENT(INOUT) :: xij(1, order + 1)\n    !! interpolation points\n    REAL(DFP), OPTIONAL, INTENT(INOUT) :: coeff(order + 1, order + 1)\n    !! coefficient of Lagrange polynomials\n    LOGICAL(LGT), OPTIONAL :: firstCall\n    !! If firstCall is true, then coeff will be made\n    !! If firstCall is False, then coeff will be used\n    !! Default value of firstCall is True\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: orthopol\n    !! Monomial\n    !! Jacobi\n    !! Legendre\n    !! Chebyshev\n    !! Lobatto\n    !! UnscaledLobatto\n    REAL(DFP), OPTIONAL, INTENT(IN) :: alpha\n    !! Jacobi polynomial parameter\n    REAL(DFP), OPTIONAL, INTENT(IN) :: beta\n    !! Jacobi polynomial parameter\n    REAL(DFP), OPTIONAL, INTENT(IN) :: lambda\n    !! Ultraspherical parameter\n    REAL(DFP) :: ans(order + 1)\n    !! Value of n+1 Lagrange polynomials at point x\n  END FUNCTION LagrangeEvalAll_Line1\nEND INTERFACE LagrangeEvalAll_Line\n"})}),(0,a.jsxs)(n.admonition,{type:"note",children:[(0,a.jsx)(n.mdxAdmonitionTitle,{children:(0,a.jsx)(n.code,{children:"x"})}),(0,a.jsx)(n.p,{children:"Point of evaluation."})]}),(0,a.jsxs)(n.admonition,{type:"note",children:[(0,a.jsx)(n.mdxAdmonitionTitle,{children:(0,a.jsx)(n.code,{children:"xij"})}),(0,a.jsx)(n.p,{children:"Interpolation points. SIZE(xij, 1) is 1. SIZE(xij, 2) should be equal to order+1."})]}),(0,a.jsxs)(n.admonition,{type:"note",children:[(0,a.jsx)(n.mdxAdmonitionTitle,{children:(0,a.jsx)(n.code,{children:"order"})}),(0,a.jsx)(n.p,{children:"order denotes the order of polynomial space."})]}),(0,a.jsxs)(n.admonition,{type:"note",children:[(0,a.jsx)(n.mdxAdmonitionTitle,{children:(0,a.jsx)(n.code,{children:"orthopol"})}),(0,a.jsx)(n.p,{children:"Currently, we can specify following types of orthogonal polynomials:"}),(0,a.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,a.jsxs)(n.li,{className:"task-list-item",children:[(0,a.jsx)(n.input,{type:"checkbox",checked:!0,disabled:!0})," ","Jacobi"]}),"\n",(0,a.jsxs)(n.li,{className:"task-list-item",children:[(0,a.jsx)(n.input,{type:"checkbox",checked:!0,disabled:!0})," ","Ultraspherical"]}),"\n",(0,a.jsxs)(n.li,{className:"task-list-item",children:[(0,a.jsx)(n.input,{type:"checkbox",checked:!0,disabled:!0})," ","Legendre"]}),"\n",(0,a.jsxs)(n.li,{className:"task-list-item",children:[(0,a.jsx)(n.input,{type:"checkbox",checked:!0,disabled:!0})," ","Chebyshev"]}),"\n",(0,a.jsxs)(n.li,{className:"task-list-item",children:[(0,a.jsx)(n.input,{type:"checkbox",checked:!0,disabled:!0})," ","Lobatto"]}),"\n",(0,a.jsxs)(n.li,{className:"task-list-item",children:[(0,a.jsx)(n.input,{type:"checkbox",checked:!0,disabled:!0})," ","UnscaledLobatto\n:::"]}),"\n"]}),(0,a.jsxs)(n.admonition,{type:"note",children:[(0,a.jsx)(n.mdxAdmonitionTitle,{children:(0,a.jsx)(n.code,{children:"alpha, beta"})}),(0,a.jsxs)(n.p,{children:["alpha and beta are parameters of Jacobi Polynomials. They should be present when ",(0,a.jsx)(n.code,{children:"orthopol"})," is equal to ",(0,a.jsx)(n.code,{children:"Jacobi"})]})]})]}),(0,a.jsxs)(n.admonition,{type:"note",children:[(0,a.jsx)(n.mdxAdmonitionTitle,{children:(0,a.jsx)(n.code,{children:"lambda"})}),(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"lambda"})," is parameter for Ultraspherical polynomials. They should be present when ",(0,a.jsx)(n.code,{children:"orthopol"})," is equal to the ",(0,a.jsx)(n.code,{children:"Ultraspherical"})]})]}),(0,a.jsxs)(n.admonition,{type:"note",children:[(0,a.jsx)(n.mdxAdmonitionTitle,{children:(0,a.jsx)(n.code,{children:"ans"})}),(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"ans"})," denotes the ",(0,a.jsx)(n.code,{children:"order+1"})," coefficents of ith polynomial."]})]}),(0,a.jsxs)(n.admonition,{type:"note",children:[(0,a.jsxs)(n.mdxAdmonitionTitle,{children:[(0,a.jsx)(n.code,{children:"coeff"})," and ",(0,a.jsx)(n.code,{children:"firstCall"})]}),(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"coeff"})," denotes the coefficients of Lagrange polynomial. The jth col of ",(0,a.jsx)(n.code,{children:"coeff"})," dentotes the coefficient of jth Lagrange polynomial."]}),(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["If ",(0,a.jsx)(n.code,{children:"firstCall"})," is true and ",(0,a.jsx)(n.code,{children:"coeff"})," is present, then this function will return ",(0,a.jsx)(n.code,{children:"coeff"}),", which can be used later. Note that computation of ",(0,a.jsx)(n.code,{children:"coeff"})," involves inversion of a matrix."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["If ",(0,a.jsx)(n.code,{children:"firstCall"})," is false and ",(0,a.jsx)(n.code,{children:"coeff"})," is present, then this function will use ",(0,a.jsx)(n.code,{children:"coeff"}),"."]}),"\n"]}),"\n"]})]})]}),(0,a.jsx)(l,{value:"example",label:"\ufe0f\u0700 See example",children:(0,a.jsx)(s,{})}),(0,a.jsx)(l,{value:"example2",label:"Example 2",children:(0,a.jsx)(c,{})}),(0,a.jsx)(l,{value:"close",label:"\u21a2 "})]}),"\n",(0,a.jsx)(n.h2,{id:"interface-2",children:"Interface 2"}),"\n",(0,a.jsxs)(i,{children:[(0,a.jsxs)(l,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-fortran",children:"INTERFACE LagrangeEvalAll_Line\n  MODULE FUNCTION LagrangeEvalAll_Line2(order, x, xij, coeff, firstCall, &\n    & orthopol, alpha, beta, lambda) &\n    & RESULT(ans)\n    INTEGER(I4B), INTENT(IN) :: order\n    !! order of Lagrange polynomials\n    REAL(DFP), INTENT(IN) :: x(:)\n    !! point of evaluation\n    REAL(DFP), OPTIONAL, INTENT(INOUT) :: xij(1, order + 1)\n    !! interpolation points\n    REAL(DFP), OPTIONAL, INTENT(INOUT) :: coeff(order + 1, order + 1)\n    !! coefficient of Lagrange polynomials\n    LOGICAL(LGT), OPTIONAL :: firstCall\n    !! If firstCall is true, then coeff will be made\n    !! If firstCall is False, then coeff will be used\n    !! Default value of firstCall is True\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: orthopol\n    !! Monomial\n    !! Jacobi\n    !! Legendre\n    !! Chebyshev\n    !! Lobatto\n    !! UnscaledLobatto\n    REAL(DFP), OPTIONAL, INTENT(IN) :: alpha\n    !! Jacobi polynomial parameter\n    REAL(DFP), OPTIONAL, INTENT(IN) :: beta\n    !! Jacobi polynomial parameter\n    REAL(DFP), OPTIONAL, INTENT(IN) :: lambda\n    !! Ultraspherical parameter\n    REAL(DFP) :: ans(SIZE(x), order + 1)\n    !! Value of n+1 Lagrange polynomials at point x\n    !! ans(:, j) is the value of jth polynomial at x points\n    !! ans(i, :) is the value of all polynomials at x(i) point\n  END FUNCTION LagrangeEvalAll_Line2\nEND INTERFACE LagrangeEvalAll_Line\n"})}),(0,a.jsxs)(n.admonition,{type:"note",children:[(0,a.jsx)(n.mdxAdmonitionTitle,{children:(0,a.jsx)(n.code,{children:"x"})}),(0,a.jsx)(n.p,{children:"Point of evaluation."})]}),(0,a.jsxs)(n.admonition,{type:"note",children:[(0,a.jsx)(n.mdxAdmonitionTitle,{children:(0,a.jsx)(n.code,{children:"xij"})}),(0,a.jsx)(n.p,{children:"Interpolation points. SIZE(xij, 1) is 1. SIZE(xij, 2) should be equal to order+1."})]}),(0,a.jsxs)(n.admonition,{type:"note",children:[(0,a.jsx)(n.mdxAdmonitionTitle,{children:(0,a.jsx)(n.code,{children:"order"})}),(0,a.jsx)(n.p,{children:"order denotes the order of polynomial space."})]}),(0,a.jsxs)(n.admonition,{type:"note",children:[(0,a.jsx)(n.mdxAdmonitionTitle,{children:(0,a.jsx)(n.code,{children:"orthopol"})}),(0,a.jsx)(n.p,{children:"Currently, we can specify following types of orthogonal polynomials:"}),(0,a.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,a.jsxs)(n.li,{className:"task-list-item",children:[(0,a.jsx)(n.input,{type:"checkbox",checked:!0,disabled:!0})," ","Jacobi"]}),"\n",(0,a.jsxs)(n.li,{className:"task-list-item",children:[(0,a.jsx)(n.input,{type:"checkbox",checked:!0,disabled:!0})," ","Ultraspherical"]}),"\n",(0,a.jsxs)(n.li,{className:"task-list-item",children:[(0,a.jsx)(n.input,{type:"checkbox",checked:!0,disabled:!0})," ","Legendre"]}),"\n",(0,a.jsxs)(n.li,{className:"task-list-item",children:[(0,a.jsx)(n.input,{type:"checkbox",checked:!0,disabled:!0})," ","Chebyshev"]}),"\n",(0,a.jsxs)(n.li,{className:"task-list-item",children:[(0,a.jsx)(n.input,{type:"checkbox",checked:!0,disabled:!0})," ","Lobatto"]}),"\n",(0,a.jsxs)(n.li,{className:"task-list-item",children:[(0,a.jsx)(n.input,{type:"checkbox",checked:!0,disabled:!0})," ","UnscaledLobatto\n:::"]}),"\n"]}),(0,a.jsxs)(n.admonition,{type:"note",children:[(0,a.jsx)(n.mdxAdmonitionTitle,{children:(0,a.jsx)(n.code,{children:"alpha, beta"})}),(0,a.jsxs)(n.p,{children:["alpha and beta are parameters of Jacobi Polynomials. They should be present when ",(0,a.jsx)(n.code,{children:"orthopol"})," is equal to ",(0,a.jsx)(n.code,{children:"Jacobi"})]})]})]}),(0,a.jsxs)(n.admonition,{type:"note",children:[(0,a.jsx)(n.mdxAdmonitionTitle,{children:(0,a.jsx)(n.code,{children:"lambda"})}),(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"lambda"})," is parameter for Ultraspherical polynomials. They should be present when ",(0,a.jsx)(n.code,{children:"orthopol"})," is equal to the ",(0,a.jsx)(n.code,{children:"Ultraspherical"})]})]}),(0,a.jsxs)(n.admonition,{type:"note",children:[(0,a.jsx)(n.mdxAdmonitionTitle,{children:(0,a.jsx)(n.code,{children:"ans"})}),(0,a.jsxs)(n.p,{children:["jth col of ",(0,a.jsx)(n.code,{children:"ans"})," denotes the ",(0,a.jsx)(n.code,{children:"order+1"})," coefficents of jth polynomial."]})]}),(0,a.jsxs)(n.admonition,{type:"note",children:[(0,a.jsxs)(n.mdxAdmonitionTitle,{children:[(0,a.jsx)(n.code,{children:"coeff"})," and ",(0,a.jsx)(n.code,{children:"firstCall"})]}),(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"coeff"})," denotes the coefficients of Lagrange polynomial. The jth col of ",(0,a.jsx)(n.code,{children:"coeff"})," dentotes the coefficient of jth Lagrange polynomial."]}),(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["If ",(0,a.jsx)(n.code,{children:"firstCall"})," is true and ",(0,a.jsx)(n.code,{children:"coeff"})," is present, then this function will return ",(0,a.jsx)(n.code,{children:"coeff"}),", which can be used later. Note that computation of ",(0,a.jsx)(n.code,{children:"coeff"})," involves inversion of a matrix."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["If ",(0,a.jsx)(n.code,{children:"firstCall"})," is false and ",(0,a.jsx)(n.code,{children:"coeff"})," is present, then this function will use ",(0,a.jsx)(n.code,{children:"coeff"}),"."]}),"\n"]}),"\n"]})]})]}),(0,a.jsx)(l,{value:"example",label:"\ufe0f\u0700 See example",children:(0,a.jsx)(p,{})}),(0,a.jsx)(l,{value:"close",label:"\u21a2 "})]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(m,{...e})}):m(e)}function L(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},54213:(e,n,l)=>{l.d(n,{R:()=>t,x:()=>s});var i=l(36672);const a={},o=i.createContext(a);function t(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:t(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);