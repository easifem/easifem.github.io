"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[39553],{34216:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>y,contentTitle:()=>m,default:()=>T,frontMatter:()=>x,metadata:()=>r,toc:()=>f});const r=JSON.parse('{"id":"CSRSparsity/SetSparsity","title":"SetSparsity","description":"This subroutine sets the sparsity pattern in the CSRSparsity object.","source":"@site/docs/docs-api/CSRSparsity/SetSparsity.md","sourceDirName":"CSRSparsity","slug":"/CSRSparsity/SetSparsity","permalink":"/docs-api/CSRSparsity/SetSparsity","draft":false,"unlisted":false,"editUrl":"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/CSRSparsity/SetSparsity.md","tags":[],"version":"current","lastUpdatedAt":1724304782000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Initiate","permalink":"/docs-api/CSRSparsity/Initiate"},"next":{"title":"Shape","permalink":"/docs-api/CSRSparsity/Shape"}}');var t=o(23420),a=o(54213);function i(e){const n={admonition:"admonition",code:"code",h3:"h3",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h3,{id:"example-4",children:"Example 4"}),"\n",(0,t.jsxs)(n.p,{children:["This example shows how to set sparsity pattern in an instance of ",(0,t.jsx)(n.code,{children:"CSRSparsity_"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["The storage pattern is ",(0,t.jsx)(n.code,{children:"FMT_NODES"}),", and matrix is not a block matrix."]}),"\n",(0,t.jsxs)(n.admonition,{type:"note",children:[(0,t.jsx)(n.mdxAdmonitionTitle,{children:(0,t.jsx)(n.code,{children:"setSparsity"})}),(0,t.jsxs)(n.p,{children:["Setting sparsity pattern. The ",(0,t.jsx)(n.code,{children:"row"})," and ",(0,t.jsx)(n.code,{children:"col"})," are the row and column number of the matrix."]})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"PROGRAM main\nUSE easifemBase\nIMPLICIT NONE\n\n  TYPE( CSRSparsity_ ) :: obj\n  TYPE( DOF_ ) :: dofobj\n  INTEGER( I4B ) :: i\n\n  CALL Initiate( &\n    & obj=dofobj, &\n    & tNodes=[12], &\n    & names=['K'], &\n    & spaceCompo=[1], &\n    & timeCompo=[1], &\n    & storageFMT=NODES_FMT )\n\n  CALL Initiate( &\n    & obj, &\n    & ncol=(.tnodes. dofobj),  &\n    & nrow=(.tnodes. dofobj), &\n    & idof=dofobj, &\n    & jdof=dofobj )\n\nCALL Setsparsity( obj, row=1, col=[1,2,6,5] )\nCALL Setsparsity( obj, row=2, col=[2,1,3,5,6,7] )\nCALL Setsparsity( obj, row=3, col=[3,2,4,6,7,8] )\nCALL Setsparsity( obj, row=4, col=[4,3,7,8] )\nCALL Setsparsity( obj, row=5, col=[5,1,9,2,6,10] )\nCALL Setsparsity( obj, row=6, col=[6,2,10,1,5,9,3,7,11] )\nCALL Setsparsity( obj, row=7, col=[7,6,8,2,3,4,10,11,12] )\nCALL Setsparsity( obj, row=8, col=[8,4,12,3,7,11] )\nCALL Setsparsity( obj, row=9, col=[9,5,6,10] )\nCALL Setsparsity( obj, row=10, col=[10,9,11,5,6,7] )\nCALL Setsparsity( obj, row=11, col=[11,10,12,6,7,8] )\nCALL Setsparsity( obj, row=12, col=[12,7,8,11] )\n\nCALL setSparsity( obj )\n\nCALL Display( obj, \"obj=\" )\n\n  CALL Deallocate( dofobj )\n  CALL Deallocate( obj )\nEND PROGRAM main\n"})})]})}function s(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(i,{...e})}):i(e)}function l(e){const n={admonition:"admonition",code:"code",h3:"h3",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h3,{id:"example-5",children:"Example 5"}),"\n",(0,t.jsxs)(n.p,{children:["This example shows how to set sparsity pattern in an instance of ",(0,t.jsx)(n.code,{children:"CSRSparsity_"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["The storage pattern is ",(0,t.jsx)(n.code,{children:"FMT_DOF"}),", and matrix is not a block matrix."]}),"\n",(0,t.jsxs)(n.admonition,{type:"info",children:[(0,t.jsx)(n.mdxAdmonitionTitle,{children:(0,t.jsx)(n.code,{children:"SetSparsity"})}),(0,t.jsxs)(n.p,{children:["Setting sparsity pattern. The ",(0,t.jsx)(n.code,{children:"row"})," and ",(0,t.jsx)(n.code,{children:"col"})," are the row and column number of the matrix."]})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"PROGRAM main\nUSE easifemBase\nIMPLICIT NONE\nTYPE( CSRSparsity_ ) :: obj\nTYPE( DOF_ ) :: dofobj\nINTEGER( i4b ) :: i\n\nCALL Initiate( &\n  & obj=dofobj, &\n  & tNodes=[12], &\n  & names=['K'], &\n  & spaceCompo=[3], &\n  & timeCompo=[2], &\n  & storageFMT=DOF_FMT )\n\nCALL Initiate( obj, ncol=.tNodes. dofobj, nrow=.tNodes. dofobj, idof=dofobj, &\n    & jdof=dofobj )\n\nCALL SetSparsity( obj, 1, [1,2,6,5] )\nCALL SetSparsity( obj, 2, [2,1,3,5,6,7] )\nCALL SetSparsity( obj, 3, [3,2,4,6,7,8] )\nCALL SetSparsity( obj, 4, [4,3,7,8] )\nCALL SetSparsity( obj, 5, [5,1,9,2,6,10] )\nCALL SetSparsity( obj, 6, [6,2,10,1,5,9,3,7,11] )\nCALL SetSparsity( obj, 7, [7,6,8,2,3,4,10,11,12] )\nCALL SetSparsity( obj, 8, [8,4,12,3,7,11] )\nCALL SetSparsity( obj, 9, [9,5,6,10] )\nCALL SetSparsity( obj, 10, [10,9,11,5,6,7] )\nCALL SetSparsity( obj, 11, [11,10,12,6,7,8] )\nCALL SetSparsity( obj, 12, [12,7,8,11] )\n\nCALL SetSparsity(obj)\n\nCALL Display( obj, \"obj=\" )\n\nCALL Deallocate( dofobj )\nCALL Deallocate( obj )\nEND PROGRAM main\n"})})]})}function c(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}function d(e){const n={admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h3,{id:"example-3",children:"Example 3"}),"\n",(0,t.jsxs)(n.p,{children:["This example shows how to Set sparsity pattern in an instance of ",(0,t.jsx)(n.code,{children:"CSRSparsity_"}),". The storage pattern is ",(0,t.jsx)(n.code,{children:"FMT_DOF"}),", and matrix is block matrix."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Make an instance of ",(0,t.jsx)(n.code,{children:"DOF_"})," which contains the storage pattern."]}),"\n",(0,t.jsxs)(n.li,{children:["Initiate an instance of ",(0,t.jsx)(n.code,{children:"CSRSparsity_"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.admonition,{type:"note",children:[(0,t.jsx)(n.mdxAdmonitionTitle,{children:(0,t.jsx)(n.code,{children:"SetSparsity"})}),(0,t.jsxs)(n.p,{children:["In this example we will set sparsity pattern in each block. The block address is given by\nivar and jvar. ",(0,t.jsx)(n.code,{children:"row"})," and ",(0,t.jsx)(n.code,{children:"col"})," are the row and column number in that\nblock."]}),(0,t.jsxs)(n.p,{children:["We should now call ",(0,t.jsx)(n.code,{children:"SetSparsity()"})," to indicate that setting of sparsity pattern is finished. This step will compact the storage."]})]}),"\n",(0,t.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"PROGRAM main\nUSE easifemBase\nIMPLICIT NONE\n\n  TYPE( CSRSparsity_ ) :: obj\n  TYPE( DOF_ ) :: dofobj\n  INTEGER( I4B ) :: i\n\n  CALL Initiate( &\n    & obj=dofobj, &\n    & tNodes=[6, 3], &\n    & names=['V', 'P'], &\n    & spaceCompo=[3, 1], &\n    & timeCompo=[1, 1], &\n    & storageFMT=FMT_DOF )\n\n  CALL Initiate( &\n    & obj, &\n    & ncol=(.tnodes. dofobj), &\n    & nrow=(.tNodes. dofobj),  &\n    & idof=dofobj, &\n    & jdof=dofobj )\n\n!Block 1,1 ( V, V )\n\nCALL SetSparsity( obj=obj, row=1, col=[1,2,3,4,5,6], ivar=1, jvar=1 )\nCALL SetSparsity( obj=obj, row=2, col=[1,2,3,4,5,6], ivar=1, jvar=1 )\nCALL SetSparsity( obj=obj, row=3, col=[1,2,3,4,5,6], ivar=1, jvar=1 )\nCALL SetSparsity( obj=obj, row=4, col=[1,2,3,4,5,6], ivar=1, jvar=1 )\nCALL SetSparsity( obj=obj, row=5, col=[1,2,3,4,5,6], ivar=1, jvar=1 )\nCALL SetSparsity( obj=obj, row=6, col=[1,2,3,4,5,6], ivar=1, jvar=1 )\n\n!Block 1,2 (V, P)\n\nCALL SetSparsity( obj=obj, row=1, col=[1,2,3], ivar=1, jvar=2 )\nCALL SetSparsity( obj=obj, row=2, col=[1,2,3], ivar=1, jvar=2 )\nCALL SetSparsity( obj=obj, row=3, col=[1,2,3], ivar=1, jvar=2 )\nCALL SetSparsity( obj=obj, row=4, col=[1,2,3], ivar=1, jvar=2 )\nCALL SetSparsity( obj=obj, row=5, col=[1,2,3], ivar=1, jvar=2 )\nCALL SetSparsity( obj=obj, row=6, col=[1,2,3], ivar=1, jvar=2 )\n\n!Block 2,1 (P,V)\n\nCALL SetSparsity( obj=obj, row=1, col=[1,2,3,4,5,6], ivar=2, jvar=1 )\nCALL SetSparsity( obj=obj, row=2, col=[1,2,3,4,5,6], ivar=2, jvar=1 )\nCALL SetSparsity( obj=obj, row=3, col=[1,2,3,4,5,6], ivar=2, jvar=1 )\n\n!Block 2,2 (P,P)\n\nCALL SetSparsity( obj=obj, row=1, col=[1,2,3], ivar=2, jvar=2 )\nCALL SetSparsity( obj=obj, row=2, col=[1,2,3], ivar=2, jvar=2 )\nCALL SetSparsity( obj=obj, row=3, col=[1,2,3], ivar=2, jvar=2 )\n\nCALL SetSparsity( obj )\n\nCALL Display( obj, \"\" )\n\nCALL Deallocate( dofobj )\nCALL Deallocate( obj )\nEND PROGRAM main\n"})})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}function j(e){const n={code:"code",h3:"h3",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h3,{id:"example-7",children:"example 7"}),"\n",(0,t.jsx)(n.p,{children:"This example shows how to set sparsity pattern by using a graph matrix. A graph matrix is a two-d array of 1 and 0. If graph( i, j ) is 1 then row-i and row-j are connected."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:'PROGRAM main\nUSE easifemBase\nIMPLICIT NONE\nTYPE( CSRSparsity_) :: obj\nINTEGER( I4B ), PARAMETER :: nrow=5, ncol=5\nINTEGER( I4B ) :: i, graph( 5, 5 )\n\ngraph = 0\ngraph( 1,2 ) = 1\ngraph( 2,3 ) = 1\ngraph( 2,4 ) = 1\ngraph( 2,5 ) = 1\n\nCALL Initiate( obj=obj, nrow=nrow, ncol=ncol )\n\nCALL SetSparsity(obj, graph=graph)\nCALL SetSparsity(obj)\n\nCALL Display( obj, "obj" )\n\nCALL Deallocate( obj )\nEND PROGRAM main\n'})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(j,{...e})}):j(e)}function S(e){const n={code:"code",h3:"h3",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h3,{id:"example-8",children:"example 8"}),"\n",(0,t.jsx)(n.p,{children:"This example shows how to set sparsity pattern by using a graph matrix. A graph matrix is a two-d array of true and false. if graph( i, j ) is true then row-i and row-j are connected."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:'PROGRAM main\nUSE easifemBase\nIMPLICIT NONE\nTYPE( CSRSparsity_) :: obj\nINTEGER( I4B ), PARAMETER :: nrow=5, ncol=5\nINTEGER( I4B ) :: i\nLOGICAL( LGT ) :: graph( nrow, ncol )\n\ngraph = .FALSE.\ngraph( 1,2 ) = .TRUE.\ngraph( 2,3 ) = .TRUE.\ngraph( 2,4 ) = .TRUE.\ngraph( 2,5 ) = .TRUE.\n\nCALL Initiate( obj=obj, nrow=nrow, ncol=ncol )\n\nCALL SetSparsity(obj, graph=graph)\nCALL SetSparsity(obj)\n\nCALL Display( obj, "obj" )\n\nCALL Deallocate( obj )\nEND PROGRAM main\n'})})]})}function b(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(S,{...e})}):S(e)}const x={},m="SetSparsity",y={},f=[{value:"Interface 1 (Sparsity by row and column)",id:"interface-1-sparsity-by-row-and-column",level:2},{value:"Example 4",id:"example-4",level:3},{value:"Interface 2 (Sparsity by row and cols)",id:"interface-2-sparsity-by-row-and-cols",level:2},{value:"Example 5",id:"example-5",level:3},{value:"Interface 3 (Sparsity for block matrix)",id:"interface-3-sparsity-for-block-matrix",level:2},{value:"Example 3",id:"example-3",level:3},{value:"Usage",id:"usage",level:2},{value:"Interface 4 (Sparsity for block matrix)",id:"interface-4-sparsity-for-block-matrix",level:2},{value:"Interface 5 (Sparsity by graph)",id:"interface-5-sparsity-by-graph",level:2},{value:"example 7",id:"example-7",level:3},{value:"example 8",id:"example-8",level:3}];function L(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components},{TabItem:o,Tabs:r}=n;return o||E("TabItem",!0),r||E("Tabs",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"setsparsity",children:"SetSparsity"})}),"\n",(0,t.jsxs)(n.p,{children:["This subroutine sets the sparsity pattern in the ",(0,t.jsx)(n.code,{children:"CSRSparsity"})," object."]}),"\n",(0,t.jsx)(n.admonition,{title:"SetSparsity",type:"info",children:(0,t.jsxs)(n.p,{children:["When you are done setting the sparsity pattern, you must call ",(0,t.jsx)(n.code,{children:"SetSparsity()"})," without arguments. This subroutine then creates a compact data inside the instance of ",(0,t.jsx)(n.code,{children:"CSRSparsity_"}),"."]})}),"\n",(0,t.jsx)(n.h2,{id:"interface-1-sparsity-by-row-and-column",children:"Interface 1 (Sparsity by row and column)"}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsxs)(o,{value:"interface",label:"Interface",default:!0,children:[(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"MODULE SUBROUTINE SetSparsity( obj, Row, Col )\n  TYPE( CSRSparsity_ ), INTENT( INOUT ) :: obj\n  INTEGER( I4B ), INTENT( IN ) :: Row\n  INTEGER( I4B ), INTENT( IN ) :: Col( : )\nEND SUBROUTINE SetSparsity\n"})}),(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["This subroutine sets the sparsity pattern of a given row. If ",(0,t.jsx)(n.code,{children:"obj%tdof"})," is equal to 1, then ",(0,t.jsx)(n.code,{children:"Col"})," is sorted in increasing order and appended to ",(0,t.jsx)(n.code,{children:"obj%Row(Row)"}),". If ",(0,t.jsx)(n.code,{children:"obj%tdof"})," is not equal to 1, then based on the storage format and ",(0,t.jsx)(n.code,{children:"Col"}),", connectivity information is generated. The second interface is similar to the first one, however, this times several rows can be given."]})})]}),(0,t.jsx)(o,{value:"example",label:"example",children:(0,t.jsx)(s,{})}),(0,t.jsx)(o,{value:"close",label:"\u21a2 close"})]}),"\n",(0,t.jsx)(n.h2,{id:"interface-2-sparsity-by-row-and-cols",children:"Interface 2 (Sparsity by row and cols)"}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsx)(o,{value:"interface",label:"Interface",default:!0,children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"MODULE SUBROUTINE SetSparsity( obj, Row, Col )\n  TYPE( CSRSparsity_ ), INTENT( INOUT ) :: obj\n  INTEGER( I4B ), INTENT( IN ) :: Row( : )\n    !! row number\n  TYPE( IntVector_ ), INTENT( IN ) :: Col( : )\n    !! column number\nEND SUBROUTINE SetSparsity\n"})})}),(0,t.jsx)(o,{value:"example",label:"example",children:(0,t.jsx)(c,{})}),(0,t.jsx)(o,{value:"close",label:"\u21a2 close"})]}),"\n",(0,t.jsx)(n.h2,{id:"interface-3-sparsity-for-block-matrix",children:"Interface 3 (Sparsity for block matrix)"}),"\n",(0,t.jsx)(n.p,{children:"To handle the block sparsity we can use following routines."}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsxs)(o,{value:"interface",label:"Interface",default:!0,children:[(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"INTERFACE SetSparsity\n  MODULE SUBROUTINE obj_SetSparsity3(obj, row, col, ivar, jvar)\n    TYPE(CSRSparsity_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: row\n    !! row number\n    INTEGER(I4B), INTENT(IN) :: col(:)\n    !! sparsity of row, column numbers\n    INTEGER(I4B), INTENT(IN) :: ivar\n    !! block address (row index)\n    INTEGER(I4B), INTENT(IN) :: jvar\n    !! block address (col index)\n  END SUBROUTINE obj_SetSparsity3\nEND INTERFACE SetSparsity\n"})}),(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["While calling ",(0,t.jsx)(n.code,{children:"SetSparsity()"})," user has to deal with the mesh node numbers only, because this routine reads the information stored inside the ",(0,t.jsx)(n.code,{children:"DOF_"})," object field, and take care of sparsity patterns for all degrees of freedom."]})})]}),(0,t.jsx)(o,{value:"example",label:"example",children:(0,t.jsx)(p,{})}),(0,t.jsx)(o,{value:"close",label:"\u21a2 close"})]}),"\n",(0,t.jsx)(n.h2,{id:"interface-4-sparsity-for-block-matrix",children:"Interface 4 (Sparsity for block matrix)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"INTERFACE SetSparsity\n  MODULE SUBROUTINE obj_SetSparsity4(obj, Row, Col, iVar, jVar)\n    TYPE(CSRSparsity_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: Row(:)\n    !! several row numbers\n    TYPE(IntVector_), INTENT(IN) :: Col(:)\n    !! column index for each row number\n    INTEGER(I4B), INTENT(IN) :: iVar\n    !! block address (row index)\n    INTEGER(I4B), INTENT(IN) :: jVar\n    !! block address (col index)\n  END SUBROUTINE obj_SetSparsity4\nEND INTERFACE SetSparsity\n"})}),"\n",(0,t.jsx)(n.h2,{id:"interface-5-sparsity-by-graph",children:"Interface 5 (Sparsity by graph)"}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsxs)(o,{value:"interface",label:"Interface",default:!0,children:[(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"INTERFACE SetSparsity\n  MODULE SUBROUTINE obj_SetSparsity5(obj, graph)\n    TYPE(CSRSparsity_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: graph(:, :)\n  !! graph of sparsity\n  !! If graph( i, j ) .EQ. 0, then i and j are not connected\n  !! else they are connected.\n  END SUBROUTINE obj_SetSparsity5\nEND INTERFACE SetSparsity\n"})}),(0,t.jsx)(n.p,{children:"This subroutine Sets the sparsity pattern by using the graph.\ngraph( i, j ) is either 0 or 1, if zero then there is not connection\nbetween row-i and row-j"})]}),(0,t.jsx)(o,{value:"interface2",label:"Interface 2",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-fortran",children:"INTERFACE SetSparsity\n  MODULE SUBROUTINE obj_SetSparsity6(obj, graph)\n    TYPE(CSRSparsity_), INTENT(INOUT) :: obj\n    LOGICAL(LGT), INTENT(IN) :: graph(:, :)\n  !! graph of sparsity\n  !! If graph( i, j ) .EQ. FALSE, then i and j are not connected\n  !! else they are connected.\n  END SUBROUTINE obj_SetSparsity6\nEND INTERFACE SetSparsity\n"})})}),(0,t.jsx)(o,{value:"example",label:"example",children:(0,t.jsx)(h,{})}),(0,t.jsx)(o,{value:"example2",label:"example 2",children:(0,t.jsx)(b,{})}),(0,t.jsx)(o,{value:"close",label:"\u21a2 close"})]})]})}function T(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(L,{...e})}):L(e)}function E(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},54213:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>s});var r=o(36672);const t={},a=r.createContext(t);function i(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);