"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[83282],{31286:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"IntVector/IntVector_test_1","title":"IntVector example 1","description":"Testing and showing usage of methods defined in [[IntVector_#Constructor-methods]]","source":"@site/docs/docs-api/IntVector/IntVector_test_1.md","sourceDirName":"IntVector","slug":"/IntVector/IntVector_test_1","permalink":"/docs-api/IntVector/IntVector_test_1","draft":false,"unlisted":false,"editUrl":"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/IntVector/IntVector_test_1.md","tags":[{"inline":true,"label":"IntVector/Allocate","permalink":"/docs-api/tags/int-vector-allocate"},{"inline":true,"label":"IntVector/IsAllocated","permalink":"/docs-api/tags/int-vector-is-allocated"},{"inline":true,"label":"IntVector/IsInitiated","permalink":"/docs-api/tags/int-vector-is-initiated"},{"inline":true,"label":"IntVector/Deallocate","permalink":"/docs-api/tags/int-vector-deallocate"},{"inline":true,"label":"IntVector/Size","permalink":"/docs-api/tags/int-vector-size"},{"inline":true,"label":"IntVector/Shape","permalink":"/docs-api/tags/int-vector-shape"},{"inline":true,"label":"IntVector/GetTotalDimension","permalink":"/docs-api/tags/int-vector-get-total-dimension"}],"version":"current","lastUpdatedAt":1724304782000,"frontMatter":{"title":"IntVector example 1","tags":["IntVector/Allocate","IntVector/IsAllocated","IntVector/IsInitiated","IntVector/Deallocate","IntVector/Size","IntVector/Shape","IntVector/GetTotalDimension"]},"sidebar":"tutorialSidebar","previous":{"title":"Structure","permalink":"/docs-api/IntVector/IntVector_"},"next":{"title":"IntVector example 2","permalink":"/docs-api/IntVector/IntVector_test_2"}}');var a=n(23420),s=n(54213);const r={title:"IntVector example 1",tags:["IntVector/Allocate","IntVector/IsAllocated","IntVector/IsInitiated","IntVector/Deallocate","IntVector/Size","IntVector/Shape","IntVector/GetTotalDimension"]},c="Intvector example 1",i={},l=[{value:"Modules and classes",id:"modules-and-classes",level:2},{value:"Usage",id:"usage",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"intvector-example-1",children:"Intvector example 1"})}),"\n",(0,a.jsx)(t.p,{children:"Testing and showing usage of methods defined in [[IntVector_#Constructor-methods]]"}),"\n",(0,a.jsx)(t.h2,{id:"modules-and-classes",children:"Modules and classes"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"[[IntVector_]]"}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-fortran",children:"PROGRAM main\nUSE easifemBase\nTYPE(IntVector_) :: obj\n"})}),"\n",(0,a.jsx)(t.p,{children:'!!! note ""\nInitiate an instance of [[IntVector_]] by specifying size.'}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-fortran",children:"CALL ALLOCATE(obj=obj, dims=10)\n"})}),"\n",(0,a.jsx)(t.p,{children:'!!! note ""\nLet us check if obj is initiated or not.'}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-fortran",children:'CALL OK(IsAllocated(obj), "IsAllocated(obj)")\n'})}),"\n",(0,a.jsxs)(t.p,{children:["Alternatively, we can use the method called ",(0,a.jsx)(t.code,{children:"isInitiated"})]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-fortran",children:'CALL OK(IsInitiated(obj), "IsInitiated(obj)")\n'})}),"\n",(0,a.jsx)(t.p,{children:'!!! note ""\nSize of the  [[IntVector_]]'}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-fortran",children:'CALL OK( SIZE(obj) .EQ. 10, "SIZE(obj)")\n'})}),"\n",(0,a.jsx)(t.p,{children:'!!! note ""\nShape of the  [[IntVector_]]'}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-fortran",children:'CALL OK( ALL(SHAPE(obj) .EQ. [10]), "SHAPE(obj)")\n'})}),"\n",(0,a.jsx)(t.p,{children:'!!! note ""\nGetTotalDimension of the  [[IntVector_]]'}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-fortran",children:'CALL OK( GetTotalDimension(obj) .EQ. 1, "GetTotalDimension(obj)")\n'})}),"\n",(0,a.jsx)(t.p,{children:'!!! settings ""\nCleanup.'}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-fortran",children:"CALL DEALLOCATE(obj)\nEND PROGRAM main\n"})})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},54213:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>c});var o=n(36672);const a={},s=o.createContext(a);function r(e){const t=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),o.createElement(s.Provider,{value:t},e.children)}}}]);