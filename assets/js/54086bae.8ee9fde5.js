"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[49186],{1636:(n,e,l)=>{l.r(e),l.d(e,{assets:()=>r,contentTitle:()=>o,default:()=>x,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"RealMatrix/ge_linsolve_lapack","title":"ge_linsolve_lapack","description":"","source":"@site/docs/docs-api/RealMatrix/ge_linsolve_lapack.md","sourceDirName":"RealMatrix","slug":"/RealMatrix/ge_linsolve_lapack","permalink":"/docs-api/RealMatrix/ge_linsolve_lapack","draft":false,"unlisted":false,"editUrl":"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/RealMatrix/ge_linsolve_lapack.md","tags":[],"version":"current","lastUpdatedAt":1724304782000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"ex-1","permalink":"/docs-api/RealMatrix/ex-1"},"next":{"title":"RealVector","permalink":"/docs-api/RealVector/"}}');var a=l(23420),s=l(54213);const i={},o=void 0,r={},c=[];function m(n){const e={code:"code",pre:"pre",...(0,s.R)(),...n.components};return(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-fortran",children:'! This tutorial shows how to solve linear equation\n!\n! test01\n! How to solve A(:,:) x(:) = b(:) using GESV or solve\n! test02\n! Solve A(:,:) x(:,:) = b(:,:) using GESV or solve\n! test03\n! Solve a least square problem, A(m,n)*x(n) = b(m), m>n\n! test04\n! Solve a least square problem, A(m,n)*x(n) = b(m), m<n\n! test05\n! Solve a least square problem, A(m,n)*x(n,:) = b(m,:), m>n\n! test06\n! Solves a least square problem using DGELSD which uses SVD decomposition\n! test07\n! Solves a least square problem using DGELSS which uses SVD decomposition\n\n\n!----------------------------------------------------------------------------\n!\n!----------------------------------------------------------------------------\n\nmodule test\n  use baseType\n  use baseMethod\n  implicit none\n  contains\n\n!----------------------------------------------------------------------------\n!                                                                   test01\n!----------------------------------------------------------------------------\n\nsubroutine test01()\n  integer( i4b ), parameter :: n = 4\n  real( dfp ) :: mat( n, n ), b( n ), x( n ), x0(n)\n  write( *, * ) "hello world..."\n\n  CALL Blanklines( NOL = 2 )\n  call DISPLAY( "TEST-01" )\n  CALL EqualLine( )\n  call RANDOM_NUMBER( mat )\n  call RANDOM_NUMBER( x ); x0 = x\n  call DISPLAY( x, msg="    Exact solutions are :: ")\n  b = MATMUL( mat, x )\n  x = 0.0_dfp\n  x = Solve( mat, b )\n  call DISPLAY( val = x, msg= "    Solution from solve = " )\n\n  if( NORM2( x - x0 ) .le. 1.0E-9 ) then\n    call display( "TEST-01: SUCCESS" )\n  else\n    call display( "TEST-01: FAILED" )\n  end if\n\n  CALL Blanklines( NOL = 2 )\nend subroutine test01\n\n!----------------------------------------------------------------------------\n!                                                                   test02\n!----------------------------------------------------------------------------\n\n\nsubroutine test02()\n  integer( i4b ), parameter :: n = 4, m=3\n  real( dfp ) :: mat( n, n ), b( n, m ), x( n, m), x0( n, m )\n\n  CALL Blanklines( NOL = 2 )\n  call DISPLAY( "TEST-02" )\n  CALL EqualLine( )\n  call RANDOM_NUMBER( mat )\n  call RANDOM_NUMBER( x ); x0 = x\n  call DISPLAY( x, msg="    Exact solutions are :: ")\n  b = MATMUL( mat, x )\n  x = 0.0_dfp\n  x = Solve( mat, b )\n  call DISPLAY( val = x, msg= "    Solution from solve = " )\n\n  if( NORM2( x - x0 ) .le. 1.0E-9 ) then\n    call display( "TEST-02: SUCCESS" )\n  else\n    call display( "TEST-02: FAILED" )\n  end if\n  CALL Blanklines( NOL = 2 )\nend subroutine test02\n\n!----------------------------------------------------------------------------\n!                                                                   test03\n!----------------------------------------------------------------------------\n\nsubroutine test03()\n  integer( i4b ), parameter :: m = 5, n = 3\n  real( dfp ) :: mat( m, n ), b( m ), x( n ), x0(n)\n\n  CALL Blanklines( NOL = 2 )\n  call DISPLAY( "TEST-03" )\n  CALL EqualLine( )\n  call RANDOM_NUMBER( mat )\n  call RANDOM_NUMBER( x ); x0 = x\n  call DISPLAY( x, msg="    Exact solutions are :: ")\n  b = MATMUL( mat, x )\n  x = 0.0_dfp\n  CALL GELS( A=mat, b=b, x = x )\n  call DISPLAY( val = x, msg= "    Solution from solve = " )\n\n  if( NORM2( x - x0 ) .le. 1.0E-9 ) then\n    call display( "TEST-03: SUCCESS" )\n  else\n    call display( "TEST-03: FAILED" )\n  end if\n  CALL Blanklines( NOL = 2 )\nend subroutine test03\n\n!----------------------------------------------------------------------------\n!                                                                   test04\n!----------------------------------------------------------------------------\n\nsubroutine test04\n  integer( i4b ), parameter :: m = 3, n = 5\n  real( dfp ) :: mat( m, n ), b( m ), x( n ), x0(n)\n\n  CALL Blanklines( NOL = 2 )\n  call DISPLAY( "TEST-04" )\n  CALL EqualLine( )\n  call RANDOM_NUMBER( mat )\n  call RANDOM_NUMBER( x ); x0 = x\n  call DISPLAY( x, msg="    Exact solutions are :: ")\n  b = MATMUL( mat, x )\n  x = 0.0_dfp\n  CALL GELS( A=mat, b=b, x = x )\n  call DISPLAY( val = x, msg= "    Solution from solve = " )\n\n  if( NORM2( x - x0 ) .le. 1.0E-9 ) then\n    call display( "TEST-04: SUCCESS" )\n  else\n    call display( "TEST-04: FAILED" )\n  end if\n  CALL Blanklines( NOL = 2 )\nend subroutine test04\n\n!----------------------------------------------------------------------------\n!                                                                   test05\n!----------------------------------------------------------------------------\n\nsubroutine test05\n  integer( i4b ), parameter :: m = 5, n = 3, nrhs=3\n  real( dfp ) :: mat( m, n ), b( m, nrhs ), x( n, nrhs ), x0(n, nrhs)\n\n  CALL Blanklines( NOL = 2 )\n  call DISPLAY( "TEST-05" )\n  CALL EqualLine( )\n  call RANDOM_NUMBER( mat )\n  call RANDOM_NUMBER( x ); x0 = x\n  call DISPLAY( x, msg="    Exact solutions are :: ")\n  b = MATMUL( mat, x )\n  x = 0.0_dfp\n  CALL GELS( A=mat, b=b, x = x )\n  call DISPLAY( val = x, msg= "    Solution from solve = " )\n\n  if( NORM2( x - x0 ) .le. 1.0E-9 ) then\n    call display( "TEST-05: SUCCESS" )\n  else\n    call display( "TEST-05: FAILED" )\n  end if\n  CALL Blanklines( NOL = 2 )\nend subroutine test05\n\n!----------------------------------------------------------------------------\n!                                                                   test06\n!----------------------------------------------------------------------------\n\nsubroutine test06()\n  integer( i4b ), parameter :: m = 5, n = 3\n  real( dfp ) :: mat( m, n ), b( m ), x( n ), x0(n)\n\n  CALL Blanklines( NOL = 2 )\n  call DISPLAY( "TEST-06" )\n  CALL EqualLine( )\n  call RANDOM_NUMBER( mat )\n  call RANDOM_NUMBER( x ); x0 = x\n  call DISPLAY( x, msg="    Exact solutions are :: ")\n  b = MATMUL( mat, x )\n  x = 0.0_dfp\n  CALL GELSD( A=mat, b=b, x = x )\n  call DISPLAY( val = x, msg= "    Solution from solve = " )\n\n  if( NORM2( x - x0 ) .le. 1.0E-9 ) then\n    call display( "TEST-06: SUCCESS" )\n  else\n    call display( "TEST-06: FAILED" )\n  end if\n  CALL Blanklines( NOL = 2 )\nend subroutine test06\n\n!----------------------------------------------------------------------------\n!                                                                   test07\n!----------------------------------------------------------------------------\n\nsubroutine test07()\n  integer( i4b ), parameter :: m = 5, n = 3\n  real( dfp ) :: mat( m, n ), b( m ), x( n ), x0(n)\n\n  CALL Blanklines( NOL = 2 )\n  call DISPLAY( "TEST-07" )\n  CALL EqualLine( )\n  call RANDOM_NUMBER( mat )\n  call RANDOM_NUMBER( x ); x0 = x\n  call DISPLAY( x, msg="    Exact solutions are :: ")\n  b = MATMUL( mat, x )\n  x = 0.0_dfp\n  CALL GELSS( A=mat, b=b, x = x )\n  call DISPLAY( val = x, msg= "    Solution from solve = " )\n\n  if( NORM2( x - x0 ) .le. 1.0E-9 ) then\n    call display( "TEST-07: SUCCESS" )\n  else\n    call display( "TEST-07: FAILED" )\n  end if\n  CALL Blanklines( NOL = 2 )\nend subroutine test07\n\nend module test\n\n!----------------------------------------------------------------------------\n!\n!----------------------------------------------------------------------------\n\nprogram main\nuse test\ncall test01\ncall test02\ncall test03\ncall test04\ncall test05\ncall test06\ncall test07\n\nend program main\n'})})}function x(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(m,{...n})}):m(n)}},54213:(n,e,l)=>{l.d(e,{R:()=>i,x:()=>o});var t=l(36672);const a={},s=t.createContext(a);function i(n){const e=t.useContext(s);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:i(n.components),t.createElement(s.Provider,{value:e},n.children)}}}]);