"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[98290],{14310:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>t,default:()=>m,frontMatter:()=>r,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"Monomial1D/Monomial1D_","title":"Structure","description":"Monomial in 1D is given by $x^$. Monomial1D class is designed for this task. It is a child of AbstractBasis1D defined in [[AbstractBasis]].","source":"@site/docs/docs-api/Monomial1D/Monomial1D_.md","sourceDirName":"Monomial1D","slug":"/Monomial1D/Monomial1D_","permalink":"/docs-api/Monomial1D/Monomial1D_","draft":false,"unlisted":false,"editUrl":"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/Monomial1D/Monomial1D_.md","tags":[],"version":"current","lastUpdatedAt":1724304782000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Monomial1D","permalink":"/docs-api/Monomial1D/"},"next":{"title":"Monomial1D example 1","permalink":"/docs-api/Monomial1D/Monomial1D_test_1"}}');var i=s(23420),l=s(54213);const r={},t="Structure",o={},d=[{value:"Todo",id:"todo",level:2},{value:"ConstructorMethods",id:"constructormethods",level:2},{value:"Initiate",id:"initiate",level:3},{value:"Deallocate",id:"deallocate",level:3},{value:"GetMethods",id:"getmethods",level:2},{value:"Eval",id:"eval",level:3},{value:"EvalGradient",id:"evalgradient",level:3},{value:"OPERATOR(.Grad.)",id:"operatorgrad",level:3},{value:"GetStringForUID",id:"getstringforuid",level:3},{value:"GetDegree",id:"getdegree",level:3},{value:"GetDisplayString",id:"getdisplaystring",level:3},{value:"GetCoeff",id:"getcoeff",level:3},{value:"IOMethods",id:"iomethods",level:2},{value:"Display",id:"display",level:3},{value:"OperatorMethods",id:"operatormethods",level:2},{value:"OPERATOR(*)",id:"operator",level:3},{value:"ASSIGNMENT(=)",id:"assignment",level:3},{value:"BasisMethods",id:"basismethods",level:2},{value:"Monomials1D",id:"monomials1d",level:2},{value:"EvenMonomials1D",id:"evenmonomials1d",level:2},{value:"OddMonomials1D",id:"oddmonomials1d",level:2}];function c(e){const n={annotation:"annotation",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",input:"input",li:"li",math:"math",mi:"mi",mn:"mn",mo:"mo",mrow:"mrow",msup:"msup",p:"p",pre:"pre",semantics:"semantics",span:"span",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"structure",children:"Structure"})}),"\n",(0,i.jsxs)(n.p,{children:["Monomial in 1D is given by ",(0,i.jsxs)(n.span,{className:"katex",children:[(0,i.jsx)(n.span,{className:"katex-mathml",children:(0,i.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(n.semantics,{children:[(0,i.jsx)(n.mrow,{children:(0,i.jsxs)(n.msup,{children:[(0,i.jsx)(n.mi,{children:"x"}),(0,i.jsx)(n.mi,{children:"n"})]})}),(0,i.jsx)(n.annotation,{encoding:"application/x-tex",children:"x^{n}"})]})})}),(0,i.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(n.span,{className:"base",children:[(0,i.jsx)(n.span,{className:"strut",style:{height:"0.6644em"}}),(0,i.jsxs)(n.span,{className:"mord",children:[(0,i.jsx)(n.span,{className:"mord mathnormal",children:"x"}),(0,i.jsx)(n.span,{className:"msupsub",children:(0,i.jsx)(n.span,{className:"vlist-t",children:(0,i.jsx)(n.span,{className:"vlist-r",children:(0,i.jsx)(n.span,{className:"vlist",style:{height:"0.6644em"},children:(0,i.jsxs)(n.span,{style:{top:"-3.063em",marginRight:"0.05em"},children:[(0,i.jsx)(n.span,{className:"pstrut",style:{height:"2.7em"}}),(0,i.jsx)(n.span,{className:"sizing reset-size6 size3 mtight",children:(0,i.jsx)(n.span,{className:"mord mtight",children:(0,i.jsx)(n.span,{className:"mord mathnormal mtight",children:"n"})})})]})})})})})]})]})})]}),". Monomial1D class is designed for this task. It is a child of ",(0,i.jsx)(n.code,{children:"AbstractBasis1D_"})," defined in [[AbstractBasis_]]."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"TYPE, EXTENDS(AbstractBasis1D_) :: Monomial1D_\n  PRIVATE\n  INTEGER(I4B) :: degree = 0\nCONTAINS\n"})}),"\n",(0,i.jsx)(n.h2,{id:"todo",children:"Todo"}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Add a zero monomial"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Add a method to get nth derivative"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Add integrate method"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Add evaluate integrate method"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"constructormethods",children:"ConstructorMethods"}),"\n",(0,i.jsx)(n.h3,{id:"initiate",children:"Initiate"}),"\n",(0,i.jsxs)(n.p,{children:["Construct an instance of ",(0,i.jsx)(n.code,{children:"Monomial1D_"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Interface:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE ELEMENTAL SUBROUTINE Initiate(obj, degree, varname)\n    CLASS(Monomial1D_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: degree\n    CHARACTER(LEN=*), INTENT(IN) :: varname\n  END SUBROUTINE Initiate\nEND INTERFACE\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Example: [[Monomial1D_test_1.md]], You can also use the function ",(0,i.jsx)(n.code,{children:"Monomial1D"})," as shown in this example."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:'CALL obj%Initiate(degree=1_I4B, varname="x")\n'})}),"\n",(0,i.jsx)(n.p,{children:"or"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:'obj = Monomial1D(degree=1_I4B, varname="x")\n'})}),"\n",(0,i.jsx)(n.h3,{id:"deallocate",children:"Deallocate"}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"[[Monomial1D_test_1.md]]"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"getmethods",children:"GetMethods"}),"\n",(0,i.jsx)(n.h3,{id:"eval",children:"Eval"}),"\n",(0,i.jsx)(n.p,{children:"Evaluate the monomial at given point or points."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE ELEMENTAL FUNCTION eval(obj, x) RESULT(ans)\n    CLASS(Monomial1D_), INTENT(IN) :: obj\n    REAL(DFP), INTENT(IN) :: x\n    REAL(DFP) :: ans\n  END FUNCTION eval\nEND INTERFACE\n"})}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"[[Monomial1D_test_3]]"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"ans = obj%eval(x=1.0_DFP)\nans = obj%eval(x=[1.0_DFP, 2.0_DFP])\n"})}),"\n",(0,i.jsx)(n.h3,{id:"evalgradient",children:"EvalGradient"}),"\n",(0,i.jsx)(n.p,{children:"Evaluate the gradient at given point or points."}),"\n",(0,i.jsx)(n.p,{children:"Interface:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE ELEMENTAL FUNCTION EvalGradient(obj, x) RESULT(ans)\n    CLASS(Monomial1D_), INTENT(IN) :: obj\n    REAL(DFP), INTENT(IN) :: x\n    REAL(DFP) :: ans\n  END FUNCTION EvalGradient\nEND INTERFACE\n"})}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"[[Monomial1D_test_4]]"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"operatorgrad",children:"OPERATOR(.Grad.)"}),"\n",(0,i.jsxs)(n.p,{children:["Returns the gradient of Monomial in terms of Monomial. For example, if the  monomial is ",(0,i.jsxs)(n.span,{className:"katex",children:[(0,i.jsx)(n.span,{className:"katex-mathml",children:(0,i.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(n.semantics,{children:[(0,i.jsx)(n.mrow,{children:(0,i.jsxs)(n.msup,{children:[(0,i.jsx)(n.mi,{children:"x"}),(0,i.jsx)(n.mi,{children:"n"})]})}),(0,i.jsx)(n.annotation,{encoding:"application/x-tex",children:"x^{n}"})]})})}),(0,i.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(n.span,{className:"base",children:[(0,i.jsx)(n.span,{className:"strut",style:{height:"0.6644em"}}),(0,i.jsxs)(n.span,{className:"mord",children:[(0,i.jsx)(n.span,{className:"mord mathnormal",children:"x"}),(0,i.jsx)(n.span,{className:"msupsub",children:(0,i.jsx)(n.span,{className:"vlist-t",children:(0,i.jsx)(n.span,{className:"vlist-r",children:(0,i.jsx)(n.span,{className:"vlist",style:{height:"0.6644em"},children:(0,i.jsxs)(n.span,{style:{top:"-3.063em",marginRight:"0.05em"},children:[(0,i.jsx)(n.span,{className:"pstrut",style:{height:"2.7em"}}),(0,i.jsx)(n.span,{className:"sizing reset-size6 size3 mtight",children:(0,i.jsx)(n.span,{className:"mord mtight",children:(0,i.jsx)(n.span,{className:"mord mathnormal mtight",children:"n"})})})]})})})})})]})]})})]}),", then ",(0,i.jsx)(n.code,{children:".GRAD."})," operator returns monomial representing ",(0,i.jsxs)(n.span,{className:"katex",children:[(0,i.jsx)(n.span,{className:"katex-mathml",children:(0,i.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(n.semantics,{children:[(0,i.jsx)(n.mrow,{children:(0,i.jsxs)(n.msup,{children:[(0,i.jsx)(n.mi,{children:"x"}),(0,i.jsxs)(n.mrow,{children:[(0,i.jsx)(n.mi,{children:"n"}),(0,i.jsx)(n.mo,{children:"\u2212"}),(0,i.jsx)(n.mn,{children:"1"})]})]})}),(0,i.jsx)(n.annotation,{encoding:"application/x-tex",children:"x^{n-1}"})]})})}),(0,i.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(n.span,{className:"base",children:[(0,i.jsx)(n.span,{className:"strut",style:{height:"0.8141em"}}),(0,i.jsxs)(n.span,{className:"mord",children:[(0,i.jsx)(n.span,{className:"mord mathnormal",children:"x"}),(0,i.jsx)(n.span,{className:"msupsub",children:(0,i.jsx)(n.span,{className:"vlist-t",children:(0,i.jsx)(n.span,{className:"vlist-r",children:(0,i.jsx)(n.span,{className:"vlist",style:{height:"0.8141em"},children:(0,i.jsxs)(n.span,{style:{top:"-3.063em",marginRight:"0.05em"},children:[(0,i.jsx)(n.span,{className:"pstrut",style:{height:"2.7em"}}),(0,i.jsx)(n.span,{className:"sizing reset-size6 size3 mtight",children:(0,i.jsxs)(n.span,{className:"mord mtight",children:[(0,i.jsx)(n.span,{className:"mord mathnormal mtight",children:"n"}),(0,i.jsx)(n.span,{className:"mbin mtight",children:"\u2212"}),(0,i.jsx)(n.span,{className:"mord mtight",children:"1"})]})})]})})})})})]})]})})]}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Interface:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE ELEMENTAL FUNCTION Grad(obj) RESULT(ans)\n    CLASS(Monomial1D_), INTENT(IN) :: obj\n    TYPE(Monomial1D_) :: ans\n  END FUNCTION Grad\nEND INTERFACE\n"})}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"[[Monomial1D_test_4.md]]"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:['!!! note "Grad"\nNote that you can also use ',(0,i.jsx)(n.code,{children:"obj%Grad()"})," function to get the gradient."]}),"\n",(0,i.jsx)(n.h3,{id:"getstringforuid",children:"GetStringForUID"}),"\n",(0,i.jsx)(n.p,{children:"Returns the string for creating UID of the monomial. This method is for internal use only."}),"\n",(0,i.jsx)(n.h3,{id:"getdegree",children:"GetDegree"}),"\n",(0,i.jsx)(n.p,{children:"Returns the degree of the monomial."}),"\n",(0,i.jsx)(n.p,{children:"Interface:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE ELEMENTAL FUNCTION GetDegree(obj) RESULT(ans)\n    CLASS(Monomial1D_), INTENT(IN) :: obj\n    INTEGER(I4B) :: ans\n  END FUNCTION GetDegree\nEND INTERFACE\n"})}),"\n",(0,i.jsx)(n.p,{children:'!!! example "Examples"'}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"[[Monomial1D_test_6]]"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"getdisplaystring",children:"GetDisplayString"}),"\n",(0,i.jsx)(n.p,{children:"Returns the string for display purpose. This routine is for internal use only."}),"\n",(0,i.jsx)(n.h3,{id:"getcoeff",children:"GetCoeff"}),"\n",(0,i.jsx)(n.p,{children:"Returns the coefficient of monomial, which is always 1.0."}),"\n",(0,i.jsx)(n.h2,{id:"iomethods",children:"IOMethods"}),"\n",(0,i.jsx)(n.h3,{id:"display",children:"Display"}),"\n",(0,i.jsx)(n.p,{children:"Display the monomial on the screen."}),"\n",(0,i.jsx)(n.p,{children:'!!! example "Examples"'}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"[[Monomial1D_test_1]]"}),"\n",(0,i.jsx)(n.li,{children:"[[Monomial1D_test_2]]"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"operatormethods",children:"OperatorMethods"}),"\n",(0,i.jsx)(n.h3,{id:"operator",children:"OPERATOR(*)"}),"\n",(0,i.jsx)(n.p,{children:"OPERATOR(*) multiplies two Monomial."}),"\n",(0,i.jsx)(n.p,{children:'!!! example "Examples"'}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"[[Monomial1D_test_2.md]]"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"assignment",children:"ASSIGNMENT(=)"}),"\n",(0,i.jsx)(n.p,{children:"Following assignments are valid:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"obj1= obj2\nobj1(:) = obj2(:)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["where, ",(0,i.jsx)(n.code,{children:"obj1"})," and ",(0,i.jsx)(n.code,{children:"obj2"})," are instances of ",(0,i.jsx)(n.code,{children:"Monomial1D"})]}),"\n",(0,i.jsx)(n.h2,{id:"basismethods",children:"BasisMethods"}),"\n",(0,i.jsx)(n.h2,{id:"monomials1d",children:"Monomials1D"}),"\n",(0,i.jsx)(n.p,{children:"Generate monomials from order = 0 to N."}),"\n",(0,i.jsx)(n.p,{children:"Interface:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE PURE FUNCTION Monomials1D(order, varname) RESULT(ans)\n    INTEGER(I4B), INTENT(IN) :: order\n    !! order\n    CHARACTER(LEN=*), INTENT(IN) :: varname\n    !! variable varname\n    TYPE(Monomial1D_), ALLOCATABLE :: ans(:)\n    !! vector of monomial\n  END FUNCTION Monomials1D\nEND INTERFACE\n"})}),"\n",(0,i.jsx)(n.p,{children:'!!! example "Examples"'}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"[[Monomial1D_test_5.md]]"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"evenmonomials1d",children:"EvenMonomials1D"}),"\n",(0,i.jsx)(n.p,{children:"Generate even monomials from order = 0, 2, to 2N."}),"\n",(0,i.jsx)(n.p,{children:"Interface:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE PURE FUNCTION EvenMonomials1D(order, varname) RESULT(ans)\n    INTEGER(I4B), INTENT(IN) :: order\n    !! order\n    CHARACTER(LEN=*), INTENT(IN) :: varname\n    !! variable varname\n    TYPE(Monomial1D_), ALLOCATABLE :: ans(:)\n    !! vector of monomial\n  END FUNCTION EvenMonomials1D\nEND INTERFACE\n"})}),"\n",(0,i.jsx)(n.p,{children:'!!! example "Examples"'}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"[[Monomial1D_test_5.md]]"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"oddmonomials1d",children:"OddMonomials1D"}),"\n",(0,i.jsx)(n.p,{children:"Generate odd ordered monomials from order = 1, 2, to (2N+1)/2."}),"\n",(0,i.jsx)(n.p,{children:"Interface:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE PURE FUNCTION OddMonomials1D(order, varname) RESULT(ans)\n    INTEGER(I4B), INTENT(IN) :: order\n    !! order\n    CHARACTER(LEN=*), INTENT(IN) :: varname\n    !! variable varname\n    TYPE(Monomial1D_), ALLOCATABLE :: ans(:)\n    !! vector of monomial\n  END FUNCTION OddMonomials1D\nEND INTERFACE\n"})}),"\n",(0,i.jsx)(n.p,{children:'!!! example "Examples"'}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"[[Monomial1D_test_5.md]]"}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},54213:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>t});var a=s(36672);const i={},l=a.createContext(i);function r(e){const n=a.useContext(l);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(l.Provider,{value:n},e.children)}}}]);