"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[77951],{80277:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>r,contentTitle:()=>t,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>m});const o=JSON.parse('{"id":"Monomial1D/Monomial1D_test_2","title":"Monomial1D example 2","description":"This example shows the usage of * operator for [[Monomial1D_]] class. We can only multiply a monomial with another monomial.","source":"@site/docs/docs-api/Monomial1D/Monomial1D_test_2.md","sourceDirName":"Monomial1D","slug":"/Monomial1D/Monomial1D_test_2","permalink":"/docs-api/Monomial1D/Monomial1D_test_2","draft":false,"unlisted":false,"editUrl":"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/Monomial1D/Monomial1D_test_2.md","tags":[{"inline":true,"label":"Monomial1D/Multiplication","permalink":"/docs-api/tags/monomial-1-d-multiplication"}],"version":"current","lastUpdatedAt":1724304782000,"frontMatter":{"author":"Vikas Sharma, Ph.D.","date":"26 July 2022","tags":["Monomial1D/Multiplication"]},"sidebar":"tutorialSidebar","previous":{"title":"Monomial1D example 1","permalink":"/docs-api/Monomial1D/Monomial1D_test_1"},"next":{"title":"Monomial1D example 3","permalink":"/docs-api/Monomial1D/Monomial1D_test_3"}}');var l=a(23420),i=a(54213);const s={author:"Vikas Sharma, Ph.D.",date:"26 July 2022",tags:["Monomial1D/Multiplication"]},t="Monomial1D example 2",r={},m=[{value:"Modules and classes",id:"modules-and-classes",level:2},{value:"Usage",id:"usage",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"monomial1d-example-2",children:"Monomial1D example 2"})}),"\n",(0,l.jsxs)(n.p,{children:["This example shows the usage of ",(0,l.jsx)(n.code,{children:"*"})," operator for [[Monomial1D_]] class. We can only multiply a monomial with another monomial.\nMultiplying a monomial with a scalar real or integer will produce an instance of [[Polynomial1D_]]."]}),"\n",(0,l.jsx)(n.h2,{id:"modules-and-classes",children:"Modules and classes"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"[[Monomial1D_]]"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"PROGRAM main\nuse easifemBase\nuse easifemClasses\nimplicit none\ntype(Monomial1D_) :: y0, y1, y2, y3, ans\n"})}),"\n",(0,l.jsx)(n.p,{children:"Initiate the object."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:'  y0=Monomial1D( degree=0_I4B, varname="x" )\n  y1=Monomial1D( degree=1_I4B, varname="x" )\n  y2=Monomial1D( degree=2_I4B, varname="x" )\n'})}),"\n",(0,l.jsx)(n.p,{children:'!!! note "Multiplication"\nWe can multiply a monomial with another monomial.'}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:'  ans = y1 * y0\n  call ans%display( "f(x) = ")\n  ans = y1 * y2\n  call ans%display( "f(x) = ")\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-txt",children:">result\nf(x) =x^1\nf(x) =x^3\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"END PROGRAM main\n"})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}},54213:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>t});var o=a(36672);const l={},i=o.createContext(l);function s(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:s(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);