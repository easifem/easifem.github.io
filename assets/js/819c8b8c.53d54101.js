"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[88859],{31133:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>d,metadata:()=>r,toc:()=>_});const r=JSON.parse('{"id":"Kdtree2/Kdtree2_n_nearest_around_point","title":"Kdtree2_n_nearest_around_point","description":"Find the nn vectors in the tree nearest to point idxin,","source":"@site/docs/docs-api/Kdtree2/Kdtree2_n_nearest_around_point.md","sourceDirName":"Kdtree2","slug":"/Kdtree2/Kdtree2_n_nearest_around_point","permalink":"/docs-api/Kdtree2/Kdtree2_n_nearest_around_point","draft":false,"unlisted":false,"editUrl":"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/Kdtree2/Kdtree2_n_nearest_around_point.md","tags":[],"version":"current","lastUpdatedAt":1724304782000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Kdtree2_n_nearese","permalink":"/docs-api/Kdtree2/Kdtree2_n_nearest"},"next":{"title":"Kdtree2_r_count","permalink":"/docs-api/Kdtree2/Kdtree2_r_count"}}');var i=t(23420),o=t(54213);function s(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:'PROGRAM main\nUSE GlobalData, ONLY: I4B, LGT, DFP\nUSE Display_Method\nUSE SortUtility\nUSE ReallocateUtility\nUSE Test_Method\nUSE Kdtree2_Module\nIMPLICIT NONE\n\nINTEGER(I4B), PARAMETER :: n = 10000, d = 3, num_run = 5, nn = 50\nTYPE(Kdtree2_), POINTER :: kd1\nTYPE(Kdtree2Result_), ALLOCATABLE :: res_tree(:), res_bforce(:)\nINTEGER(I4B) :: ii, indx\nREAL(DFP) :: areal, maxdeviation\nLOGICAL(LGT) :: problem\nREAL(DFP), ALLOCATABLE :: input_data(:, :), qv(:)\n\nCALL Reallocate(input_data, d, n)\nCALL RANDOM_NUMBER(input_data)\n\n!! qv is query vector\nCALL Reallocate(qv, d)\n!! We will select qv randomly from input_data\n\nkd1 => kdtree2_create(input_data, sort=.TRUE., rearrange=.TRUE.)\n\nALLOCATE (res_tree(nn), res_bforce(nn))\n\nCALL Display(\'Comparing search of \'//tostring(nn) &\n             //\' neighbors to brute force.\')\n\nDO ii = 1, num_run\n  CALL RANDOM_NUMBER(areal)\n  indx = FLOOR(areal * n) + 1\n  qv = input_data(1:d, indx)\n  res_tree(:)%idx = -666\n  res_bforce(:)%idx = -777\n\n  CALL kdtree2_n_nearest_brute_force(tp=kd1, qv=qv, nn=nn, &\n                                     results=res_bforce)\n\n  CALL kdtree2_n_nearest_around_point(tp=kd1, idxin=indx, correltime=-1, &\n                                      nn=nn, results=res_tree)\n  ! negative 1 correlation time will get all points.\n\n  maxdeviation = MAXVAL(ABS(res_tree(1:nn)%dis - res_bforce(1:nn)%dis))\n  problem = ANY(res_tree(1:nn)%idx .NE. res_bforce(1:nn)%idx) .OR. &\n            (maxdeviation .GT. 1.0E-8)\n\n  CALL OK(.NOT. problem, "kdtree2_n_nearest_around_point(): ")\n  IF (problem) THEN\n    CALL Display(\'MISMATCH! @ : \'//tostring(ii))\n    CALL Display(res_tree(1:nn)%idx, "Tree indices: ")\n    CALL Display(res_bforce(1:nn)%idx, "Brute indices: ")\n    CALL Display(res_tree(1:nn)%dis - res_bforce(1:nn)%dis, &\n                 "Tree-brute distances: ")\n\n  END IF\n\nEND DO\n\nCALL kdtree2_destroy(kd1)\n\nEND PROGRAM main\n'})})}function a(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(s,{...e})}):s(e)}const d={},c="Kdtree2_n_nearest_around_point",l={},_=[{value:"Interface",id:"interface",level:2}];function p(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components},{TabItem:t,Tabs:r}=n;return t||m("TabItem",!0),r||m("Tabs",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"kdtree2_n_nearest_around_point",children:"Kdtree2_n_nearest_around_point"})}),"\n",(0,i.jsxs)(n.p,{children:["Find the ",(0,i.jsx)(n.code,{children:"nn"})," vectors in the tree nearest to point ",(0,i.jsx)(n.code,{children:"idxin"}),",\nwith correlation window 'correltime', returing results in\n",(0,i.jsx)(n.code,{children:"results(:)"}),", which must be pre-allocated upon entry."]}),"\n",(0,i.jsx)(n.h2,{id:"interface",children:"Interface"}),"\n",(0,i.jsxs)(r,{children:[(0,i.jsx)(t,{value:"interface",label:"Interface",default:!0,children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fortran",children:"SUBROUTINE Kdtree2_n_nearest_around_point(tp, idxin, correltime, nn, results)\n  TYPE(Kdtree2_), POINTER :: tp\n  INTEGER, INTENT(In) :: idxin\n  INTEGER, INTENT(In) :: correltime\n  !! correlation window\n  INTEGER, INTENT(In) :: nn\n  TYPE(Kdtree2Result_), TARGET :: results(:)\nEND SUBROUTINE Kdtree2_n_nearest_around_point\n"})})}),(0,i.jsx)(t,{value:"example",label:"example",children:(0,i.jsx)(a,{})}),(0,i.jsx)(t,{value:"close",label:"\u21a2 close"})]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}function m(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},54213:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var r=t(36672);const i={},o=r.createContext(i);function s(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);