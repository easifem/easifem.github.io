"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[7975],{97733:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>I,contentTitle:()=>E,default:()=>d,frontMatter:()=>c,metadata:()=>N,toc:()=>s});const N=JSON.parse('{"id":"CSRMatrix/Add","title":"Add","description":"Add values to CSRMatrix.","source":"@site/docs/docs-api/CSRMatrix/Add.md","sourceDirName":"CSRMatrix","slug":"/CSRMatrix/Add","permalink":"/docs-api/CSRMatrix/Add","draft":false,"unlisted":false,"editUrl":"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/CSRMatrix/Add.md","tags":[],"version":"current","lastUpdatedAt":1724304782000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"AMatVec","permalink":"/docs-api/CSRMatrix/AMatVec"},"next":{"title":"Allocate","permalink":"/docs-api/CSRMatrix/Allocate"}}');var l=a(23420),r=a(54213);const c={},E="Add",I={},s=[{value:"Interface 1",id:"interface-1",level:2},{value:"Interface 2",id:"interface-2",level:2},{value:"Interface 3",id:"interface-3",level:2},{value:"Interface 4",id:"interface-4",level:2},{value:"Interface 5",id:"interface-5",level:2},{value:"Interface 6",id:"interface-6",level:2},{value:"Interface 7",id:"interface-7",level:2},{value:"Interface 7",id:"interface-7-1",level:2},{value:"Interface 8",id:"interface-8",level:2},{value:"Interface 8",id:"interface-8-1",level:2},{value:"Interface 9",id:"interface-9",level:2},{value:"Interface 10",id:"interface-10",level:2},{value:"Interface 11",id:"interface-11",level:2},{value:"Interface 12",id:"interface-12",level:2},{value:"Interface 13",id:"interface-13",level:2},{value:"Interface 14",id:"interface-14",level:2},{value:"Interface 15",id:"interface-15",level:2}];function o(e){const n={annotation:"annotation",code:"code",h1:"h1",h2:"h2",header:"header",math:"math",mi:"mi",mo:"mo",mrow:"mrow",p:"p",pre:"pre",semantics:"semantics",span:"span",...(0,r.R)(),...e.components},{TabItem:a,Tabs:N}=n;return a||i("TabItem",!0),N||i("Tabs",!0),(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"add",children:"Add"})}),"\n",(0,l.jsx)(n.p,{children:"Add values to CSRMatrix."}),"\n",(0,l.jsx)(n.p,{children:"Symbolically we perform following operations."}),"\n",(0,l.jsx)(n.span,{className:"katex-display",children:(0,l.jsxs)(n.span,{className:"katex",children:[(0,l.jsx)(n.span,{className:"katex-mathml",children:(0,l.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block",children:(0,l.jsxs)(n.semantics,{children:[(0,l.jsxs)(n.mrow,{children:[(0,l.jsx)(n.mi,{children:"A"}),(0,l.jsx)(n.mo,{children:"="}),(0,l.jsx)(n.mi,{children:"A"}),(0,l.jsx)(n.mo,{children:"+"}),(0,l.jsx)(n.mi,{children:"B"})]}),(0,l.jsx)(n.annotation,{encoding:"application/x-tex",children:"A = A + B"})]})})}),(0,l.jsxs)(n.span,{className:"katex-html","aria-hidden":"true",children:[(0,l.jsxs)(n.span,{className:"base",children:[(0,l.jsx)(n.span,{className:"strut",style:{height:"0.6833em"}}),(0,l.jsx)(n.span,{className:"mord mathnormal",children:"A"}),(0,l.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,l.jsx)(n.span,{className:"mrel",children:"="}),(0,l.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,l.jsxs)(n.span,{className:"base",children:[(0,l.jsx)(n.span,{className:"strut",style:{height:"0.7667em",verticalAlign:"-0.0833em"}}),(0,l.jsx)(n.span,{className:"mord mathnormal",children:"A"}),(0,l.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,l.jsx)(n.span,{className:"mbin",children:"+"}),(0,l.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,l.jsxs)(n.span,{className:"base",children:[(0,l.jsx)(n.span,{className:"strut",style:{height:"0.6833em"}}),(0,l.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.05017em"},children:"B"})]})]})]})}),"\n",(0,l.jsx)(n.p,{children:"Calling example:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"ADD(obj, nodenum(:), value(:,:), scale)\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"ADD(obj, nodenum(:), value(:,:), scale, storageFMT)\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"ADD(obj, value, scale)\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"ADD(obj, irow, icolumn, value, scale)\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"ADD(obj, inodenum, jnodenum, idof, jdof, value, scale)\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"ADD(obj, nodenum(:), value, scale)\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"ADD(obj, inodenum(:), jnodenum(:), ivar, jvar, value(:,:), scale)\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"ADD(obj, inodenum, jnodenum, ivar, jvar, idof, jdof, value, scale)\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"ADD(obj, inodenum(:), jnodenum(:), ivar, jvar, idof, jdof, value(:,:), scale)\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"ADD(obj, inodenum, jnodenum, ivar, jvar, ispacecompo, itimecompo, jspacecompo, jtimecompo, value, scale)\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"ADD(obj, inodenum(:), jnodenum(:), ivar, jvar, value, scale)\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"ADD(obj, inodenum(:), jnodenum(:), ivar, jvar, idof, jdof, value, scale)\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"ADD(obj, inodenum(:), jnodenum(:), ivar, jvar, ispacecompo, itimecompo, jspacecompo, jtimecompo, value, scale)\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"ADD(obj, inodenum(:), jnodenum(:), ivar, jvar, ispacecompo, itimecompo(:), jspacecompo, jtimecompo(:), value, scale)\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"ADD(obj, inodenum(:), jnodenum(:), ivar, jvar, ispacecompo(:), itimecompo, jspacecompo(:), jtimecompo, value, scale)\n"})}),"\n",(0,l.jsx)(n.h2,{id:"interface-1",children:"Interface 1"}),"\n",(0,l.jsxs)(N,{children:[(0,l.jsx)(a,{value:"interface",label:"\u0700 Interface",default:!0,children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE PURE SUBROUTINE add(obj, nodenum, VALUE, scale)\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: nodenum(:)\n    !! Node numbers\n    REAL(DFP), INTENT(IN) :: VALUE(:, :)\n    !! Element finite element matrix\n    REAL(DFP), INTENT(IN) :: scale\n    !! Scale is used to scale the Val before adding it to the obj\n  END SUBROUTINE add\nEND INTERFACE \n"})})}),(0,l.jsx)(a,{value:"example",label:"\ufe0f\u0700 See example"}),(0,l.jsx)(a,{value:"close",label:"\u21a2 "})]}),"\n",(0,l.jsx)(n.h2,{id:"interface-2",children:"Interface 2"}),"\n",(0,l.jsxs)(N,{children:[(0,l.jsx)(a,{value:"interface",label:"\u0700 Interface",default:!0,children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE PURE SUBROUTINE add(obj, nodenum, VALUE, scale, storageFMT)\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: nodenum(:)\n    !! Node numbers\n    REAL(DFP), INTENT(IN) :: VALUE(:, :)\n    !! Element finite element matrix\n    REAL(DFP), INTENT(IN) :: scale\n    !! Scale is used to scale the Val before adding it to the obj\n    INTEGER(I4B), INTENT(IN) :: storageFMT\n    !! Storage format of element finite matrix\n  END SUBROUTINE add\nEND INTERFACE\n"})})}),(0,l.jsx)(a,{value:"example",label:"\ufe0f\u0700 See example"}),(0,l.jsx)(a,{value:"close",label:"\u21a2 "})]}),"\n",(0,l.jsx)(n.h2,{id:"interface-3",children:"Interface 3"}),"\n",(0,l.jsxs)(N,{children:[(0,l.jsx)(a,{value:"interface",label:"\u0700 Interface",default:!0,children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE PURE SUBROUTINE add(obj, VALUE, scale)\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\n    REAL(DFP), INTENT(IN) :: VALUE\n    REAL(DFP), INTENT(IN) :: scale\n  END SUBROUTINE add\nEND INTERFACE\n"})})}),(0,l.jsx)(a,{value:"example",label:"\ufe0f\u0700 See example"}),(0,l.jsx)(a,{value:"close",label:"\u21a2 "})]}),"\n",(0,l.jsx)(n.h2,{id:"interface-4",children:"Interface 4"}),"\n",(0,l.jsxs)(N,{children:[(0,l.jsx)(a,{value:"interface",label:"\u0700 Interface",default:!0,children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE PURE SUBROUTINE add(obj, irow, icolumn, VALUE, scale)\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: irow\n    INTEGER(I4B), INTENT(IN) :: icolumn\n    REAL(DFP), INTENT(IN) :: VALUE\n    REAL(DFP), INTENT(IN) :: scale\n  END SUBROUTINE add\nEND INTERFACE\n"})})}),(0,l.jsx)(a,{value:"example",label:"\ufe0f\u0700 See example"}),(0,l.jsx)(a,{value:"close",label:"\u21a2 "})]}),"\n",(0,l.jsx)(n.h2,{id:"interface-5",children:"Interface 5"}),"\n",(0,l.jsxs)(N,{children:[(0,l.jsx)(a,{value:"interface",label:"\u0700 Interface",default:!0,children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE PURE SUBROUTINE add(obj, iNodeNum, jNodeNum, idof, &\n    & jdof, VALUE, scale)\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: iNodeNum\n    INTEGER(I4B), INTENT(IN) :: jNodeNum\n    INTEGER(I4B), INTENT(IN) :: idof\n    INTEGER(I4B), INTENT(IN) :: jdof\n    REAL(DFP), INTENT(IN) :: VALUE\n    REAL(DFP), INTENT(IN) :: scale\n  END SUBROUTINE add\nEND INTERFACE\n"})})}),(0,l.jsx)(a,{value:"example",label:"\ufe0f\u0700 See example"}),(0,l.jsx)(a,{value:"close",label:"\u21a2 "})]}),"\n",(0,l.jsx)(n.h2,{id:"interface-6",children:"Interface 6"}),"\n",(0,l.jsxs)(N,{children:[(0,l.jsx)(a,{value:"interface",label:"\u0700 Interface",default:!0,children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE PURE SUBROUTINE add(obj, nodenum, VALUE, scale)\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: nodenum(:)\n    REAL(DFP), INTENT(IN) :: VALUE\n    REAL(DFP), INTENT(IN) :: scale\n  END SUBROUTINE add\nEND INTERFACE\n"})})}),(0,l.jsx)(a,{value:"example",label:"\ufe0f\u0700 See example"}),(0,l.jsx)(a,{value:"close",label:"\u21a2 "})]}),"\n",(0,l.jsx)(n.h2,{id:"interface-7",children:"Interface 7"}),"\n",(0,l.jsxs)(N,{children:[(0,l.jsx)(a,{value:"interface",label:"\u0700 Interface",default:!0,children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE PURE SUBROUTINE add(obj, iNodeNum, jNodeNum, ivar,  &\n    & jvar, iDOF, jDOF, VALUE, scale)\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: iNodeNum\n    !! row node number\n    INTEGER(I4B), INTENT(IN) :: jNodeNum\n    !! column node number\n    INTEGER(I4B), INTENT(IN) :: ivar\n    !!\n    INTEGER(I4B), INTENT(IN) :: jvar\n    !!\n    INTEGER(I4B), INTENT(IN) :: iDOF\n    !! row degree of freedom\n    INTEGER(I4B), INTENT(IN) :: jDOF\n    !! col degree of freedom\n    REAL(DFP), INTENT(IN) :: VALUE\n    !! scalar value to be add\n    REAL(DFP), INTENT(IN) :: scale\n  END SUBROUTINE add\nEND INTERFACE\n"})})}),(0,l.jsx)(a,{value:"example",label:"\ufe0f\u0700 See example"}),(0,l.jsx)(a,{value:"close",label:"\u21a2 "})]}),"\n",(0,l.jsx)(n.h2,{id:"interface-7-1",children:"Interface 7"}),"\n",(0,l.jsxs)(N,{children:[(0,l.jsx)(a,{value:"interface",label:"\u0700 Interface",default:!0,children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE PURE SUBROUTINE add(obj, iNodeNum, jNodeNum, ivar,  &\n    & jvar, iDOF, jDOF, VALUE, scale)\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: iNodeNum(:)\n    !! row node number\n    INTEGER(I4B), INTENT(IN) :: jNodeNum(:)\n    !! column node number\n    INTEGER(I4B), INTENT(IN) :: ivar\n    !!\n    INTEGER(I4B), INTENT(IN) :: jvar\n    !!\n    INTEGER(I4B), INTENT(IN) :: iDOF\n    !! row degree of freedom\n    INTEGER(I4B), INTENT(IN) :: jDOF\n    !! col degree of freedom\n    REAL(DFP), INTENT(IN) :: VALUE(:, :)\n    !! scalar value to be add\n    REAL(DFP), INTENT(IN) :: scale\n  END SUBROUTINE add\nEND INTERFACE\n"})})}),(0,l.jsx)(a,{value:"example",label:"\ufe0f\u0700 See example"}),(0,l.jsx)(a,{value:"close",label:"\u21a2 "})]}),"\n",(0,l.jsx)(n.h2,{id:"interface-8",children:"Interface 8"}),"\n",(0,l.jsxs)(N,{children:[(0,l.jsx)(a,{value:"interface",label:"\u0700 Interface",default:!0,children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE PURE SUBROUTINE add(obj, iNodeNum, jNodeNum, ivar,  &\n    & jvar, iDOF, jDOF, VALUE, scale)\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: iNodeNum(:)\n    !! row node number\n    INTEGER(I4B), INTENT(IN) :: jNodeNum(:)\n    !! column node number\n    INTEGER(I4B), INTENT(IN) :: ivar\n    !!\n    INTEGER(I4B), INTENT(IN) :: jvar\n    !!\n    INTEGER(I4B), INTENT(IN) :: iDOF\n    !! row degree of freedom\n    INTEGER(I4B), INTENT(IN) :: jDOF\n    !! col degree of freedom\n    REAL(DFP), INTENT(IN) :: VALUE(:, :)\n    !! scalar value to be add\n    REAL(DFP), INTENT(IN) :: scale\n  END SUBROUTINE add\nEND INTERFACE\n"})})}),(0,l.jsx)(a,{value:"example",label:"\ufe0f\u0700 See example"}),(0,l.jsx)(a,{value:"close",label:"\u21a2 "})]}),"\n",(0,l.jsx)(n.h2,{id:"interface-8-1",children:"Interface 8"}),"\n",(0,l.jsxs)(N,{children:[(0,l.jsx)(a,{value:"interface",label:"\u0700 Interface",default:!0,children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE PURE SUBROUTINE add(obj, iNodeNum, jNodeNum, ivar,  &\n    & jvar, iDOF, jDOF, VALUE, scale)\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: iNodeNum(:)\n    !! row node number\n    INTEGER(I4B), INTENT(IN) :: jNodeNum(:)\n    !! column node number\n    INTEGER(I4B), INTENT(IN) :: ivar\n    !!\n    INTEGER(I4B), INTENT(IN) :: jvar\n    !!\n    INTEGER(I4B), INTENT(IN) :: iDOF\n    !! row degree of freedom\n    INTEGER(I4B), INTENT(IN) :: jDOF\n    !! col degree of freedom\n    REAL(DFP), INTENT(IN) :: VALUE(:, :)\n    !! scalar value to be add\n    REAL(DFP), INTENT(IN) :: scale\n  END SUBROUTINE add\nEND INTERFACE\n"})})}),(0,l.jsx)(a,{value:"example",label:"\ufe0f\u0700 See example"}),(0,l.jsx)(a,{value:"close",label:"\u21a2 "})]}),"\n",(0,l.jsx)(n.h2,{id:"interface-9",children:"Interface 9"}),"\n",(0,l.jsxs)(N,{children:[(0,l.jsx)(a,{value:"interface",label:"\u0700 Interface",default:!0,children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE PURE SUBROUTINE add(obj, iNodeNum, jNodeNum, ivar,  &\n    & jvar, iDOF, jDOF, VALUE, scale)\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: iNodeNum(:)\n    !! row node number\n    INTEGER(I4B), INTENT(IN) :: jNodeNum(:)\n    !! column node number\n    INTEGER(I4B), INTENT(IN) :: ivar\n    !!\n    INTEGER(I4B), INTENT(IN) :: jvar\n    !!\n    INTEGER(I4B), INTENT(IN) :: iDOF\n    !! row degree of freedom\n    INTEGER(I4B), INTENT(IN) :: jDOF\n    !! col degree of freedom\n    REAL(DFP), INTENT(IN) :: VALUE(:, :)\n    !! scalar value to be add\n    REAL(DFP), INTENT(IN) :: scale\n  END SUBROUTINE add\nEND INTERFACE\n"})})}),(0,l.jsx)(a,{value:"example",label:"\ufe0f\u0700 See example"}),(0,l.jsx)(a,{value:"close",label:"\u21a2 "})]}),"\n",(0,l.jsx)(n.h2,{id:"interface-10",children:"Interface 10"}),"\n",(0,l.jsxs)(N,{children:[(0,l.jsx)(a,{value:"interface",label:"\u0700 Interface",default:!0,children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE PURE SUBROUTINE add(obj, iNodeNum, jNodeNum, ivar,  &\n    & jvar, ispacecompo, itimecompo, jspacecompo, jtimecompo, VALUE, scale)\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: iNodeNum\n    !! row node number\n    INTEGER(I4B), INTENT(IN) :: jNodeNum\n    !! column node number\n    INTEGER(I4B), INTENT(IN) :: ivar\n    !!\n    INTEGER(I4B), INTENT(IN) :: jvar\n    !!\n    INTEGER(I4B), INTENT(IN) :: ispacecompo\n    INTEGER(I4B), INTENT(IN) :: itimecompo\n    INTEGER(I4B), INTENT(IN) :: jspacecompo\n    INTEGER(I4B), INTENT(IN) :: jtimecompo\n    REAL(DFP), INTENT(IN) :: VALUE\n    !! scalar value to be add\n    REAL(DFP), INTENT(IN) :: scale\n  END SUBROUTINE add\nEND INTERFACE\n"})})}),(0,l.jsx)(a,{value:"example",label:"\ufe0f\u0700 See example"}),(0,l.jsx)(a,{value:"close",label:"\u21a2 "})]}),"\n",(0,l.jsx)(n.h2,{id:"interface-11",children:"Interface 11"}),"\n",(0,l.jsxs)(N,{children:[(0,l.jsx)(a,{value:"interface",label:"\u0700 Interface",default:!0,children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE PURE SUBROUTINE add(obj, iNodeNum, jNodeNum, &\n    & ivar, jvar, VALUE, scale)\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: iNodeNum(:)\n    INTEGER(I4B), INTENT(IN) :: jNodeNum(:)\n    INTEGER(I4B), INTENT(IN) :: ivar\n    INTEGER(I4B), INTENT(IN) :: jvar\n    REAL(DFP), INTENT(IN) :: VALUE\n    REAL(DFP), INTENT(IN) :: scale\n  END SUBROUTINE add\nEND INTERFACE\n"})})}),(0,l.jsx)(a,{value:"example",label:"\ufe0f\u0700 See example"}),(0,l.jsx)(a,{value:"close",label:"\u21a2 "})]}),"\n",(0,l.jsx)(n.h2,{id:"interface-12",children:"Interface 12"}),"\n",(0,l.jsxs)(N,{children:[(0,l.jsx)(a,{value:"interface",label:"\u0700 Interface",default:!0,children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE PURE SUBROUTINE add(obj, iNodeNum, jNodeNum, ivar,  &\n    & jvar, iDOF, jDOF, VALUE, scale)\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: iNodeNum(:)\n    !! row node number\n    INTEGER(I4B), INTENT(IN) :: jNodeNum(:)\n    !! column node number\n    INTEGER(I4B), INTENT(IN) :: ivar\n    !!\n    INTEGER(I4B), INTENT(IN) :: jvar\n    !!\n    INTEGER(I4B), INTENT(IN) :: iDOF\n    !! row degree of freedom\n    INTEGER(I4B), INTENT(IN) :: jDOF\n    !! col degree of freedom\n    REAL(DFP), INTENT(IN) :: VALUE\n    !! scalar value to be add\n    REAL(DFP), INTENT(IN) :: scale\n  END SUBROUTINE add\nEND INTERFACE\n"})})}),(0,l.jsx)(a,{value:"example",label:"\ufe0f\u0700 See example"}),(0,l.jsx)(a,{value:"close",label:"\u21a2 "})]}),"\n",(0,l.jsx)(n.h2,{id:"interface-13",children:"Interface 13"}),"\n",(0,l.jsxs)(N,{children:[(0,l.jsx)(a,{value:"interface",label:"\u0700 Interface",default:!0,children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE PURE SUBROUTINE add(obj, iNodeNum, jNodeNum, ivar,  &\n    & jvar, ispacecompo, itimecompo, jspacecompo, jtimecompo, VALUE, scale)\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: iNodeNum(:)\n    !! row node number\n    INTEGER(I4B), INTENT(IN) :: jNodeNum(:)\n    !! column node number\n    INTEGER(I4B), INTENT(IN) :: ivar\n    !!\n    INTEGER(I4B), INTENT(IN) :: jvar\n    !!\n    INTEGER(I4B), INTENT(IN) :: ispacecompo\n    INTEGER(I4B), INTENT(IN) :: itimecompo\n    INTEGER(I4B), INTENT(IN) :: jspacecompo\n    INTEGER(I4B), INTENT(IN) :: jtimecompo\n    REAL(DFP), INTENT(IN) :: VALUE\n    !! scalar value to be add\n    REAL(DFP), INTENT(IN) :: scale\n  END SUBROUTINE add\nEND INTERFACE\n"})})}),(0,l.jsx)(a,{value:"example",label:"\ufe0f\u0700 See example"}),(0,l.jsx)(a,{value:"close",label:"\u21a2 "})]}),"\n",(0,l.jsx)(n.h2,{id:"interface-14",children:"Interface 14"}),"\n",(0,l.jsxs)(N,{children:[(0,l.jsx)(a,{value:"interface",label:"\u0700 Interface",default:!0,children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE PURE SUBROUTINE add(obj, iNodeNum, jNodeNum, ivar,  &\n    & jvar, ispacecompo, itimecompo, jspacecompo, jtimecompo, VALUE, scale)\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: iNodeNum(:)\n    !! row node number\n    INTEGER(I4B), INTENT(IN) :: jNodeNum(:)\n    !! column node number\n    INTEGER(I4B), INTENT(IN) :: ivar\n    !!\n    INTEGER(I4B), INTENT(IN) :: jvar\n    !!\n    INTEGER(I4B), INTENT(IN) :: ispacecompo\n    INTEGER(I4B), INTENT(IN) :: itimecompo(:)\n    INTEGER(I4B), INTENT(IN) :: jspacecompo\n    INTEGER(I4B), INTENT(IN) :: jtimecompo(:)\n    REAL(DFP), INTENT(IN) :: VALUE\n    !! scalar value to be add\n    REAL(DFP), INTENT(IN) :: scale\n  END SUBROUTINE add\nEND INTERFACE\n"})})}),(0,l.jsx)(a,{value:"example",label:"\ufe0f\u0700 See example"}),(0,l.jsx)(a,{value:"close",label:"\u21a2 "})]}),"\n",(0,l.jsx)(n.h2,{id:"interface-15",children:"Interface 15"}),"\n",(0,l.jsxs)(N,{children:[(0,l.jsx)(a,{value:"interface",label:"\u0700 Interface",default:!0,children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE PURE SUBROUTINE add(obj, iNodeNum, jNodeNum, ivar,  &\n    & jvar, ispacecompo, itimecompo, jspacecompo, jtimecompo, VALUE, scale)\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: iNodeNum(:)\n    !! row node number\n    INTEGER(I4B), INTENT(IN) :: jNodeNum(:)\n    !! column node number\n    INTEGER(I4B), INTENT(IN) :: ivar\n    !!\n    INTEGER(I4B), INTENT(IN) :: jvar\n    !!\n    INTEGER(I4B), INTENT(IN) :: ispacecompo(:)\n    INTEGER(I4B), INTENT(IN) :: itimecompo\n    INTEGER(I4B), INTENT(IN) :: jspacecompo(:)\n    INTEGER(I4B), INTENT(IN) :: jtimecompo\n    REAL(DFP), INTENT(IN) :: VALUE\n    !! scalar value to be add\n    REAL(DFP), INTENT(IN) :: scale\n  END SUBROUTINE add\nEND INTERFACE\n"})})}),(0,l.jsx)(a,{value:"example",label:"\ufe0f\u0700 See example"}),(0,l.jsx)(a,{value:"close",label:"\u21a2 "})]})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(o,{...e})}):o(e)}function i(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},54213:(e,n,a)=>{a.d(n,{R:()=>c,x:()=>E});var N=a(36672);const l={},r=N.createContext(l);function c(e){const n=N.useContext(r);return N.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function E(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:c(e.components),N.createElement(r.Provider,{value:n},e.children)}}}]);