"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[91019],{72825:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>S,frontMatter:()=>l,metadata:()=>a,toc:()=>E});const a=JSON.parse('{"id":"SteadyStokes111/Initiate","title":"Initiate","description":"This routine initiates the kernel.","source":"@site/docs/docs-api/SteadyStokes111/Initiate.md","sourceDirName":"SteadyStokes111","slug":"/SteadyStokes111/Initiate","permalink":"/docs-api/SteadyStokes111/Initiate","draft":false,"unlisted":false,"editUrl":"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/SteadyStokes111/Initiate.md","tags":[],"version":"current","lastUpdatedAt":1724304782000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Import","permalink":"/docs-api/SteadyStokes111/Import"},"next":{"title":"InitiateFields","permalink":"/docs-api/SteadyStokes111/InitiateFields"}}');var r=t(23420),o=t(54213);function s(e){const n={code:"code",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"This example shows how to set the parameters for steady stokes flow kernel.\nThen we initiate the kernel and display its content on the screen."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",children:'PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  USE easifemMaterials\n  USE easifemKernels\n  USE SteadyStokes111_Class\n  IMPLICIT NONE\n  TYPE( SteadyStokes111_ ) :: obj\n  TYPE( ParameterList_ ) :: param\n  TYPE( HDF5File_ ) :: domainFile\n  TYPE( Domain_ ) :: dom\n  INTEGER( I4B ), PARAMETER :: refPressureNode=2\n  REAL( DFP ), PARAMETER :: refPressure = 0.0_DFP\n  INTEGER( I4B ), PARAMETER :: tDirichletBCForVelocity = 2\n  INTEGER( I4B ), PARAMETER :: tDirichletBCForPressure = 0\n  INTEGER( I4B ), PARAMETER :: tFluidMaterials= 1\n  INTEGER( I4B ), PARAMETER :: stabParamOption= 1\n  LOGICAL( LGT ), PARAMETER :: isSubscalePressure = .FALSE.\n  LOGICAL( LGT ), PARAMETER :: isBoundarySubscale = .FALSE.\n  REAL( DFP ), PARAMETER :: gravity(3)=[0.0, -9.8, 0.0]\n  LOGICAL( LGT ), PARAMETER :: isConservativeForm = .TRUE.\n  CHARACTER( * ), PARAMETER :: engine="NATIVE_SERIAL"\n  CHARACTER( * ), PARAMETER :: domainFileName="./long_pipe_tri3.h5"\n  INTEGER( I4B ), PARAMETER :: CoordinateSystem = KERNEL_CARTESIAN\n  INTEGER( I4B ), PARAMETER :: maxIter = 100\n  REAL( DFP ), PARAMETER :: rtoleranceForPressure = 1.0E-6\n  REAL( DFP ), PARAMETER :: rtoleranceForVelocity = 1.0E-6\n  REAL( DFP ), PARAMETER :: atoleranceForPressure = 1.0E-6\n  REAL( DFP ), PARAMETER :: atoleranceForVelocity = 1.0E-6\n  REAL( DFP ), PARAMETER :: toleranceForSteadyState = 1.0E-6\n  CHARACTER(*), PARAMETER :: baseInterpolationForSpace="LagrangeInterpolation"\n  CHARACTER(*), PARAMETER :: baseContinuityForSpace="H1"\n  CHARACTER(*), PARAMETER :: quadratureTypeForSpace="GaussLegendre"\n  INTEGER(I4B), PARAMETER :: ls_solverName = LIS_GMRES\n  INTEGER(I4B), PARAMETER :: ls_preconditionOption= LEFT_PRECONDITION\n  INTEGER(I4B), PARAMETER :: ls_convergenceIn = convergenceInRes\n  INTEGER(I4B), PARAMETER :: ls_convergenceType = relativeConvergence\n  INTEGER( I4B ), PARAMETER :: ls_maxIter = 100\n  LOGICAL( LGT ), PARAMETER :: ls_relativeToRHS = .TRUE.\n  INTEGER( I4B ), PARAMETER :: ls_KrylovSubspaceSize=20\n  REAL( DFP ) , PARAMETER :: ls_rtol=1.0E-10\n  REAL( DFP ) , PARAMETER :: ls_atol=1.0E-10\n'})}),"\n",(0,r.jsx)(n.p,{children:"Set parameters for kernel."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",children:"  CALL FPL_INIT(); CALL param%Initiate()\n"})}),"\n",(0,r.jsx)(n.p,{children:"Set parameters for the kernel."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",children:"  CALL SetSteadyStokes111Param( &\n    & param=param, &\n    & isConservativeForm=isConservativeForm, &\n    & gravity = gravity, &\n    & isSubscalePressure = isSubscalePressure, &\n    & isBoundarySubscale = isBoundarySubscale, &\n    & stabParamOption = stabParamOption, &\n    & domainFile = domainFileName, &\n    & engine=engine, &\n    & CoordinateSystem=KERNEL_CARTESIAN, &\n    & maxIter =maxIter, &\n    & rtoleranceForPressure = rtoleranceForPressure, &\n    & rtoleranceForVelocity = rtoleranceForVelocity, &\n    & atoleranceForPressure = atoleranceForPressure, &\n    & atoleranceForVelocity = atoleranceForVelocity, &\n    & toleranceForSteadyState = toleranceForSteadyState, &\n    & tFluidMaterials=tFluidMaterials, &\n    & tDirichletBCForPressure=tDirichletBCForPressure, &\n    & tDirichletBCForVelocity=tDirichletBCForVelocity, &\n    & baseInterpolationForSpace=baseInterpolationForSpace, &\n    & baseContinuityForSpace=baseContinuityForSpace, &\n    & quadratureTypeForSpace=quadratureTypeForSpace, &\n    & refPressureNode=refPressureNode, &\n    & refPressure=refPressure &\n    & )\n"})}),"\n",(0,r.jsx)(n.p,{children:"Setting parameters for linear solver."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",children:"  CALL SetLinSolverParam( &\n    & param=param, &\n    & solverName=ls_solverName,&\n    & preconditionOption=ls_preconditionOption, &\n    & convergenceIn=ls_convergenceIn, &\n    & convergenceType=ls_convergenceType, &\n    & maxIter=ls_maxIter, &\n    & relativeToRHS=ls_relativeToRHS, &\n    & KrylovSubspaceSize=ls_KrylovSubspaceSize, &\n    & rtol=ls_rtol, &\n    & atol=ls_atol )\n"})}),"\n",(0,r.jsx)(n.p,{children:"Initiate domain by reading data from a domain file."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",children:'  CALL domainFile%Initiate( filename=domainFileName, MODE="READ" )\n  CALL domainFile%Open()\n  CALL dom%Initiate( domainFile, "" )\n'})}),"\n",(0,r.jsx)(n.p,{children:"Initiate the kernel."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",children:'  CALL obj%Initiate(param=param, dom=dom )\n  CALL obj%Display("")\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",children:"  CALL obj%Deallocate()\n  CALL dom%Deallocate()\n  CALL domainFile%Deallocate()\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\nEND PROGRAM main\n"})})]})}function i(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(s,{...e})}):s(e)}const l={},c="Initiate",d={},E=[{value:"Interface",id:"interface",level:2},{value:"Example",id:"example",level:2}];function m(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"initiate",children:"Initiate"})}),"\n",(0,r.jsx)(n.p,{children:"This routine initiates the kernel."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-txt",children:"! - Here `param` contains all the necessary components for initiating the\n! state of the kernel.\n! - Here `dom` is an instance of [[Domain_]], and it acts as a target of\n! the kernel's domain pointer [[SteadyStokes111_:DomForPressure]]\n! and [[SteadyStokes111_:DomForVelocity]].\n! - `domains` is a one dimensional array of [[DomainPointer_]]\n! - The size of domains should be 2\n! - `domains(1)` acts as target for\n! [[SteadyStokes111_:DomForVelocity]].\n! - `domains(2)` acts as a target for [[SteadyStokes111_:DomForPressure]]\n!\n!@note\n! In `param` one should have the options for initiating the instance of\n! [[LinearSolver_]] of the kernel [[SteadyStokes111_]]. To this end\n! user can call [[LinearSolver_Class:SetLinSolverParam]].\n!@endnote\n!\n!@note\n! No additional, memory is allocated for it. In this way, several kernels\n! can work on a common domains\n!@endnote\n!\n!## Tasks\n!\n! This subroutine performs the following tasks\n!\n! - Check if obj is initiated or not\n! - Sets target to pointer of domain [[SteadyStokes111_:DomForPressure]]\n! - Sets target to pointer of domain [[SteadyStokes111_:DomForVelocity]]\n! - Sets [[SteadyStokes111_:isCommonDomain]], true if `dom` is present,\n! else false.\n! - sets [[SteadyStokes111_:DomainFileForPressure]] and\n! [[SteadyStokes111_:DomainFileForVelocity]]\n! - sets the [[Kernel_:engine]]\n! - sets the [[Kernel_:name]]\n! - sets the [[Kernel_:CoordinateSystem]]\n! - sets the [[Kernel_:nnt]]\n! - sets the [[Kernel_:nsd]]\n! - sets the [[Kernel_:tDOF]]\n! - sets the [[SteadyStokes111_:baseContinuityForVelocity]]\n! - sets the [[SteadyStokes111_:baseInterpolationForVelocity]]\n! - sets the [[SteadyStokes111_:quadratureTypeForVelocity]]\n! - sets the [[SteadyStokes111_:baseContinuityForPressure]]\n! - sets the [[SteadyStokes111_:baseInterpolationForPressure]]\n! - sets the [[SteadyStokes111_:quadratureTypeForPressure]]\n! - allocates the [[SteadyStokes111_:DBCForVelocity]]\n! - allocates the [[SteadyStokes111_:DBCForPressure]]\n! - sets the [[SteadyStokes111_:tFluidMaterials]]\n! - allocates [[SteadyStokes111_:porousMaterial]]\n! - allocates [[SteadyStokes111_:PorousMaterialToMesh]]\n! - sets the [[SteadyStokes111_:tPorousMaterials]]\n! - allocates [[SteadyStokes111_:fluidMaterial]]\n! - allocates [[SteadyStokes111_:FluidMaterialToMesh]]\n"})}),"\n",(0,r.jsx)(n.h2,{id:"interface",children:"Interface"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE SSF_Initiate(obj, param, dom, domains)\n    CLASS(SteadyStokes111_), INTENT(INOUT) :: obj\n    TYPE(ParameterList_), INTENT(IN) :: param\n    CLASS(Domain_), OPTIONAL, TARGET, INTENT(INOUT) :: dom\n    TYPE(DomainPointer_), OPTIONAL, TARGET, INTENT(INOUT) :: domains(:)\n  END SUBROUTINE SSF_Initiate\nEND INTERFACE\n"})}),"\n",(0,r.jsx)(n.h2,{id:"example",children:"Example"}),"\n","\n",(0,r.jsx)(i,{})]})}function S(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}},54213:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>i});var a=t(36672);const r={},o=a.createContext(r);function s(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);