"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[99256],{34069:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>h,contentTitle:()=>N,default:()=>u,frontMatter:()=>g,metadata:()=>l,toc:()=>f});const l=JSON.parse('{"id":"ScalarField/Get","title":"Get","description":"Get the entries from scalar field.","source":"@site/docs/docs-api/ScalarField/Get.md","sourceDirName":"ScalarField","slug":"/ScalarField/Get","permalink":"/docs-api/ScalarField/Get","draft":false,"unlisted":false,"editUrl":"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/ScalarField/Get.md","tags":[],"version":"current","lastUpdatedAt":1724304782000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Export","permalink":"/docs-api/ScalarField/Export"},"next":{"title":"GetPointer","permalink":"/docs-api/ScalarField/GetPointer"}}');var r=a(23420),i=a(54213);function t(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",children:'PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  TYPE( Domain_ ) :: dom\n  TYPE( ScalarField_ ) :: obj\n  TYPE( HDF5File_ ) :: meshfile, resultFile\n  TYPE( ParameterList_ ) :: param\n  INTEGER( I4B ) :: ierr\n  REAL( DFP ), ALLOCATABLE :: realVec( : )\n  REAL( DFP ) :: avar\n  CHARACTER( LEN = * ), PARAMETER :: engine = "NATIVE_SERIAL"\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",metastring:'title="Open file for import"',children:'CALL FPL_INIT()\nCALL param%initiate()\nCALL resultFile%initiate( filename="./result.h5", mode="READ" )\nCALL resultFile%open()\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",metastring:'title="read domain"',children:'!> start creating domain\nCALL meshfile%initiate( filename="./mesh.h5", mode="READ" )\nCALL meshfile%open()\nCALL dom%initiate( hdf5=meshfile, group="" )\n!> end creating domain\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",metastring:'title="initiate scalar field"',children:'CALL SetScalarFieldParam( param=param, &\n  & fieldType=FIELD_TYPE_NORMAL, &\n  & name="U", &\n  & engine=engine)\nCALL obj%initiate( param, dom )\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",metastring:'title="setting all values using vector"',children:'CALL reallocate( realVec, dom%getTotalNodes() )\nCALL RANDOM_NUMBER( realVec )\nCALL obj%set(realVec)\nCALL obj%display( "scalar field = ")\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-txt",metastring:'title="results"',children:"#scalar field =\n# isInitiated : TRUE\n# name :U\n# fieldType : NORMAL\n# engine :NATIVE_SERIAL\n# comm: 0\n# myRank: 0\n# numProcs: 1\n# global_n: 0\n# local_n: 0\n# is: 0\n# ie: 0\n# lis_ptr: 0\n# domain : ASSOCIATED\n# domains : NOT ALLOCATED\n# tSize : 102\n# # DOF data :\n# Total Physical Variables :1\n# Name : U\n# Space Components : 1\n# Time Components : 1\n# Total Nodes : 102\n# Storage Format : Nodes\n# Value Map : \n--------------\n       1      \n     103      \n# VAR :U\n  DOF-1 ,   \n--------,   \n0.725701,   \n0.634809,   \n0.398595,   \n0.418203,   \n0.195654,   \n0.874868,\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",children:'CALL obj%get( value=avar, globalNode=2)\nCALL Display(avar, "avar = ")\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-txt",metastring:'title="results"',children:"avar = 0.634809\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",metastring:'title="Cleanup"',children:"  CALL obj%Deallocate(); CALL dom%Deallocate()\n  CALL meshfile%Deallocate()\n  CALL resultFile%Deallocate()\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\n  if(allocated(realVec) ) deallocate(realVec)\nEND PROGRAM main\n"})})]})}function s(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(t,{...e})}):t(e)}function c(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",children:'PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  TYPE( Domain_ ) :: dom\n  TYPE( ScalarField_ ) :: obj\n  TYPE( HDF5File_ ) :: meshfile, resultFile\n  TYPE( ParameterList_ ) :: param\n  INTEGER( I4B ) :: ierr\n  REAL( DFP ), ALLOCATABLE :: realVec( : )\n  REAL( DFP ) :: avar\n  CHARACTER( LEN = * ), PARAMETER :: engine = "NATIVE_SERIAL"\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",metastring:'title="Open file for import"',children:'  CALL FPL_INIT()\n  CALL param%initiate()\n  CALL resultFile%initiate( filename="./result.h5", mode="READ" )\n  CALL resultFile%open()\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",metastring:'title="read domain"',children:'  !> start creating domain\n  CALL meshfile%initiate( filename="./mesh.h5", mode="READ" )\n  CALL meshfile%open()\n  CALL dom%initiate( hdf5=meshfile, group="" )\n  !> end creating domain\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",metastring:'title="initiate scalar field"',children:'  CALL SetScalarFieldParam( param=param, &\n    & fieldType=FIELD_TYPE_NORMAL, &\n    & name="U", &\n    & engine=engine)\n  CALL obj%initiate( param, dom )\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",metastring:'title="setting all values using vector"',children:'  CALL reallocate( realVec, dom%getTotalNodes() )\n  CALL RANDOM_NUMBER( realVec )\n  CALL obj%set(realVec)\n  CALL obj%display( "scalar field = ")\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-txt",metastring:'title="results"',children:"#scalar field =\n# isInitiated : TRUE\n# name :U\n# fieldType : NORMAL\n# engine :NATIVE_SERIAL\n# comm: 0\n# myRank: 0\n# numProcs: 1\n# global_n: 0\n# local_n: 0\n# is: 0\n# ie: 0\n# lis_ptr: 0\n# domain : ASSOCIATED\n# domains : NOT ALLOCATED\n# tSize : 102\n# # DOF data :\n# Total Physical Variables :1\n# Name : U\n# Space Components : 1\n# Time Components : 1\n# Total Nodes : 102\n# Storage Format : Nodes\n# Value Map : \n--------------\n       1      \n     103      \n# VAR :U\n  DOF-1 ,   \n--------,   \n0.829034,   \n0.103488,   \n0.686197,   \n0.979929,   \n0.115532,   \n0.829484,   \n0.007732,   \n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",metastring:'title="Get all entries"',children:'  CALL obj%get( value=realVec)\n  CALL Display(realVec(1:5), "realVec(1:5) = ")\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-txt",metastring:'title="results"',children:"realVec(1:5) = \n---------------\n   0.829034    \n   0.103488    \n   0.686197    \n   0.979929    \n   0.115532    \n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",metastring:'title="Cleanup"',children:"  CALL obj%Deallocate(); CALL dom%Deallocate()\n  CALL meshfile%Deallocate()\n  CALL resultFile%Deallocate()\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\n  if(allocated(realVec) ) deallocate(realVec)\nEND PROGRAM main\n"})})]})}function o(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}function d(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",children:'PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  TYPE( Domain_ ) :: dom\n  TYPE( ScalarField_ ) :: obj\n  TYPE( HDF5File_ ) :: meshfile, resultFile\n  TYPE( ParameterList_ ) :: param\n  INTEGER( I4B ) :: ierr\n  REAL( DFP ), ALLOCATABLE :: realVec( : )\n  REAL( DFP ) :: avar\n  CHARACTER( LEN = * ), PARAMETER :: engine = "NATIVE_SERIAL"\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",metastring:'title="Open file for import"',children:'  CALL FPL_INIT()\n  CALL param%initiate()\n  CALL resultFile%initiate( filename="./result.h5", mode="READ" )\n  CALL resultFile%open()\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",metastring:'title="read domain"  ',children:'  !> start creating domain\n  CALL meshfile%initiate( filename="./mesh.h5", mode="READ" )\n  CALL meshfile%open()\n  CALL dom%initiate( hdf5=meshfile, group="" )\n  !> end creating domain\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",metastring:'title="initiate scalar field"',children:'  CALL SetScalarFieldParam( param=param, &\n    & fieldType=FIELD_TYPE_NORMAL, &\n    & name="U", &\n    & engine=engine)\n  CALL obj%initiate( param, dom )\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",metastring:'title="setting all values using vector"',children:'  CALL reallocate( realVec, dom%getTotalNodes() )\n  CALL RANDOM_NUMBER( realVec )\n  CALL obj%set(realVec)\n  CALL obj%display( "scalar field = ")\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-txt",metastring:'title="results"',children:"#scalar field =\n# isInitiated : TRUE\n# name :U\n# fieldType : NORMAL\n# engine :NATIVE_SERIAL\n# comm: 0\n# myRank: 0\n# numProcs: 1\n# global_n: 0\n# local_n: 0\n# is: 0\n# ie: 0\n# lis_ptr: 0\n# domain : ASSOCIATED\n# domains : NOT ALLOCATED\n# tSize : 102\n# # DOF data :\n# Total Physical Variables :1\n# Name : U\n# Space Components : 1\n# Time Components : 1\n# Total Nodes : 102\n# Storage Format : Nodes\n# Value Map : \n--------------\n       1      \n     103      \n# VAR :U\n  DOF-1 ,   \n--------,   \n0.832033,   \n0.745878,   \n0.844285,   \n0.691231,   \n0.996872,   \n0.347315,   \n0.827425,   \n0.263551,   \n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",metastring:'title="Get multiple entries"',children:'  CALL obj%get( value=realVec, globalNode=[1,2,3,4,5])\n  CALL Display(realVec(1:5), "realVec(1:5) = ")\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-txt",metastring:'title="results"',children:"realVec(1:5) = \n---------------\n   0.832033    \n   0.745878    \n   0.844285    \n   0.691231    \n   0.996872    \n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",metastring:'title="Cleanup"',children:"  CALL obj%Deallocate(); CALL dom%Deallocate()\n  CALL meshfile%Deallocate()\n  CALL resultFile%Deallocate()\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\n  if(allocated(realVec) ) deallocate(realVec)\nEND PROGRAM main\n"})})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}function L(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",children:'PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  TYPE( Domain_ ) :: dom\n  TYPE( ScalarField_ ) :: obj\n  TYPE( HDF5File_ ) :: meshfile, resultFile\n  TYPE( ParameterList_ ) :: param\n  INTEGER( I4B ) :: ierr\n  REAL( DFP ), ALLOCATABLE :: realVec( : )\n  REAL( DFP ) :: avar\n  CHARACTER( LEN = * ), PARAMETER :: engine = "NATIVE_SERIAL"\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",metastring:'title="Open file for import"',children:'  CALL FPL_INIT()\n  CALL param%initiate()\n  CALL resultFile%initiate( filename="./result.h5", mode="READ" )\n  CALL resultFile%open()\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",metastring:'title="read domain"  ',children:'  !> start creating domain\n  CALL meshfile%initiate( filename="./mesh.h5", mode="READ" )\n  CALL meshfile%open()\n  CALL dom%initiate( hdf5=meshfile, group="" )\n  !> end creating domain\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",metastring:'title="initiate scalar field"',children:'  CALL SetScalarFieldParam( param=param, &\n    & fieldType=FIELD_TYPE_NORMAL, &\n    & name="U", &\n    & engine=engine)\n  CALL obj%initiate( param, dom )\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",metastring:'title="setting all values using vector"',children:'  CALL reallocate( realVec, dom%getTotalNodes() )\n  CALL RANDOM_NUMBER( realVec )\n  CALL obj%set(realVec)\n  CALL obj%display( "scalar field = ")\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-txt",metastring:'title="results"',children:"#scalar field =\n# isInitiated : TRUE\n# name :U\n# fieldType : NORMAL\n# engine :NATIVE_SERIAL\n# comm: 0\n# myRank: 0\n# numProcs: 1\n# global_n: 0\n# local_n: 0\n# is: 0\n# ie: 0\n# lis_ptr: 0\n# domain : ASSOCIATED\n# domains : NOT ALLOCATED\n# tSize : 102\n# # DOF data :\n# Total Physical Variables :1\n# Name : U\n# Space Components : 1\n# Time Components : 1\n# Total Nodes : 102\n# Storage Format : Nodes\n# Value Map : \n--------------\n       1      \n     103      \n# VAR :U\n  DOF-1 ,   \n--------,   \n0.965852,   \n0.106486,   \n0.227661,   \n0.278568,   \n0.979695,   \n0.156565,   \n0.007468,   \n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",metastring:'title="Get multiple entries"',children:'  CALL obj%get( value=realVec, istart=1, iend=5, stride=1)\n  CALL Display(realVec(1:5), "realVec(1:5) = ")\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-txt",metastring:'title="results"',children:"realVec(1:5) = \n---------------\n   0.965852    \n   0.106486    \n   0.227661    \n   0.278568    \n   0.979695    \n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",metastring:'title="Cleanup"',children:"  CALL obj%Deallocate(); CALL dom%Deallocate()\n  CALL meshfile%Deallocate()\n  CALL resultFile%Deallocate()\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\n  if(allocated(realVec) ) deallocate(realVec)\nEND PROGRAM main\n"})})]})}function A(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(L,{...e})}):L(e)}function E(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",children:'PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  TYPE( Domain_ ) :: dom\n  TYPE( ScalarField_ ) :: obj\n  TYPE( HDF5File_ ) :: meshfile, resultFile\n  TYPE( ParameterList_ ) :: param\n  INTEGER( I4B ) :: ierr\n  REAL( DFP ), ALLOCATABLE :: realVec( : )\n  REAL( DFP ) :: avar\n  CHARACTER( LEN = * ), PARAMETER :: engine = "NATIVE_SERIAL"\n  TYPE(FEVariable_) :: fevar\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",metastring:'title="Open file for import"',children:'  CALL FPL_INIT()\n  CALL param%initiate()\n  CALL resultFile%initiate( filename="./result.h5", mode="READ" )\n  CALL resultFile%open()\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",metastring:'title="read domain"  ',children:'  !> start creating domain\n  CALL meshfile%initiate( filename="./mesh.h5", mode="READ" )\n  CALL meshfile%open()\n  CALL dom%initiate( hdf5=meshfile, group="" )\n  !> end creating domain\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",metastring:'title="initiate scalar field"',children:'  CALL SetScalarFieldParam( param=param, &\n    & fieldType=FIELD_TYPE_NORMAL, &\n    & name="U", &\n    & engine=engine)\n  CALL obj%initiate( param, dom )\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",metastring:'title="setting all values using vector"',children:'  CALL reallocate( realVec, dom%getTotalNodes() )\n  CALL RANDOM_NUMBER( realVec )\n  CALL obj%set(realVec)\n  CALL obj%display( "scalar field = ")\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-txt",metastring:'title="results"',children:"#scalar field =\n# isInitiated : TRUE\n# name :U\n# fieldType : NORMAL\n# engine :NATIVE_SERIAL\n# comm: 0\n# myRank: 0\n# numProcs: 1\n# global_n: 0\n# local_n: 0\n# is: 0\n# ie: 0\n# lis_ptr: 0\n# domain : ASSOCIATED\n# domains : NOT ALLOCATED\n# tSize : 102\n# # DOF data :\n# Total Physical Variables :1\n# Name : U\n# Space Components : 1\n# Time Components : 1\n# Total Nodes : 102\n# Storage Format : Nodes\n# Value Map : \n--------------\n       1      \n     103      \n# VAR :U\n  DOF-1 ,   \n--------,   \n0.623683,   \n0.370695,   \n0.967630,   \n0.835710,   \n0.821063,   \n0.613570,   \n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",metastring:'title="Get multiple entries"',children:'  CALL obj%get( value=fevar, globalNode=arange(1,5,1) )\n  CALL Display(fevar, "fevar = ")\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-txt",metastring:'title="results"',children:"fevar = \n# RANK :: 0 (SCALAR)\n# VarType: SPACE\n# VALUE: \n---------\n0.623683 \n0.370695 \n0.967630 \n0.835710 \n0.821063 \n\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",metastring:'title="Cleanup"',children:"  CALL obj%Deallocate(); CALL dom%Deallocate()\n  CALL meshfile%Deallocate()\n  CALL resultFile%Deallocate()\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\n  if(allocated(realVec) ) deallocate(realVec)\nEND PROGRAM main\n"})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(E,{...e})}):E(e)}const g={},N="Get",h={},f=[{value:"Interface 1",id:"interface-1",level:2},{value:"Interface 2",id:"interface-2",level:2},{value:"Interface 3",id:"interface-3",level:2},{value:"Interface 4",id:"interface-4",level:2},{value:"Interface 5",id:"interface-5",level:2},{value:"Interface 6",id:"interface-6",level:2}];function j(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components},{TabItem:a,Tabs:l}=n;return a||T("TabItem",!0),l||T("Tabs",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"get",children:"Get"})}),"\n",(0,r.jsx)(n.p,{children:"Get the entries from scalar field."}),"\n",(0,r.jsx)(n.p,{children:"Calling examples:"}),"\n",(0,r.jsx)(n.p,{children:"TODO"}),"\n",(0,r.jsx)(n.h2,{id:"interface-1",children:"Interface 1"}),"\n",(0,r.jsxs)(l,{children:[(0,r.jsxs)(a,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE get1(obj, VALUE, globalNode)\n    CLASS(ScalarField_), INTENT(IN) :: obj\n    REAL(DFP), INTENT(INOUT) :: VALUE\n    INTEGER(I4B), INTENT(IN) :: globalNode\n  END SUBROUTINE get1\nEND INTERFACE\n"})}),(0,r.jsx)(n.p,{children:"Get a single entry."})]}),(0,r.jsx)(a,{value:"example",label:"\ufe0f\u0700 See example",children:(0,r.jsx)(s,{})}),(0,r.jsx)(a,{value:"close",label:"\u21a2 "})]}),"\n",(0,r.jsx)(n.h2,{id:"interface-2",children:"Interface 2"}),"\n",(0,r.jsxs)(l,{children:[(0,r.jsxs)(a,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE get2(obj, VALUE)\n    CLASS(ScalarField_), INTENT(IN) :: obj\n    REAL(DFP), ALLOCATABLE, INTENT(INOUT) :: VALUE(:)\n  END SUBROUTINE get2\nEND INTERFACE\n"})}),(0,r.jsx)(n.p,{children:"Get all entries in a vector of reals."})]}),(0,r.jsx)(a,{value:"example",label:"\ufe0f\u0700 See example",children:(0,r.jsx)(o,{})}),(0,r.jsx)(a,{value:"close",label:"\u21a2 "})]}),"\n",(0,r.jsx)(n.h2,{id:"interface-3",children:"Interface 3"}),"\n",(0,r.jsxs)(l,{children:[(0,r.jsxs)(a,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE get3(obj, VALUE, globalNode)\n    CLASS(ScalarField_), INTENT(IN) :: obj\n    REAL(DFP), ALLOCATABLE, INTENT(INOUT) :: VALUE(:)\n    INTEGER(I4B), INTENT(IN) :: globalNode(:)\n  END SUBROUTINE get3\nEND INTERFACE\n"})}),(0,r.jsx)(n.p,{children:"Get all multiple entries."})]}),(0,r.jsx)(a,{value:"example",label:"\ufe0f\u0700 See example",children:(0,r.jsx)(m,{})}),(0,r.jsx)(a,{value:"close",label:"\u21a2 "})]}),"\n",(0,r.jsx)(n.h2,{id:"interface-4",children:"Interface 4"}),"\n",(0,r.jsxs)(l,{children:[(0,r.jsxs)(a,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE get4(obj, VALUE, istart, iend, stride)\n    CLASS(ScalarField_), INTENT(IN) :: obj\n    REAL(DFP), ALLOCATABLE, INTENT(INOUT) :: VALUE(:)\n    INTEGER(I4B), INTENT(IN) :: istart\n    INTEGER(I4B), INTENT(IN) :: iend\n    INTEGER(I4B), INTENT(IN) :: stride\n  END SUBROUTINE get4\nEND INTERFACE\n"})}),(0,r.jsx)(n.p,{children:"Get multiple entries by using triplets."})]}),(0,r.jsx)(a,{value:"example",label:"\ufe0f\u0700 See example",children:(0,r.jsx)(A,{})}),(0,r.jsx)(a,{value:"close",label:"\u21a2 "})]}),"\n",(0,r.jsx)(n.h2,{id:"interface-5",children:"Interface 5"}),"\n",(0,r.jsxs)(l,{children:[(0,r.jsxs)(a,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE get5(obj, VALUE, globalNode)\n    CLASS(ScalarField_), INTENT(IN) :: obj\n    TYPE(FEVariable_), INTENT(INOUT) :: VALUE\n  !! Scalar Nodal FEVariable\n    INTEGER(I4B), INTENT(IN) :: globalNode(:)\n  END SUBROUTINE get5\nEND INTERFACE\n"})}),(0,r.jsxs)(n.p,{children:["Get multiple entries in ",(0,r.jsx)(n.a,{href:"/docs-api/FEVariable/FEVariable_",children:"FEVariable"})]})]}),(0,r.jsx)(a,{value:"example",label:"\ufe0f\u0700 See example",children:(0,r.jsx)(p,{})}),(0,r.jsx)(a,{value:"close",label:"\u21a2 "})]}),"\n",(0,r.jsx)(n.h2,{id:"interface-6",children:"Interface 6"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE get6(obj, VALUE)\n    CLASS(ScalarField_), INTENT(IN) :: obj\n    CLASS(ScalarField_), INTENT(INOUT) :: VALUE\n  END SUBROUTINE get6\nEND INTERFACE\n"})}),"\n",(0,r.jsx)(n.p,{children:"Get a scalarfield in an instance of scalar field."})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(j,{...e})}):j(e)}function T(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},54213:(e,n,a)=>{a.d(n,{R:()=>t,x:()=>s});var l=a(36672);const r={},i=l.createContext(r);function t(e){const n=l.useContext(i);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),l.createElement(i.Provider,{value:n},e.children)}}}]);