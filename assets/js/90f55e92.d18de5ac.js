"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[27764],{52125:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>V,contentTitle:()=>U,default:()=>M,frontMatter:()=>_,metadata:()=>l,toc:()=>B});const l=JSON.parse('{"id":"STVectorFieldLis/Set","title":"Set","description":"Set entries in vector field","source":"@site/docs/docs-api/STVectorFieldLis/Set.md","sourceDirName":"STVectorFieldLis","slug":"/STVectorFieldLis/Set","permalink":"/docs-api/STVectorFieldLis/Set","draft":false,"unlisted":false,"editUrl":"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/STVectorFieldLis/Set.md","tags":[],"version":"current","lastUpdatedAt":1724304782000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Structure","permalink":"/docs-api/STVectorFieldLis/STVectorFieldLis_"},"next":{"title":"SetSTVectorFieldParam","permalink":"/docs-api/STVectorFieldLis/SetSTVectorFieldParam"}}');var o=a(23420),i=a(54213),t=a(36492),s=a(92492);function r(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["In this example we test the ",(0,o.jsx)(n.a,{href:"/docs-api/STVectorFieldLis/Set",children:"Set"})," method."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:'PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  TYPE( Domain_ ) :: dom\n  TYPE( STVectorFieldLis_ ) :: obj\n  TYPE( HDF5File_ ) :: meshfile\n  TYPE( ParameterList_ ) :: param\n  INTEGER( I4B ) :: ierr\n  INTEGER( I4B ), PARAMETER :: spaceCompo=2_I4B\n  INTEGER( I4B ), PARAMETER :: timeCompo=2_I4B\n  REAL( DFP ), allocatable :: value(:,:)\n  CHARACTER(*), PARAMETER :: engine = "LIS_OMP"\n\n  ! import domain\n  CALL meshfile%initiate( filename="./mesh.h5", mode="READ" )\n  CALL meshfile%open()\n  CALL dom%initiate( hdf5=meshfile, group="" )\n  CALL meshfile%Deallocate()\n\n\n  ! set parameters for VectorField_\n  CALL FPL_INIT()\n  CALL param%initiate()\n  CALL SetSTVectorFieldParam( &\n    & param=param, &\n    & fieldType=FIELD_TYPE_NORMAL, &\n    & name="U", &\n    & engine=engine, &\n    & spaceCompo=spaceCompo, &\n    & timeCompo=timeCompo)\n\n  CALL obj%initiate( param, dom )\n  call reallocate(value, spaceCompo, timeCompo)\n  call random_number(value)\n\n  call obj%set(value=value, globalNode=1)\n  CALL obj%Display("obj = ")\n  call display(value, "value = ")\n\n  CALL obj%Deallocate(); CALL dom%Deallocate()\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\nEND PROGRAM main\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-txt",metastring:'title="Results"',children:"# VAR :U\n DOF-1 ,   DOF-2 ,   DOF-3 ,   DOF-4 ,   \n-------,  -------,  -------,  -------,   \n0.34965,  0.85832,  0.58169,  0.51880,   \n\n\n     value =      \n------------------\n0.349652  0.581689\n0.858322  0.518797\n"})})]})}function c(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(r,{...e})}):r(e)}function d(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["In this example we test the ",(0,o.jsx)(n.a,{href:"/docs-api/STVectorFieldLis/Set",children:"Set"})," method."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:'PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  TYPE( Domain_ ) :: dom\n  TYPE( STVectorFieldLis_ ) :: obj\n  TYPE( HDF5File_ ) :: meshfile\n  TYPE( ParameterList_ ) :: param\n  INTEGER( I4B ) :: ierr\n  INTEGER( I4B ), PARAMETER :: spaceCompo=2_I4B\n  INTEGER( I4B ), PARAMETER :: timeCompo=2_I4B\n  REAL( DFP ), allocatable :: value(:,:)\n  CHARACTER(*), PARAMETER :: engine = "LIS_OMP"\n\n  ! import domain\n  CALL meshfile%initiate( filename="./mesh.h5", mode="READ" )\n  CALL meshfile%open()\n  CALL dom%initiate( hdf5=meshfile, group="" )\n  CALL meshfile%Deallocate()\n\n\n  ! set parameters for VectorField_\n  CALL FPL_INIT()\n  CALL param%initiate()\n  CALL SetSTVectorFieldParam( &\n    & param=param, &\n    & fieldType=FIELD_TYPE_NORMAL, &\n    & name="U", &\n    & engine=engine, &\n    & spaceCompo=spaceCompo, &\n    & timeCompo=timeCompo)\n\n  CALL obj%initiate( param, dom )\n  call reallocate(value, spaceCompo, timeCompo)\n  call random_number(value)\n\n  call obj%set(value=value)\n  CALL obj%Display("obj = ")\n  call display(value, "value = ")\n\n  CALL obj%Deallocate(); CALL dom%Deallocate()\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\nEND PROGRAM main\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-txt",metastring:'title="Results"',children:"# VAR :U\n  DOF-1 ,    DOF-2 ,    DOF-3 ,    DOF-4 ,   \n--------,  --------,  --------,  --------,   \n0.528645,  0.580276,  0.587390,  0.497406,   \n0.528645,  0.580276,  0.587390,  0.497406,   \n0.528645,  0.580276,  0.587390,  0.497406,   \n\n# spaceCompo = 2\n# timeCompo = 2\n\n     value =      \n------------------\n0.528645  0.587390\n0.580276  0.497406\n"})})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}function p(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["In this example we test the ",(0,o.jsx)(n.a,{href:"/docs-api/STVectorFieldLis/Set",children:"Set"})," method."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:'PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  TYPE( Domain_ ) :: dom\n  TYPE( STVectorFieldLis_ ) :: obj\n  TYPE( HDF5File_ ) :: meshfile\n  TYPE( ParameterList_ ) :: param\n  INTEGER( I4B ) :: ierr\n  INTEGER( I4B ), PARAMETER :: spaceCompo=2_I4B\n  INTEGER( I4B ), PARAMETER :: timeCompo=2_I4B\n  REAL( DFP ), allocatable :: value(:,:,:)\n  CHARACTER(*), PARAMETER :: engine = "LIS_OMP"\n  INTEGER( I4B ) :: tnodes\n\n  ! import domain\n  CALL meshfile%initiate( filename="./mesh.h5", mode="READ" )\n  CALL meshfile%open()\n  CALL dom%initiate( hdf5=meshfile, group="" )\n  CALL meshfile%Deallocate()\n\n\n  ! set parameters for VectorField_\n  CALL FPL_INIT()\n  CALL param%initiate()\n  CALL SetSTVectorFieldParam( &\n    & param=param, &\n    & fieldType=FIELD_TYPE_NORMAL, &\n    & name="U", &\n    & engine=engine, &\n    & spaceCompo=spaceCompo, &\n    & timeCompo=timeCompo)\n\n  CALL obj%initiate( param, dom )\n  tnodes = dom%getTotalNodes()\n  call reallocate(value, spaceCompo, timeCompo, tnodes)\n  call random_number(value)\n\n  call obj%set(value=value)\n  CALL obj%Display("obj = ")\n  call display(value(:,:,1:3), "value = ")\n\n  CALL obj%Deallocate(); CALL dom%Deallocate()\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\nEND PROGRAM main\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-txt",metastring:'title="Results"',children:"# VAR :U\n  DOF-1 ,    DOF-2 ,    DOF-3 ,    DOF-4 ,   \n--------,  --------,  --------,  --------,   \n0.468014,  0.193133,  0.825314,  0.189746,   \n0.870013,  0.165566,  0.767453,  0.480631,   \n0.544904,  0.097415,  0.914453,  0.895436,   \n\n# spaceCompo = 2\n# timeCompo = 2\n\nvalue =( :, :, 1 ) = \n---------------------\n 0.468014  0.825314  \n 0.193133  0.189746  \nvalue =( :, :, 2 ) = \n---------------------\n 0.870013  0.767453  \n 0.165566  0.480631  \nvalue =( :, :, 3 ) = \n---------------------\n 0.544904  0.914453  \n 0.097415  0.895436  \n\n"})})]})}function E(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}function L(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["In this example we test the ",(0,o.jsx)(n.a,{href:"/docs-api/STVectorFieldLis/Set",children:"Set"})," method."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:'PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  TYPE( Domain_ ) :: dom\n  TYPE( STVectorFieldLis_ ) :: obj\n  TYPE( HDF5File_ ) :: meshfile\n  TYPE( ParameterList_ ) :: param\n  INTEGER( I4B ) :: ierr\n  INTEGER( I4B ), PARAMETER :: spaceCompo=2_I4B\n  INTEGER( I4B ), PARAMETER :: timeCompo=2_I4B\n  REAL( DFP ), allocatable :: value(:)\n  CHARACTER(*), PARAMETER :: engine = "LIS_OMP"\n  INTEGER( I4B ) :: tnodes\n\n  ! import domain\n  CALL meshfile%initiate( filename="./mesh.h5", mode="READ" )\n  CALL meshfile%open()\n  CALL dom%initiate( hdf5=meshfile, group="" )\n  CALL meshfile%Deallocate()\n\n\n  ! set parameters for VectorField_\n  CALL FPL_INIT()\n  CALL param%initiate()\n  CALL SetSTVectorFieldParam( &\n    & param=param, &\n    & fieldType=FIELD_TYPE_NORMAL, &\n    & name="U", &\n    & engine=engine, &\n    & spaceCompo=spaceCompo, &\n    & timeCompo=timeCompo)\n\n  CALL obj%initiate( param, dom )\n  tnodes = dom%getTotalNodes()\n  call reallocate(value, tnodes)\n  call random_number(value)\n\n  call obj%set(value=value, spaceCompo=2, timeCompo=2)\n  CALL obj%Display("obj = ")\n  call display(value(1:3), "value = ")\n\n  CALL obj%Deallocate(); CALL dom%Deallocate()\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\nEND PROGRAM main\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-txt",metastring:'title="Results"',children:"# VAR :U\n DOF-1 ,   DOF-2 ,   DOF-3 ,    DOF-4 ,   \n-------,  -------,  -------,  --------,   \n0.00000,  0.00000,  0.00000,  0.240216,   \n0.00000,  0.00000,  0.00000,  0.725414,   \n0.00000,  0.00000,  0.00000,  0.490273,   \n.\n.\n.\n# spaceCompo = 2\n# timeCompo = 2\nvalue = \n--------\n0.240216\n0.725414\n0.490273\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(L,{...e})}):L(e)}function T(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["In this example we test the ",(0,o.jsx)(n.a,{href:"/docs-api/STVectorFieldLis/Set",children:"Set"})," method."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:'PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  TYPE( Domain_ ) :: dom\n  TYPE( STVectorFieldLis_ ) :: obj\n  TYPE( ScalarField_ ) :: sfield\n  TYPE( HDF5File_ ) :: meshfile\n  TYPE( ParameterList_ ) :: param\n  INTEGER( I4B ) :: ierr\n  INTEGER( I4B ), PARAMETER :: spaceCompo=2_I4B\n  INTEGER( I4B ), PARAMETER :: timeCompo=2_I4B\n  REAL( DFP ), allocatable :: value(:)\n  CHARACTER(*), PARAMETER :: engine = "LIS_OMP"\n  INTEGER( I4B ) :: tnodes\n\n  ! import domain\n  CALL meshfile%initiate( filename="./mesh.h5", mode="READ" )\n  CALL meshfile%open()\n  CALL dom%initiate( hdf5=meshfile, group="" )\n  CALL meshfile%Deallocate()\n\n\n  ! set parameters for VectorField_\n  CALL FPL_INIT()\n  CALL param%initiate()\n\n  CALL SetSTVectorFieldParam( &\n    & param=param, &\n    & fieldType=FIELD_TYPE_NORMAL, &\n    & name="U", &\n    & engine=engine, &\n    & spaceCompo=spaceCompo, &\n    & timeCompo=timeCompo)\n  CALL obj%initiate( param, dom )\n\n  CALL SetScalarFieldParam( &\n    & param=param, &\n    & fieldType=FIELD_TYPE_NORMAL, &\n    & name="U", &\n    & engine=\'NATIVE_SERIAL\')\n  CALL sfield%initiate( param, dom )\n\n  tnodes = dom%getTotalNodes()\n  call reallocate(value, tnodes)\n  call random_number(value)\n\n  call sfield%set(value)\n\n  call obj%set(value=sfield, spaceCompo=2, timeCompo=2)\n  CALL obj%Display("obj = ")\n  call display(value(1:3), "value = ")\n\n  call sfield%deallocate()\n  CALL obj%Deallocate(); CALL dom%Deallocate()\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\nEND PROGRAM main\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-txt",metastring:'title="Results"',children:"# VAR :U\n DOF-1 ,   DOF-2 ,   DOF-3 ,    DOF-4 ,   \n-------,  -------,  -------,  --------,   \n0.00000,  0.00000,  0.00000,  0.078799,   \n0.00000,  0.00000,  0.00000,  0.013620,   \n0.00000,  0.00000,  0.00000,  0.196062,   \n\n# spaceCompo = 2\n# timeCompo = 2\n\nvalue = \n--------\n0.078799\n0.013620\n0.196062\n"})})]})}function I(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(T,{...e})}):T(e)}function A(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["In this example we test the ",(0,o.jsx)(n.a,{href:"/docs-api/STVectorFieldLis/Set",children:"Set"})," method."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:'PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  TYPE( Domain_ ) :: dom\n  TYPE( STVectorFieldLis_ ) :: obj\n  TYPE( HDF5File_ ) :: meshfile\n  TYPE( ParameterList_ ) :: param\n  INTEGER( I4B ) :: ierr\n  INTEGER( I4B ), PARAMETER :: spaceCompo=2_I4B\n  INTEGER( I4B ), PARAMETER :: timeCompo=2_I4B\n  REAL( DFP ), allocatable :: value(:,:)\n  CHARACTER(*), PARAMETER :: engine = "LIS_OMP"\n  INTEGER( I4B ) :: tnodes\n\n  ! import domain\n  CALL meshfile%initiate( filename="./mesh.h5", mode="READ" )\n  CALL meshfile%open()\n  CALL dom%initiate( hdf5=meshfile, group="" )\n  CALL meshfile%Deallocate()\n\n\n  ! set parameters for VectorField_\n  CALL FPL_INIT()\n  CALL param%initiate()\n\n  CALL SetSTVectorFieldParam( &\n    & param=param, &\n    & fieldType=FIELD_TYPE_NORMAL, &\n    & name="U", &\n    & engine=engine, &\n    & spaceCompo=spaceCompo, &\n    & timeCompo=timeCompo)\n  CALL obj%initiate( param, dom )\n\n  tnodes = dom%getTotalNodes()\n  call reallocate(value, spaceCompo, timeCompo)\n  call random_number(value)\n\n  call obj%set(value=value, globalNode=arange(1,3,1))\n  CALL obj%Display("obj = ")\n  call display(value, "value = ")\n\n  CALL obj%Deallocate(); CALL dom%Deallocate()\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\nEND PROGRAM main\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-txt",metastring:'title="Results"',children:"# VAR :U\n DOF-1 ,   DOF-2 ,   DOF-3 ,   DOF-4 ,   \n-------,  -------,  -------,  -------,   \n0.67445,  0.46107,  0.49075,  0.28486,   \n0.67445,  0.46107,  0.49075,  0.28486,   \n0.67445,  0.46107,  0.49075,  0.28486,   \n0.00000,  0.00000,  0.00000,  0.00000,   \n\n# spaceCompo = 2\n# timeCompo = 2\n\n     value =      \n------------------\n0.674452  0.490747\n0.461071  0.284857\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(A,{...e})}):A(e)}function N(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["In this example we test the ",(0,o.jsx)(n.a,{href:"/docs-api/STVectorFieldLis/Set",children:"Set"})," method."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:'PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  TYPE( Domain_ ) :: dom\n  TYPE( STVectorFieldLis_ ) :: obj\n  TYPE( HDF5File_ ) :: meshfile\n  TYPE( ParameterList_ ) :: param\n  INTEGER( I4B ) :: ierr\n  INTEGER( I4B ), PARAMETER :: spaceCompo=2_I4B\n  INTEGER( I4B ), PARAMETER :: timeCompo=2_I4B\n  REAL( DFP ), allocatable :: value(:,:,:)\n  CHARACTER(*), PARAMETER :: engine = "LIS_OMP"\n  INTEGER( I4B ) :: tnodes\n\n  ! import domain\n  CALL meshfile%initiate( filename="./mesh.h5", mode="READ" )\n  CALL meshfile%open()\n  CALL dom%initiate( hdf5=meshfile, group="" )\n  CALL meshfile%Deallocate()\n\n\n  ! set parameters for VectorField_\n  CALL FPL_INIT()\n  CALL param%initiate()\n\n  CALL SetSTVectorFieldParam( &\n    & param=param, &\n    & fieldType=FIELD_TYPE_NORMAL, &\n    & name="U", &\n    & engine=engine, &\n    & spaceCompo=spaceCompo, &\n    & timeCompo=timeCompo)\n  CALL obj%initiate( param, dom )\n\n  tnodes = dom%getTotalNodes()\n  call reallocate(value, spaceCompo, timeCompo, 3)\n  call random_number(value)\n\n  call obj%set(value=value, globalNode=arange(1,3,1))\n  CALL obj%Display("obj = ")\n  call display(value, "value = ")\n\n  CALL obj%Deallocate(); CALL dom%Deallocate()\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\nEND PROGRAM main\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-txt",metastring:'title="Results"',children:"# VAR :U\n DOF-1 ,   DOF-2 ,   DOF-3 ,   DOF-4 ,   \n-------,  -------,  -------,  -------,   \n0.46750,  0.55129,  0.07768,  0.45851,   \n0.81421,  0.06531,  0.97146,  0.55950,   \n0.07182,  0.96061,  0.15547,  0.89446,   \n\n# spaceCompo = 2\n# timeCompo = 2\n\nvalue =( :, :, 1 ) = \n---------------------\n 0.467503  0.077684  \n 0.551291  0.458512  \nvalue =( :, :, 2 ) = \n---------------------\n 0.814213  0.971461  \n 0.065310  0.559495  \nvalue =( :, :, 3 ) = \n---------------------\n 0.071824  0.155473  \n 0.960612  0.894463  \n\n"})})]})}function C(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(N,{...e})}):N(e)}function j(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["In this example we test the ",(0,o.jsx)(n.a,{href:"/docs-api/STVectorFieldLis/Set",children:"Set"})," method."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:'PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  TYPE( Domain_ ) :: dom\n  TYPE( STVectorFieldLis_ ) :: obj\n  TYPE( HDF5File_ ) :: meshfile\n  TYPE( ParameterList_ ) :: param\n  INTEGER( I4B ) :: ierr\n  INTEGER( I4B ), PARAMETER :: spaceCompo=2_I4B\n  INTEGER( I4B ), PARAMETER :: timeCompo=2_I4B\n  REAL( DFP ), allocatable :: value(:,:,:)\n  CHARACTER(*), PARAMETER :: engine = "LIS_OMP"\n  INTEGER( I4B ) :: tnodes\n\n  ! import domain\n  CALL meshfile%initiate( filename="./mesh.h5", mode="READ" )\n  CALL meshfile%open()\n  CALL dom%initiate( hdf5=meshfile, group="" )\n  CALL meshfile%Deallocate()\n\n\n  ! set parameters for VectorField_\n  CALL FPL_INIT()\n  CALL param%initiate()\n\n  CALL SetSTVectorFieldParam( &\n    & param=param, &\n    & fieldType=FIELD_TYPE_NORMAL, &\n    & name="U", &\n    & engine=engine, &\n    & spaceCompo=spaceCompo, &\n    & timeCompo=timeCompo)\n  CALL obj%initiate( param, dom )\n\n  tnodes = dom%getTotalNodes()\n  call reallocate(value, spaceCompo, timeCompo, 3)\n  call random_number(value)\n\n  call obj%set(value=value(1,1,:), globalNode=arange(1,3,1), spaceCompo=1, timeCompo=1)\n  call obj%set(value=value(1,2,:), globalNode=arange(1,3,1), spaceCompo=1, timeCompo=2)\n  call obj%set(value=value(2,1,:), globalNode=arange(1,3,1), spaceCompo=2, timeCompo=1)\n  call obj%set(value=value(2,2,:), globalNode=arange(1,3,1), spaceCompo=2, timeCompo=2)\n  CALL obj%Display("obj = ")\n  call display(value, "value = ")\n\n  CALL obj%Deallocate(); CALL dom%Deallocate()\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\nEND PROGRAM main\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-txt",metastring:'title="Results"',children:"# VAR :U\n DOF-1 ,   DOF-2 ,   DOF-3 ,   DOF-4 ,   \n-------,  -------,  -------,  -------,   \n0.39222,  0.32577,  0.38798,  0.37918,   \n0.40475,  0.43177,  0.77874,  0.58285,   \n0.01328,  0.98929,  0.60267,  0.96886,   \n\n# spaceCompo = 2\n# timeCompo = 2\n\nvalue =( :, :, 1 ) = \n---------------------\n 0.392217  0.387975  \n 0.325772  0.379176  \nvalue =( :, :, 2 ) = \n---------------------\n 0.404755  0.778743  \n 0.431771  0.582854  \nvalue =( :, :, 3 ) = \n---------------------\n 0.013282  0.602673  \n 0.989292  0.968863  \n"})})]})}function f(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(j,{...e})}):j(e)}function R(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["In this example we test the ",(0,o.jsx)(n.a,{href:"/docs-api/STVectorFieldLis/Set",children:"Set"})," method."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:'PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  TYPE( Domain_ ) :: dom\n  TYPE( STVectorFieldLis_ ) :: obj\n  TYPE( HDF5File_ ) :: meshfile\n  TYPE( ParameterList_ ) :: param\n  INTEGER( I4B ) :: ierr\n  INTEGER( I4B ), PARAMETER :: spaceCompo=2_I4B\n  INTEGER( I4B ), PARAMETER :: timeCompo=2_I4B\n  REAL( DFP ), allocatable :: value(:,:)\n  CHARACTER(*), PARAMETER :: engine = "LIS_OMP"\n  INTEGER( I4B ) :: tnodes\n\n  ! import domain\n  CALL meshfile%initiate( filename="./mesh.h5", mode="READ" )\n  CALL meshfile%open()\n  CALL dom%initiate( hdf5=meshfile, group="" )\n  CALL meshfile%Deallocate()\n\n\n  ! set parameters for VectorField_\n  CALL FPL_INIT()\n  CALL param%initiate()\n\n  CALL SetSTVectorFieldParam( &\n    & param=param, &\n    & fieldType=FIELD_TYPE_NORMAL, &\n    & name="U", &\n    & engine=engine, &\n    & spaceCompo=spaceCompo, &\n    & timeCompo=timeCompo)\n  CALL obj%initiate( param, dom )\n\n  tnodes = dom%getTotalNodes()\n  call reallocate(value, spaceCompo, timeCompo)\n  call random_number(value)\n\n  call obj%set(value=value(1,1), globalNode=1, spaceCompo=1, timeCompo=1)\n  call obj%set(value=value(1,2), globalNode=1, spaceCompo=1, timeCompo=2)\n  call obj%set(value=value(2,1), globalNode=1, spaceCompo=2, timeCompo=1)\n  call obj%set(value=value(2,2), globalNode=1, spaceCompo=2, timeCompo=2)\n  CALL obj%Display("obj = ")\n  call display(value, "value = ")\n\n  CALL obj%Deallocate(); CALL dom%Deallocate()\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\nEND PROGRAM main\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-txt",metastring:'title="Results"',children:"# VAR :U\n DOF-1 ,   DOF-2 ,   DOF-3 ,   DOF-4 ,   \n-------,  -------,  -------,  -------,   \n0.37009,  0.06559,  0.60917,  0.68589,   \n0.00000,  0.00000,  0.00000,  0.00000,   \n\n# spaceCompo = 2\n# timeCompo = 2\n\n     value =      \n------------------\n0.370091  0.609166\n0.065591  0.685886\n"})})]})}function x(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(R,{...e})}):R(e)}function b(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["In this example we test the ",(0,o.jsx)(n.a,{href:"/docs-api/STVectorFieldLis/Set",children:"Set"})," method."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:'PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  TYPE( Domain_ ) :: dom\n  TYPE( STVectorFieldLis_ ) :: obj\n  TYPE( HDF5File_ ) :: meshfile\n  TYPE( ParameterList_ ) :: param\n  INTEGER( I4B ) :: ierr\n  INTEGER( I4B ), PARAMETER :: spaceCompo=2_I4B\n  INTEGER( I4B ), PARAMETER :: timeCompo=2_I4B\n  REAL( DFP ), allocatable :: value(:,:)\n  CHARACTER(*), PARAMETER :: engine = "LIS_OMP"\n  INTEGER( I4B ) :: tnodes\n\n  ! import domain\n  CALL meshfile%initiate( filename="./mesh.h5", mode="READ" )\n  CALL meshfile%open()\n  CALL dom%initiate( hdf5=meshfile, group="" )\n  CALL meshfile%Deallocate()\n\n\n  ! set parameters for VectorField_\n  CALL FPL_INIT()\n  CALL param%initiate()\n\n  CALL SetSTVectorFieldParam( &\n    & param=param, &\n    & fieldType=FIELD_TYPE_NORMAL, &\n    & name="U", &\n    & engine=engine, &\n    & spaceCompo=spaceCompo, &\n    & timeCompo=timeCompo)\n  CALL obj%initiate( param, dom )\n\n  tnodes = dom%getTotalNodes()\n  call reallocate(value, spaceCompo, timeCompo)\n  call random_number(value)\n\n  call obj%set(value=value, istart=1, iend=3, stride=1)\n  CALL obj%Display("obj = ")\n  call display(value, "value = ")\n\n  CALL obj%Deallocate(); CALL dom%Deallocate()\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\nEND PROGRAM main\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-txt",metastring:'title="Results"',children:"# VAR :U\n DOF-1 ,   DOF-2 ,   DOF-3 ,   DOF-4 ,   \n-------,  -------,  -------,  -------,   \n0.90636,  0.66777,  0.07872,  0.91638,   \n0.90636,  0.66777,  0.07872,  0.91638,   \n0.90636,  0.66777,  0.07872,  0.91638,   \n\n# spaceCompo = 2\n# timeCompo = 2\n\n     value =      \n------------------\n0.906358  0.078718\n0.667770  0.916383\n"})})]})}function F(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(b,{...e})}):b(e)}function v(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["In this example we test the ",(0,o.jsx)(n.a,{href:"/docs-api/STVectorFieldLis/Set",children:"Set"})," method."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:'PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  TYPE( Domain_ ) :: dom\n  TYPE( STVectorFieldLis_ ) :: obj\n  TYPE( HDF5File_ ) :: meshfile\n  TYPE( ParameterList_ ) :: param\n  INTEGER( I4B ) :: ierr\n  INTEGER( I4B ), PARAMETER :: spaceCompo=2_I4B\n  INTEGER( I4B ), PARAMETER :: timeCompo=2_I4B\n  REAL( DFP ), allocatable :: value(:,:,:)\n  CHARACTER(*), PARAMETER :: engine = "LIS_OMP"\n  INTEGER( I4B ) :: tnodes\n\n  ! import domain\n  CALL meshfile%initiate( filename="./mesh.h5", mode="READ" )\n  CALL meshfile%open()\n  CALL dom%initiate( hdf5=meshfile, group="" )\n  CALL meshfile%Deallocate()\n\n\n  ! set parameters for VectorField_\n  CALL FPL_INIT()\n  CALL param%initiate()\n\n  CALL SetSTVectorFieldParam( &\n    & param=param, &\n    & fieldType=FIELD_TYPE_NORMAL, &\n    & name="U", &\n    & engine=engine, &\n    & spaceCompo=spaceCompo, &\n    & timeCompo=timeCompo)\n  CALL obj%initiate( param, dom )\n\n  tnodes = dom%getTotalNodes()\n  call reallocate(value, spaceCompo, timeCompo, 3)\n  call random_number(value)\n\n  call obj%set(value=value, istart=1, iend=3, stride=1)\n  CALL obj%Display("obj = ")\n  call display(value, "value = ")\n\n  CALL obj%Deallocate(); CALL dom%Deallocate()\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\nEND PROGRAM main\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-txt",metastring:'title="Results"',children:"# VAR :U\n DOF-1 ,   DOF-2 ,   DOF-3 ,   DOF-4 ,   \n-------,  -------,  -------,  -------,   \n0.06771,  0.75442,  0.55908,  0.83616,   \n0.01938,  0.87443,  0.81103,  0.40416,   \n0.28662,  0.20294,  0.19123,  0.15446,   \n\n# spaceCompo = 2\n# timeCompo = 2\n\nvalue =( :, :, 1 ) = \n---------------------\n 0.067713  0.559079  \n 0.754420  0.836164  \n\nvalue =( :, :, 2 ) = \n---------------------\n 0.019376  0.811034  \n 0.874427  0.404164  \n\nvalue =( :, :, 3 ) = \n---------------------\n 0.286623  0.191233  \n 0.202942  0.154461  \n"})})]})}function S(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(v,{...e})}):v(e)}function P(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["In this example we test the ",(0,o.jsx)(n.a,{href:"/docs-api/STVectorFieldLis/Set",children:"Set"})," method."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:'PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  TYPE( Domain_ ) :: dom\n  TYPE( STVectorFieldLis_ ) :: obj\n  TYPE( HDF5File_ ) :: meshfile\n  TYPE( ParameterList_ ) :: param\n  INTEGER( I4B ) :: ierr\n  INTEGER( I4B ), PARAMETER :: spaceCompo=2_I4B\n  INTEGER( I4B ), PARAMETER :: timeCompo=2_I4B\n  REAL( DFP ), allocatable :: value(:,:,:)\n  CHARACTER(*), PARAMETER :: engine = "LIS_OMP"\n  INTEGER( I4B ) :: tnodes\n  TYPE(FEVariable_) :: fevar\n\n  ! import domain\n  CALL meshfile%initiate( filename="./mesh.h5", mode="READ" )\n  CALL meshfile%open()\n  CALL dom%initiate( hdf5=meshfile, group="" )\n  CALL meshfile%Deallocate()\n\n\n  ! set parameters for VectorField_\n  CALL FPL_INIT()\n  CALL param%initiate()\n\n  CALL SetSTVectorFieldParam( &\n    & param=param, &\n    & fieldType=FIELD_TYPE_NORMAL, &\n    & name="U", &\n    & engine=engine, &\n    & spaceCompo=spaceCompo, &\n    & timeCompo=timeCompo)\n  CALL obj%initiate( param, dom )\n\n  tnodes = dom%getTotalNodes()\n  call reallocate(value, spaceCompo, timeCompo, 3)\n  call random_number(value)\n\n  fevar = NodalVariable(value, TypeFEVariableVector, TypeFEVariableSpaceTime)\n\n  call obj%set(value=fevar, globalNode=arange(1,3,1))\n  CALL obj%Display("obj = ")\n  call display(value, "value = ")\n\n  CALL obj%Deallocate(); CALL dom%Deallocate()\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\nEND PROGRAM main\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-txt",metastring:'title="Results"',children:" DOF-1 ,   DOF-2 ,   DOF-3 ,   DOF-4 ,   \n-------,  -------,  -------,  -------,   \n0.90416,  0.77363,  0.66872,  0.70278,   \n0.70275,  0.77907,  0.21098,  0.01168,   \n0.82073,  0.79908,  0.09018,  0.52359,   \n\n# spaceCompo = 2\n# timeCompo = 2\n\nvalue =( :, :, 1 ) = \n---------------------\n 0.904156  0.668723  \n 0.773634  0.702783  \nvalue =( :, :, 2 ) = \n---------------------\n 0.702748  0.210977  \n 0.779073  0.011683  \nvalue =( :, :, 3 ) = \n---------------------\n 0.820733  0.090183  \n 0.799077  0.523587  \n"})})]})}function D(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(P,{...e})}):P(e)}function g(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["In this example we test the ",(0,o.jsx)(n.a,{href:"/docs-api/STVectorFieldLis/Set",children:"Set"})," method."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",metastring:"{37,38}",children:'PROGRAM main\n  USE easifemBase\n  USE easifemClasses\n  TYPE( Domain_ ) :: dom\n  TYPE( STVectorFieldLis_ ) :: obj\n  TYPE( HDF5File_ ) :: meshfile\n  TYPE( ParameterList_ ) :: param\n  INTEGER( I4B ) :: ierr\n  INTEGER( I4B ), PARAMETER :: spaceCompo=2_I4B\n  INTEGER( I4B ), PARAMETER :: timeCompo=2_I4B\n  REAL( DFP ) :: value\n  CHARACTER(*), PARAMETER :: engine = "LIS_OMP"\n  INTEGER( I4B ) :: tnodes\n\n  ! import domain\n  CALL meshfile%initiate( filename="./mesh.h5", mode="READ" )\n  CALL meshfile%open()\n  CALL dom%initiate( hdf5=meshfile, group="" )\n  CALL meshfile%Deallocate()\n\n\n  ! set parameters for VectorField_\n  CALL FPL_INIT()\n  CALL param%initiate()\n\n  CALL SetSTVectorFieldParam( &\n    & param=param, &\n    & fieldType=FIELD_TYPE_NORMAL, &\n    & name="U", &\n    & engine=engine, &\n    & spaceCompo=spaceCompo, &\n    & timeCompo=timeCompo)\n  CALL obj%initiate( param, dom )\n\n  tnodes = dom%getTotalNodes()\n\n  call random_number(value)\n  call obj%set(value=value)\n\n  CALL obj%Display("obj = ")\n  call display(value, "value = ")\n\n  CALL obj%Deallocate(); CALL dom%Deallocate()\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\nEND PROGRAM main\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-txt",metastring:'title="Results"',children:"# VAR :U\n  DOF-1 ,    DOF-2 ,    DOF-3 ,    DOF-4 ,   \n--------,  --------,  --------,  --------,   \n0.720954,  0.720954,  0.720954,  0.720954,   \n0.720954,  0.720954,  0.720954,  0.720954,   \n0.720954,  0.720954,  0.720954,  0.720954,   \n\n# spaceCompo = 2\n# timeCompo = 2\n\nvalue = 0.720954\n"})})]})}function O(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(g,{...e})}):g(e)}const _={},U="Set",V={},B=[{value:"Interface 1",id:"interface-1",level:2},{value:"Interface 2",id:"interface-2",level:2},{value:"Interface 3",id:"interface-3",level:2},{value:"Interface 4",id:"interface-4",level:2},{value:"Interface 5",id:"interface-5",level:2},{value:"Interface 6",id:"interface-6",level:2},{value:"Interface 7",id:"interface-7",level:2},{value:"Interface 8",id:"interface-8",level:2},{value:"Interface 9",id:"interface-9",level:2},{value:"Interface 10",id:"interface-10",level:2},{value:"Interface 11",id:"interface-11",level:2},{value:"Interface 12",id:"interface-12",level:2},{value:"Interface 13",id:"interface-13",level:2},{value:"Interface 14",id:"interface-14",level:2}];function G(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"set",children:"Set"})}),"\n",(0,o.jsx)(n.p,{children:"Set entries in vector field"}),"\n",(0,o.jsx)(n.p,{children:"Calling example:"}),"\n","\n",(0,o.jsx)(n.h2,{id:"interface-1",children:"Interface 1"}),"\n",(0,o.jsxs)(t.A,{children:[(0,o.jsxs)(s.A,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE Set1(obj, globalNode, VALUE, scale, &\n    & addContribution)\n    CLASS(STVectorFieldLis_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: globalNode\n    REAL(DFP), INTENT(IN) :: VALUE(:, :)\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\n  END SUBROUTINE Set1\nEND INTERFACE\n"})}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"This routine sets the single entry of the vector field."}),"\n",(0,o.jsxs)(n.li,{children:["Here, ",(0,o.jsx)(n.code,{children:"value"}),"  represents the space-time values at a node."]}),"\n",(0,o.jsxs)(n.li,{children:["The shape of ",(0,o.jsx)(n.code,{children:"value"})," should be same as (",(0,o.jsx)(n.code,{children:"obj%spaceCompo"}),", ",(0,o.jsx)(n.code,{children:"obj%timeCompo"}),")."]}),"\n"]})]}),(0,o.jsx)(s.A,{value:"example",label:"\ufe0f\u0700 See example",children:(0,o.jsx)(c,{})}),(0,o.jsx)(s.A,{value:"close",label:"\u21a2 "})]}),"\n",(0,o.jsx)(n.h2,{id:"interface-2",children:"Interface 2"}),"\n",(0,o.jsxs)(t.A,{children:[(0,o.jsxs)(s.A,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE Set2(obj, VALUE, scale, addContribution)\n    CLASS(STVectorFieldLis_), TARGET, INTENT(INOUT) :: obj\n    REAL(DFP), INTENT(IN) :: VALUE(:, :)\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\n  END SUBROUTINE Set2\nEND INTERFACE\n"})}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["This method sets all the nodal values to ",(0,o.jsx)(n.code,{children:"value"})]}),"\n",(0,o.jsxs)(n.li,{children:["Here, ",(0,o.jsx)(n.code,{children:"value"}),"  represents the space-time values at a node."]}),"\n",(0,o.jsxs)(n.li,{children:["The shape of ",(0,o.jsx)(n.code,{children:"value"})," should be same as (",(0,o.jsx)(n.code,{children:"obj%spaceCompo"}),", ",(0,o.jsx)(n.code,{children:"obj%timeCompo"}),")."]}),"\n"]})]}),(0,o.jsx)(s.A,{value:"example",label:"\ufe0f\u0700 See example",children:(0,o.jsx)(m,{})}),(0,o.jsx)(s.A,{value:"close",label:"\u21a2 "})]}),"\n",(0,o.jsx)(n.h2,{id:"interface-3",children:"Interface 3"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE Set3(obj, VALUE, spaceCompo, timeCompo, &\n    & scale, addContribution)\n    CLASS(STVectorFieldLis_), INTENT(INOUT) :: obj\n    REAL(DFP), INTENT(IN) :: VALUE\n    INTEGER(I4B), INTENT(IN) :: spaceCompo\n    INTEGER(I4B), INTENT(IN) :: timeCompo\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\n  END SUBROUTINE Set3\nEND INTERFACE \n"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["This method sets all the nodal values to ",(0,o.jsx)(n.code,{children:"value"})]}),"\n",(0,o.jsxs)(n.li,{children:["Here, ",(0,o.jsx)(n.code,{children:"value"}),"  represents the value of space-time component."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"interface-4",children:"Interface 4"}),"\n",(0,o.jsxs)(t.A,{children:[(0,o.jsxs)(s.A,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE Set4(obj, VALUE, scale, addContribution)\n    CLASS(STVectorFieldLis_), INTENT(INOUT) :: obj\n    REAL(DFP), INTENT(IN) :: VALUE(:, :, :)\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\n  END SUBROUTINE Set4\nEND INTERFACE\n"})}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"This routine set all entries of space-time vector field."}),"\n",(0,o.jsx)(n.li,{children:"All spatial values of all space-time components are set."}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"value"})," denotes the space-time nodal vector."]}),"\n",(0,o.jsxs)(n.li,{children:["shape of ",(0,o.jsx)(n.code,{children:"value"})," is ",(0,o.jsx)(n.code,{children:"(spaceCompo, timeCompo, tNodes)"}),"."]}),"\n"]})]}),(0,o.jsx)(s.A,{value:"example",label:"\ufe0f\u0700 See example",children:(0,o.jsx)(E,{})}),(0,o.jsx)(s.A,{value:"close",label:"\u21a2 "})]}),"\n",(0,o.jsx)(n.h2,{id:"interface-5",children:"Interface 5"}),"\n",(0,o.jsxs)(t.A,{children:[(0,o.jsxs)(s.A,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE Set5(obj, VALUE, spaceCompo, timeCompo,  &\n    & scale, addContribution)\n    CLASS(STVectorFieldLis_), INTENT(INOUT) :: obj\n    REAL(DFP), INTENT(IN) :: VALUE(:)\n    INTEGER(I4B), INTENT(IN) :: spaceCompo\n    INTEGER(I4B), INTENT(IN) :: timeCompo\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\n  END SUBROUTINE Set5\nEND INTERFACE \n"})}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"This routine sets all entries"}),"\n",(0,o.jsxs)(n.li,{children:["The entries are selected by specifying ",(0,o.jsx)(n.code,{children:"spaceCompo"})," and ",(0,o.jsx)(n.code,{children:"timeCompo"})]}),"\n",(0,o.jsxs)(n.li,{children:["Size of value should be equal to the ",(0,o.jsx)(n.code,{children:"tNodes"})]}),"\n"]})]}),(0,o.jsx)(s.A,{value:"example",label:"\ufe0f\u0700 See example",children:(0,o.jsx)(u,{})}),(0,o.jsx)(s.A,{value:"close",label:"\u21a2 "})]}),"\n",(0,o.jsx)(n.h2,{id:"interface-6",children:"Interface 6"}),"\n",(0,o.jsxs)(t.A,{children:[(0,o.jsxs)(s.A,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE Set6(obj, VALUE, spaceCompo, timeCompo,  &\n    & scale, addContribution)\n    CLASS(STVectorFieldLis_), INTENT(INOUT) :: obj\n    CLASS(ScalarField_), INTENT(IN) :: VALUE\n    INTEGER(I4B), INTENT(IN) :: spaceCompo\n    INTEGER(I4B), INTENT(IN) :: timeCompo\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\n  END SUBROUTINE Set6\nEND INTERFACE\n"})}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"This routine sets all entries"}),"\n",(0,o.jsxs)(n.li,{children:["The entries are selected by specifying ",(0,o.jsx)(n.code,{children:"spaceCompo"})," and ",(0,o.jsx)(n.code,{children:"timeCompo"})]}),"\n",(0,o.jsxs)(n.li,{children:["Size of value should be equal to the ",(0,o.jsx)(n.code,{children:"tNodes"})]}),"\n",(0,o.jsx)(n.li,{children:"Value can be an instance of child of ScalarField."}),"\n"]})]}),(0,o.jsx)(s.A,{value:"example",label:"\ufe0f\u0700 See example",children:(0,o.jsx)(I,{})}),(0,o.jsx)(s.A,{value:"close",label:"\u21a2 "})]}),"\n",(0,o.jsx)(n.h2,{id:"interface-7",children:"Interface 7"}),"\n",(0,o.jsxs)(t.A,{children:[(0,o.jsxs)(s.A,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE Set7(obj, VALUE, globalNode, scale,  &\n    & addContribution)\n    CLASS(STVectorFieldLis_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: globalNode(:)\n    REAL(DFP), INTENT(IN) :: VALUE(:, :)\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\n  END SUBROUTINE Set7\nEND INTERFACE\n"})}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Set multiple entries to constant space-time values"}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"value"})," denotes the space-time value at a node"]}),"\n",(0,o.jsxs)(n.li,{children:["shape of ",(0,o.jsx)(n.code,{children:"value"})," should be ",(0,o.jsx)(n.code,{children:"(spaceCompo, timeCompo)"})]}),"\n"]})]}),(0,o.jsx)(s.A,{value:"example",label:"\ufe0f\u0700 See example",children:(0,o.jsx)(h,{})}),(0,o.jsx)(s.A,{value:"close",label:"\u21a2 "})]}),"\n",(0,o.jsx)(n.h2,{id:"interface-8",children:"Interface 8"}),"\n",(0,o.jsxs)(t.A,{children:[(0,o.jsxs)(s.A,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE Set8(obj, globalNode, VALUE, scale, &\n    & addContribution)\n    CLASS(STVectorFieldLis_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: globalNode(:)\n    REAL(DFP), INTENT(IN) :: VALUE(:, :, :)\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\n  END SUBROUTINE Set8\nEND INTERFACE\n"})}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"This routine sets the selected entries."}),"\n",(0,o.jsxs)(n.li,{children:["Size of globalNode should be same as ",(0,o.jsx)(n.code,{children:"size(value, 3)"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"value"})," denotes the spacet-time nodal values of ",(0,o.jsx)(n.code,{children:"globalNode"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:["number of rows in ",(0,o.jsx)(n.code,{children:"value"})," should be ",(0,o.jsx)(n.code,{children:"spaceCompo"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:["number of columns in ",(0,o.jsx)(n.code,{children:"value"})," should be ",(0,o.jsx)(n.code,{children:"timeCompo"}),"."]}),"\n"]})]}),(0,o.jsx)(s.A,{value:"example",label:"\ufe0f\u0700 See example",children:(0,o.jsx)(C,{})}),(0,o.jsx)(s.A,{value:"close",label:"\u21a2 "})]}),"\n",(0,o.jsx)(n.h2,{id:"interface-9",children:"Interface 9"}),"\n",(0,o.jsxs)(t.A,{children:[(0,o.jsxs)(s.A,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE Set9(obj, VALUE, globalNode, spaceCompo,  &\n    & timeCompo, scale, addContribution)\n    CLASS(STVectorFieldLis_), INTENT(INOUT) :: obj\n    REAL(DFP), INTENT(IN) :: VALUE(:)\n    INTEGER(I4B), INTENT(IN) :: globalNode(:)\n    INTEGER(I4B), INTENT(IN) :: spaceCompo\n    INTEGER(I4B), INTENT(IN) :: timeCompo\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\n  END SUBROUTINE Set9\nEND INTERFACE \n"})}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"This routine sets the multiple values of a space-time component."}),"\n",(0,o.jsxs)(n.li,{children:["Size of ",(0,o.jsx)(n.code,{children:"value"})," should be equal to size of ",(0,o.jsx)(n.code,{children:"globalNode"}),"."]}),"\n"]})]}),(0,o.jsx)(s.A,{value:"example",label:"\ufe0f\u0700 See example",children:(0,o.jsx)(f,{})}),(0,o.jsx)(s.A,{value:"close",label:"\u21a2 "})]}),"\n",(0,o.jsx)(n.h2,{id:"interface-10",children:"Interface 10"}),"\n",(0,o.jsxs)(t.A,{children:[(0,o.jsxs)(s.A,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE Set10(obj, VALUE, globalNode, spaceCompo, &\n    & timeCompo, scale, addContribution)\n    CLASS(STVectorFieldLis_), INTENT(INOUT) :: obj\n    REAL(DFP), INTENT(IN) :: VALUE\n    INTEGER(I4B), INTENT(IN) :: globalNode\n    INTEGER(I4B), INTENT(IN) :: spaceCompo\n    INTEGER(I4B), INTENT(IN) :: timeCompo\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\n  END SUBROUTINE Set10\nEND INTERFACE \n"})}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"This routine sets a single entry of space-time component"}),"\n"]})]}),(0,o.jsx)(s.A,{value:"example",label:"\ufe0f\u0700 See example",children:(0,o.jsx)(x,{})}),(0,o.jsx)(s.A,{value:"close",label:"\u21a2 "})]}),"\n",(0,o.jsx)(n.h2,{id:"interface-11",children:"Interface 11"}),"\n",(0,o.jsxs)(t.A,{children:[(0,o.jsxs)(s.A,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE Set11(obj, VALUE, istart, iend, stride,  &\n    & scale, addContribution)\n    CLASS(STVectorFieldLis_), INTENT(INOUT) :: obj\n    INTEGER(I4B), INTENT(IN) :: istart\n    INTEGER(I4B), INTENT(IN) :: iend\n    INTEGER(I4B), INTENT(IN) :: stride\n    REAL(DFP), INTENT(IN) :: VALUE(:, :)\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\n  END SUBROUTINE Set11\nEND INTERFACE \n"})}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Sets multiple values using triplets."}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"value"})," denotes the space-time values at a single node."]}),"\n",(0,o.jsxs)(n.li,{children:["Shape of ",(0,o.jsx)(n.code,{children:"value"})," should be (",(0,o.jsx)(n.code,{children:"spaceCompo, timeCompo"}),")."]}),"\n"]})]}),(0,o.jsx)(s.A,{value:"example",label:"\ufe0f\u0700 See example",children:(0,o.jsx)(F,{})}),(0,o.jsx)(s.A,{value:"close",label:"\u21a2 "})]}),"\n",(0,o.jsx)(n.h2,{id:"interface-12",children:"Interface 12"}),"\n",(0,o.jsxs)(t.A,{children:[(0,o.jsxs)(s.A,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE Set12(obj, VALUE, istart, iend, stride,  &\n    & scale, addContribution)\n    CLASS(STVectorFieldLis_), INTENT(INOUT) :: obj\n    REAL(DFP), INTENT(IN) :: VALUE(:, :, :)\n    INTEGER(I4B), INTENT(IN) :: istart\n    INTEGER(I4B), INTENT(IN) :: iend\n    INTEGER(I4B), INTENT(IN) :: stride\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\n  END SUBROUTINE Set12\nEND INTERFACE\n"})}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Sets multiple values using triplets."}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"value"})," denotes the space-time values at several nodes."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"value(:,:,i)"})," denotes the space-time value at ith node."]}),"\n",(0,o.jsxs)(n.li,{children:["Shape of ",(0,o.jsx)(n.code,{children:"value(:,:,i)"})," should be (",(0,o.jsx)(n.code,{children:"spaceCompo, timeCompo"}),")."]}),"\n"]})]}),(0,o.jsx)(s.A,{value:"example",label:"\ufe0f\u0700 See example",children:(0,o.jsx)(S,{})}),(0,o.jsx)(s.A,{value:"close",label:"\u21a2 "})]}),"\n",(0,o.jsx)(n.h2,{id:"interface-13",children:"Interface 13"}),"\n",(0,o.jsxs)(t.A,{children:[(0,o.jsxs)(s.A,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE Set13(obj, VALUE, globalNode, scale, &\n    & addContribution)\n    CLASS(STVectorFieldLis_), INTENT(INOUT) :: obj\n    TYPE(FEVariable_), INTENT(IN) :: VALUE\n    INTEGER(I4B), INTENT(IN) :: globalNode(:)\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\n  END SUBROUTINE Set13\nEND INTERFACE\n"})}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Set multiple values by using FEVariable."}),"\n",(0,o.jsxs)(n.li,{children:["FEVariable, ",(0,o.jsx)(n.code,{children:"value"}),", should be of ",(0,o.jsx)(n.code,{children:"SpaceTime"})," type"]}),"\n"]})]}),(0,o.jsx)(s.A,{value:"example",label:"\ufe0f\u0700 See example",children:(0,o.jsx)(D,{})}),(0,o.jsx)(s.A,{value:"close",label:"\u21a2 "})]}),"\n",(0,o.jsx)(n.h2,{id:"interface-14",children:"Interface 14"}),"\n",(0,o.jsxs)(t.A,{children:[(0,o.jsxs)(s.A,{value:"interface",label:"\u0700 Interface",default:!0,children:[(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-fortran",children:"INTERFACE\n  MODULE SUBROUTINE Set14(obj, VALUE, scale, addContribution)\n    CLASS(STVectorFieldLis_), INTENT(INOUT) :: obj\n    REAL(DFP), INTENT(IN) :: VALUE\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\n  END SUBROUTINE Set14\nEND INTERFACE \n"})}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Sets all values to a given scalar value."}),"\n"]})]}),(0,o.jsx)(s.A,{value:"example",label:"\ufe0f\u0700 See example",children:(0,o.jsx)(O,{})}),(0,o.jsx)(s.A,{value:"close",label:"\u21a2 "})]})]})}function M(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(G,{...e})}):G(e)}},92492:(e,n,a)=>{a.d(n,{A:()=>t});a(36672);var l=a(28923);const o={tabItem:"tabItem_VSPN"};var i=a(23420);function t(e){let{children:n,hidden:a,className:t}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,l.A)(o.tabItem,t),hidden:a,children:n})}},36492:(e,n,a)=>{a.d(n,{A:()=>j});var l=a(36672),o=a(28923),i=a(19929),t=a(85291),s=a(5581),r=a(80034),c=a(12715),d=a(62741);function m(e){return l.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,l.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:n,children:a}=e;return(0,l.useMemo)((()=>{const e=n??function(e){return m(e).map((e=>{let{props:{value:n,label:a,attributes:l,default:o}}=e;return{value:n,label:a,attributes:l,default:o}}))}(a);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,a])}function E(e){let{value:n,tabValues:a}=e;return a.some((e=>e.value===n))}function L(e){let{queryString:n=!1,groupId:a}=e;const o=(0,t.W6)(),i=function(e){let{queryString:n=!1,groupId:a}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:n,groupId:a});return[(0,r.aZ)(i),(0,l.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(o.location.search);n.set(i,e),o.replace({...o.location,search:n.toString()})}),[i,o])]}function u(e){const{defaultValue:n,queryString:a=!1,groupId:o}=e,i=p(e),[t,r]=(0,l.useState)((()=>function(e){let{defaultValue:n,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!E({value:n,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const l=a.find((e=>e.default))??a[0];if(!l)throw new Error("Unexpected error: 0 tabValues");return l.value}({defaultValue:n,tabValues:i}))),[c,m]=L({queryString:a,groupId:o}),[u,T]=function(e){let{groupId:n}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(n),[o,i]=(0,d.Dv)(a);return[o,(0,l.useCallback)((e=>{a&&i.set(e)}),[a,i])]}({groupId:o}),I=(()=>{const e=c??u;return E({value:e,tabValues:i})?e:null})();(0,s.A)((()=>{I&&r(I)}),[I]);return{selectedValue:t,selectValue:(0,l.useCallback)((e=>{if(!E({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);r(e),m(e),T(e)}),[m,T,i]),tabValues:i}}var T=a(32111);const I={tabList:"tabList_csSQ",tabItem:"tabItem_Bcmo"};var A=a(23420);function h(e){let{className:n,block:a,selectedValue:l,selectValue:t,tabValues:s}=e;const r=[],{blockElementScrollPositionUntilNextRender:c}=(0,i.a_)(),d=e=>{const n=e.currentTarget,a=r.indexOf(n),o=s[a].value;o!==l&&(c(n),t(o))},m=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const a=r.indexOf(e.currentTarget)+1;n=r[a]??r[0];break}case"ArrowLeft":{const a=r.indexOf(e.currentTarget)-1;n=r[a]??r[r.length-1];break}}n?.focus()};return(0,A.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":a},n),children:s.map((e=>{let{value:n,label:a,attributes:i}=e;return(0,A.jsx)("li",{role:"tab",tabIndex:l===n?0:-1,"aria-selected":l===n,ref:e=>{r.push(e)},onKeyDown:m,onClick:d,...i,className:(0,o.A)("tabs__item",I.tabItem,i?.className,{"tabs__item--active":l===n}),children:a??n},n)}))})}function N(e){let{lazy:n,children:a,selectedValue:i}=e;const t=(Array.isArray(a)?a:[a]).filter(Boolean);if(n){const e=t.find((e=>e.props.value===i));return e?(0,l.cloneElement)(e,{className:(0,o.A)("margin-top--md",e.props.className)}):null}return(0,A.jsx)("div",{className:"margin-top--md",children:t.map(((e,n)=>(0,l.cloneElement)(e,{key:n,hidden:e.props.value!==i})))})}function C(e){const n=u(e);return(0,A.jsxs)("div",{className:(0,o.A)("tabs-container",I.tabList),children:[(0,A.jsx)(h,{...n,...e}),(0,A.jsx)(N,{...n,...e})]})}function j(e){const n=(0,T.A)();return(0,A.jsx)(C,{...e,children:m(e.children)},String(n))}},54213:(e,n,a)=>{a.d(n,{R:()=>t,x:()=>s});var l=a(36672);const o={},i=l.createContext(o);function t(e){const n=l.useContext(i);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),l.createElement(i.Provider,{value:n},e.children)}}}]);