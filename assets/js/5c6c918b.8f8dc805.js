"use strict";(self.webpackChunkeasifem_docs=self.webpackChunkeasifem_docs||[]).push([[60530],{41709:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>a,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"Mesh/Mesh_","title":"Structure","description":"Mesh datatype is simply a collection of mesh elements. It is a child of AbstractMesh.","source":"@site/docs/docs-api/Mesh/Mesh_.md","sourceDirName":"Mesh","slug":"/Mesh/Mesh_","permalink":"/docs-api/Mesh/Mesh_","draft":false,"unlisted":false,"editUrl":"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/Mesh/Mesh_.md","tags":[],"version":"current","lastUpdatedAt":1746865277000,"sidebarPosition":2,"frontMatter":{"title":"Structure","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Mesh","permalink":"/docs-api/Mesh/"},"next":{"title":"Initiate","permalink":"/docs-api/Mesh/Initiate"}}');var o=s(23420),i=s(54213);const a={title:"Structure",sidebar_position:2},r=void 0,c={},l=[];function h(e){const t={a:"a",admonition:"admonition",code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:["Mesh datatype is simply a collection of mesh elements. It is a child of ",(0,o.jsx)(t.a,{href:"/docs-api/AbstractMesh/AbstractMesh_",children:"AbstractMesh_"}),"."]}),"\n",(0,o.jsx)(t.admonition,{title:"Deprecated",type:"warning",children:(0,o.jsx)(t.p,{children:"The support for Mesh has stopped. In future version, the Mesh and FEMesh will be merged. So please use FEMesh instead."})}),"\n",(0,o.jsx)(t.admonition,{title:"Mesh vs FEMesh",type:"info",children:(0,o.jsx)(t.p,{children:"Mesh is a collection of homogeneous elements. All elements in a mesh should be of same type (i.e., triangle, quadrangle, tetrahedron, etc.). For example, we can define a mesh of triangle element or a mesh of tetrahedron element. In contrast, FEMesh is a collection of elements of same dimension. In FEMesh, all elements are either 1D, 2D or 3D. Therefore, FEMesh can contain some elements as triangle and some elements as quadrilateral."})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-fortran",children:"TYPE, EXTENDS(AbstractMesh_) :: Mesh_\n  PRIVATE\n  INTEGER(I4B) :: elemType = 0\n    !! type of element present inside the mesh\n\n  TYPE(ReferenceElement_), ALLOCATABLE :: facetElements(:)\n    !! Facet Elements in the reference element\n\n  CLASS(ReferenceElement_), POINTER :: refelem => NULL()\n    !! Reference element of the mesh (spatial)\n    !! TODO: Change refelem to Type(ReferenceElement_)\nEND TYPE Mesh_\n"})})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},54213:(e,t,s)=>{s.d(t,{R:()=>a,x:()=>r});var n=s(36672);const o={},i=n.createContext(o);function a(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);