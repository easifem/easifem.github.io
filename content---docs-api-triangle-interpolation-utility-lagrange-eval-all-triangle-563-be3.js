"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkeasifem_docs"] = globalThis["webpackChunkeasifem_docs"] || []).push([["content---docs-api-triangle-interpolation-utility-lagrange-eval-all-triangle-563-be3"],{

/***/ "./docs/docs-api/TriangleInterpolationUtility/LagrangeEvalAll_Triangle.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  assets: () => (/* binding */ assets),\n  contentTitle: () => (/* binding */ LagrangeEvalAll_Triangle_contentTitle),\n  \"default\": () => (/* binding */ LagrangeEvalAll_Triangle_MDXContent),\n  frontMatter: () => (/* binding */ LagrangeEvalAll_Triangle_frontMatter),\n  metadata: () => (/* reexport */ site_docs_docs_api_triangle_interpolation_utility_lagrange_eval_all_triangle_md_563_namespaceObject),\n  toc: () => (/* binding */ LagrangeEvalAll_Triangle_toc)\n});\n\n;// ./.docusaurus/docusaurus-plugin-content-docs/docs-api/site-docs-docs-api-triangle-interpolation-utility-lagrange-eval-all-triangle-md-563.json\nconst site_docs_docs_api_triangle_interpolation_utility_lagrange_eval_all_triangle_md_563_namespaceObject = /*#__PURE__*/JSON.parse('{\"id\":\"TriangleInterpolationUtility/LagrangeEvalAll_Triangle\",\"title\":\"LagrangeEvalAll\",\"description\":\"Evaluate Lagrange polynomials on triangle.\",\"source\":\"@site/docs/docs-api/TriangleInterpolationUtility/LagrangeEvalAll_Triangle.md\",\"sourceDirName\":\"TriangleInterpolationUtility\",\"slug\":\"/TriangleInterpolationUtility/LagrangeEvalAll_Triangle\",\"permalink\":\"/docs-api/TriangleInterpolationUtility/LagrangeEvalAll_Triangle\",\"draft\":false,\"unlisted\":false,\"editUrl\":\"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/TriangleInterpolationUtility/LagrangeEvalAll_Triangle.md\",\"tags\":[],\"version\":\"current\",\"lastUpdatedAt\":1539502055000,\"frontMatter\":{},\"sidebar\":\"tutorialSidebar\",\"previous\":{\"title\":\"LagrangeDOF\",\"permalink\":\"/docs-api/TriangleInterpolationUtility/LagrangeDOF_Triangle\"},\"next\":{\"title\":\"LagrangeInDOF\",\"permalink\":\"/docs-api/TriangleInterpolationUtility/LagrangeInDOF_Triangle\"}}');\n// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n// EXTERNAL MODULE: ./node_modules/@mdx-js/react/lib/index.js\nvar lib = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js + 2 modules\nvar Tabs = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js + 1 modules\nvar TabItem = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js\");\n;// ./docs/docs-api/TriangleInterpolationUtility/_LagrangeEvalAll_Triangle_test_1.md\n\n\nconst frontMatter = {};\nconst contentTitle = undefined;\n\n\n\n\n\nconst toc = [];\nfunction _createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsx)(_components.pre, {\n    children: (0,jsx_runtime.jsx)(_components.code, {\n      className: \"language-fortran\",\n      children: \"program main\\n  use easifembase\\n  implicit none\\n  real(dfp), allocatable :: xij(:,:), avec(:)\\n  integer(i4b) :: ii, jj, cnt, n\\n  real(dfp), allocatable :: ans(:), coeff(:,:)\\n  integer(i4b) :: order, basisType\\n\\n\\n  order = 4\\n  basisType = Monomial\\n  xij = InterpolationPoint_Triangle( &\\n    & order=order, &\\n    & ipType=Equidistance, &\\n    & xij=RefTriangleCoord(\\\"UNIT\\\"), &\\n    & layout=\\\"VEFC\\\")\\n\\n  call reallocate(coeff, size(xij, 2), size(xij,2))\\n\\n  ans = LagrangeEvalAll_Triangle(&\\n    & order=order, &\\n    & x=[0.0_DFP, 0.0_DFP], &\\n    & xij=xij, &\\n    & refTriangle=\\\"UNIT\\\", &\\n    & basisType=basisType, &\\n    & coeff=coeff)\\n\\n  call display(ans, \\\"ans = \\\")\\nend program main\\n\"\n    })\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/TriangleInterpolationUtility/_LagrangeEvalAll_Triangle_test_2.md\n\n\nconst _LagrangeEvalAll_Triangle_test_2_frontMatter = {};\nconst _LagrangeEvalAll_Triangle_test_2_contentTitle = undefined;\n\n\n\n\n\nconst _LagrangeEvalAll_Triangle_test_2_toc = [];\nfunction _LagrangeEvalAll_Triangle_test_2_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsx)(_components.pre, {\n    children: (0,jsx_runtime.jsx)(_components.code, {\n      className: \"language-fortran\",\n      children: \"program main\\n  use easifembase\\n  implicit none\\n  real(dfp), allocatable :: xij(:,:), avec(:)\\n  integer(i4b) :: ii, jj, cnt, n\\n  real(dfp), allocatable :: ans(:), coeff(:,:)\\n  integer(i4b) :: order, basisType\\n\\n\\n  order = 4\\n  basisType = Jacobi\\n  xij = InterpolationPoint_Triangle( &\\n    & order=order, &\\n    & ipType=Equidistance, &\\n    & xij=RefTriangleCoord(\\\"UNIT\\\"), &\\n    & layout=\\\"VEFC\\\")\\n\\n  call reallocate(coeff, size(xij, 2), size(xij,2))\\n\\n  ans = LagrangeEvalAll_Triangle(&\\n    & order=order, &\\n    & x=[0.0_DFP, 0.0_DFP], &\\n    & xij=xij, &\\n    & refTriangle=\\\"UNIT\\\", &\\n    & basisType=basisType, &\\n    & coeff=coeff)\\n\\n  call display(ans, \\\"ans = \\\")\\nend program main\\n\"\n    })\n  });\n}\nfunction _LagrangeEvalAll_Triangle_test_2_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_LagrangeEvalAll_Triangle_test_2_createMdxContent, {\n      ...props\n    })\n  }) : _LagrangeEvalAll_Triangle_test_2_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/TriangleInterpolationUtility/_LagrangeEvalAll_Triangle_test_3.md\n\n\nconst _LagrangeEvalAll_Triangle_test_3_frontMatter = {};\nconst _LagrangeEvalAll_Triangle_test_3_contentTitle = undefined;\n\n\n\n\n\nconst _LagrangeEvalAll_Triangle_test_3_toc = [];\nfunction _LagrangeEvalAll_Triangle_test_3_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsx)(_components.pre, {\n    children: (0,jsx_runtime.jsx)(_components.code, {\n      className: \"language-fortran\",\n      children: \"program main\\n  use easifembase\\n  implicit none\\n  real(dfp), allocatable :: xij(:,:), avec(:)\\n  integer(i4b) :: ii, jj, cnt, n\\n  real(dfp), allocatable :: ans(:), coeff(:,:)\\n  integer(i4b) :: order, basisType\\n\\n\\n  order = 1\\n  basisType = Heirarchical\\n  xij = InterpolationPoint_Triangle( &\\n    & order=order, &\\n    & ipType=Equidistance, &\\n    & xij=RefTriangleCoord(\\\"UNIT\\\"), &\\n    & layout=\\\"VEFC\\\")\\n\\n  call reallocate(coeff, size(xij, 2), size(xij,2))\\n\\n  ans = LagrangeEvalAll_Triangle(&\\n    & order=order, &\\n    & x=[0.0_DFP, 0.0_DFP], &\\n    & xij=xij, &\\n    & refTriangle=\\\"UNIT\\\", &\\n    & basisType=basisType, &\\n    & coeff=coeff)\\n\\n  call display(ans, \\\"ans = \\\")\\nend program main\\n\"\n    })\n  });\n}\nfunction _LagrangeEvalAll_Triangle_test_3_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_LagrangeEvalAll_Triangle_test_3_createMdxContent, {\n      ...props\n    })\n  }) : _LagrangeEvalAll_Triangle_test_3_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/TriangleInterpolationUtility/_LagrangeEvalAll_Triangle_test_4.md\n\n\nconst _LagrangeEvalAll_Triangle_test_4_frontMatter = {};\nconst _LagrangeEvalAll_Triangle_test_4_contentTitle = undefined;\n\n\n\n\n\nconst _LagrangeEvalAll_Triangle_test_4_toc = [];\nfunction _LagrangeEvalAll_Triangle_test_4_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsx)(_components.pre, {\n    children: (0,jsx_runtime.jsx)(_components.code, {\n      className: \"language-fortran\",\n      children: \"program main\\n  use easifembase\\n  implicit none\\n  real(dfp), allocatable :: xij(:,:), avec(:)\\n  integer(i4b) :: ii, jj, cnt, n\\n  real(dfp), allocatable :: ans(:, :), coeff(:,:)\\n  integer(i4b) :: order, basisType\\n\\n\\n  order = 4\\n  basisType = Monomial\\n  xij = InterpolationPoint_Triangle( &\\n    & order=order, &\\n    & ipType=Equidistance, &\\n    & xij=RefTriangleCoord(\\\"UNIT\\\"), &\\n    & layout=\\\"VEFC\\\")\\n\\n  call reallocate(coeff, size(xij, 2), size(xij,2))\\n\\n  ans = LagrangeEvalAll_Triangle(&\\n    & order=order, &\\n    & x=xij, &\\n    & xij=xij, &\\n    & refTriangle=\\\"UNIT\\\", &\\n    & basisType=basisType, &\\n    & coeff=coeff)\\n\\n  call display(ans, \\\"ans = \\\")\\nend program main\\n\"\n    })\n  });\n}\nfunction _LagrangeEvalAll_Triangle_test_4_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_LagrangeEvalAll_Triangle_test_4_createMdxContent, {\n      ...props\n    })\n  }) : _LagrangeEvalAll_Triangle_test_4_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/TriangleInterpolationUtility/_LagrangeEvalAll_Triangle_test_5.md\n\n\nconst _LagrangeEvalAll_Triangle_test_5_frontMatter = {};\nconst _LagrangeEvalAll_Triangle_test_5_contentTitle = undefined;\n\n\n\n\n\nconst _LagrangeEvalAll_Triangle_test_5_toc = [];\nfunction _LagrangeEvalAll_Triangle_test_5_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsx)(_components.pre, {\n    children: (0,jsx_runtime.jsx)(_components.code, {\n      className: \"language-fortran\",\n      children: \"program main\\n  use easifembase\\n  implicit none\\n  real(dfp), allocatable :: xij(:,:), avec(:)\\n  integer(i4b) :: ii, jj, cnt, n\\n  real(dfp), allocatable :: ans(:, :), coeff(:,:)\\n  integer(i4b) :: order, basisType\\n\\n\\n  order = 4\\n  basisType = Jacobi\\n  xij = InterpolationPoint_Triangle( &\\n    & order=order, &\\n    & ipType=Equidistance, &\\n    & xij=RefTriangleCoord(\\\"UNIT\\\"), &\\n    & layout=\\\"VEFC\\\")\\n\\n  call reallocate(coeff, size(xij, 2), size(xij,2))\\n\\n  ans = LagrangeEvalAll_Triangle(&\\n    & order=order, &\\n    & x=xij, &\\n    & xij=xij, &\\n    & refTriangle=\\\"UNIT\\\", &\\n    & basisType=basisType, &\\n    & coeff=coeff)\\n\\n  call display(ans, \\\"ans = \\\")\\nend program main\\n\"\n    })\n  });\n}\nfunction _LagrangeEvalAll_Triangle_test_5_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_LagrangeEvalAll_Triangle_test_5_createMdxContent, {\n      ...props\n    })\n  }) : _LagrangeEvalAll_Triangle_test_5_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/TriangleInterpolationUtility/_LagrangeEvalAll_Triangle_test_6.md\n\n\nconst _LagrangeEvalAll_Triangle_test_6_frontMatter = {};\nconst _LagrangeEvalAll_Triangle_test_6_contentTitle = undefined;\n\n\n\n\n\nconst _LagrangeEvalAll_Triangle_test_6_toc = [];\nfunction _LagrangeEvalAll_Triangle_test_6_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsx)(_components.pre, {\n    children: (0,jsx_runtime.jsx)(_components.code, {\n      className: \"language-fortran\",\n      children: \"program main\\n  use easifembase\\n  implicit none\\n  real(dfp), allocatable :: xij(:,:), avec(:)\\n  integer(i4b) :: ii, jj, cnt, n\\n  real(dfp), allocatable :: ans(:, :), coeff(:,:)\\n  integer(i4b) :: order, basisType\\n\\n\\n  order = 4\\n  basisType = Heirarchical\\n  xij = InterpolationPoint_Triangle( &\\n    & order=order, &\\n    & ipType=Equidistance, &\\n    & xij=RefTriangleCoord(\\\"UNIT\\\"), &\\n    & layout=\\\"VEFC\\\")\\n\\n  call reallocate(coeff, size(xij, 2), size(xij,2))\\n\\n  ans = LagrangeEvalAll_Triangle(&\\n    & order=order, &\\n    & x=xij, &\\n    & xij=xij, &\\n    & refTriangle=\\\"UNIT\\\", &\\n    & basisType=basisType, &\\n    & coeff=coeff)\\n\\n  call display(ans, \\\"ans = \\\")\\nend program main\\n\"\n    })\n  });\n}\nfunction _LagrangeEvalAll_Triangle_test_6_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_LagrangeEvalAll_Triangle_test_6_createMdxContent, {\n      ...props\n    })\n  }) : _LagrangeEvalAll_Triangle_test_6_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/TriangleInterpolationUtility/LagrangeEvalAll_Triangle.md\n\n\nconst LagrangeEvalAll_Triangle_frontMatter = {};\nconst LagrangeEvalAll_Triangle_contentTitle = 'LagrangeEvalAll';\n\nconst assets = {\n\n};\n\n\n\n\n\n\n\n\n\n\n\nconst LagrangeEvalAll_Triangle_toc = [{\n  \"value\": \"Interface 1\",\n  \"id\": \"interface-1\",\n  \"level\": 2\n}, ...toc, ..._LagrangeEvalAll_Triangle_test_2_toc, ..._LagrangeEvalAll_Triangle_test_3_toc, {\n  \"value\": \"Interface 2\",\n  \"id\": \"interface-2\",\n  \"level\": 2\n}, ..._LagrangeEvalAll_Triangle_test_4_toc, ..._LagrangeEvalAll_Triangle_test_5_toc, ..._LagrangeEvalAll_Triangle_test_6_toc];\nfunction LagrangeEvalAll_Triangle_createMdxContent(props) {\n  const _components = {\n    admonition: \"admonition\",\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    header: \"header\",\n    li: \"li\",\n    mdxAdmonitionTitle: \"mdxAdmonitionTitle\",\n    p: \"p\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.header, {\n      children: (0,jsx_runtime.jsx)(_components.h1, {\n        id: \"lagrangeevalall\",\n        children: \"LagrangeEvalAll\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Evaluate Lagrange polynomials on triangle.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-1\",\n      children: \"Interface 1\"\n    }), \"\\n\", \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE LagrangeEvalAll_Triangle\\n  MODULE FUNCTION LagrangeEvalAll_Triangle1(order, x, xij, refTriangle, &\\n    & coeff, firstCall, basisType) RESULT(ans)\\n    INTEGER(I4B), INTENT(IN) :: order\\n    !! order of Lagrange polynomials\\n    REAL(DFP), INTENT(IN) :: x(2)\\n    !! point of evaluation\\n    !! x(1) is x coord\\n    !! x(2) is y coord\\n    REAL(DFP), INTENT(INOUT) :: xij(:, :)\\n    !!\\n    CHARACTER(*), INTENT(IN) :: refTriangle\\n    !! interpolation points\\n    REAL(DFP), OPTIONAL, INTENT(INOUT) :: coeff(SIZE(xij, 2), SIZE(xij, 2))\\n    !! coefficient of Lagrange polynomials\\n    LOGICAL(LGT), OPTIONAL :: firstCall\\n    !! If firstCall is true, then coeff will be made\\n    !! If firstCall is False, then coeff will be used\\n    !! Default value of firstCall is True\\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: basisType\\n    !! Monomials *Default\\n    !! Orthogonal, Jacobi, Legendre, Lobatto, Ultraspherical all are same\\n    !! Heirarchical\\n    REAL(DFP) :: ans(SIZE(xij, 2))\\n    !! Value of n+1 Lagrange polynomials at point x\\n  END FUNCTION LagrangeEvalAll_Triangle1\\nEND INTERFACE LagrangeEvalAll_Triangle\\n\"\n          })\n        }), (0,jsx_runtime.jsx)(_components.admonition, {\n          type: \"note\",\n          children: (0,jsx_runtime.jsx)(_components.mdxAdmonitionTitle, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"xij\"\n            })\n          })\n        }), (0,jsx_runtime.jsxs)(_components.p, {\n          children: [(0,jsx_runtime.jsx)(_components.code, {\n            children: \"xij\"\n          }), \" is the interpolation points for Lagrange polynomials. \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"xij\"\n          }), \" is used for constructing the \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"coeff\"\n          }), \".\"]\n        }), (0,jsx_runtime.jsx)(_components.admonition, {\n          type: \"note\",\n          children: (0,jsx_runtime.jsx)(_components.mdxAdmonitionTitle, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"basisType\"\n            })\n          })\n        }), (0,jsx_runtime.jsx)(_components.p, {\n          children: \"Type of basis functions used for constructing the Lagrange polynomial. Following values are allowed:\"\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"Monomials\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"Orthogonal, Jacobi, Legendre, Ultraspherical, are all the same.\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"Hierarchical\"\n          }), \"\\n\"]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"equidistance\",\n        label: \"️܀ Equidistance\",\n        children: (0,jsx_runtime.jsx)(MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"jacobi\",\n        label: \"Jacobi\",\n        children: (0,jsx_runtime.jsx)(_LagrangeEvalAll_Triangle_test_2_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"heirarchical\",\n        label: \"Heirarchical\",\n        children: (0,jsx_runtime.jsx)(_LagrangeEvalAll_Triangle_test_3_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-2\",\n      children: \"Interface 2\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE LagrangeEvalAll_Triangle\\n  MODULE FUNCTION LagrangeEvalAll_Triangle2(order, x, xij, refTriangle, &\\n    & coeff, firstCall, basisType) RESULT(ans)\\n    INTEGER(I4B), INTENT(IN) :: order\\n    !! Order of Lagrange polynomials\\n    REAL(DFP), INTENT(IN) :: x(:, :)\\n    !! Point of evaluation\\n    !! x(1, :) is x coord\\n    !! x(2, :) is y coord\\n    REAL(DFP), INTENT(INOUT) :: xij(:, :)\\n    !! Interpolation points\\n    CHARACTER(*), INTENT(IN) :: refTriangle\\n    !! Reference triangle\\n    !! Biunit\\n    !! Unit\\n    REAL(DFP), OPTIONAL, INTENT(INOUT) :: coeff(SIZE(xij, 2), SIZE(xij, 2))\\n    !! Coefficient of Lagrange polynomials\\n    LOGICAL(LGT), OPTIONAL :: firstCall\\n    !! If firstCall is true, then coeff will be made\\n    !! If firstCall is False, then coeff will be used\\n    !! Default value of firstCall is True\\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: basisType\\n    !! Monomials *Default\\n    !! Jacobi=Dubiner\\n    !! Heirarchical\\n    REAL(DFP) :: ans(SIZE(x, 2), SIZE(xij, 2))\\n    !! Value of n+1 Lagrange polynomials at point x\\n  END FUNCTION LagrangeEvalAll_Triangle2\\nEND INTERFACE LagrangeEvalAll_Triangle\\n\"\n          })\n        })\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"equidistance\",\n        label: \"️܀ Equidistance\",\n        children: (0,jsx_runtime.jsx)(_LagrangeEvalAll_Triangle_test_4_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"jacobi\",\n        label: \"Jacobi\",\n        children: (0,jsx_runtime.jsx)(_LagrangeEvalAll_Triangle_test_5_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"heirarchical\",\n        label: \"Heirarchical\",\n        children: (0,jsx_runtime.jsx)(_LagrangeEvalAll_Triangle_test_6_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    })]\n  });\n}\nfunction LagrangeEvalAll_Triangle_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(LagrangeEvalAll_Triangle_createMdxContent, {\n      ...props\n    })\n  }) : LagrangeEvalAll_Triangle_createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./docs/docs-api/TriangleInterpolationUtility/LagrangeEvalAll_Triangle.md\n");

/***/ })

}]);