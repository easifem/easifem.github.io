"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkeasifem_docs"] = globalThis["webpackChunkeasifem_docs"] || []).push([["content---docs-api-steady-stokes-111-assembleea-1-25f"],{

/***/ "./docs/docs-api/SteadyStokes111/Assemble.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  assets: () => (/* binding */ assets),\n  contentTitle: () => (/* binding */ Assemble_contentTitle),\n  \"default\": () => (/* binding */ Assemble_MDXContent),\n  frontMatter: () => (/* binding */ Assemble_frontMatter),\n  metadata: () => (/* reexport */ site_docs_docs_api_steady_stokes_111_assemble_md_ea1_namespaceObject),\n  toc: () => (/* binding */ Assemble_toc)\n});\n\n;// ./.docusaurus/docusaurus-plugin-content-docs/docs-api/site-docs-docs-api-steady-stokes-111-assemble-md-ea1.json\nconst site_docs_docs_api_steady_stokes_111_assemble_md_ea1_namespaceObject = /*#__PURE__*/JSON.parse('{\"id\":\"SteadyStokes111/Assemble\",\"title\":\"Assemble\",\"description\":\"This procedure pointer assembles the problem\",\"source\":\"@site/docs/docs-api/SteadyStokes111/Assemble.md\",\"sourceDirName\":\"SteadyStokes111\",\"slug\":\"/SteadyStokes111/Assemble\",\"permalink\":\"/docs-api/SteadyStokes111/Assemble\",\"draft\":false,\"unlisted\":false,\"editUrl\":\"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/SteadyStokes111/Assemble.md\",\"tags\":[],\"version\":\"current\",\"lastUpdatedAt\":1539502055000,\"frontMatter\":{},\"sidebar\":\"tutorialSidebar\",\"previous\":{\"title\":\"ApplyDirichletBC\",\"permalink\":\"/docs-api/SteadyStokes111/ApplyDirichletBC\"},\"next\":{\"title\":\"AssembleRHS\",\"permalink\":\"/docs-api/SteadyStokes111/AssembleRHS\"}}');\n// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n// EXTERNAL MODULE: ./node_modules/@mdx-js/react/lib/index.js\nvar lib = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js + 2 modules\nvar Tabs = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js + 1 modules\nvar TabItem = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js\");\n;// ./docs/docs-api/SteadyStokes111/_Assemble_test_1.md\n\n\nconst frontMatter = {};\nconst contentTitle = undefined;\n\n\n\n\n\nconst toc = [];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"This example tests and demonstrates the usage of \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"Assemble()\"\n      }), \" method.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n  USE easifemBase\\n  USE easifemClasses\\n  USE easifemMaterials\\n  USE easifemKernels\\n  USE SteadyStokes111_Class\\n  IMPLICIT NONE\\n  TYPE( SteadyStokes111_ ) :: obj\\n  TYPE( ParameterList_ ) :: param\\n  TYPE( HDF5File_ ) :: domainFile\\n  TYPE( Domain_ ) :: dom\\n  INTEGER( I4B ), PARAMETER :: refPressureNode=2\\n  REAL( DFP ), PARAMETER :: refPressure = 0.0_DFP\\n  INTEGER( I4B ), PARAMETER :: tDirichletBCForVelocity = 2\\n  INTEGER( I4B ), PARAMETER :: tDirichletBCForPressure = 0\\n  INTEGER( I4B ), PARAMETER :: tFluidMaterials= 1\\n  INTEGER( I4B ), PARAMETER :: stabParamOption= 1\\n  LOGICAL( LGT ), PARAMETER :: isSubscalePressure = .FALSE.\\n  LOGICAL( LGT ), PARAMETER :: isBoundarySubscale = .FALSE.\\n  REAL( DFP ), PARAMETER :: gravity(3)=[0.0, -9.8, 0.0]\\n  LOGICAL( LGT ), PARAMETER :: isConservativeForm = .TRUE.\\n  CHARACTER( * ), PARAMETER :: engine=\\\"NATIVE_SERIAL\\\"\\n  CHARACTER( * ), PARAMETER :: domainFileName=\\\"./long_pipe_tri3.h5\\\"\\n  INTEGER( I4B ), PARAMETER :: CoordinateSystem = KERNEL_CARTESIAN\\n  INTEGER( I4B ), PARAMETER :: maxIter = 100\\n  REAL( DFP ), PARAMETER :: rtoleranceForPressure = 1.0E-6\\n  REAL( DFP ), PARAMETER :: rtoleranceForVelocity = 1.0E-6\\n  REAL( DFP ), PARAMETER :: atoleranceForPressure = 1.0E-6\\n  REAL( DFP ), PARAMETER :: atoleranceForVelocity = 1.0E-6\\n  REAL( DFP ), PARAMETER :: toleranceForSteadyState = 1.0E-6\\n  CHARACTER(*), PARAMETER :: baseInterpolationForSpace=\\\"LagrangeInterpolation\\\"\\n  CHARACTER(*), PARAMETER :: baseContinuityForSpace=\\\"H1\\\"\\n  CHARACTER(*), PARAMETER :: quadratureTypeForSpace=\\\"GaussLegendre\\\"\\n  INTEGER(I4B), PARAMETER :: ls_solverName = LIS_GMRES\\n  INTEGER(I4B), PARAMETER :: ls_preconditionOption= LEFT_PRECONDITION\\n  INTEGER(I4B), PARAMETER :: ls_convergenceIn = convergenceInRes\\n  INTEGER(I4B), PARAMETER :: ls_convergenceType = relativeConvergence\\n  INTEGER( I4B ), PARAMETER :: ls_maxIter = 100\\n  LOGICAL( LGT ), PARAMETER :: ls_relativeToRHS = .TRUE.\\n  INTEGER( I4B ), PARAMETER :: ls_KrylovSubspaceSize=20\\n  REAL( DFP ) , PARAMETER :: ls_rtol=1.0E-10\\n  REAL( DFP ) , PARAMETER :: ls_atol=1.0E-10\\n  TYPE( MeshSelection_ ) :: region\\n  INTEGER( I4B ), PARAMETER :: fluid_meshID(1) = [1]\\n  REAL( DFP ), PARAMETER :: fluid_massDensity=1000.0\\n  REAL( DFP ), PARAMETER :: fluid_dynamicViscosity=0.001_DFP\\n  CHARACTER( LEN = * ), PARAMETER :: fluid_stressStrainModel=\\\"NewtonianFluidModel\\\"\\n  CLASS( DirichletBC_ ), POINTER :: dbc => NULL()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Set parameters for kernel.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL FPL_INIT(); CALL param%Initiate()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Set parameters for the kernel.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL SetSteadyStokes111Param( &\\n  & param=param, &\\n  & isConservativeForm=isConservativeForm, &\\n  & gravity = gravity, &\\n  & isSubscalePressure = isSubscalePressure, &\\n  & isBoundarySubscale = isBoundarySubscale, &\\n  & stabParamOption = stabParamOption, &\\n  & domainFile = domainFileName, &\\n  & engine=engine, &\\n  & CoordinateSystem=KERNEL_CARTESIAN, &\\n  & maxIter =maxIter, &\\n  & rtoleranceForPressure = rtoleranceForPressure, &\\n  & rtoleranceForVelocity = rtoleranceForVelocity, &\\n  & atoleranceForPressure = atoleranceForPressure, &\\n  & atoleranceForVelocity = atoleranceForVelocity, &\\n  & toleranceForSteadyState = toleranceForSteadyState, &\\n  & tFluidMaterials=tFluidMaterials, &\\n  & tDirichletBCForPressure=tDirichletBCForPressure, &\\n  & tDirichletBCForVelocity=tDirichletBCForVelocity, &\\n  & baseInterpolationForSpace=baseInterpolationForSpace, &\\n  & baseContinuityForSpace=baseContinuityForSpace, &\\n  & quadratureTypeForSpace=quadratureTypeForSpace, &\\n  & refPressureNode=refPressureNode, &\\n  & refPressure=refPressure &\\n  & )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Setting parameters for linear solver.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL SetLinSolverParam( &\\n  & param=param, &\\n  & solverName=ls_solverName,&\\n  & preconditionOption=ls_preconditionOption, &\\n  & convergenceIn=ls_convergenceIn, &\\n  & convergenceType=ls_convergenceType, &\\n  & maxIter=ls_maxIter, &\\n  & relativeToRHS=ls_relativeToRHS, &\\n  & KrylovSubspaceSize=ls_KrylovSubspaceSize, &\\n  & rtol=ls_rtol, &\\n  & atol=ls_atol )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Initiate domain by reading data from a domain file.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL domainFile%Initiate( filename=domainFileName, MODE=\\\"READ\\\" )\\nCALL domainFile%Open()\\nCALL dom%Initiate( domainFile, \\\"\\\" )\\nCALL domainFile%Deallocate()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Initiate the kernel.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL obj%Initiate(param=param, dom=dom )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"Add fluid material to kernel. To do so, we first create an instance of \", (0,jsx_runtime.jsx)(_components.a, {\n        href: \"/docs-api/MeshSelection/MeshSelection_\",\n        children: \"MeshSelection\"\n      }), \". Then, we add this instance to the kernel.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL region%Initiate( isSelectionByMeshID=.TRUE. )\\nCALL region%Add( dim=dom%GetNSD(), meshID=fluid_meshID )\\nCALL SetFluidMaterialParam( &\\n  & param=param, &\\n  & name=\\\"fluidMaterial\\\", &\\n  & massDensity=fluid_massDensity, &\\n  & dynamicViscosity = fluid_dynamicViscosity, &\\n  & stressStrainModel=fluid_stressStrainModel )\\nCALL SetNewtonianFluidModelParam( &\\n  & param = param, &\\n  & dynamicViscosity = fluid_dynamicViscosity )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL obj%AddFluidMaterial( &\\n  & materialNo=1, &\\n  & materialName=\\\"fluidMaterial\\\", &\\n  & param=param, &\\n  & region=region)\\nCALL region%Deallocate()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"Now we show how to add dirichlet boundary condition. To this end first we create an instance of \", (0,jsx_runtime.jsx)(_components.a, {\n        href: \"/docs-api/MeshSelection/MeshSelection_\",\n        children: \"MeshSelection\"\n      }), \" to select the region of the mesh. Then we define the dirichlet bonundary condition, and pass these two information to kernel.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"set parameters for dirichlet boundary condition:\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"#define BOTTOM 1\\n#define RIGHT 2\\n#define TOP 3\\n#define LEFT 4\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL SetDirichletBCParam( &\\n  & param=param, &\\n  & name=\\\"V2=0\\\", &\\n  & idof=2, &\\n  & nodalValueType=Constant, &\\n  & useFunction=.FALSE. )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"select the mesh region:\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL region%Initiate( isSelectionByMeshID=.TRUE. )\\nCALL region%Add( dim=obj%nsd-1, meshID=[BOTTOM, TOP, LEFT] )\\nCALL region%Set()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Add dirichlet boundary condition and the region to kernel:\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL obj%AddVelocityDirichletBC( &\\n  & dbcNo=1, &\\n  & param=param, &\\n  & boundary=region )\\ndbc => obj%GetVelocityDirichletBCPointer( dbcNo=1 )\\nCALL dbc%Set( ConstantNodalValue=0.0_DFP )\\ndbc=>NULL()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"AddDirichletBC, V1=U,\\nset parameters for dirichlet boundary condition:\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL SetDirichletBCParam( &\\n  & param=param, &\\n  & name=\\\"UpstreamV1\\\", &\\n  & idof=1, &\\n  & nodalValueType=Constant, &\\n  & useFunction=.FALSE. )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"select the mesh region:\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL region%Deallocate()\\nCALL region%Initiate( isSelectionByMeshID=.TRUE. )\\nCALL region%Add( dim=obj%nsd-1, meshID=[LEFT] )\\nCALL region%Set()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Add dirichlet boundary condition and the region to kernel:\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL obj%AddVelocityDirichletBC( &\\n  & dbcNo=2, &\\n  & param=param, &\\n  & boundary=region )\\ndbc => obj%GetVelocityDirichletBCPointer( dbcNo=2 )\\nCALL dbc%Set( ConstantNodalValue=0.01_DFP )\\ndbc=>NULL()\\nCALL region%Deallocate()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"AddDirichletBC, P=0\\nset parameters for dirichlet boundary condition:\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-comment\",\n        children: \"  CALL SetDirichletBCParam( &\\n    & param=param, &\\n    & name=\\\"ZeroP\\\", &\\n    & idof=1, &\\n    & nodalValueType=Constant, &\\n    & useFunction=.FALSE. )\\n\\n  CALL region%Deallocate()\\n  CALL region%Initiate( isSelectionByMeshID=.TRUE. )\\n  CALL region%Add( dim=1, meshID=[3] )\\n  CALL region%Set()\\n\\n  CALL obj%AddPressureDirichletBC( dbcNo=1, param=param, &\\n    & boundary=region )\\n  dbc => obj%GetPressureDirichletBCPointer( dbcNo=1 )\\n  CALL dbc%Set( ConstantNodalValue=0.0_DFP ); dbc=>NULL()\\n  CALL region%Deallocate()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL obj%Set()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Now we compute the stablizing parameters of finite element method.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL obj%ComputeStabParam()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Assemble tangent matrix.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL obj%AssembleTanmat()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"AssembleRHS\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL obj%AssembleRHS()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Assemble\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL obj%Assemble()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Display the kernel.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL obj%Display(\\\"\\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"!!! settings \\\"Cleanup\\\"\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"  CALL obj%Deallocate()\\n  CALL dom%Deallocate()\\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\\nEND PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/SteadyStokes111/Assemble.md\n\n\nconst Assemble_frontMatter = {};\nconst Assemble_contentTitle = 'Assemble';\n\nconst assets = {\n\n};\n\n\n\n\n\n\nconst Assemble_toc = [{\n  \"value\": \"Interface\",\n  \"id\": \"interface\",\n  \"level\": 2\n}, ...toc];\nfunction Assemble_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    header: \"header\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.header, {\n      children: (0,jsx_runtime.jsx)(_components.h1, {\n        id: \"assemble\",\n        children: \"Assemble\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This procedure pointer assembles the problem\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface\",\n      children: \"Interface\"\n    }), \"\\n\", \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE SUBROUTINE Assemble(obj)\\n    CLASS(SteadyStokes111_), INTENT(INOUT) :: obj\\n  END SUBROUTINE Assemble\\nEND INTERFACE\\n\"\n          })\n        })\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    })]\n  });\n}\nfunction Assemble_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(Assemble_createMdxContent, {\n      ...props\n    })\n  }) : Assemble_createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./docs/docs-api/SteadyStokes111/Assemble.md\n");

/***/ })

}]);