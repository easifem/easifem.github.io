"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkeasifem_docs"] = globalThis["webpackChunkeasifem_docs"] || []).push([["content---docs-api-csr-matrix-set-988-052"],{

/***/ "./docs/docs-api/CSRMatrix/Set.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  assets: () => (/* binding */ assets),\n  contentTitle: () => (/* binding */ contentTitle),\n  \"default\": () => (/* binding */ MDXContent),\n  frontMatter: () => (/* binding */ frontMatter),\n  metadata: () => (/* reexport */ site_docs_docs_api_csr_matrix_set_md_988_namespaceObject),\n  toc: () => (/* binding */ toc)\n});\n\n;// ./.docusaurus/docusaurus-plugin-content-docs/docs-api/site-docs-docs-api-csr-matrix-set-md-988.json\nconst site_docs_docs_api_csr_matrix_set_md_988_namespaceObject = /*#__PURE__*/JSON.parse('{\"id\":\"CSRMatrix/Set\",\"title\":\"Set\",\"description\":\"SET() method helps us in setting the values of CSRMatrix_.\",\"source\":\"@site/docs/docs-api/CSRMatrix/Set.md\",\"sourceDirName\":\"CSRMatrix\",\"slug\":\"/CSRMatrix/Set\",\"permalink\":\"/docs-api/CSRMatrix/Set\",\"draft\":false,\"unlisted\":false,\"editUrl\":\"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/CSRMatrix/Set.md\",\"tags\":[],\"version\":\"current\",\"lastUpdatedAt\":1539502055000,\"frontMatter\":{},\"sidebar\":\"tutorialSidebar\",\"previous\":{\"title\":\"SPY\",\"permalink\":\"/docs-api/CSRMatrix/SPY\"},\"next\":{\"title\":\"SetBlockColumn\",\"permalink\":\"/docs-api/CSRMatrix/SetBlockColumn\"}}');\n// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n// EXTERNAL MODULE: ./node_modules/@mdx-js/react/lib/index.js\nvar lib = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js + 2 modules\nvar Tabs = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js + 1 modules\nvar TabItem = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js\");\n;// ./docs/docs-api/CSRMatrix/Set.md\n\n\nconst frontMatter = {};\nconst contentTitle = 'Set';\n\nconst assets = {\n\n};\n\n\n\n\n\nconst toc = [{\n  \"value\": \"Interface 1\",\n  \"id\": \"interface-1\",\n  \"level\": 2\n}, {\n  \"value\": \"Interface 2\",\n  \"id\": \"interface-2\",\n  \"level\": 2\n}, {\n  \"value\": \"Interface 3\",\n  \"id\": \"interface-3\",\n  \"level\": 2\n}, {\n  \"value\": \"Interface 4\",\n  \"id\": \"interface-4\",\n  \"level\": 2\n}, {\n  \"value\": \"Interface 5\",\n  \"id\": \"interface-5\",\n  \"level\": 2\n}, {\n  \"value\": \"Interface 6\",\n  \"id\": \"interface-6\",\n  \"level\": 2\n}, {\n  \"value\": \"Interface 7\",\n  \"id\": \"interface-7\",\n  \"level\": 2\n}, {\n  \"value\": \"Interface 8\",\n  \"id\": \"interface-8\",\n  \"level\": 2\n}, {\n  \"value\": \"Interface 9\",\n  \"id\": \"interface-9\",\n  \"level\": 2\n}, {\n  \"value\": \"Interface 10\",\n  \"id\": \"interface-10\",\n  \"level\": 2\n}, {\n  \"value\": \"Interface 11\",\n  \"id\": \"interface-11\",\n  \"level\": 2\n}, {\n  \"value\": \"Interface 12\",\n  \"id\": \"interface-12\",\n  \"level\": 2\n}, {\n  \"value\": \"Interface 13\",\n  \"id\": \"interface-13\",\n  \"level\": 2\n}, {\n  \"value\": \"Interfac 14\",\n  \"id\": \"interfac-14\",\n  \"level\": 2\n}, {\n  \"value\": \"Interface 15\",\n  \"id\": \"interface-15\",\n  \"level\": 2\n}];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    admonition: \"admonition\",\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    header: \"header\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.header, {\n      children: (0,jsx_runtime.jsx)(_components.h1, {\n        id: \"set\",\n        children: \"Set\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [(0,jsx_runtime.jsx)(_components.code, {\n        children: \"SET()\"\n      }), \" method helps us in setting the values of \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"CSRMatrix_\"\n      }), \".\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.admonition, {\n      type: \"note\",\n      children: (0,jsx_runtime.jsxs)(_components.p, {\n        children: [\"You can only use \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"SET()\"\n        }), \" method after setting sparsity pattern in sparse matrix.\"]\n      })\n    }), \"\\n\", \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-1\",\n      children: \"Interface 1\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE PURE SUBROUTINE Set(obj, nodenum, value)\\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\\n    INTEGER(I4B), INTENT(IN) :: nodenum(:)\\n    REAL(DFP), INTENT(IN) :: value(:, :)\\n  END SUBROUTINE Set\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"This subroutine sets the value in \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"CSRMatrix_\"\n            })]\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"Shape( value ) = [SIZE(nodenum)*tdof, SIZE(nodenum)*tdof]\"\n            })\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"Usually \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"value\"\n            }), \" denotes the element matrix\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"Symbolic we are performing following task \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"obj(nodenum, nodenum)=value\"\n            })]\n          }), \"\\n\"]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\"\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-2\",\n      children: \"Interface 2\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE PURE SUBROUTINE Set(obj, nodenum, value, storageFMT)\\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\\n    INTEGER(I4B), INTENT(IN) :: nodenum(:)\\n    REAL(DFP), INTENT(IN) :: value(:, :)\\n    INTEGER(I4B), INTENT(IN) :: storageFMT\\n  END SUBROUTINE Set\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.p, {\n          children: [\"Symbolically we are performing following: \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"obj(Nptrs,Nptrs)=value(:,:)\"\n          })]\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"Usually \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"value(:,:)\"\n            }), \" represents the element finite element matrix\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"The shape of \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"value\"\n            }), \" should be the \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"tdof*size(nodenum), tdof*size(nodenum)\"\n            })]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"tdof\"\n            }), \" is the total degree of freedom in \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"obj%csr%dof\"\n            })]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"StorageFMT\"\n            }), \" denotes the storage format of \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"value\"\n            }), \". It can be \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"Nodes_FMT\"\n            }), \" or \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"DOF_FMT\"\n            })]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"Usually, element matrix is stored with \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"DOF_FMT\"\n            })]\n          }), \"\\n\"]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\"\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-3\",\n      children: \"Interface 3\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE PURE SUBROUTINE Set(obj, value)\\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\\n    REAL(DFP), INTENT(IN) :: value\\n  END SUBROUTINE Set\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"This routine sets all values of sparse matrix to given scalar value.\"\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"This routine is used to define an ASSIGNMENT operator. Therefore, we can call this routine by \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"obj=value\"\n            }), \".\"]\n          }), \"\\n\"]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\"\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-4\",\n      children: \"Interface 4\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE PURE SUBROUTINE Set(obj, irow, icolumn, value)\\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\\n    INTEGER(I4B), INTENT(IN) :: irow\\n    INTEGER(I4B), INTENT(IN) :: icolumn\\n    REAL(DFP), INTENT(IN) :: value\\n  END SUBROUTINE Set\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"This subroutine sets a single entry of sparse matrix.\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"If this routine is called then it is assumed that the user is aware of the storage pattern of degree of freedom.\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"However, if total number of degrees of freedom is one then there is no need to worry.\"\n          }), \"\\n\"]\n        }), (0,jsx_runtime.jsx)(_components.admonition, {\n          type: \"caution\",\n          children: (0,jsx_runtime.jsx)(_components.p, {\n            children: \"This routine should be avoided by general user.\"\n          })\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\"\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-5\",\n      children: \"Interface 5\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE PURE SUBROUTINE Set(obj, iNodeNum, jNodeNum, iDOF, &\\n    & jDOF, value)\\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\\n    INTEGER(I4B), INTENT(IN) :: iNodeNum\\n    !! row node number\\n    INTEGER(I4B), INTENT(IN) :: jNodeNum\\n    !! column node number\\n    INTEGER(I4B), INTENT(IN) :: iDOF\\n    !! row degree of freedom\\n    INTEGER(I4B), INTENT(IN) :: jDOF\\n    !! col degree of freedom\\n    REAL(DFP), INTENT(IN) :: value\\n    !! scalar value to be set\\n  END SUBROUTINE Set\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"This routine sets the specific row and column entry to a given value.\"\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"The irow and icolumn index in \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"CSRMatrix_\"\n            }), \" are calculated by using (iNodeNum, iDOF) and (jNodeNum, jDOF), respectively.\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"To do the above task, the routine employs \", (0,jsx_runtime.jsx)(_components.a, {\n              href: \"/docs-api/DOF/GetNodeLoc\",\n              children: \"GetNodeLoc\"\n            }), \" method\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"After computing the irow and icolumn (internally) this routine calls, \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"csrMat_set3\"\n            }), \".\"]\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"General user should prefer this routine over interface 4.\"\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"rowdof\"\n            }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"coldof\"\n            }), \" are continuously numbered, so if there are two or more physical variables, then \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"rowdof\"\n            }), \" and \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"coldof\"\n            }), \" of the second or later physical variables will not start from 1.\"]\n          }), \"\\n\"]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\"\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-6\",\n      children: \"Interface 6\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"This subroutine sets selected values of the sparse matrix to the scalar value \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"value\"\n        })]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"This routine corresponds to \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"obj(nodenum) = value\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n  MODULE PURE SUBROUTINE Set(obj, nodenum, value)\\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\\n    INTEGER(I4B), INTENT(IN) :: nodenum(:)\\n    REAL(DFP), INTENT(IN) :: value\\n  END SUBROUTINE Set\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-7\",\n      children: \"Interface 7\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE PURE SUBROUTINE Set(obj, iNodeNum, jNodeNum, &\\n    & ivar, jvar, value)\\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\\n    INTEGER(I4B), INTENT(IN) :: iNodeNum(:)\\n    INTEGER(I4B), INTENT(IN) :: jNodeNum(:)\\n    INTEGER(I4B), INTENT(IN) :: ivar\\n    INTEGER(I4B), INTENT(IN) :: jvar\\n    REAL(DFP), INTENT(IN) :: value(:, :)\\n  END SUBROUTINE Set\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"This subroutine sets the values in block sparse matrix.\"\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"The storage pattern of both sparse matrix and value (the element matrix) should be in \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"FMT_DOF\"\n            }), \".\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"Symbolically we performed: \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"obj(Nptrs,Nptrs)=value(:,:)\"\n            }), \".\"]\n          }), \"\\n\"]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\"\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-8\",\n      children: \"Interface 8\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE PURE SUBROUTINE Set(obj, iNodeNum, jNodeNum, ivar,  &\\n    & jvar, iDOF, jDOF, value)\\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\\n    INTEGER(I4B), INTENT(IN) :: iNodeNum\\n    !! row node number\\n    INTEGER(I4B), INTENT(IN) :: jNodeNum\\n    !! column node number\\n    INTEGER(I4B), INTENT(IN) :: ivar\\n    !!\\n    INTEGER(I4B), INTENT(IN) :: jvar\\n    !!\\n    INTEGER(I4B), INTENT(IN) :: iDOF\\n    !! row degree of freedom\\n    INTEGER(I4B), INTENT(IN) :: jDOF\\n    !! col degree of freedom\\n    REAL(DFP), INTENT(IN) :: value\\n    !! scalar value to be set\\n  END SUBROUTINE Set\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"This routine sets the specific row and column entry to a given value.\"\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"The irow and icolumn index in \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"CSRMatrix_\"\n            }), \" are calculated by using (iNodeNum, iDOF) and (jNodeNum, jDOF), respectively.\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"To do the above task, the routine employs \", (0,jsx_runtime.jsx)(_components.a, {\n              href: \"../DOF/GetNodeLoc\",\n              children: \"GetNodeLoc\"\n            }), \" method\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"After computing the irow and icolumn (internally) this routine calls, \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"csrMat_set3\"\n            }), \".\"]\n          }), \"\\n\"]\n        }), (0,jsx_runtime.jsx)(_components.admonition, {\n          type: \"info\",\n          children: (0,jsx_runtime.jsx)(_components.p, {\n            children: \"General user should prefer this routine over Interface 4\"\n          })\n        }), (0,jsx_runtime.jsx)(_components.p, {\n          children: \"rowdof, coldof are continuously numbered, so if there are two or more physical variables, then rowdof and coldof of the second or later physical variables will not start from 1.\"\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\"\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-9\",\n      children: \"Interface 9\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE PURE SUBROUTINE Set(obj, iNodeNum, jNodeNum, ivar,  &\\n    & jvar, iDOF, jDOF, value)\\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\\n    INTEGER(I4B), INTENT(IN) :: iNodeNum(:)\\n    !! row node number\\n    INTEGER(I4B), INTENT(IN) :: jNodeNum(:)\\n    !! column node number\\n    INTEGER(I4B), INTENT(IN) :: ivar\\n    !!\\n    INTEGER(I4B), INTENT(IN) :: jvar\\n    !!\\n    INTEGER(I4B), INTENT(IN) :: iDOF\\n    !! row degree of freedom\\n    INTEGER(I4B), INTENT(IN) :: jDOF\\n    !! col degree of freedom\\n    REAL(DFP), INTENT(IN) :: value(:, :)\\n    !! scalar value to be set\\n  END SUBROUTINE Set\\nEND INTERFACE\\n\"\n          })\n        })\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\"\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-10\",\n      children: \"Interface 10\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE PURE SUBROUTINE Set(obj, iNodeNum, jNodeNum, ivar,  &\\n    & jvar, ispacecompo, itimecompo, jspacecompo, jtimecompo, value)\\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\\n    INTEGER(I4B), INTENT(IN) :: iNodeNum\\n    !! row node number\\n    INTEGER(I4B), INTENT(IN) :: jNodeNum\\n    !! column node number\\n    INTEGER(I4B), INTENT(IN) :: ivar\\n    !!\\n    INTEGER(I4B), INTENT(IN) :: jvar\\n    !!\\n    INTEGER(I4B), INTENT(IN) :: ispacecompo\\n    INTEGER(I4B), INTENT(IN) :: itimecompo\\n    INTEGER(I4B), INTENT(IN) :: jspacecompo\\n    INTEGER(I4B), INTENT(IN) :: jtimecompo\\n    !! col degree of freedom\\n    REAL(DFP), INTENT(IN) :: value\\n    !! scalar value to be set\\n  END SUBROUTINE Set\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"This routine sets the specific row and column entry to a given value.\"\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"The irow and icolumn index in \", (0,jsx_runtime.jsx)(_components.a, {\n              href: \"/docs-api/CSRMatrix/CSRMatrix_\",\n              children: \"CSRMatrix\"\n            }), \" are calculated by using (iNodeNum, iDOF) and (jNodeNum, jDOF), respectively.\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"To do the above task, the routine employs \", (0,jsx_runtime.jsx)(_components.a, {\n              href: \"../DOF/GetNodeLoc\",\n              children: \"GetNodeLoc\"\n            }), \" method\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"After computing the irow and icolumn (internally) this routine calls, \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"csrMat_set3\"\n            }), \".\"]\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"General user should prefer this routine over.\"\n          }), \"\\n\"]\n        }), (0,jsx_runtime.jsx)(_components.admonition, {\n          type: \"note\",\n          children: (0,jsx_runtime.jsx)(_components.p, {\n            children: \"rowdof, coldof are continuously numbered, so if there are two or more physical variables, then rowdof and coldof of the second or later physical variables will not start from 1.\"\n          })\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\"\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-11\",\n      children: \"Interface 11\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE PURE SUBROUTINE Set(obj, iNodeNum, jNodeNum, &\\n    & ivar, jvar, value)\\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\\n    INTEGER(I4B), INTENT(IN) :: iNodeNum(:)\\n    INTEGER(I4B), INTENT(IN) :: jNodeNum(:)\\n    INTEGER(I4B), INTENT(IN) :: ivar\\n    INTEGER(I4B), INTENT(IN) :: jvar\\n    REAL(DFP), INTENT(IN) :: value\\n  END SUBROUTINE Set\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"This subroutine sets the values in block sparse matrix.\"\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"The storage pattern of both sparse matrix and value (the element matrix) should be in \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"FMT_DOF\"\n            }), \".\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"Symbolically, we perform \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"obj(Nptrs,Nptrs)=value(:,:)\"\n            })]\n          }), \"\\n\"]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\"\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-12\",\n      children: \"Interface 12\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE PURE SUBROUTINE Set(obj, iNodeNum, jNodeNum, ivar,  &\\n    & jvar, iDOF, jDOF, value)\\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\\n    INTEGER(I4B), INTENT(IN) :: iNodeNum(:)\\n    !! row node number\\n    INTEGER(I4B), INTENT(IN) :: jNodeNum(:)\\n    !! column node number\\n    INTEGER(I4B), INTENT(IN) :: ivar\\n    !!\\n    INTEGER(I4B), INTENT(IN) :: jvar\\n    !!\\n    INTEGER(I4B), INTENT(IN) :: iDOF\\n    !! row degree of freedom\\n    INTEGER(I4B), INTENT(IN) :: jDOF\\n    !! col degree of freedom\\n    REAL(DFP), INTENT(IN) :: value\\n    !! scalar value to be set\\n  END SUBROUTINE Set\\nEND INTERFACE\\n\"\n          })\n        })\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\"\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-13\",\n      children: \"Interface 13\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE PURE SUBROUTINE Set(obj, iNodeNum, jNodeNum, ivar,  &\\n    & jvar, ispacecompo, itimecompo, jspacecompo, jtimecompo, value)\\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\\n    INTEGER(I4B), INTENT(IN) :: iNodeNum(:)\\n    !! row node number\\n    INTEGER(I4B), INTENT(IN) :: jNodeNum(:)\\n    !! column node number\\n    INTEGER(I4B), INTENT(IN) :: ivar\\n    !!\\n    INTEGER(I4B), INTENT(IN) :: jvar\\n    !!\\n    INTEGER(I4B), INTENT(IN) :: ispacecompo\\n    INTEGER(I4B), INTENT(IN) :: itimecompo\\n    INTEGER(I4B), INTENT(IN) :: jspacecompo\\n    INTEGER(I4B), INTENT(IN) :: jtimecompo\\n    REAL(DFP), INTENT(IN) :: value\\n    !! scalar value to be set\\n  END SUBROUTINE Set\\nEND INTERFACE\\n\"\n          })\n        })\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\"\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interfac-14\",\n      children: \"Interfac 14\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE PURE SUBROUTINE Set(obj, iNodeNum, jNodeNum, ivar,  &\\n    & jvar, ispacecompo, itimecompo, jspacecompo, jtimecompo, value)\\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\\n    INTEGER(I4B), INTENT(IN) :: iNodeNum(:)\\n    !! row node number\\n    INTEGER(I4B), INTENT(IN) :: jNodeNum(:)\\n    !! column node number\\n    INTEGER(I4B), INTENT(IN) :: ivar\\n    !!\\n    INTEGER(I4B), INTENT(IN) :: jvar\\n    !!\\n    INTEGER(I4B), INTENT(IN) :: ispacecompo\\n    INTEGER(I4B), INTENT(IN) :: itimecompo(:)\\n    INTEGER(I4B), INTENT(IN) :: jspacecompo\\n    INTEGER(I4B), INTENT(IN) :: jtimecompo(:)\\n    REAL(DFP), INTENT(IN) :: value\\n    !! scalar value to be set\\n  END SUBROUTINE Set\\nEND INTERFACE\\n\"\n          })\n        })\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\"\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-15\",\n      children: \"Interface 15\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE PURE SUBROUTINE Set(obj, iNodeNum, jNodeNum, ivar,  &\\n    & jvar, ispacecompo, itimecompo, jspacecompo, jtimecompo, value)\\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\\n    INTEGER(I4B), INTENT(IN) :: iNodeNum(:)\\n    !! row node number\\n    INTEGER(I4B), INTENT(IN) :: jNodeNum(:)\\n    !! column node number\\n    INTEGER(I4B), INTENT(IN) :: ivar\\n    !!\\n    INTEGER(I4B), INTENT(IN) :: jvar\\n    !!\\n    INTEGER(I4B), INTENT(IN) :: ispacecompo(:)\\n    INTEGER(I4B), INTENT(IN) :: itimecompo\\n    INTEGER(I4B), INTENT(IN) :: jspacecompo(:)\\n    INTEGER(I4B), INTENT(IN) :: jtimecompo\\n    REAL(DFP), INTENT(IN) :: value\\n    !! scalar value to be set\\n  END SUBROUTINE Set\\nEND INTERFACE\\n\"\n          })\n        })\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\"\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./docs/docs-api/CSRMatrix/Set.md\n");

/***/ })

}]);