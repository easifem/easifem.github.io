"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkeasifem_docs"] = globalThis["webpackChunkeasifem_docs"] || []).push([["content---docs-api-fedof-initiate-9-d-9-5a7"],{

/***/ "./docs/docs-api/FEDOF/Initiate.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  assets: () => (/* binding */ assets),\n  contentTitle: () => (/* binding */ Initiate_contentTitle),\n  \"default\": () => (/* binding */ Initiate_MDXContent),\n  frontMatter: () => (/* binding */ Initiate_frontMatter),\n  metadata: () => (/* reexport */ site_docs_docs_api_fedof_initiate_md_9d9_namespaceObject),\n  toc: () => (/* binding */ Initiate_toc)\n});\n\n;// ./.docusaurus/docusaurus-plugin-content-docs/docs-api/site-docs-docs-api-fedof-initiate-md-9d9.json\nconst site_docs_docs_api_fedof_initiate_md_9d9_namespaceObject = /*#__PURE__*/JSON.parse('{\"id\":\"FEDOF/Initiate\",\"title\":\"Initiate\",\"description\":\"This method initiates an instance of FEDOF.\",\"source\":\"@site/docs/docs-api/FEDOF/Initiate.md\",\"sourceDirName\":\"FEDOF\",\"slug\":\"/FEDOF/Initiate\",\"permalink\":\"/docs-api/FEDOF/Initiate\",\"draft\":false,\"unlisted\":false,\"editUrl\":\"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/FEDOF/Initiate.md\",\"tags\":[],\"version\":\"current\",\"lastUpdatedAt\":1539502055000,\"sidebarPosition\":4,\"frontMatter\":{\"sidebar_position\":4},\"sidebar\":\"tutorialSidebar\",\"previous\":{\"title\":\"SetFEDOFParam\",\"permalink\":\"/docs-api/FEDOF/SetFEDOFParam\"},\"next\":{\"title\":\"ImportFromToml\",\"permalink\":\"/docs-api/FEDOF/ImportFromToml\"}}');\n// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n// EXTERNAL MODULE: ./node_modules/@mdx-js/react/lib/index.js\nvar lib = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/CodeBlock/index.js + 27 modules\nvar CodeBlock = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/CodeBlock/index.js\");\n;// ./node_modules/raw-loader/dist/cjs.js!./docs/docs-api/FEDOF/examples/_Initiate_test_1.F90\n/* harmony default export */ const _Initiate_test_1 = (\"PROGRAM main\\nUSE FEDOF_Class\\nUSE FEDomain_Class\\nUSE AbstractMesh_Class\\nUSE HDF5File_Class\\nUSE Display_Method\\nUSE GlobalData\\nUSE Test_Method\\nUSE ExceptionHandler_Class, ONLY: e, EXCEPTION_INFORMATION\\n\\nIMPLICIT NONE\\n\\nTYPE(FEDOF_) :: obj\\nTYPE(FEDomain_) :: dom\\nCLASS(AbstractMesh_), POINTER :: meshptr => NULL()\\nCHARACTER(*), PARAMETER :: filename = &\\n                           \\\"../../Mesh/examples/meshdata/small_mesh.h5\\\"\\nTYPE(HDF5File_) :: meshfile\\nINTEGER(I4B) :: found, want\\n\\nCALL e%setQuietMode(EXCEPTION_INFORMATION, .TRUE.)\\nCALL meshfile%Initiate(filename, mode=\\\"READ\\\")\\nCALL meshfile%OPEN()\\nCALL dom%Initiate(meshfile, '')\\n\\nmeshptr => dom%GetMeshPointer()\\n\\nCALL obj%Initiate(baseContinuity=\\\"H1\\\", baseInterpolation=\\\"Heirarchical\\\", &\\n                  order=1, mesh=meshptr)\\n!CALL fedof%Display(\\\"FEDOF:\\\")\\nfound = obj%GetTotalDOF()\\nwant = meshptr%GetTotalNodes()\\nCALL OK(found == want, \\\"Total DOF (order=1): \\\")\\n\\nCALL obj%Initiate(baseContinuity=\\\"H1\\\", baseInterpolation=\\\"Heirarchical\\\", &\\n                  order=2, mesh=meshptr)\\nfound = obj%GetTotalDOF()\\nwant = meshptr%GetTotalNodes() + meshptr%GetTotalFaces()\\nCALL OK(found == want, \\\"Total DOF (order=2): \\\")\\n\\nCALL obj%Initiate(baseContinuity=\\\"H1\\\", baseInterpolation=\\\"Heirarchical\\\", &\\n                  order=3, mesh=meshptr)\\nfound = obj%GetTotalDOF()\\nwant = meshptr%GetTotalNodes() + 2*meshptr%GetTotalFaces() + meshptr%GetTotalCells()\\nCALL OK(found == want, \\\"Total DOF (order=3): \\\")\\n\\nCALL obj%Initiate(baseContinuity=\\\"H1\\\", baseInterpolation=\\\"Heirarchical\\\", &\\n                  order=4, mesh=meshptr)\\nfound = obj%GetTotalDOF()\\nwant = meshptr%GetTotalNodes() + 3*meshptr%GetTotalFaces() + 3*meshptr%GetTotalCells()\\nCALL OK(found == want, \\\"Total DOF (order=4): \\\")\\n\\n!CALL dom%Display(\\\"domain:\\\")\\nCALL dom%DEALLOCATE()\\nCALL meshfile%DEALLOCATE()\\n\\nEND PROGRAM main\\n\");\n;// ./docs/docs-api/FEDOF/examples/_Initiate_test_1.md\n\n\nconst frontMatter = {};\nconst contentTitle = undefined;\n\n\n\n\n\n\n\nconst toc = [];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.p, {\n      children: \"This example shows how to initiate FEDOF with H1 and Hierarchy interpolation.\"\n    }), \"\\n\", \"\\n\", \"\\n\", (0,jsx_runtime.jsx)(CodeBlock[\"default\"], {\n      language: \"fortran\",\n      children: _Initiate_test_1\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n\n;// ./node_modules/raw-loader/dist/cjs.js!./docs/docs-api/FEDOF/examples/_Initiate_test_2.F90\n/* harmony default export */ const _Initiate_test_2 = (\"!> author: Vikas Sharma, Ph. D.\\n! date: 2025-06-01\\n! summary:  Initiate fedof for H1 and Heirarchical bases, order is a vector.\\n\\nPROGRAM main\\nUSE FEDOF_Class\\nUSE FEDomain_Class\\nUSE AbstractMesh_Class\\nUSE HDF5File_Class\\nUSE Display_Method\\nUSE GlobalData\\nUSE Test_Method\\nUSE ExceptionHandler_Class, ONLY: e, EXCEPTION_INFORMATION\\nUSE ReallocateUtility\\n\\nIMPLICIT NONE\\n\\nTYPE(FEDOF_) :: fedof\\nTYPE(FEDomain_) :: dom\\nCLASS(AbstractMesh_), POINTER :: meshptr => NULL()\\nCHARACTER(*), PARAMETER :: filename = &\\n                           \\\"../../FEMesh/examples/meshdata/small_tri3_mesh.h5\\\"\\nTYPE(HDF5File_) :: meshfile\\nINTEGER(I4B) :: found, want\\nINTEGER(I4B), ALLOCATABLE :: cellOrder(:)\\n\\nCALL e%setQuietMode(EXCEPTION_INFORMATION, .TRUE.)\\nCALL meshfile%Initiate(filename, mode=\\\"READ\\\")\\nCALL meshfile%OPEN()\\nCALL dom%Initiate(meshfile, '')\\n\\nmeshptr => dom%GetMeshPointer()\\nCALL Reallocate(cellOrder, meshptr%GetTotalCells())\\ncellOrder = 1\\n\\nCALL fedof%Initiate(baseContinuity=\\\"H1\\\", baseInterpolation=\\\"Heirarchical\\\", &\\n                    order=cellOrder, mesh=meshptr)\\n!CALL fedof%Display(\\\"FEDOF:\\\")\\nfound = fedof%GetTotalDOF()\\nwant = meshptr%GetTotalNodes()\\nCALL IS(found, want, \\\"Total DOF (order=1): \\\")\\n\\ncellOrder = 2\\nCALL fedof%Initiate(baseContinuity=\\\"H1\\\", baseInterpolation=\\\"Heirarchical\\\", &\\n                    order=cellOrder, mesh=meshptr)\\nfound = fedof%GetTotalDOF()\\nwant = meshptr%GetTotalNodes() + meshptr%GetTotalFaces()\\nCALL IS(found, want, \\\"Total DOF (order=2): \\\")\\n\\ncellOrder = 3\\nCALL fedof%Initiate(baseContinuity=\\\"H1\\\", baseInterpolation=\\\"Heirarchical\\\", &\\n                    order=cellOrder, mesh=meshptr)\\nfound = fedof%GetTotalDOF()\\nwant = meshptr%GetTotalNodes() + 2*meshptr%GetTotalFaces() + meshptr%GetTotalCells()\\nCALL IS(found, want, \\\"Total DOF (order=3): \\\")\\n\\ncellOrder = 4\\nCALL fedof%Initiate(baseContinuity=\\\"H1\\\", baseInterpolation=\\\"Heirarchical\\\", &\\n                    order=cellOrder, mesh=meshptr)\\nfound = fedof%GetTotalDOF()\\nwant = meshptr%GetTotalNodes() + 3*meshptr%GetTotalFaces() + 3*meshptr%GetTotalCells()\\nCALL IS(found, want, \\\"Total DOF (order=4): \\\")\\n\\n!CALL dom%Display(\\\"domain:\\\")\\nCALL dom%DEALLOCATE()\\nCALL meshfile%DEALLOCATE()\\n\\nEND PROGRAM main\\n\");\n;// ./docs/docs-api/FEDOF/examples/_Initiate_test_2.md\n\n\nconst _Initiate_test_2_frontMatter = {};\nconst _Initiate_test_2_contentTitle = undefined;\n\n\n\n\n\n\n\nconst _Initiate_test_2_toc = [];\nfunction _Initiate_test_2_createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.p, {\n      children: \"This example shows how to initiate FEDOF with H1 and Hierarchy interpolation. Interface 2 of initiate method is used wherein order is a vector of integers representing the order of basis functions for each cell.\"\n    }), \"\\n\", \"\\n\", \"\\n\", (0,jsx_runtime.jsx)(CodeBlock[\"default\"], {\n      language: \"fortran\",\n      children: _Initiate_test_2\n    })]\n  });\n}\nfunction _Initiate_test_2_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_Initiate_test_2_createMdxContent, {\n      ...props\n    })\n  }) : _Initiate_test_2_createMdxContent(props);\n}\n\n\n;// ./node_modules/raw-loader/dist/cjs.js!./docs/docs-api/FEDOF/examples/_Initiate_test_3.F90\n/* harmony default export */ const _Initiate_test_3 = (\"!> author: Vikas Sharma, Ph. D.\\n! date:   \\n! summary:  Initiate fedof with H1 and Heirarchical bases, order is a vector.\\n\\nPROGRAM main\\nUSE FEDOF_Class\\nUSE FEDomain_Class\\nUSE AbstractMesh_Class\\nUSE HDF5File_Class\\nUSE Display_Method\\nUSE GlobalData\\nUSE Test_Method\\nUSE ExceptionHandler_Class, ONLY: e, EXCEPTION_INFORMATION\\nUSE ReallocateUtility\\n\\nIMPLICIT NONE\\n\\nTYPE(FEDOF_) :: fedof\\nTYPE(FEDomain_) :: dom\\nCLASS(AbstractMesh_), POINTER :: meshptr => NULL()\\nCHARACTER(*), PARAMETER :: filename = &\\n   \\\"../../FEMesh/examples/meshdata/small_tri3_mesh.h5\\\"\\nTYPE(HDF5File_) :: meshfile\\nLOGICAL(LGT) :: isok\\nINTEGER(I4B) :: found, want, order, ii, iel\\nINTEGER(I4B), ALLOCATABLE :: cellOrder(:), aintvec(:)\\n\\nCALL e%setQuietMode(EXCEPTION_INFORMATION, .TRUE.)\\nCALL meshfile%Initiate(filename, mode=\\\"READ\\\")\\nCALL meshfile%OPEN()\\nCALL dom%Initiate(meshfile, '')\\n\\nmeshptr => dom%GetMeshPointer()\\nCALL Reallocate(cellOrder, meshptr%GetTotalCells())\\n\\naintvec = [14, 15, 17, 24, 18]\\norder = 1\\nDO iel = 1, SIZE(aintvec)\\n  isok = meshptr%IsElementPresent(aintvec(iel))\\n  IF (.NOT. isok) CYCLE\\n\\n  ii = meshptr%GetLocalElemNumber(aintvec(iel))\\n  cellOrder(ii) = order\\nEND DO\\n\\naintvec = [22, 23, 25, 21]\\norder = 2\\nDO iel = 1, SIZE(aintvec)\\n  isok = meshptr%IsElementPresent(aintvec(iel))\\n  IF (.NOT. isok) CYCLE\\n\\n  ii = meshptr%GetLocalElemNumber(aintvec(iel))\\n  cellOrder(ii) = order\\nEND DO\\n\\naintvec = [19, 20, 26, 16, 13]\\norder = 3\\nDO iel = 1, SIZE(aintvec)\\n  isok = meshptr%IsElementPresent(aintvec(iel))\\n  IF (.NOT. isok) CYCLE\\n\\n  ii = meshptr%GetLocalElemNumber(aintvec(iel))\\n  cellOrder(ii) = order\\nEND DO\\n\\nCALL fedof%Initiate(baseContinuity=\\\"H1\\\", baseInterpolation=\\\"Heirarchical\\\", &\\n                    order=cellOrder, mesh=meshptr)\\nfound = fedof%GetTotalDOF()\\nwant = 39\\nisok = found == want\\nCALL OK(isok, \\\"Total DOF \\\")\\nIF (.NOT. isok) CALL Display([found, want], \\\"found, want: \\\")\\n\\nCALL Display(fedof%GetConnectivity(globalElement=13, islocal=.FALSE., opt=\\\"A\\\"), &\\n             \\\"connectivity of global element 13\\\", full=.TRUE.)\\n\\nCALL dom%DEALLOCATE()\\nCALL meshfile%DEALLOCATE()\\n\\nEND PROGRAM main\\n\");\n;// ./docs/docs-api/FEDOF/examples/_Initiate_test_3.md\n\n\nconst _Initiate_test_3_frontMatter = {};\nconst _Initiate_test_3_contentTitle = undefined;\n\n\n\n\n\n\n\nconst _Initiate_test_3_toc = [];\nfunction _Initiate_test_3_createMdxContent(props) {\n  return (0,jsx_runtime.jsx)(CodeBlock[\"default\"], {\n    language: \"fortran\",\n    children: _Initiate_test_3\n  });\n}\nfunction _Initiate_test_3_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_Initiate_test_3_createMdxContent, {\n      ...props\n    })\n  }) : _Initiate_test_3_createMdxContent(props);\n}\n\n\n;// ./node_modules/raw-loader/dist/cjs.js!./docs/docs-api/FEDOF/examples/_Initiate_test_4.F90\n/* harmony default export */ const _Initiate_test_4 = (\"!> author: Vikas Sharma, Ph. D.\\n! date: 2024-05-24\\n! summary: Lagrange polynomial is tested in this example\\n\\nPROGRAM main\\nUSE FEDOF_Class\\nUSE FEDomain_Class\\nUSE AbstractMesh_Class\\nUSE HDF5File_Class\\nUSE Display_Method\\nUSE GlobalData\\nUSE Test_Method\\nUSE ExceptionHandler_Class, ONLY: e, EXCEPTION_INFORMATION\\nuse BaseType, only: poly=>TypePolynomialOpt\\n\\nIMPLICIT NONE\\n\\nTYPE(FEDOF_) :: fedof\\nTYPE(FEDomain_) :: dom\\nCLASS(AbstractMesh_), POINTER :: meshptr => NULL()\\nCHARACTER(*), PARAMETER :: filename = &\\n                           \\\"../../FEMesh/examples/meshdata/small_tri3_mesh.h5\\\"\\n\\nTYPE(HDF5File_) :: meshfile\\nINTEGER(I4B) :: found, want\\nINTEGER(I4B), PARAMETER :: order = 1, ipType = poly%monomial\\nCHARACTER(*), PARAMETER :: baseContinuity = \\\"H1\\\"\\nCHARACTER(*), PARAMETER :: baseInterpolation = \\\"Lagrange\\\"\\n\\nCALL e%setQuietMode(EXCEPTION_INFORMATION, .TRUE.)\\nCALL meshfile%Initiate(filename, mode=\\\"READ\\\")\\nCALL meshfile%OPEN()\\nCALL dom%Initiate(meshfile, '')\\n\\nmeshptr => dom%GetMeshPointer()\\n\\nCALL fedof%Initiate(baseContinuity=baseContinuity, ipType=ipType, &\\n               baseInterpolation=baseInterpolation, order=order, mesh=meshptr)\\n!CALL fedof%Display(\\\"FEDOF:\\\")\\nfound = fedof%GetTotalDOF()\\nwant = meshptr%GetTotalNodes()\\nCALL IS(found, want, \\\"Total DOF (order=1): \\\")\\n\\n!CALL dom%Display(\\\"domain:\\\")\\nCALL dom%DEALLOCATE()\\nCALL meshfile%DEALLOCATE()\\n\\nEND PROGRAM main\\n\");\n;// ./docs/docs-api/FEDOF/examples/_Initiate_test_4.md\n\n\nconst _Initiate_test_4_frontMatter = {};\nconst _Initiate_test_4_contentTitle = undefined;\n\n\n\n\n\n\n\nconst _Initiate_test_4_toc = [];\nfunction _Initiate_test_4_createMdxContent(props) {\n  return (0,jsx_runtime.jsx)(CodeBlock[\"default\"], {\n    language: \"fortran\",\n    children: _Initiate_test_4\n  });\n}\nfunction _Initiate_test_4_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_Initiate_test_4_createMdxContent, {\n      ...props\n    })\n  }) : _Initiate_test_4_createMdxContent(props);\n}\n\n\n;// ./node_modules/raw-loader/dist/cjs.js!./docs/docs-api/FEDOF/examples/_Initiate_test_5.F90\n/* harmony default export */ const _Initiate_test_5 = (\"!> author: Vikas Sharma, Ph. D.\\n! date: 2024-05-24\\n! summary: Lagrange polynomial is tested in this example\\n\\nPROGRAM main\\nUSE FEDOF_Class\\nUSE FEDomain_Class\\nUSE AbstractMesh_Class\\nUSE HDF5File_Class\\nUSE Display_Method\\nUSE GlobalData\\nUSE Test_Method\\nUSE ExceptionHandler_Class, ONLY: e, EXCEPTION_INFORMATION\\nUSE BaseType, ONLY: poly => TypePolynomialOpt\\n\\nIMPLICIT NONE\\n\\nTYPE(FEDOF_) :: fedof\\nTYPE(FEDomain_) :: dom\\nCLASS(AbstractMesh_), POINTER :: meshptr => NULL()\\nCHARACTER(*), PARAMETER :: filename = &\\n                           \\\"../../FEMesh/examples/meshdata/small_tri6_mesh.h5\\\"\\nTYPE(HDF5File_) :: meshfile\\nINTEGER(I4B) :: found, want\\nINTEGER(I4B), PARAMETER :: order = 2, ipType = poly%monomial\\nCHARACTER(*), PARAMETER :: baseContinuity = \\\"H1\\\"\\nCHARACTER(*), PARAMETER :: baseInterpolation = \\\"Lagrange\\\"\\n\\nCALL e%setQuietMode(EXCEPTION_INFORMATION, .TRUE.)\\nCALL meshfile%Initiate(filename, mode=\\\"READ\\\")\\nCALL meshfile%OPEN()\\nCALL dom%Initiate(meshfile, '')\\n\\nmeshptr => dom%GetMeshPointer()\\n\\nCALL fedof%Initiate(baseContinuity=baseContinuity, ipType=ipType, &\\n                    baseInterpolation=baseInterpolation, &\\n                    order=order, &\\n                    mesh=meshptr)\\n!CALL fedof%Display(\\\"FEDOF:\\\")\\nfound = fedof%GetTotalDOF()\\nwant = meshptr%GetTotalNodes()\\nCALL OK(found == want, \\\"Total DOF (order=2): \\\")\\n\\n!CALL dom%Display(\\\"domain:\\\")\\nCALL dom%DEALLOCATE()\\nCALL meshfile%DEALLOCATE()\\n\\nEND PROGRAM main\\n\");\n;// ./docs/docs-api/FEDOF/examples/_Initiate_test_5.md\n\n\nconst _Initiate_test_5_frontMatter = {};\nconst _Initiate_test_5_contentTitle = undefined;\n\n\n\n\n\n\n\nconst _Initiate_test_5_toc = [];\nfunction _Initiate_test_5_createMdxContent(props) {\n  return (0,jsx_runtime.jsx)(CodeBlock[\"default\"], {\n    language: \"fortran\",\n    children: _Initiate_test_5\n  });\n}\nfunction _Initiate_test_5_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_Initiate_test_5_createMdxContent, {\n      ...props\n    })\n  }) : _Initiate_test_5_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/FEDOF/Initiate.md\n\n\nconst Initiate_frontMatter = {\n\tsidebar_position: 4\n};\nconst Initiate_contentTitle = 'Initiate';\n\nconst assets = {\n\n};\n\n\n\n\n\n\n\n\nconst Initiate_toc = [{\n  \"value\": \"Interface 1\",\n  \"id\": \"interface-1\",\n  \"level\": 2\n}, {\n  \"value\": \"Interface 2\",\n  \"id\": \"interface-2\",\n  \"level\": 2\n}, {\n  \"value\": \"Interface 3\",\n  \"id\": \"interface-3\",\n  \"level\": 2\n}, {\n  \"value\": \"Interface 4\",\n  \"id\": \"interface-4\",\n  \"level\": 2\n}, {\n  \"value\": \"Examples\",\n  \"id\": \"examples\",\n  \"level\": 2\n}, ...toc, ..._Initiate_test_2_toc, ..._Initiate_test_3_toc, ..._Initiate_test_4_toc, ..._Initiate_test_5_toc];\nfunction Initiate_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    header: \"header\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  }, {TabItem, Tabs} = _components;\n  if (!TabItem) _missingMdxReference(\"TabItem\", true);\n  if (!Tabs) _missingMdxReference(\"Tabs\", true);\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.header, {\n      children: (0,jsx_runtime.jsx)(_components.h1, {\n        id: \"initiate\",\n        children: \"Initiate\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"This method initiates an instance of \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"FEDOF\"\n      }), \".\\nThere are several ways to initiate an instance of \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"FEDOF\"\n      }), \".\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-1\",\n      children: \"Interface 1\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Homogeneous order\"\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"In case of \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"H1\"\n        }), \" Lagrange \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"FEDOF\"\n        }), \", order is determined from the cell order of each mesh.\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n  MODULE SUBROUTINE Initiate(obj, order, mesh, baseContinuity, &\\n                    baseInterpolation, ipType, basisType, alpha, beta, lambda)\\n    CLASS(FEDOF_), INTENT(INOUT) :: obj\\n    INTEGER(I4B), INTENT(IN) :: order\\n    !! homogeneous value of order\\n    CLASS(AbstractMesh_), TARGET, INTENT(IN) :: mesh\\n    !! cell mesh\\n    CHARACTER(*), INTENT(IN) :: baseContinuity\\n    !! continuity of basis (regularity or conformity)\\n    CHARACTER(*), INTENT(IN) :: baseInterpolation\\n    !! basis function used for interpolation\\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: ipType\\n    !! interpolation point type\\n    !! used when baseInterpolation is Lagrange\\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: basisType(:)\\n    !! type of basis function used for\\n    !! constructing the Lagrange polynomial\\n    !! Used when baseInterpolation is Lagrange\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: alpha(:)\\n    !! alpha parameter for jacobian parameter\\n    !! used when baseInterpolation is Lagrange\\n    !! used when basistype is Jacobi\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: beta(:)\\n    !! beta parameter for jacobian parameter\\n    !! used when baseInterpolation is Lagrange\\n    !! used when basistype is Jacobi\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: lambda(:)\\n    !! lambda parameter for Ultraspherical parameter\\n    !! used when baseInterpolation is Lagrange\\n    !! used when basistype is Ultraspherical\\n  END SUBROUTINE Initiate\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-2\",\n      children: \"Interface 2\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Here order represents the order of each cell element.\"\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"In case of \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"H1\"\n        }), \" Lagrange \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"FEDOF\"\n        }), \", order is determined from the cell order of each mesh.\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n  MODULE SUBROUTINE Initiate(obj, order, mesh, baseContinuity, &\\n                    baseInterpolation, ipType, basisType, alpha, lambda, beta)\\n    CLASS(FEDOF_), INTENT(INOUT) :: obj\\n    INTEGER(I4B), INTENT(IN) :: order(:)\\n    CLASS(AbstractMesh_), TARGET, INTENT(IN) :: mesh\\n    CHARACTER(*), INTENT(IN) :: baseContinuity\\n    CHARACTER(*), INTENT(IN) :: baseInterpolation\\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: ipType\\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: basisType(:)\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: alpha(:)\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: beta(:)\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: lambda(:)\\n  END SUBROUTINE Initiate\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-3\",\n      children: \"Interface 3\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"This method is used to initiate \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"FEDOF\"\n        }), \" by using \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"ParameterList\"\n        }), \".\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n  MODULE SUBROUTINE Initiate(obj, param, mesh)\\n    CLASS(FEDOF_), INTENT(INOUT) :: obj\\n    TYPE(ParameterList_), INTENT(IN) :: param\\n    CLASS(AbstractMesh_), TARGET, INTENT(IN) :: mesh\\n  END SUBROUTINE Initiate\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-4\",\n      children: \"Interface 4\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"This routine is similar to the interface 2, but the order of the element is defined for global element numbers.\\n\", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"order\"\n      }), \" is a two-dimensional array. The number of rows in order is equal to 2, the first row contains the global element number the second row contains the order. This routine will make \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"order0(:)\"\n      }), \" from \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"order(:,:)\"\n      }), \" and call \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"Initiate2\"\n      }), \".\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n  MODULE SUBROUTINE Initiate(obj, order, mesh, baseContinuity, &\\n                    baseInterpolation, ipType, basisType, alpha, beta, lambda)\\n    CLASS(FEDOF_), INTENT(INOUT) :: obj\\n    !! FEDOF\\n    INTEGER(I4B), INTENT(IN) :: order(:, :)\\n    !! the number of columns in order is equal to total number of elements\\n    !! the number of rows in order is equal to 2\\n    !! the first row contains the global element number\\n    !! the second rows contains the order of that element\\n    CLASS(AbstractMesh_), TARGET, INTENT(IN) :: mesh\\n    !! mesh\\n    CHARACTER(*), INTENT(IN) :: baseContinuity\\n    !! continuity of basis function\\n    CHARACTER(*), INTENT(IN) :: baseInterpolation\\n    !! interpolation of basis\\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: ipType\\n    !! interpolation point type, needed for Lagrange polynomial\\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: basisType(:)\\n    !! basis type, needed for Lagrange polynomial only\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: alpha(:)\\n    !! alpha parameter for jacobian parameter\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: beta(:)\\n    !! beta parameter for jacobian parameter\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: lambda(:)\\n  END SUBROUTINE Initiate\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"examples\",\n      children: \"Examples\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs, {\n      children: [(0,jsx_runtime.jsx)(TabItem, {\n        value: \"example-1\",\n        label: \"Example 1\",\n        children: (0,jsx_runtime.jsx)(MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem, {\n        value: \"example-2\",\n        label: \"Example 2\",\n        children: (0,jsx_runtime.jsx)(_Initiate_test_2_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem, {\n        value: \"example-3\",\n        label: \"Example 3\",\n        children: (0,jsx_runtime.jsx)(_Initiate_test_3_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem, {\n        value: \"example-4\",\n        label: \"Example 4\",\n        children: (0,jsx_runtime.jsx)(_Initiate_test_4_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem, {\n        value: \"example-5\",\n        label: \"Example 5\",\n        children: (0,jsx_runtime.jsx)(_Initiate_test_5_MDXContent, {})\n      })]\n    })]\n  });\n}\nfunction Initiate_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(Initiate_createMdxContent, {\n      ...props\n    })\n  }) : Initiate_createMdxContent(props);\n}\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./docs/docs-api/FEDOF/Initiate.md\n");

/***/ }),

/***/ "./node_modules/@mdx-js/react/lib/index.js":
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MDXProvider: () => (/* binding */ MDXProvider),\n/* harmony export */   useMDXComponents: () => (/* binding */ useMDXComponents)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/react/index.js\");\n/**\n * @import {MDXComponents} from 'mdx/types.js'\n * @import {Component, ReactElement, ReactNode} from 'react'\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\n\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nfunction useMDXComponents(components) {\n  const contextComponents = react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {ReactElement}\n *   Element.\n * @satisfies {Component}\n */\nfunction MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Vhc2lmZW0tZG9jcy8uL25vZGVfbW9kdWxlcy9AbWR4LWpzL3JlYWN0L2xpYi9pbmRleC5qcz9hZjEyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGltcG9ydCB7TURYQ29tcG9uZW50c30gZnJvbSAnbWR4L3R5cGVzLmpzJ1xuICogQGltcG9ydCB7Q29tcG9uZW50LCBSZWFjdEVsZW1lbnQsIFJlYWN0Tm9kZX0gZnJvbSAncmVhY3QnXG4gKi9cblxuLyoqXG4gKiBAY2FsbGJhY2sgTWVyZ2VDb21wb25lbnRzXG4gKiAgIEN1c3RvbSBtZXJnZSBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7UmVhZG9ubHk8TURYQ29tcG9uZW50cz59IGN1cnJlbnRDb21wb25lbnRzXG4gKiAgIEN1cnJlbnQgY29tcG9uZW50cyBmcm9tIHRoZSBjb250ZXh0LlxuICogQHJldHVybnMge01EWENvbXBvbmVudHN9XG4gKiAgIEFkZGl0aW9uYWwgY29tcG9uZW50cy5cbiAqXG4gKiBAdHlwZWRlZiBQcm9wc1xuICogICBDb25maWd1cmF0aW9uIGZvciBgTURYUHJvdmlkZXJgLlxuICogQHByb3BlcnR5IHtSZWFjdE5vZGUgfCBudWxsIHwgdW5kZWZpbmVkfSBbY2hpbGRyZW5dXG4gKiAgIENoaWxkcmVuIChvcHRpb25hbCkuXG4gKiBAcHJvcGVydHkge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+IHwgTWVyZ2VDb21wb25lbnRzIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2NvbXBvbmVudHNdXG4gKiAgIEFkZGl0aW9uYWwgY29tcG9uZW50cyB0byB1c2Ugb3IgYSBmdW5jdGlvbiB0aGF0IGNyZWF0ZXMgdGhlbSAob3B0aW9uYWwpLlxuICogQHByb3BlcnR5IHtib29sZWFuIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2Rpc2FibGVQYXJlbnRDb250ZXh0PWZhbHNlXVxuICogICBUdXJuIG9mZiBvdXRlciBjb21wb25lbnQgY29udGV4dCAoZGVmYXVsdDogYGZhbHNlYCkuXG4gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuXG4vKiogQHR5cGUge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+fSAqL1xuY29uc3QgZW1wdHlDb21wb25lbnRzID0ge31cblxuY29uc3QgTURYQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoZW1wdHlDb21wb25lbnRzKVxuXG4vKipcbiAqIEdldCBjdXJyZW50IGNvbXBvbmVudHMgZnJvbSB0aGUgTURYIENvbnRleHQuXG4gKlxuICogQHBhcmFtIHtSZWFkb25seTxNRFhDb21wb25lbnRzPiB8IE1lcmdlQ29tcG9uZW50cyB8IG51bGwgfCB1bmRlZmluZWR9IFtjb21wb25lbnRzXVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMgdG8gdXNlIG9yIGEgZnVuY3Rpb24gdGhhdCBjcmVhdGVzIHRoZW0gKG9wdGlvbmFsKS5cbiAqIEByZXR1cm5zIHtNRFhDb21wb25lbnRzfVxuICogICBDdXJyZW50IGNvbXBvbmVudHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VNRFhDb21wb25lbnRzKGNvbXBvbmVudHMpIHtcbiAgY29uc3QgY29udGV4dENvbXBvbmVudHMgPSBSZWFjdC51c2VDb250ZXh0KE1EWENvbnRleHQpXG5cbiAgLy8gTWVtb2l6ZSB0byBhdm9pZCB1bm5lY2Vzc2FyeSB0b3AtbGV2ZWwgY29udGV4dCBjaGFuZ2VzXG4gIHJldHVybiBSZWFjdC51c2VNZW1vKFxuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIEN1c3RvbSBtZXJnZSB2aWEgYSBmdW5jdGlvbiBwcm9wXG4gICAgICBpZiAodHlwZW9mIGNvbXBvbmVudHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGNvbXBvbmVudHMoY29udGV4dENvbXBvbmVudHMpXG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7Li4uY29udGV4dENvbXBvbmVudHMsIC4uLmNvbXBvbmVudHN9XG4gICAgfSxcbiAgICBbY29udGV4dENvbXBvbmVudHMsIGNvbXBvbmVudHNdXG4gIClcbn1cblxuLyoqXG4gKiBQcm92aWRlciBmb3IgTURYIGNvbnRleHQuXG4gKlxuICogQHBhcmFtIHtSZWFkb25seTxQcm9wcz59IHByb3BlcnRpZXNcbiAqICAgUHJvcGVydGllcy5cbiAqIEByZXR1cm5zIHtSZWFjdEVsZW1lbnR9XG4gKiAgIEVsZW1lbnQuXG4gKiBAc2F0aXNmaWVzIHtDb21wb25lbnR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBNRFhQcm92aWRlcihwcm9wZXJ0aWVzKSB7XG4gIC8qKiBAdHlwZSB7UmVhZG9ubHk8TURYQ29tcG9uZW50cz59ICovXG4gIGxldCBhbGxDb21wb25lbnRzXG5cbiAgaWYgKHByb3BlcnRpZXMuZGlzYWJsZVBhcmVudENvbnRleHQpIHtcbiAgICBhbGxDb21wb25lbnRzID1cbiAgICAgIHR5cGVvZiBwcm9wZXJ0aWVzLmNvbXBvbmVudHMgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBwcm9wZXJ0aWVzLmNvbXBvbmVudHMoZW1wdHlDb21wb25lbnRzKVxuICAgICAgICA6IHByb3BlcnRpZXMuY29tcG9uZW50cyB8fCBlbXB0eUNvbXBvbmVudHNcbiAgfSBlbHNlIHtcbiAgICBhbGxDb21wb25lbnRzID0gdXNlTURYQ29tcG9uZW50cyhwcm9wZXJ0aWVzLmNvbXBvbmVudHMpXG4gIH1cblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICBNRFhDb250ZXh0LlByb3ZpZGVyLFxuICAgIHt2YWx1ZTogYWxsQ29tcG9uZW50c30sXG4gICAgcHJvcGVydGllcy5jaGlsZHJlblxuICApXG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@mdx-js/react/lib/index.js\n");

/***/ })

}]);