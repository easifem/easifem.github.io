"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkeasifem_docs"] = globalThis["webpackChunkeasifem_docs"] || []).push([["content---docs-api-st-scalar-field-set-8-be-fb1"],{

/***/ "./docs/docs-api/STScalarField/Set.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  assets: () => (/* binding */ assets),\n  contentTitle: () => (/* binding */ Set_contentTitle),\n  \"default\": () => (/* binding */ Set_MDXContent),\n  frontMatter: () => (/* binding */ Set_frontMatter),\n  metadata: () => (/* reexport */ site_docs_docs_api_st_scalar_field_set_md_8be_namespaceObject),\n  toc: () => (/* binding */ Set_toc)\n});\n\n;// ./.docusaurus/docusaurus-plugin-content-docs/docs-api/site-docs-docs-api-st-scalar-field-set-md-8be.json\nconst site_docs_docs_api_st_scalar_field_set_md_8be_namespaceObject = /*#__PURE__*/JSON.parse('{\"id\":\"STScalarField/Set\",\"title\":\"Set\",\"description\":\"Set entries in STScalarField.\",\"source\":\"@site/docs/docs-api/STScalarField/Set.md\",\"sourceDirName\":\"STScalarField\",\"slug\":\"/STScalarField/Set\",\"permalink\":\"/docs-api/STScalarField/Set\",\"draft\":false,\"unlisted\":false,\"editUrl\":\"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/STScalarField/Set.md\",\"tags\":[],\"version\":\"current\",\"lastUpdatedAt\":1539502055000,\"frontMatter\":{},\"sidebar\":\"tutorialSidebar\",\"previous\":{\"title\":\"Norm2\",\"permalink\":\"/docs-api/STScalarField/Norm2\"},\"next\":{\"title\":\"SetSTScalarFieldParam\",\"permalink\":\"/docs-api/STScalarField/SetSTScalarFieldParam\"}}');\n// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n// EXTERNAL MODULE: ./node_modules/@mdx-js/react/lib/index.js\nvar lib = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js + 2 modules\nvar Tabs = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js + 1 modules\nvar TabItem = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js\");\n;// ./docs/docs-api/STScalarField/_STScalarField_test_3.md\n\n\nconst frontMatter = {};\nconst contentTitle = undefined;\n\n\n\n\n\nconst toc = [];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"In this example we test \", (0,jsx_runtime.jsx)(_components.a, {\n        href: \"/docs-api/STScalarField/Set\",\n        children: \"Set\"\n      }), \" method.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"In this example we set the space-time value at a single node.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"program main\\n  use easifemBase\\n  use easifemClasses\\n  implicit none\\n\\n  type( domain_ ) :: dom\\n  type( STScalarFieldLis_ ) :: obj\\n  TYPE( HDF5File_ ) :: meshfile\\n  type( ParameterList_ ) :: param\\n  integer( i4b ) :: ierr\\n  INTEGER( I4B ), Parameter :: timeCompo=2\\n  CHARACTER( LEN = * ), Parameter :: engine=\\\"LIS_OMP\\\"\\n\\n  call meshfile%initiate( filename=\\\"./mesh.h5\\\", mode=\\\"READ\\\" )\\n  call meshfile%open()\\n  call dom%initiate( meshfile, \\\"\\\" )\\n  call meshfile%Deallocate()\\n\\n  CALL FPL_INIT()\\n  CALL param%initiate()\\n  CALL SetSTScalarFieldParam( &\\n    & param=param, &\\n    & name=\\\"U\\\", &\\n    & fieldType=FIELD_TYPE_NORMAL, &\\n    & engine=engine, &\\n    & timeCompo=timeCompo)\\n\\n  call obj%initiate( param, dom )\\n  \\n  !> set a single entry\\n  call obj%set( &\\n    & value=linspace(1.0_DFP, 10.0_DFP, timeCompo), &\\n    & globalNode=1 )\\n\\n  !> set a single entry\\n  call obj%set( &\\n    & value=linspace(10.0_DFP, 20.0_DFP, timeCompo), &\\n    & globalNode=3 )\\n\\n  call obj%display( \\\"obj = \\\")\\n\\n  call obj%Deallocate()\\n  call dom%Deallocate()\\n  call param%Deallocate()\\n  call FPL_FINALIZE()\\nend program main\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"#obj =\\n# isInitiated : TRUE\\n# name :U\\n# fieldType : NORMAL\\n# engine :LIS_OMP\\n# comm: 0\\n# myRank: 0\\n# numProcs: 1\\n# global_n: 62\\n# local_n: 62\\n# is: 1\\n# ie: 63\\n# lis_ptr: 94918120762096\\n# domain : ASSOCIATED\\n# domains : NOT ALLOCATED\\n# tSize : 62\\n# # DOF data :\\n# Total Physical Variables :1\\n# Name : U\\n# Space Components : 1\\n# Time Components : 2\\n# Total Nodes : 31\\n# Storage Format : Nodes\\n# Value Map : \\n--------------\\n       1      \\n      32      \\n      63      \\n# VAR :U\\n DOF-1 ,   DOF-2 ,   \\n-------,  -------,   \\n 1.0000,  10.0000,   \\n 0.0000,   0.0000,   \\n10.0000,  20.0000,\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/STScalarField/_STScalarField_test_4.md\n\n\nconst _STScalarField_test_4_frontMatter = {};\nconst _STScalarField_test_4_contentTitle = undefined;\n\n\n\n\n\nconst _STScalarField_test_4_toc = [];\nfunction _STScalarField_test_4_createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"In this example we test \", (0,jsx_runtime.jsx)(_components.a, {\n        href: \"/docs-api/STScalarField/Set\",\n        children: \"Set\"\n      }), \" method.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"In this example we set the space-time value at all spatial nodes.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"program main\\n  use easifemBase\\n  use easifemClasses\\n  implicit none\\n\\n  type( domain_ ) :: dom\\n  type( STScalarFieldLis_ ) :: obj\\n  TYPE( HDF5File_ ) :: meshfile\\n  type( ParameterList_ ) :: param\\n  integer( i4b ) :: ierr\\n  INTEGER( I4B ), Parameter :: timeCompo=2\\n  CHARACTER( LEN = * ), Parameter :: engine=\\\"LIS_OMP\\\"\\n\\n  call meshfile%initiate( filename=\\\"./mesh.h5\\\", mode=\\\"READ\\\" )\\n  call meshfile%open()\\n  call dom%initiate( meshfile, \\\"\\\" )\\n  call meshfile%Deallocate()\\n\\n  CALL FPL_INIT()\\n  CALL param%initiate()\\n  CALL SetSTScalarFieldParam( &\\n    & param=param, &\\n    & name=\\\"U\\\", &\\n    & fieldType=FIELD_TYPE_NORMAL, &\\n    & engine=engine, &\\n    & timeCompo=timeCompo)\\n\\n  call obj%initiate( param, dom )\\n  \\n  !> set all entries\\n  call obj%set( &\\n    & value=linspace(1.0_DFP, 10.0_DFP, timeCompo) )\\n\\n  call obj%display( \\\"obj = \\\")\\n\\n  call obj%Deallocate()\\n  call dom%Deallocate()\\n  call param%Deallocate()\\n  call FPL_FINALIZE()\\nend program main\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"#obj =\\n# isInitiated : TRUE\\n# name :U\\n# fieldType : NORMAL\\n# engine :LIS_OMP\\n# comm: 0\\n# myRank: 0\\n# numProcs: 1\\n# global_n: 62\\n# local_n: 62\\n# is: 1\\n# ie: 63\\n# lis_ptr: 94813641005808\\n# domain : ASSOCIATED\\n# domains : NOT ALLOCATED\\n# tSize : 62\\n# # DOF data :\\n# Total Physical Variables :1\\n# Name : U\\n# Space Components : 1\\n# Time Components : 2\\n# Total Nodes : 31\\n# Storage Format : Nodes\\n# Value Map : \\n--------------\\n       1      \\n      32      \\n      63      \\n# VAR :U\\n DOF-1 ,   DOF-2 ,   \\n-------,  -------,   \\n1.00000,  10.0000,   \\n1.00000,  10.0000,   \\n1.00000,  10.0000,   \\n1.00000,  10.0000,   \\n1.00000,  10.0000,   \\n1.00000,  10.0000,\\n\"\n      })\n    })]\n  });\n}\nfunction _STScalarField_test_4_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_STScalarField_test_4_createMdxContent, {\n      ...props\n    })\n  }) : _STScalarField_test_4_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/STScalarField/_STScalarField_test_5.md\n\n\nconst _STScalarField_test_5_frontMatter = {};\nconst _STScalarField_test_5_contentTitle = undefined;\n\n\n\n\n\nconst _STScalarField_test_5_toc = [];\nfunction _STScalarField_test_5_createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"In this example we test \", (0,jsx_runtime.jsx)(_components.a, {\n        href: \"/docs-api/STScalarField/Set\",\n        children: \"Set\"\n      }), \" method.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"In this example we set the space-time value at all spatial nodes of a given timeCompo.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"program main\\n  use easifemBase\\n  use easifemClasses\\n  implicit none\\n\\n  type( domain_ ) :: dom\\n  type( STScalarFieldLis_ ) :: obj\\n  TYPE( HDF5File_ ) :: meshfile\\n  type( ParameterList_ ) :: param\\n  integer( i4b ) :: ierr\\n  INTEGER( I4B ), Parameter :: timeCompo=2\\n  CHARACTER( LEN = * ), Parameter :: engine=\\\"LIS_OMP\\\"\\n\\n  call meshfile%initiate( filename=\\\"./mesh.h5\\\", mode=\\\"READ\\\" )\\n  call meshfile%open()\\n  call dom%initiate( meshfile, \\\"\\\" )\\n  call meshfile%Deallocate()\\n\\n  CALL FPL_INIT()\\n  CALL param%initiate()\\n  CALL SetSTScalarFieldParam( &\\n    & param=param, &\\n    & name=\\\"U\\\", &\\n    & fieldType=FIELD_TYPE_NORMAL, &\\n    & engine=engine, &\\n    & timeCompo=timeCompo)\\n\\n  call obj%initiate( param, dom )\\n  \\n  !> set all entries\\n  call obj%set( value=1.0_DFP, timeCompo=1_I4B )\\n  call obj%set( value=2.0_DFP, timeCompo=2_I4B )\\n\\n  call obj%display( \\\"obj = \\\")\\n\\n  call obj%Deallocate()\\n  call dom%Deallocate()\\n  call param%Deallocate()\\n  call FPL_FINALIZE()\\nend program main\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"#obj =\\n# isInitiated : TRUE\\n# name :U\\n# fieldType : NORMAL\\n# engine :LIS_OMP\\n# comm: 0\\n# myRank: 0\\n# numProcs: 1\\n# global_n: 62\\n# local_n: 62\\n# is: 1\\n# ie: 63\\n# lis_ptr: 94207752727280\\n# domain : ASSOCIATED\\n# domains : NOT ALLOCATED\\n# tSize : 62\\n# # DOF data :\\n# Total Physical Variables :1\\n# Name : U\\n# Space Components : 1\\n# Time Components : 2\\n# Total Nodes : 31\\n# Storage Format : Nodes\\n# Value Map : \\n--------------\\n       1      \\n      32      \\n      63      \\n# VAR :U\\n DOF-1 ,   DOF-2 ,   \\n-------,  -------,   \\n1.00000,  2.00000,   \\n1.00000,  2.00000,   \\n1.00000,  2.00000,   \\n1.00000,  2.00000,   \\n1.00000,  2.00000,   \\n1.00000,  2.00000,   \\n1.00000,  2.00000,\\n\"\n      })\n    })]\n  });\n}\nfunction _STScalarField_test_5_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_STScalarField_test_5_createMdxContent, {\n      ...props\n    })\n  }) : _STScalarField_test_5_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/STScalarField/_STScalarField_test_6.md\n\n\nconst _STScalarField_test_6_frontMatter = {};\nconst _STScalarField_test_6_contentTitle = undefined;\n\n\n\n\n\nconst _STScalarField_test_6_toc = [];\nfunction _STScalarField_test_6_createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"In this example we test \", (0,jsx_runtime.jsx)(_components.a, {\n        href: \"/docs-api/STScalarField/Set\",\n        children: \"Set\"\n      }), \" method.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"In this example we set the all values by using a space-time vector.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"program main\\n  use easifemBase\\n  use easifemClasses\\n  implicit none\\n\\n  type( domain_ ) :: dom\\n  type( STScalarFieldLis_ ) :: obj\\n  TYPE( HDF5File_ ) :: meshfile\\n  type( ParameterList_ ) :: param\\n  integer( i4b ) :: ierr\\n  INTEGER( I4B ), Parameter :: timeCompo=2\\n  CHARACTER( LEN = * ), Parameter :: engine=\\\"LIS_OMP\\\"\\n  REAL( DFP ), ALLOCATABLE :: value(:, :)\\n  INTEGER( I4B ) ::tNodes\\n\\n  call meshfile%initiate( filename=\\\"./mesh.h5\\\", mode=\\\"READ\\\" )\\n  call meshfile%open()\\n  call dom%initiate( meshfile, \\\"\\\" )\\n  call meshfile%Deallocate()\\n\\n  CALL FPL_INIT()\\n  CALL param%initiate()\\n  CALL SetSTScalarFieldParam( &\\n    & param=param, &\\n    & name=\\\"U\\\", &\\n    & fieldType=FIELD_TYPE_NORMAL, &\\n    & engine=engine, &\\n    & timeCompo=timeCompo)\\n\\n  call obj%initiate( param, dom )\\n  \\n  !> set all entries\\n  tNodes = dom%getTotalNodes()\\n  CALL Reallocate(value, timeCompo, tNodes)\\n  CALL RANDOM_NUMBER(value)\\n\\n  CALL obj%set(value)\\n\\n  CALL display(value(:, 1:5), \\\"value(:, 1:5) = \\\" )\\n  call obj%display( \\\"obj = \\\")\\n\\n  call obj%Deallocate()\\n  call dom%Deallocate()\\n  call param%Deallocate()\\n  call FPL_FINALIZE()\\nend program main\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"                value(:, 1:5) =                 \\n------------------------------------------------\\n0.926851  0.727974  0.267881  0.823990  0.764518\\n0.616465  0.360218  0.996750  0.639337  0.011806\\n\\n#obj =\\n# isInitiated : TRUE\\n# name :U\\n# fieldType : NORMAL\\n# engine :LIS_OMP\\n# comm: 0\\n# myRank: 0\\n# numProcs: 1\\n# global_n: 62\\n# local_n: 62\\n# is: 1\\n# ie: 63\\n# lis_ptr: 93988982946544\\n# domain : ASSOCIATED\\n# domains : NOT ALLOCATED\\n# tSize : 62\\n# # DOF data :\\n# Total Physical Variables :1\\n# Name : U\\n# Space Components : 1\\n# Time Components : 2\\n# Total Nodes : 31\\n# Storage Format : Nodes\\n# Value Map : \\n--------------\\n       1      \\n      32      \\n      63      \\n# VAR :U\\n  DOF-1 ,    DOF-2 ,   \\n--------,  --------,   \\n0.926851,  0.616465,   \\n0.727974,  0.360218,   \\n0.267881,  0.996750,   \\n0.823990,  0.639337,   \\n0.764518,  0.011806,\\n\"\n      })\n    })]\n  });\n}\nfunction _STScalarField_test_6_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_STScalarField_test_6_createMdxContent, {\n      ...props\n    })\n  }) : _STScalarField_test_6_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/STScalarField/_STScalarField_test_7.md\n\n\nconst _STScalarField_test_7_frontMatter = {};\nconst _STScalarField_test_7_contentTitle = undefined;\n\n\n\n\n\nconst _STScalarField_test_7_toc = [];\nfunction _STScalarField_test_7_createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"In this example we test \", (0,jsx_runtime.jsx)(_components.a, {\n        href: \"/docs-api/STScalarField/Set\",\n        children: \"Set\"\n      }), \" method.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"In this example we set the all values of a timeCompo by using a vector of real.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"program main\\n  use easifemBase\\n  use easifemClasses\\n  implicit none\\n\\n  type( domain_ ) :: dom\\n  type( STScalarFieldLis_ ) :: obj\\n  TYPE( HDF5File_ ) :: meshfile\\n  type( ParameterList_ ) :: param\\n  integer( i4b ) :: ierr\\n  INTEGER( I4B ), Parameter :: timeCompo=2\\n  CHARACTER( LEN = * ), Parameter :: engine=\\\"LIS_OMP\\\"\\n  REAL( DFP ), ALLOCATABLE :: value(:, :)\\n  INTEGER( I4B ) ::tNodes\\n\\n  call meshfile%initiate( filename=\\\"./mesh.h5\\\", mode=\\\"READ\\\" )\\n  call meshfile%open()\\n  call dom%initiate( meshfile, \\\"\\\" )\\n  call meshfile%Deallocate()\\n\\n  CALL FPL_INIT()\\n  CALL param%initiate()\\n  CALL SetSTScalarFieldParam( &\\n    & param=param, &\\n    & name=\\\"U\\\", &\\n    & fieldType=FIELD_TYPE_NORMAL, &\\n    & engine=engine, &\\n    & timeCompo=timeCompo)\\n\\n  call obj%initiate( param, dom )\\n  \\n  !> set all entries\\n  tNodes = dom%getTotalNodes()\\n  CALL Reallocate(value, timeCompo, tNodes)\\n  CALL RANDOM_NUMBER(value)\\n\\n  CALL obj%set( value=value(1,:), timeCompo=1 )\\n  CALL obj%set( value=value(2,:), timeCompo=2 )\\n\\n  CALL display(value(:, 1:5), \\\"value(:, 1:5) = \\\" )\\n  call obj%display( \\\"obj = \\\")\\n\\n  call obj%Deallocate()\\n  call dom%Deallocate()\\n  call param%Deallocate()\\n  call FPL_FINALIZE()\\nend program main\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"                value(:, 1:5) =                 \\n------------------------------------------------\\n0.092312  0.463958  0.375566  0.521316  0.103649\\n0.835652  0.507362  0.215718  0.664761  0.815387\\n\\n#obj =\\n# isInitiated : TRUE\\n# name :U\\n# fieldType : NORMAL\\n# engine :LIS_OMP\\n# comm: 0\\n# myRank: 0\\n# numProcs: 1\\n# global_n: 62\\n# local_n: 62\\n# is: 1\\n# ie: 63\\n# lis_ptr: 94384562440944\\n# domain : ASSOCIATED\\n# domains : NOT ALLOCATED\\n# tSize : 62\\n# # DOF data :\\n# Total Physical Variables :1\\n# Name : U\\n# Space Components : 1\\n# Time Components : 2\\n# Total Nodes : 31\\n# Storage Format : Nodes\\n# Value Map : \\n--------------\\n       1      \\n      32      \\n      63      \\n# VAR :U\\n  DOF-1 ,    DOF-2 ,   \\n--------,  --------,   \\n0.092312,  0.835652,   \\n0.463958,  0.507362,   \\n0.375566,  0.215718,   \\n0.521316,  0.664761,   \\n0.103649,  0.815387,\\n\"\n      })\n    })]\n  });\n}\nfunction _STScalarField_test_7_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_STScalarField_test_7_createMdxContent, {\n      ...props\n    })\n  }) : _STScalarField_test_7_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/STScalarField/_STScalarField_test_8.md\n\n\nconst _STScalarField_test_8_frontMatter = {};\nconst _STScalarField_test_8_contentTitle = undefined;\n\n\n\n\n\nconst _STScalarField_test_8_toc = [];\nfunction _STScalarField_test_8_createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"In this example we test \", (0,jsx_runtime.jsx)(_components.a, {\n        href: \"/docs-api/STScalarField/Set\",\n        children: \"Set\"\n      }), \" method.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"program main\\n  use easifemBase\\n  use easifemClasses\\n  implicit none\\n\\n  type( domain_ ) :: dom\\n  type( STScalarFieldLis_ ) :: obj\\n  type( ScalarFieldLis_ ) :: obj2\\n  TYPE( HDF5File_ ) :: meshfile\\n  type( ParameterList_ ) :: param\\n  integer( i4b ) :: ierr\\n  INTEGER( I4B ), Parameter :: timeCompo=2\\n  CHARACTER( LEN = * ), Parameter :: engine=\\\"LIS_OMP\\\"\\n  REAL( DFP ), ALLOCATABLE :: value(:, :)\\n  INTEGER( I4B ) ::tNodes\\n\\n  call meshfile%initiate( filename=\\\"./mesh.h5\\\", mode=\\\"READ\\\" )\\n  call meshfile%open()\\n  call dom%initiate( meshfile, \\\"\\\" )\\n  call meshfile%Deallocate()\\n\\n  CALL FPL_INIT()\\n  CALL param%initiate()\\n  CALL SetSTScalarFieldParam( &\\n    & param=param, &\\n    & name=\\\"U\\\", &\\n    & fieldType=FIELD_TYPE_NORMAL, &\\n    & engine=engine, &\\n    & timeCompo=timeCompo)\\n\\n  call obj%initiate( param, dom )\\n\\n\\n  CALL SetScalarFieldParam( &\\n    & param=param, &\\n    & name=\\\"U\\\", &\\n    & fieldType=FIELD_TYPE_NORMAL, &\\n    & engine=engine)\\n\\n  call obj2%initiate( param, dom )\\n\\n  !> set all entries\\n  tNodes = dom%getTotalNodes()\\n  CALL Reallocate(value, timeCompo, tNodes)\\n  CALL RANDOM_NUMBER(value)\\n  CALL obj2%set(value=value(1,:))\\n  CALL obj%set( value=obj2, timeCompo=1 )\\n\\n  CALL obj2%set(value=value(2,:))\\n  CALL obj%set( value=obj2, timeCompo=2 )\\n\\n  CALL display(value(:, 1:5), \\\"value(:, 1:5) = \\\" )\\n  CALL obj%display( \\\"obj = \\\")\\n\\n  call obj%Deallocate()\\n  call obj2%Deallocate()\\n  call dom%Deallocate()\\n  call param%Deallocate()\\n  call FPL_FINALIZE()\\nend program main\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"                value(:, 1:5) =                 \\n------------------------------------------------\\n0.040207  0.491438  0.943856  0.172155  0.719283\\n0.183957  0.697048  0.376879  0.552362  0.539996\\n#obj =\\n# isInitiated : TRUE\\n# name :U\\n# fieldType : NORMAL\\n# engine :LIS_OMP\\n# comm: 0\\n# myRank: 0\\n# numProcs: 1\\n# global_n: 62\\n# local_n: 62\\n# is: 1\\n# ie: 63\\n# lis_ptr: 94380060994288\\n# domain : ASSOCIATED\\n# domains : NOT ALLOCATED\\n# tSize : 62\\n# # DOF data :\\n# Total Physical Variables :1\\n# Name : U\\n# Space Components : 1\\n# Time Components : 2\\n# Total Nodes : 31\\n# Storage Format : Nodes\\n# Value Map : \\n--------------\\n       1      \\n      32      \\n      63      \\n# VAR :U\\n  DOF-1 ,    DOF-2 ,   \\n--------,  --------,   \\n0.040207,  0.183957,   \\n0.491438,  0.697048,   \\n0.943856,  0.376879,   \\n0.172155,  0.552362,   \\n0.719283,  0.539996,\\n\"\n      })\n    })]\n  });\n}\nfunction _STScalarField_test_8_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_STScalarField_test_8_createMdxContent, {\n      ...props\n    })\n  }) : _STScalarField_test_8_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/STScalarField/_STScalarField_test_9.md\n\n\nconst _STScalarField_test_9_frontMatter = {};\nconst _STScalarField_test_9_contentTitle = undefined;\n\n\n\n\n\nconst _STScalarField_test_9_toc = [];\nfunction _STScalarField_test_9_createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"In this example we test \", (0,jsx_runtime.jsx)(_components.a, {\n        href: \"/docs-api/STScalarField/Set\",\n        children: \"Set\"\n      }), \" method.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"In this example we set multiple entries.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"program main\\n  use easifemBase\\n  use easifemClasses\\n  implicit none\\n\\n  type( domain_ ) :: dom\\n  type( STScalarFieldLis_ ) :: obj\\n  TYPE( HDF5File_ ) :: meshfile\\n  type( ParameterList_ ) :: param\\n  integer( i4b ) :: ierr\\n  INTEGER( I4B ), Parameter :: timeCompo=2\\n  CHARACTER( LEN = * ), Parameter :: engine=\\\"LIS_OMP\\\"\\n  REAL( DFP ), ALLOCATABLE :: value(:, :)\\n  INTEGER( I4B ) ::tNodes\\n\\n  call meshfile%initiate( filename=\\\"./mesh.h5\\\", mode=\\\"READ\\\" )\\n  call meshfile%open()\\n  call dom%initiate( meshfile, \\\"\\\" )\\n  call meshfile%Deallocate()\\n\\n  CALL FPL_INIT()\\n  CALL param%initiate()\\n  CALL SetSTScalarFieldParam( &\\n    & param=param, &\\n    & name=\\\"U\\\", &\\n    & fieldType=FIELD_TYPE_NORMAL, &\\n    & engine=engine, &\\n    & timeCompo=timeCompo)\\n\\n  call obj%initiate( param, dom )\\n\\n  !> set multiple entries\\n  CALL Reallocate(value, timeCompo, 1)\\n  CALL RANDOM_NUMBER(value)\\n\\n  CALL obj%set( value=value(:,1), globalNode=arange(1,10,2) )\\n\\n  CALL display( value(:, 1), \\\"value(:, 1) = \\\" )\\n  CALL obj%display( \\\"obj = \\\")\\n\\n  call obj%Deallocate()\\n  call dom%Deallocate()\\n  call param%Deallocate()\\n  call FPL_FINALIZE()\\nend program main\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"value(:, 1) = \\n--------------\\n   0.662859   \\n   0.512173   \\n#obj =\\n# isInitiated : TRUE\\n# name :U\\n# fieldType : NORMAL\\n# engine :LIS_OMP\\n# comm: 0\\n# myRank: 0\\n# numProcs: 1\\n# global_n: 62\\n# local_n: 62\\n# is: 1\\n# ie: 63\\n# lis_ptr: 93919708392176\\n# domain : ASSOCIATED\\n# domains : NOT ALLOCATED\\n# tSize : 62\\n# # DOF data :\\n# Total Physical Variables :1\\n# Name : U\\n# Space Components : 1\\n# Time Components : 2\\n# Total Nodes : 31\\n# Storage Format : Nodes\\n# Value Map : \\n--------------\\n       1      \\n      32      \\n      63      \\n# VAR :U\\n DOF-1 ,   DOF-2 ,   \\n-------,  -------,   \\n0.66286,  0.51217,   \\n0.00000,  0.00000,   \\n0.66286,  0.51217,   \\n0.00000,  0.00000,   \\n0.66286,  0.51217,   \\n0.00000,  0.00000,   \\n0.66286,  0.51217,   \\n0.00000,  0.00000,   \\n0.66286,  0.51217,\\n\"\n      })\n    })]\n  });\n}\nfunction _STScalarField_test_9_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_STScalarField_test_9_createMdxContent, {\n      ...props\n    })\n  }) : _STScalarField_test_9_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/STScalarField/_STScalarField_test_10.md\n\n\nconst _STScalarField_test_10_frontMatter = {};\nconst _STScalarField_test_10_contentTitle = undefined;\n\n\n\n\n\nconst _STScalarField_test_10_toc = [];\nfunction _STScalarField_test_10_createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"In this example we test \", (0,jsx_runtime.jsx)(_components.a, {\n        href: \"/docs-api/STScalarField/Set\",\n        children: \"Set\"\n      }), \" method.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"In this example we set multiple entries.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"program main\\n  use easifemBase\\n  use easifemClasses\\n  implicit none\\n\\n  type( domain_ ) :: dom\\n  type( STScalarFieldLis_ ) :: obj\\n  TYPE( HDF5File_ ) :: meshfile\\n  type( ParameterList_ ) :: param\\n  integer( i4b ) :: ierr\\n  INTEGER( I4B ), Parameter :: timeCompo=2\\n  CHARACTER( LEN = * ), Parameter :: engine=\\\"LIS_OMP\\\"\\n  REAL( DFP ), ALLOCATABLE :: value(:, :)\\n  INTEGER( I4B ) ::tNodes\\n\\n  call meshfile%initiate( filename=\\\"./mesh.h5\\\", mode=\\\"READ\\\" )\\n  call meshfile%open()\\n  call dom%initiate( meshfile, \\\"\\\" )\\n  call meshfile%Deallocate()\\n\\n  CALL FPL_INIT()\\n  CALL param%initiate()\\n  CALL SetSTScalarFieldParam( &\\n    & param=param, &\\n    & name=\\\"U\\\", &\\n    & fieldType=FIELD_TYPE_NORMAL, &\\n    & engine=engine, &\\n    & timeCompo=timeCompo)\\n\\n  call obj%initiate( param, dom )\\n\\n  !> set multiple entries\\n  CALL Reallocate(value, timeCompo, 5)\\n  CALL RANDOM_NUMBER(value)\\n\\n  CALL obj%set( value=value, globalNode=arange(1,10,2) )\\n\\n  CALL display(transpose(value(:, 1:5)), \\\"value(:, 1:10) = \\\" )\\n  CALL obj%display( \\\"obj = \\\")\\n\\n  call obj%Deallocate()\\n  call dom%Deallocate()\\n  call param%Deallocate()\\n  call FPL_FINALIZE()\\nend program main\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \" value(:, 1:10) = \\n------------------\\n0.342982  0.188825\\n0.445002  0.148488\\n0.201990  0.782645\\n0.099369  0.353710\\n0.248980  0.880695\\n#obj =\\n# isInitiated : TRUE\\n# name :U\\n# fieldType : NORMAL\\n# engine :LIS_OMP\\n# comm: 0\\n# myRank: 0\\n# numProcs: 1\\n# global_n: 62\\n# local_n: 62\\n# is: 1\\n# ie: 63\\n# lis_ptr: 94584136927984\\n# domain : ASSOCIATED\\n# domains : NOT ALLOCATED\\n# tSize : 62\\n# # DOF data :\\n# Total Physical Variables :1\\n# Name : U\\n# Space Components : 1\\n# Time Components : 2\\n# Total Nodes : 31\\n# Storage Format : Nodes\\n# Value Map : \\n--------------\\n       1      \\n      32      \\n      63      \\n# VAR :U\\n DOF-1 ,   DOF-2 ,   \\n-------,  -------,   \\n0.34298,  0.18882,   \\n0.00000,  0.00000,   \\n0.44500,  0.14849,   \\n0.00000,  0.00000,   \\n0.20199,  0.78265,   \\n0.00000,  0.00000,   \\n0.09937,  0.35371,   \\n0.00000,  0.00000,   \\n0.24898,  0.88070,\\n\"\n      })\n    })]\n  });\n}\nfunction _STScalarField_test_10_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_STScalarField_test_10_createMdxContent, {\n      ...props\n    })\n  }) : _STScalarField_test_10_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/STScalarField/_STScalarField_test_11.md\n\n\nconst _STScalarField_test_11_frontMatter = {};\nconst _STScalarField_test_11_contentTitle = undefined;\n\n\n\n\n\nconst _STScalarField_test_11_toc = [];\nfunction _STScalarField_test_11_createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"In this example we test \", (0,jsx_runtime.jsx)(_components.a, {\n        href: \"/docs-api/STScalarField/Set\",\n        children: \"Set\"\n      }), \" method.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"In this example we set multiple entries.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"program main\\n  use easifemBase\\n  use easifemClasses\\n  implicit none\\n\\n  type( domain_ ) :: dom\\n  type( STScalarFieldLis_ ) :: obj\\n  TYPE( HDF5File_ ) :: meshfile\\n  type( ParameterList_ ) :: param\\n  integer( i4b ) :: ierr\\n  INTEGER( I4B ), Parameter :: timeCompo=2\\n  CHARACTER( LEN = * ), Parameter :: engine=\\\"LIS_OMP\\\"\\n  REAL( DFP ), ALLOCATABLE :: value(:, :)\\n  INTEGER( I4B ) ::tNodes\\n\\n  call meshfile%initiate( filename=\\\"./mesh.h5\\\", mode=\\\"READ\\\" )\\n  call meshfile%open()\\n  call dom%initiate( meshfile, \\\"\\\" )\\n  call meshfile%Deallocate()\\n\\n  CALL FPL_INIT()\\n  CALL param%initiate()\\n  CALL SetSTScalarFieldParam( &\\n    & param=param, &\\n    & name=\\\"U\\\", &\\n    & fieldType=FIELD_TYPE_NORMAL, &\\n    & engine=engine, &\\n    & timeCompo=timeCompo)\\n\\n  call obj%initiate( param, dom )\\n\\n  !> set multiple entries\\n  CALL Reallocate(value, timeCompo, 5)\\n  CALL RANDOM_NUMBER(value)\\n\\n  CALL obj%set( value=value(1,:), globalNode=arange(1,10,2), timeCompo=1 )\\n  CALL obj%set( value=value(2,:), globalNode=arange(1,10,2), timeCompo=2 )\\n\\n  CALL display(transpose(value(:, 1:5)), \\\"value = \\\" )\\n  CALL obj%display( \\\"obj = \\\")\\n\\n  call obj%Deallocate()\\n  call dom%Deallocate()\\n  call param%Deallocate()\\n  call FPL_FINALIZE()\\nend program main\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \" value = \\n------------------\\n0.292455  0.677448\\n0.968783  0.509839\\n0.287100  0.279204\\n0.225393  0.909298\\n0.249951  0.347530\\n#obj =\\n# isInitiated : TRUE\\n# name :U\\n# fieldType : NORMAL\\n# engine :LIS_OMP\\n# comm: 0\\n# myRank: 0\\n# numProcs: 1\\n# global_n: 62\\n# local_n: 62\\n# is: 1\\n# ie: 63\\n# lis_ptr: 94207269784304\\n# domain : ASSOCIATED\\n# domains : NOT ALLOCATED\\n# tSize : 62\\n# # DOF data :\\n# Total Physical Variables :1\\n# Name : U\\n# Space Components : 1\\n# Time Components : 2\\n# Total Nodes : 31\\n# Storage Format : Nodes\\n# Value Map : \\n--------------\\n       1      \\n      32      \\n      63      \\n# VAR :U\\n DOF-1 ,   DOF-2 ,   \\n-------,  -------,   \\n0.29245,  0.67745,   \\n0.00000,  0.00000,   \\n0.96878,  0.50984,   \\n0.00000,  0.00000,   \\n0.28710,  0.27920,   \\n0.00000,  0.00000,   \\n0.22539,  0.90930,   \\n0.00000,  0.00000,   \\n0.24995,  0.34753,\\n\"\n      })\n    })]\n  });\n}\nfunction _STScalarField_test_11_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_STScalarField_test_11_createMdxContent, {\n      ...props\n    })\n  }) : _STScalarField_test_11_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/STScalarField/_STScalarField_test_12.md\n\n\nconst _STScalarField_test_12_frontMatter = {};\nconst _STScalarField_test_12_contentTitle = undefined;\n\n\n\n\n\nconst _STScalarField_test_12_toc = [];\nfunction _STScalarField_test_12_createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"In this example we test \", (0,jsx_runtime.jsx)(_components.a, {\n        href: \"/docs-api/STScalarField/Set\",\n        children: \"Set\"\n      }), \" method.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"In this example we set multiple entries by using FEVariable\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"program main\\n  use easifemBase\\n  use easifemClasses\\n  implicit none\\n\\n  type( domain_ ) :: dom\\n  type( STScalarFieldLis_ ) :: obj\\n  TYPE( HDF5File_ ) :: meshfile\\n  type( ParameterList_ ) :: param\\n  integer( i4b ) :: ierr\\n  INTEGER( I4B ), Parameter :: timeCompo=2\\n  CHARACTER( LEN = * ), Parameter :: engine=\\\"LIS_OMP\\\"\\n  TYPE(FEVariable_) :: fevar\\n  REAL( DFP ), ALLOCATABLE :: value(:, :)\\n  INTEGER( I4B ) ::tNodes\\n\\n  call meshfile%initiate( filename=\\\"./mesh.h5\\\", mode=\\\"READ\\\" )\\n  call meshfile%open()\\n  call dom%initiate( meshfile, \\\"\\\" )\\n  call meshfile%Deallocate()\\n\\n  CALL FPL_INIT()\\n  CALL param%initiate()\\n  CALL SetSTScalarFieldParam( &\\n    & param=param, &\\n    & name=\\\"U\\\", &\\n    & fieldType=FIELD_TYPE_NORMAL, &\\n    & engine=engine, &\\n    & timeCompo=timeCompo)\\n\\n  call obj%initiate( param, dom )\\n\\n  !> set multiple entries\\n  CALL Reallocate(value, timeCompo, 5)\\n  CALL RANDOM_NUMBER(value)\\n\\n  fevar = NodalVariable(value, TypeFEVariableScalar, TypeFEVariableSpaceTime)\\n\\n  CALL obj%set( value=fevar, globalNode=arange(1,10,2) )\\n\\n  CALL Display(fevar, \\\"fevar = \\\")\\n  CALL obj%display( \\\"obj = \\\")\\n\\n  call obj%Deallocate()\\n  call dom%Deallocate()\\n  call param%Deallocate()\\n  call FPL_FINALIZE()\\n  CALL Deallocate(fevar)\\nend program main\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"fevar = \\n# RANK :: 0 (SCALAR)\\n# VarType: SPACE & TIME\\n                    # VALUE:                    \\n------------------------------------------------\\n0.364310  0.982040  0.642988  0.875825  0.827356\\n0.736854  0.852561  0.825102  0.919856  0.946324\\n#obj =\\n# isInitiated : TRUE\\n# name :U\\n# fieldType : NORMAL\\n# engine :LIS_OMP\\n# comm: 0\\n# myRank: 0\\n# numProcs: 1\\n# global_n: 62\\n# local_n: 62\\n# is: 1\\n# ie: 63\\n# lis_ptr: 93943052417776\\n# domain : ASSOCIATED\\n# domains : NOT ALLOCATED\\n# tSize : 62\\n# # DOF data :\\n# Total Physical Variables :1\\n# Name : U\\n# Space Components : 1\\n# Time Components : 2\\n# Total Nodes : 31\\n# Storage Format : Nodes\\n# Value Map : \\n--------------\\n       1      \\n      32      \\n      63      \\n# VAR :U\\n DOF-1 ,   DOF-2 ,   \\n-------,  -------,   \\n0.36431,  0.73685,   \\n0.00000,  0.00000,   \\n0.98204,  0.85256,   \\n0.00000,  0.00000,   \\n0.64299,  0.82510,   \\n0.00000,  0.00000,   \\n0.87583,  0.91986,   \\n0.00000,  0.00000,   \\n0.82736,  0.94632,\\n\"\n      })\n    })]\n  });\n}\nfunction _STScalarField_test_12_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_STScalarField_test_12_createMdxContent, {\n      ...props\n    })\n  }) : _STScalarField_test_12_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/STScalarField/_STScalarField_test_13.md\n\n\nconst _STScalarField_test_13_frontMatter = {};\nconst _STScalarField_test_13_contentTitle = undefined;\n\n\n\n\n\nconst _STScalarField_test_13_toc = [];\nfunction _STScalarField_test_13_createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"In this example we test \", (0,jsx_runtime.jsx)(_components.a, {\n        href: \"/docs-api/STScalarField/Set\",\n        children: \"Set\"\n      }), \" method.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"In this example we set all entries.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"program main\\n  use easifemBase\\n  use easifemClasses\\n  implicit none\\n\\n  type( domain_ ) :: dom\\n  type( STScalarFieldLis_ ) :: obj\\n  TYPE( HDF5File_ ) :: meshfile\\n  type( ParameterList_ ) :: param\\n  integer( i4b ) :: ierr\\n  INTEGER( I4B ), Parameter :: timeCompo=2\\n  CHARACTER( LEN = * ), Parameter :: engine=\\\"LIS_OMP\\\"\\n  INTEGER( I4B ) ::tNodes\\n\\n  call meshfile%initiate( filename=\\\"./mesh.h5\\\", mode=\\\"READ\\\" )\\n  call meshfile%open()\\n  call dom%initiate( meshfile, \\\"\\\" )\\n  call meshfile%Deallocate()\\n\\n  CALL FPL_INIT()\\n  CALL param%initiate()\\n  CALL SetSTScalarFieldParam( &\\n    & param=param, &\\n    & name=\\\"U\\\", &\\n    & fieldType=FIELD_TYPE_NORMAL, &\\n    & engine=engine, &\\n    & timeCompo=timeCompo)\\n\\n  call obj%initiate( param, dom )\\n\\n  call obj%set(value=2.0_DFP)\\n  CALL obj%display( \\\"obj = \\\")\\n\\n  call obj%Deallocate()\\n  call dom%Deallocate()\\n  call param%Deallocate()\\n  call FPL_FINALIZE()\\nend program main\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"#obj =\\n# isInitiated : TRUE\\n# name :U\\n# fieldType : NORMAL\\n# engine :LIS_OMP\\n# comm: 0\\n# myRank: 0\\n# numProcs: 1\\n# global_n: 62\\n# local_n: 62\\n# is: 1\\n# ie: 63\\n# lis_ptr: 93898635594480\\n# domain : ASSOCIATED\\n# domains : NOT ALLOCATED\\n# tSize : 62\\n# # DOF data :\\n# Total Physical Variables :1\\n# Name : U\\n# Space Components : 1\\n# Time Components : 2\\n# Total Nodes : 31\\n# Storage Format : Nodes\\n# Value Map : \\n--------------\\n       1      \\n      32      \\n      63      \\n# VAR :U\\n DOF-1 ,   DOF-2 ,   \\n-------,  -------,   \\n2.00000,  2.00000,   \\n2.00000,  2.00000,   \\n2.00000,  2.00000,   \\n2.00000,  2.00000,   \\n2.00000,  2.00000,\\n\"\n      })\n    })]\n  });\n}\nfunction _STScalarField_test_13_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_STScalarField_test_13_createMdxContent, {\n      ...props\n    })\n  }) : _STScalarField_test_13_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/STScalarField/Set.md\n\n\nconst Set_frontMatter = {};\nconst Set_contentTitle = 'Set';\n\nconst assets = {\n\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst Set_toc = [{\n  \"value\": \"Interface 1\",\n  \"id\": \"interface-1\",\n  \"level\": 2\n}, ...toc, {\n  \"value\": \"Interface 2\",\n  \"id\": \"interface-2\",\n  \"level\": 2\n}, ..._STScalarField_test_4_toc, {\n  \"value\": \"Interface 3\",\n  \"id\": \"interface-3\",\n  \"level\": 2\n}, ..._STScalarField_test_5_toc, {\n  \"value\": \"Interface 4\",\n  \"id\": \"interface-4\",\n  \"level\": 2\n}, ..._STScalarField_test_6_toc, {\n  \"value\": \"Interface 5\",\n  \"id\": \"interface-5\",\n  \"level\": 2\n}, ..._STScalarField_test_7_toc, {\n  \"value\": \"Interface 6\",\n  \"id\": \"interface-6\",\n  \"level\": 2\n}, ..._STScalarField_test_8_toc, {\n  \"value\": \"Interface 7\",\n  \"id\": \"interface-7\",\n  \"level\": 2\n}, ..._STScalarField_test_9_toc, {\n  \"value\": \"Interface 8\",\n  \"id\": \"interface-8\",\n  \"level\": 2\n}, ..._STScalarField_test_10_toc, {\n  \"value\": \"Interface 9\",\n  \"id\": \"interface-9\",\n  \"level\": 2\n}, ..._STScalarField_test_11_toc, {\n  \"value\": \"Interface 10\",\n  \"id\": \"interface-10\",\n  \"level\": 2\n}, {\n  \"value\": \"Interface 11\",\n  \"id\": \"interface-11\",\n  \"level\": 2\n}, {\n  \"value\": \"Interface 12\",\n  \"id\": \"interface-12\",\n  \"level\": 2\n}, {\n  \"value\": \"Interface 13\",\n  \"id\": \"interface-13\",\n  \"level\": 2\n}, ..._STScalarField_test_12_toc, {\n  \"value\": \"Interface 14\",\n  \"id\": \"interface-14\",\n  \"level\": 2\n}, ..._STScalarField_test_13_toc];\nfunction Set_createMdxContent(props) {\n  const _components = {\n    admonition: \"admonition\",\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    header: \"header\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.header, {\n      children: (0,jsx_runtime.jsx)(_components.h1, {\n        id: \"set\",\n        children: \"Set\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"Set entries in \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"STScalarField\"\n      }), \".\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Calling example:\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(\"span\", {\n      class: \"badge badge--primary\",\n      children: \" Set single entry \"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CLASS(STScalarField_), INTENT(INOUT) :: obj\\nINTEGER(I4B):: globalNode\\nREAL(DFP):: VALUE(:)\\nREAL(DFP):: scale\\nLOGICAL(LGT):: addContribution\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(\"span\", {\n      class: \"badge badge--primary\",\n      children: \" Set all entries \"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CLASS(STScalarField_):: obj\\nREAL(DFP):: VALUE(:)\\nREAL(DFP):: scale\\nLOGICAL(LGT):: addContribution\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(\"span\", {\n      class: \"badge badge--primary\",\n      children: \" Set all enties of timecompo\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CLASS(STScalarField_):: obj\\nREAL(DFP):: VALUE\\nINTEGER(I4B):: timeCompo\\nREAL(DFP):: scale\\nLOGICAL(LGT):: addContribution\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(\"span\", {\n      class: \"badge badge--primary\",\n      children: \" Set all entries \"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"REAL(DFP):: VALUE(:, :)\\nREAL(DFP):: scale\\nLOGICAL(LGT):: addContribution\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(\"span\", {\n      class: \"badge badge--primary\",\n      children: \" Set all entries of timeCompo \"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CLASS(STScalarField_):: obj\\nREAL(DFP):: VALUE(:)\\nINTEGER(I4B):: timeCompo\\nREAL(DFP):: scale\\nLOGICAL(LGT):: addContribution\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(\"span\", {\n      class: \"badge badge--primary\",\n      children: \" Set single entries of timeCompo\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CLASS(STScalarField_):: obj\\nTYPE(ScalarField_):: VALUE\\nINTEGER(I4B):: timeCompo\\nREAL(DFP):: scale\\nLOGICAL(LGT):: addContribution\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(\"span\", {\n      class: \"badge badge--primary\",\n      children: \" Set the multiple entries \"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CLASS(STScalarField_):: obj\\nINTEGER(I4B):: globalNode(:)\\nREAL(DFP):: VALUE(:)\\nREAL(DFP):: scale\\nLOGICAL(LGT):: addContribution\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(\"span\", {\n      class: \"badge badge--primary\",\n      children: \" Set multiple entries \"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CLASS(STScalarField_):: obj\\nINTEGER(I4B):: globalNode(:)\\nREAL(DFP):: VALUE(:, :)\\nREAL(DFP):: scale\\nLOGICAL(LGT):: addContribution\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(\"span\", {\n      class: \"badge badge--primary\",\n      children: \" Set multiple entries of timeCompo \"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CLASS(STScalarField_):: obj\\nREAL(DFP):: VALUE(:)\\nINTEGER(I4B):: globalNode(:)\\nINTEGER(I4B):: timeCompo\\nREAL(DFP):: scale\\nLOGICAL(LGT):: addContribution\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(\"span\", {\n      class: \"badge badge--primary\",\n      children: \" Set single entry of a timeCompo \"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CLASS(STScalarField_):: obj\\nREAL(DFP):: VALUE\\nINTEGER(I4B):: globalNode\\nINTEGER(I4B):: timeCompo\\nREAL(DFP):: scale\\nLOGICAL(LGT):: addContribution\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(\"span\", {\n      class: \"badge badge--primary\",\n      children: \" Set multiple entries using triplets\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CLASS(STScalarField_):: obj\\nINTEGER(I4B):: istart\\nINTEGER(I4B):: iend\\nINTEGER(I4B):: stride\\nREAL(DFP):: VALUE(:)\\nREAL(DFP):: scale\\nLOGICAL(LGT):: addContribution\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(\"span\", {\n      class: \"badge badge--primary\",\n      children: \" Set multiple entries using triplets\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CLASS(STScalarField_):: obj\\nREAL(DFP):: VALUE(:, :)\\nINTEGER(I4B):: istart\\nINTEGER(I4B):: iend\\nINTEGER(I4B):: stride\\nREAL(DFP):: scale\\nLOGICAL(LGT):: addContribution\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(\"span\", {\n      class: \"badge badge--primary\",\n      children: \" Set multiple entries using FEVariable \"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CLASS(STScalarField_):: obj\\nTYPE(FEVariable_):: VALUE\\nINTEGER(I4B):: globalNode(:)\\nREAL(DFP):: scale\\nLOGICAL(LGT):: addContribution\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(\"span\", {\n      class: \"badge badge--primary\",\n      children: \" Set all values \"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CLASS(STScalarField_):: obj\\nREAL(DFP):: VALUE\\nREAL(DFP):: scale\\nLOGICAL(LGT):: addContribution\\n\"\n      })\n    }), \"\\n\", \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-1\",\n      children: \"Interface 1\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE SUBROUTINE Set1(obj, globalNode, VALUE, scale, &\\n      & addContribution)\\n    CLASS(STScalarField_), INTENT(INOUT) :: obj\\n    INTEGER(I4B), INTENT(IN) :: globalNode\\n    REAL(DFP), INTENT(IN) :: VALUE(:)\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\\n  END SUBROUTINE Set1\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"This routine sets the single entry of the STScalarField.\"\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"Here, \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"value\"\n            }), \" should be a space-time scalar representing the components of a STScalar.\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"The size of \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"value\"\n            }), \" should be same as \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"obj%timeCompo\"\n            }), \".\"]\n          }), \"\\n\"]\n        }), (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-txt\",\n            children: \"In simple words it does following.\\nSTScalar( :, globalNode ) = value( : )\\n\"\n          })\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-2\",\n      children: \"Interface 2\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \" INTERFACE\\n  MODULE SUBROUTINE Set2(obj, VALUE, scale, addContribution)\\n    CLASS(STScalarField_), TARGET, INTENT(INOUT) :: obj\\n    REAL(DFP), INTENT(IN) :: VALUE(:)\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\\n  END SUBROUTINE Set2\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsx)(_components.p, {\n          children: \"This routine work as follows.\"\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"The size of \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"value\"\n            }), \" should be same as \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"obj%timeCompo\"\n            }), \", then this value is set for all the nodal values.\"]\n          }), \"\\n\"]\n        }), (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-txt\",\n            children: \"STScalar( 1:timeCompo, i ) = value( 1:timeCompo ), for i = 1, tNodes\\n\"\n          })\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_STScalarField_test_4_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-3\",\n      children: \"Interface 3\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \" INTERFACE\\n  MODULE SUBROUTINE Set3(obj, VALUE, timeCompo, scale, &\\n    & addContribution)\\n    CLASS(STScalarField_), INTENT(INOUT) :: obj\\n    REAL(DFP), INTENT(IN) :: VALUE\\n    INTEGER(I4B), INTENT(IN) :: timeCompo\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\\n  END SUBROUTINE Set3\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"This routine sets all values of \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"timeCompo\"\n            }), \" component of the STScalarField to given scalar value \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"value\"\n            })]\n          }), \"\\n\"]\n        }), (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-txt\",\n            children: \"STScalar( timeCompo, i ) = value, for i = 1, tNodes\\n\"\n          })\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_STScalarField_test_5_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-4\",\n      children: \"Interface 4\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \" INTERFACE\\n  MODULE SUBROUTINE Set4(obj, VALUE, scale, addContribution)\\n    CLASS(STScalarField_), INTENT(INOUT) :: obj\\n    REAL(DFP), INTENT(IN) :: VALUE(:, :)\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\\n  END SUBROUTINE Set4\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"This routine sets all entries of STScalar field to a given \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"STScalarField_\"\n            })]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"Here, shape of \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"value\"\n            }), \" should be \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"value(1:timeCompo, tNodes)\"\n            }), \".\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"Rows of \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"value\"\n            }), \" denotes the time components\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"Columns of \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"value\"\n            }), \" represents the spatial nodes.\"]\n          }), \"\\n\"]\n        }), (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"STScalar( :, : ) = value( :, : )\\n\"\n          })\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_STScalarField_test_6_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-5\",\n      children: \"Interface 5\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \" INTERFACE\\n  MODULE SUBROUTINE Set5(obj, VALUE, timeCompo, scale, &\\n    & addContribution)\\n    CLASS(STScalarField_), INTENT(INOUT) :: obj\\n    REAL(DFP), INTENT(IN) :: VALUE(:)\\n    INTEGER(I4B), INTENT(IN) :: timeCompo\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\\n  END SUBROUTINE Set5\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"This routine sets all entries of the component \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"timeCompo\"\n            }), \" of STScalarField to \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"value\"\n            })]\n          }), \"\\n\"]\n        }), (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-txt\",\n            children: \"STScalar( timeCompo, 1:tNodes ) = value( 1:tNodes )\\n\"\n          })\n        }), (0,jsx_runtime.jsx)(_components.admonition, {\n          type: \"note\",\n          children: (0,jsx_runtime.jsxs)(_components.p, {\n            children: [\"The size of \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"value\"\n            }), \" should be equal to the total number of spatial nodes.\"]\n          })\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_STScalarField_test_7_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-6\",\n      children: \"Interface 6\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \" INTERFACE\\n  MODULE SUBROUTINE Set6(obj, VALUE, timeCompo, scale, &\\n    & addContribution)\\n    CLASS(STScalarField_), INTENT(INOUT) :: obj\\n    TYPE(ScalarField_), INTENT(IN) :: VALUE\\n    INTEGER(I4B), INTENT(IN) :: timeCompo\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\\n  END SUBROUTINE Set6\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"This routine sets all entries of the component \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"timeCompo\"\n            }), \" of STScalarField to given ScalarField \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"value\"\n            })]\n          }), \"\\n\"]\n        }), (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-txt\",\n            children: \"STScalar( timeCompo, 1:tNodes ) = value(1:tNodes)\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"The size of value should be same as the total number of nodes in \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"obj\"\n            }), \".\"]\n          }), \"\\n\"]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_STScalarField_test_8_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-7\",\n      children: \"Interface 7\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \" INTERFACE\\n  MODULE SUBROUTINE Set7(obj, VALUE, globalNode, scale, &\\n    & addContribution)\\n    CLASS(STScalarField_), INTENT(INOUT) :: obj\\n    INTEGER(I4B), INTENT(IN) :: globalNode(:)\\n    REAL(DFP), INTENT(IN) :: VALUE(:)\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\\n  END SUBROUTINE Set7\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.p, {\n          children: [\"This method sets the selected enties of a STScalarField to \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"value( : )\"\n          })]\n        }), (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-txt\",\n            children: \"Effectively it does the following:\\nSTScalar( 1:timeCompo, globalNode ) = value( 1:timeCompo ), for entries in global nodes\\n\"\n          })\n        }), (0,jsx_runtime.jsx)(_components.admonition, {\n          type: \"note\",\n          children: (0,jsx_runtime.jsxs)(_components.p, {\n            children: [\"size of \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"value\"\n            }), \" should be equal to the \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"obj%timeCompo\"\n            })]\n          })\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_STScalarField_test_9_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-8\",\n      children: \"Interface 8\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \" INTERFACE\\n  MODULE SUBROUTINE Set8(obj, globalNode, VALUE, scale, &\\n    & addContribution)\\n    CLASS(STScalarField_), INTENT(INOUT) :: obj\\n    INTEGER(I4B), INTENT(IN) :: globalNode(:)\\n    REAL(DFP), INTENT(IN) :: VALUE(:, :)\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\\n  END SUBROUTINE Set8\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"This routine sets selected entries of STScalarField.\"\n          }), \"\\n\"]\n        }), (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-txt\",\n            children: \"STScalar( 1:timeCompo, globalNode ) = value( 1:timeCompo, 1:size(globalNode) )\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"SIZE(value, 1)\"\n            }), \" should be equal to \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"obj%timeCompo\"\n            })]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"SIZE(value, 2)\"\n            }), \" should be equal to \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"SIZE(globalNode)\"\n            })]\n          }), \"\\n\"]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_STScalarField_test_10_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-9\",\n      children: \"Interface 9\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \" INTERFACE\\n  MODULE SUBROUTINE Set9(obj, VALUE, globalNode, timeCompo, scale, &\\n    & addContribution)\\n    CLASS(STScalarField_), INTENT(INOUT) :: obj\\n    REAL(DFP), INTENT(IN) :: VALUE(:)\\n    INTEGER(I4B), INTENT(IN) :: globalNode(:)\\n    INTEGER(I4B), INTENT(IN) :: timeCompo\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\\n  END SUBROUTINE Set9\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsx)(_components.p, {\n          children: \"This routine sets the selected components of selected nodes to given value.\"\n        }), (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-txt\",\n            children: \"STScalar( timeCompo, globalNode ) = value( 1:SIZE(globalNode) )\\n\"\n          })\n        }), (0,jsx_runtime.jsx)(_components.admonition, {\n          type: \"note\",\n          children: (0,jsx_runtime.jsx)(_components.p, {\n            children: \"size of globalNode should be equal to the size of value.\"\n          })\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_STScalarField_test_11_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-10\",\n      children: \"Interface 10\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \" INTERFACE\\n  MODULE SUBROUTINE Set10(obj, VALUE, globalNode, timeCompo, scale, &\\n    & addContribution)\\n    CLASS(STScalarField_), INTENT(INOUT) :: obj\\n    REAL(DFP), INTENT(IN) :: VALUE\\n    INTEGER(I4B), INTENT(IN) :: globalNode\\n    INTEGER(I4B), INTENT(IN) :: timeCompo\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\\n  END SUBROUTINE Set10\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"This routine sets the single entry of a given time components.\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-11\",\n      children: \"Interface 11\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \" INTERFACE\\n  MODULE SUBROUTINE Set11(obj, VALUE, istart, iend, stride, scale, &\\n    & addContribution)\\n    CLASS(STScalarField_), INTENT(INOUT) :: obj\\n    INTEGER(I4B), INTENT(IN) :: istart\\n    INTEGER(I4B), INTENT(IN) :: iend\\n    INTEGER(I4B), INTENT(IN) :: stride\\n    REAL(DFP), INTENT(IN) :: VALUE(:)\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\\n  END SUBROUTINE Set11\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Set multiple entries using triad\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.admonition, {\n      type: \"note\",\n      children: (0,jsx_runtime.jsxs)(_components.p, {\n        children: [\"The size of value should be equal to \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"obj%timeCompo\"\n        })]\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-12\",\n      children: \"Interface 12\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n  MODULE SUBROUTINE Set12(obj, VALUE, istart, iend, stride, scale, &\\n    & addContribution)\\n    CLASS(STScalarField_), INTENT(INOUT) :: obj\\n    REAL(DFP), INTENT(IN) :: VALUE(:, :)\\n    INTEGER(I4B), INTENT(IN) :: istart\\n    INTEGER(I4B), INTENT(IN) :: iend\\n    INTEGER(I4B), INTENT(IN) :: stride\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\\n  END SUBROUTINE Set12\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Set multiple entries using triad\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.admonition, {\n      type: \"note\",\n      children: (0,jsx_runtime.jsxs)(_components.p, {\n        children: [\"The number of rows in value should be equal to \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"obj%timeCompo\"\n        })]\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.admonition, {\n      type: \"note\",\n      children: (0,jsx_runtime.jsxs)(_components.p, {\n        children: [\"The number of cols in value should be equal to size of \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"istart:iend:stride\"\n        })]\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-13\",\n      children: \"Interface 13\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \" INTERFACE\\n  MODULE SUBROUTINE Set13(obj, VALUE, globalNode, scale, &\\n    & addContribution)\\n    CLASS(STScalarField_), INTENT(INOUT) :: obj\\n    TYPE(FEVariable_), INTENT(IN) :: VALUE\\n    INTEGER(I4B), INTENT(IN) :: globalNode(:)\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\\n  END SUBROUTINE Set13\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"Set the value by using FEVariable\"\n          }), \"\\n\"]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_STScalarField_test_12_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-14\",\n      children: \"Interface 14\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE SUBROUTINE Set14(obj, VALUE, scale, addContribution)\\n    CLASS(STScalarField_), INTENT(INOUT) :: obj\\n    REAL(DFP), INTENT(IN) :: VALUE\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\\n  END SUBROUTINE Set14\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"Set all the values of STScalarField to a scalar value \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"Value\"\n            })]\n          }), \"\\n\"]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_STScalarField_test_13_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    })]\n  });\n}\nfunction Set_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(Set_createMdxContent, {\n      ...props\n    })\n  }) : Set_createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./docs/docs-api/STScalarField/Set.md\n");

/***/ })

}]);