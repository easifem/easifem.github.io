"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkeasifem_docs"] = globalThis["webpackChunkeasifem_docs"] || []).push([["content---docs-api-quadrature-point-initiatea-3-a-fe8"],{

/***/ "./docs/docs-api/QuadraturePoint/Initiate.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  assets: () => (/* binding */ assets),\n  contentTitle: () => (/* binding */ Initiate_contentTitle),\n  \"default\": () => (/* binding */ Initiate_MDXContent),\n  frontMatter: () => (/* binding */ Initiate_frontMatter),\n  metadata: () => (/* reexport */ site_docs_docs_api_quadrature_point_initiate_md_a3a_namespaceObject),\n  toc: () => (/* binding */ Initiate_toc)\n});\n\n;// ./.docusaurus/docusaurus-plugin-content-docs/docs-api/site-docs-docs-api-quadrature-point-initiate-md-a3a.json\nconst site_docs_docs_api_quadrature_point_initiate_md_a3a_namespaceObject = /*#__PURE__*/JSON.parse('{\"id\":\"QuadraturePoint/Initiate\",\"title\":\"Initiate\",\"description\":\"This subroutine constructs the quadrature points.\",\"source\":\"@site/docs/docs-api/QuadraturePoint/Initiate.md\",\"sourceDirName\":\"QuadraturePoint\",\"slug\":\"/QuadraturePoint/Initiate\",\"permalink\":\"/docs-api/QuadraturePoint/Initiate\",\"draft\":false,\"unlisted\":false,\"editUrl\":\"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/QuadraturePoint/Initiate.md\",\"tags\":[],\"version\":\"current\",\"lastUpdatedAt\":1539502055000,\"frontMatter\":{},\"sidebar\":\"tutorialSidebar\",\"previous\":{\"title\":\"GetTotalQuadraturePoints\",\"permalink\":\"/docs-api/QuadraturePoint/GetTotalQuadraturePoints\"},\"next\":{\"title\":\"MdEncode\",\"permalink\":\"/docs-api/QuadraturePoint/MdEncode\"}}');\n// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n// EXTERNAL MODULE: ./node_modules/@mdx-js/react/lib/index.js\nvar lib = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js + 2 modules\nvar Tabs = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js + 1 modules\nvar TabItem = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js\");\n;// ./docs/docs-api/QuadraturePoint/_Initiate_test_1d.md\n\n\nconst frontMatter = {};\nconst contentTitle = undefined;\n\n\n\n\n\nconst toc = [];\nfunction _createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsx)(_components.pre, {\n    children: (0,jsx_runtime.jsx)(_components.code, {\n      className: \"language-fortran\",\n      children: \"PROGRAM main\\nUSE easifemBase\\nIMPLICIT NONE\\n\\nTYPE(QuadraturePoint_) :: obj\\nTYPE(ReferenceLine_) :: refelem\\nINTEGER(I4B) :: order\\nrefelem = ReferenceLine(nsd=1_I4B)\\norder = 4_I4B\\nCALL initiate(obj=obj, &\\n  & refelem=refelem, &\\n  & order=order,  &\\n  & quadratureType=\\\"GaussLegendre\\\")\\nCALL display(mdencode(obj), \\\"\\\")\\nEND PROGRAM main\\n\"\n    })\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/QuadraturePoint/_Initiate_test_1a.md\n\n\nconst _Initiate_test_1a_frontMatter = {};\nconst _Initiate_test_1a_contentTitle = undefined;\n\n\n\n\n\nconst _Initiate_test_1a_toc = [];\nfunction _Initiate_test_1a_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsx)(_components.pre, {\n    children: (0,jsx_runtime.jsx)(_components.code, {\n      className: \"language-fortran\",\n      children: \"PROGRAM main\\nUSE easifemBase\\nIMPLICIT NONE\\nTYPE(QuadraturePoint_) :: obj\\nTYPE(ReferenceLine_) :: refelem\\nINTEGER(I4B) :: order\\n\\nrefelem = ReferenceLine(nsd=1_I4B)\\norder = 4_I4B\\nCALL initiate(obj=obj, &\\n  & refelem=refelem, &\\n  & order=order,  &\\n  & quadratureType=GaussLegendre)\\nCALL display(mdencode(obj), \\\"\\\")\\nEND PROGRAM main\\n\"\n    })\n  });\n}\nfunction _Initiate_test_1a_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_Initiate_test_1a_createMdxContent, {\n      ...props\n    })\n  }) : _Initiate_test_1a_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/QuadraturePoint/Initiate.md\n\n\nconst Initiate_frontMatter = {};\nconst Initiate_contentTitle = 'Initiate';\n\nconst assets = {\n\n};\n\n\n\n\n\n\n\nconst Initiate_toc = [{\n  \"value\": \"Interface 1\",\n  \"id\": \"interface-1\",\n  \"level\": 2\n}, ...toc, {\n  \"value\": \"Interface 2\",\n  \"id\": \"interface-2\",\n  \"level\": 2\n}, {\n  \"value\": \"Interface 3\",\n  \"id\": \"interface-3\",\n  \"level\": 2\n}, ..._Initiate_test_1a_toc, {\n  \"value\": \"Interface 4\",\n  \"id\": \"interface-4\",\n  \"level\": 2\n}, {\n  \"value\": \"Interface 5\",\n  \"id\": \"interface-5\",\n  \"level\": 2\n}, {\n  \"value\": \"Interface 6\",\n  \"id\": \"interface-6\",\n  \"level\": 2\n}, {\n  \"value\": \"Interface 7\",\n  \"id\": \"interface-7\",\n  \"level\": 2\n}, {\n  \"value\": \"Interface 8\",\n  \"id\": \"interface-8\",\n  \"level\": 2\n}, {\n  \"value\": \"QuadraturePoint (Constructor function)\",\n  \"id\": \"quadraturepoint-constructor-function\",\n  \"level\": 2\n}, {\n  \"value\": \"QuadraturePoint_Pointer\",\n  \"id\": \"quadraturepoint_pointer\",\n  \"level\": 2\n}];\nfunction Initiate_createMdxContent(props) {\n  const _components = {\n    admonition: \"admonition\",\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    header: \"header\",\n    li: \"li\",\n    mdxAdmonitionTitle: \"mdxAdmonitionTitle\",\n    p: \"p\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.header, {\n      children: (0,jsx_runtime.jsx)(_components.h1, {\n        id: \"initiate\",\n        children: \"Initiate\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This subroutine constructs the quadrature points.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-1\",\n      children: \"Interface 1\"\n    }), \"\\n\", \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE Initiate\\n  MODULE SUBROUTINE quad_initiate3(obj, refElem, order, quadratureType,  &\\n    & alpha, beta, lambda)\\n    TYPE(QuadraturePoint_), INTENT(INOUT) :: obj\\n    !! Total number of xidimension\\n    CLASS(ReferenceElement_), INTENT(IN) :: refElem\\n    !! Reference element\\n    INTEGER(I4B), INTENT(IN) :: order\\n    !! order of integrand\\n    CHARACTER(*), INTENT(IN) :: quadratureType\\n    !! Type of quadrature points\\n    !! \\\"GaussLegendre\\\"\\n    !! \\\"GaussLegendreLobatto\\\"\\n    !! \\\"GaussLegendreRadau\\\", \\\"GaussLegendreRadauLeft\\\"\\n    !! \\\"GaussLegendreRadauRight\\\"\\n    !! \\\"GaussChebyshev\\\"\\n    !! \\\"GaussChebyshevLobatto\\\"\\n    !! \\\"GaussChebyshevRadau\\\", \\\"GaussChebyshevRadauLeft\\\"\\n    !! \\\"GaussChebyshevRadauRight\\\"\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: alpha\\n    !! Jacobi parameter\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: beta\\n    !! Jacobi parameter\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: lambda\\n    !! Ultraspherical parameter\\n  END SUBROUTINE quad_initiate3\\nEND INTERFACE Initiate\\n\"\n          })\n        }), (0,jsx_runtime.jsx)(_components.admonition, {\n          type: \"note\",\n          children: (0,jsx_runtime.jsx)(_components.mdxAdmonitionTitle, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"quadratureType\"\n            })\n          })\n        }), (0,jsx_runtime.jsx)(_components.p, {\n          children: \"Type of quadrature points:\"\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"\\\"GaussLegendre\\\"\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"\\\"GaussLegendreLobatto\\\"\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"\\\"GaussLegendreRadau\\\", \\\"GaussLegendreRadauLeft\\\"\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"\\\"GaussLegendreRadauRight\\\"\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"\\\"GaussChebyshev\\\"\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"\\\"GaussChebyshevLobatto\\\"\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"\\\"GaussChebyshevRadau\\\", \\\"GaussChebyshevRadauLeft\\\"\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"\\\"GaussChebyshevRadauRight\\\"\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"\\\"GaussJacobi\\\"\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"\\\"GaussJacobiLobatto\\\"\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"\\\"GaussJacobiRadau\\\", \\\"GaussJacobiRadauLeft\\\"\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"\\\"GaussJacobiRadauRight\\\"\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"\\\"GaussUltraspherical\\\"\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"\\\"GaussUltrasphericalLobatto\\\"\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"\\\"GaussUltrasphericalRadau\\\", \\\"GaussUltraspericalRadauLeft\\\"\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"\\\"GaussUltrasphericalRadauRight\\\"\"\n          }), \"\\n\"]\n        }), (0,jsx_runtime.jsxs)(_components.p, {\n          children: [\"In the case of \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"Jacobi\"\n          }), \" \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"alpha\"\n          }), \" and \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"beta\"\n          }), \" should be given, and in the case of \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"Ultraspherical\"\n          }), \" \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"lambda\"\n          }), \" should be given.\"]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-2\",\n      children: \"Interface 2\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE Initiate\\n  MODULE SUBROUTINE quad_initiate4(obj, refElem, nips, quadratureType, &\\n    & alpha, beta, lambda)\\n    TYPE(QuadraturePoint_), INTENT(INOUT) :: obj\\n    !! Total number of xidimension\\n    CLASS(ReferenceElement_), INTENT(IN) :: refElem\\n    !! Reference element\\n    INTEGER(I4B), INTENT(IN) :: nips(1)\\n    !! order of integrand\\n    CHARACTER(*), INTENT(IN) :: quadratureType\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: alpha\\n    !! Jacobi parameter\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: beta\\n    !! Jacobi parameter\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: lambda\\n    !! Ultraspherical parameter\\n  END SUBROUTINE quad_initiate4\\nEND INTERFACE Initiate\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.admonition, {\n      type: \"info\",\n      children: (0,jsx_runtime.jsx)(_components.p, {\n        children: \"This method allows us to initiate the quadrature points by specifying the number of integration points, and quadrature type.\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-3\",\n      children: \"Interface 3\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE Initiate\\n  MODULE SUBROUTINE quad_initiate5( &\\n    & obj, &\\n    & refElem, &\\n    & order, &\\n    & quadratureType,  &\\n    & alpha, beta, lambda)\\n    TYPE(QuadraturePoint_), INTENT(INOUT) :: obj\\n    !! Total number of xidimension\\n    CLASS(ReferenceElement_), INTENT(IN) :: refElem\\n    !! Reference-element\\n    INTEGER(I4B), INTENT(IN) :: order\\n    !! order of integrand\\n    INTEGER(I4B), INTENT(IN) :: quadratureType\\n    !! Type of quadrature points\\n    !! GaussLegendre\\n    !! GaussLegendreLobatto\\n    !! GaussLegendreRadau\\n    !! GaussLegendreRadauLeft\\n    !! GaussLegendreRadauRight\\n    !! GaussChebyshev\\n    !! GaussChebyshevLobatto\\n    !! GaussChebyshevRadau\\n    !! GaussChebyshevRadauLeft\\n    !! GaussChebyshevRadauRight\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: alpha\\n    !! Jacobi parameter\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: beta\\n    !! Jacobi parameter\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: lambda\\n    !! Ultraspherical parameter\\n  END SUBROUTINE quad_initiate5\\nEND INTERFACE Initiate\\n\"\n          })\n        }), (0,jsx_runtime.jsx)(_components.admonition, {\n          type: \"note\",\n          children: (0,jsx_runtime.jsx)(_components.mdxAdmonitionTitle, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"quadratureType\"\n            })\n          })\n        }), (0,jsx_runtime.jsx)(_components.p, {\n          children: \"Type of quadrature points:\"\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"GaussLegendre\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"GaussLegendreLobatto\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"GaussLegendreRadau, GaussLegendreRadauLeft\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"GaussLegendreRadauRight\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"GaussChebyshev\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"GaussChebyshevLobatto\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"GaussChebyshevRadau, GaussChebyshevRadauLeft\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"GaussChebyshevRadauRight\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"GaussJacobi\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"GaussJacobiLobatto\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"GaussJacobiRadau, GaussJacobiRadauLeft\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"GaussJacobiRadauRight\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"GaussUltraspherical\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"GaussUltrasphericalLobatto\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"GaussUltrasphericalRadau, GaussUltraspericalRadauLeft\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"GaussUltrasphericalRadauRight\"\n          }), \"\\n\"]\n        }), (0,jsx_runtime.jsxs)(_components.p, {\n          children: [\"In the case of \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"Jacobi\"\n          }), \" \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"alpha\"\n          }), \" and \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"beta\"\n          }), \" should be given, and in the case of \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"Ultraspherical\"\n          }), \" \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"lambda\"\n          }), \" should be given.\"]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_Initiate_test_1a_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-4\",\n      children: \"Interface 4\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE Initiate\\n  MODULE SUBROUTINE quad_initiate6( &\\n    & obj, &\\n    & refElem, &\\n    & nips, &\\n    & quadratureType, &\\n    & alpha, &\\n    & beta, &\\n    & lambda)\\n    TYPE(QuadraturePoint_), INTENT(INOUT) :: obj\\n    !! Total number of xidimension\\n    CLASS(ReferenceElement_), INTENT(IN) :: refElem\\n    !! Reference element\\n    INTEGER(I4B), INTENT(IN) :: nips(1)\\n    !! order of integrand\\n    INTEGER(I4B), INTENT(IN) :: quadratureType\\n    !! Type of quadrature points\\n    !! GaussLegendre\\n    !! GaussLegendreLobatto\\n    !! GaussLegendreRadau\\n    !! GaussLegendreRadauLeft\\n    !! GaussLegendreRadauRight\\n    !! GaussChebyshev\\n    !! GaussChebyshevLobatto\\n    !! GaussChebyshevRadau\\n    !! GaussChebyshevRadauLeft\\n    !! GaussChebyshevRadauRight\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: alpha\\n    !! Jacobi parameter\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: beta\\n    !! Jacobi parameter\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: lambda\\n    !! Ultraspherical parameter\\n  END SUBROUTINE quad_initiate6\\nEND INTERFACE Initiate\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-5\",\n      children: \"Interface 5\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE Initiate\\n  MODULE SUBROUTINE quad_initiate7( &\\n    & obj, &\\n    & refElem, &\\n    & p, q, r, &\\n    & quadratureType1, &\\n    & quadratureType2, &\\n    & quadratureType3, &\\n    & alpha1, beta1, lambda1,  &\\n    & alpha2, beta2, lambda2,  &\\n    & alpha3, beta3, lambda3)\\n    TYPE(QuadraturePoint_), INTENT(INOUT) :: obj\\n    !! Total number of xidimension\\n    CLASS(ReferenceElement_), INTENT(IN) :: refElem\\n    !! Reference-element\\n    INTEGER(I4B), INTENT(IN) :: p\\n    !! order of integrand in x\\n    INTEGER(I4B), INTENT(IN) :: q\\n    !! order of integrand in y\\n    INTEGER(I4B), INTENT(IN) :: r\\n    !! order of integrand in z direction\\n    INTEGER(I4B), INTENT(IN) :: quadratureType1\\n    !! Type of quadrature points\\n    !! GaussLegendre\\n    !! GaussLegendreLobatto\\n    !! GaussLegendreRadau\\n    !! GaussLegendreRadauLeft\\n    !! GaussLegendreRadauRight\\n    !! GaussChebyshev\\n    !! GaussChebyshevLobatto\\n    !! GaussChebyshevRadau\\n    !! GaussChebyshevRadauLeft\\n    !! GaussChebyshevRadauRight\\n    INTEGER(I4B), INTENT(IN) :: quadratureType2\\n    !! Type of quadrature points\\n    INTEGER(I4B), INTENT(IN) :: quadratureType3\\n    !! Type of quadrature points\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: alpha1, beta1, lambda1\\n    !! Jacobi parameter and Ultraspherical parameters\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: alpha2, beta2, lambda2\\n    !! Jacobi parameter and Ultraspherical parameters\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: alpha3, beta3, lambda3\\n    !! Jacobi parameter and Ultraspherical parameters\\n  END SUBROUTINE quad_initiate7\\nEND INTERFACE Initiate\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-6\",\n      children: \"Interface 6\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE Initiate\\n  MODULE SUBROUTINE quad_initiate8( &\\n    & obj, &\\n    & refElem, &\\n    & nipsx, &\\n    & nipsy, &\\n    & nipsz, &\\n    & quadratureType1, &\\n    & quadratureType2, &\\n    & quadratureType3, &\\n    & alpha1, beta1, lambda1, &\\n    & alpha2, beta2, lambda2, &\\n    & alpha3, beta3, lambda3)\\n    TYPE(QuadraturePoint_), INTENT(INOUT) :: obj\\n    !! Total number of xidimension\\n    CLASS(ReferenceElement_), INTENT(IN) :: refElem\\n    !! Reference element\\n    INTEGER(I4B), INTENT(IN) :: nipsx(1)\\n    !! number of integration points in x direction\\n    INTEGER(I4B), INTENT(IN) :: nipsy(1)\\n    !! number of integration points in y direction\\n    INTEGER(I4B), INTENT(IN) :: nipsz(1)\\n    !! number of integration points in z direction\\n    INTEGER(I4B), INTENT(IN) :: quadratureType1\\n    !! Type of quadrature points\\n    !! GaussLegendre\\n    !! GaussLegendreLobatto\\n    !! GaussLegendreRadau\\n    !! GaussLegendreRadauLeft\\n    !! GaussLegendreRadauRight\\n    !! GaussChebyshev\\n    !! GaussChebyshevLobatto\\n    !! GaussChebyshevRadau\\n    !! GaussChebyshevRadauLeft\\n    !! GaussChebyshevRadauRight\\n    INTEGER(I4B), INTENT(IN) :: quadratureType2\\n    !! Type of quadrature points\\n    INTEGER(I4B), INTENT(IN) :: quadratureType3\\n    !! Type of quadrature points\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: alpha1, beta1, lambda1\\n    !! Jacobi parameter and Ultraspherical parameter\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: alpha2, beta2, lambda2\\n    !! Jacobi parameter and Ultraspherical parameter\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: alpha3, beta3, lambda3\\n    !! Jacobi parameter and Ultraspherical parameter\\n  END SUBROUTINE quad_initiate8\\nEND INTERFACE Initiate\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-7\",\n      children: \"Interface 7\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"MODULE PURE SUBROUTINE Initiate( obj, Points )\\n  CLASS( QuadraturePoint_ ), INTENT( INOUT ) :: obj\\n  REAL( DFP ), INTENT( IN ) :: Points( :, : )\\n    !! Points contains the quadrature points and weights\\n    !! Points( :, ipoint ) contains quadrature points and weights of ipoint\\n    !! quadrature point. The last row contains the weight. The rest of the\\n    !! rows contains the coordinates of quadrature.\\nEND SUBROUTINE Initiate\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"This subroutine converts the quadrature points into \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"QuadraturePoint_\"\n      }), \" data type.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.admonition, {\n      type: \"caution\",\n      children: (0,jsx_runtime.jsx)(_components.p, {\n        children: \"This routine is for developers only, normal user should not worry about this interface.\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.admonition, {\n      type: \"info\",\n      children: [(0,jsx_runtime.jsx)(_components.mdxAdmonitionTitle, {\n        children: (0,jsx_runtime.jsx)(_components.code, {\n          children: \"Points\"\n        })\n      }), (0,jsx_runtime.jsxs)(_components.ul, {\n        children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n          children: [(0,jsx_runtime.jsx)(_components.code, {\n            children: \"Points\"\n          }), \" contains the quadrature points and weights\"]\n        }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n          children: [\"for example, \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"Points( :, ipoint )\"\n          }), \" contains quadrature points and weights of \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"ipoint\"\n          }), \" quadrature point.\"]\n        }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n          children: \"The last row always contains the weight.\"\n        }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n          children: \"The rest of the rows contains the coordinates of quadrature.\"\n        }), \"\\n\"]\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-8\",\n      children: \"Interface 8\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(\"span\", {\n      class: \"badge badge--warning\",\n      children: \" developers only \"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"MODULE PURE SUBROUTINE Initiate( obj, tXi, tPoints )\\n  CLASS( QuadraturePoint_ ), INTENT( INOUT ) :: obj\\n  INTEGER( I4B ), INTENT( IN ) :: tXi\\n  !! Total number of xidimension\\n  !! For line tXi=1\\n  !! For 2D element tXi=2\\n  !! For 3D element tXi=3\\n  INTEGER( I4B ), INTENT( IN ) :: tPoints\\n  !! Total number quadrature points\\nEND SUBROUTINE Initiate\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"The following interface allocates the memory for storing the quadrature points.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.admonition, {\n      type: \"caution\",\n      children: (0,jsx_runtime.jsx)(_components.p, {\n        children: \"This routine is for developers only, normal user should not worry about this interface.\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"quadraturepoint-constructor-function\",\n      children: \"QuadraturePoint (Constructor function)\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"MODULE PURE FUNCTION QuadraturePoint( Points ) RESULT( obj )\\n  TYPE( QuadraturePoint_ ) :: obj\\n  REAL( DFP ), INTENT( IN ) :: Points( :, : )\\nEND FUNCTION QuadraturePoint\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"This function converts \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"Points\"\n      }), \" to an instance of QuadraturePoint.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"quadraturepoint_pointer\",\n      children: \"QuadraturePoint_Pointer\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"MODULE PURE FUNCTION QuadraturePoint_Pointer( Points ) RESULT( obj )\\n  CLASS( QuadraturePoint_ ), POINTER :: obj\\n  REAL( DFP ), INTENT( IN ) :: Points( :, : )\\nEND FUNCTION QuadraturePoint_Pointer\\n\"\n      })\n    })]\n  });\n}\nfunction Initiate_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(Initiate_createMdxContent, {\n      ...props\n    })\n  }) : Initiate_createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./docs/docs-api/QuadraturePoint/Initiate.md\n");

/***/ })

}]);