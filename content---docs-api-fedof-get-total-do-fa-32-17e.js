"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkeasifem_docs"] = globalThis["webpackChunkeasifem_docs"] || []).push([["content---docs-api-fedof-get-total-do-fa-32-17e"],{

/***/ "./docs/docs-api/FEDOF/GetTotalDOF.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  assets: () => (/* binding */ assets),\n  contentTitle: () => (/* binding */ GetTotalDOF_contentTitle),\n  \"default\": () => (/* binding */ GetTotalDOF_MDXContent),\n  frontMatter: () => (/* binding */ GetTotalDOF_frontMatter),\n  metadata: () => (/* reexport */ site_docs_docs_api_fedof_get_total_dof_md_a32_namespaceObject),\n  toc: () => (/* binding */ GetTotalDOF_toc)\n});\n\n;// ./.docusaurus/docusaurus-plugin-content-docs/docs-api/site-docs-docs-api-fedof-get-total-dof-md-a32.json\nconst site_docs_docs_api_fedof_get_total_dof_md_a32_namespaceObject = /*#__PURE__*/JSON.parse('{\"id\":\"FEDOF/GetTotalDOF\",\"title\":\"GetTotalDOF\",\"description\":\"These methods provide a comprehensive interface for querying degree of freedom information at different levels of granularity, from global system-wide counts to element-specific and entity-specific counts.\",\"source\":\"@site/docs/docs-api/FEDOF/GetTotalDOF.md\",\"sourceDirName\":\"FEDOF\",\"slug\":\"/FEDOF/GetTotalDOF\",\"permalink\":\"/docs-api/FEDOF/GetTotalDOF\",\"draft\":false,\"unlisted\":false,\"editUrl\":\"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/FEDOF/GetTotalDOF.md\",\"tags\":[],\"version\":\"current\",\"lastUpdatedAt\":1539502055000,\"frontMatter\":{},\"sidebar\":\"tutorialSidebar\",\"previous\":{\"title\":\"GetTotalCellDOF\",\"permalink\":\"/docs-api/FEDOF/GetTotalCellDOF\"},\"next\":{\"title\":\"GetTotalEdgeDOF\",\"permalink\":\"/docs-api/FEDOF/GetTotalEdgeDOF\"}}');\n// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n// EXTERNAL MODULE: ./node_modules/@mdx-js/react/lib/index.js\nvar lib = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/CodeBlock/index.js + 27 modules\nvar CodeBlock = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/CodeBlock/index.js\");\n;// ./node_modules/raw-loader/dist/cjs.js!./docs/docs-api/FEDOF/examples/_GetTotalDOF_test_1.F90\n/* harmony default export */ const _GetTotalDOF_test_1 = (\"!> author: Vikas Sharma, Ph. D.\\n! date: 2025-06-08\\n! summary:  Testing GetTotalDOF method of FEDOF class\\n\\nPROGRAM main\\nUSE FEDOF_Class\\nUSE FEDomain_Class\\nUSE AbstractMesh_Class\\nUSE HDF5File_Class\\nUSE Display_Method\\nUSE GlobalData\\nUSE Test_Method\\nUSE ExceptionHandler_Class, ONLY: e, EXCEPTION_INFORMATION\\nUSE AppendUtility\\nUSE ArangeUtility\\nUSE ReallocateUtility\\n\\nIMPLICIT NONE\\n\\nCHARACTER(*), PARAMETER :: &\\n  filename = \\\"../../FEMesh/examples/meshdata/small_tri3_mesh.h5\\\", &\\n  baseContinuity = \\\"H1\\\", &\\n  baseInterpolation = \\\"Heirarchical\\\", &\\n  testname = baseContinuity//\\\" \\\"//baseInterpolation//\\\" GetTotalDOF\\\"\\n\\nTYPE(FEDOF_) :: fedof\\nTYPE(FEDomain_) :: dom\\nCLASS(AbstractMesh_), POINTER :: meshptr => NULL()\\nTYPE(HDF5File_) :: meshfile\\nINTEGER(I4B) :: order, totalVertexNodes, totalFaces\\nLOGICAL(LGT) :: isok\\n\\nCALL e%SetQuietMode(EXCEPTION_INFORMATION, .TRUE.)\\n\\nCALL meshfile%Initiate(filename, mode=\\\"READ\\\")\\nCALL meshfile%OPEN()\\nCALL dom%Initiate(meshfile, '')\\nmeshptr => dom%GetMeshPointer()\\ntotalVertexNodes = meshptr%GetTotalVertexNodes()\\ntotalFaces = meshptr%GetTotalFaces()\\n\\nCALL test1\\nCALL test2\\nCALL test3\\n\\nCALL dom%DEALLOCATE()\\nCALL meshfile%DEALLOCATE()\\n\\nCONTAINS\\n\\n!----------------------------------------------------------------------------\\n!                                                                      test1\\n!----------------------------------------------------------------------------\\n\\nSUBROUTINE test1\\n  INTEGER(I4B) :: tsize, found, want\\n\\n  order = 1\\n  CALL fedof%Initiate(baseContinuity=baseContinuity, &\\n                      baseInterpolation=baseInterpolation, &\\n                      order=order, mesh=meshptr)\\n\\n  found = fedof%GetTotalDOF()\\n  want = meshptr%GetTotalVertexNodes()\\n  CALL IS(found, want, testname//\\\"  interface 1 (order= \\\"// &\\n          ToString(order)//\\\"): \\\")\\n\\n  found = fedof%GetTotalDOF(globalElement=1, islocal=.TRUE.)\\n  want = meshptr%GetTotalVertexNodes(globalElement=1, islocal=.TRUE.)\\n  CALL IS(found, want, testname//\\\" interface 2 (order= \\\"// &\\n          ToString(order)//\\\"): \\\")\\n\\n  found = fedof%GetTotalDOF(globalElement=1, islocal=.TRUE., opt=\\\"A\\\")\\n  want = meshptr%GetTotalVertexNodes(globalElement=1, islocal=.TRUE.)\\n  CALL IS(found, want, testname//\\\"  interface 3 a (order= \\\"// &\\n          ToString(order)//\\\"): \\\")\\n\\n  found = fedof%GetTotalDOF(globalElement=1, islocal=.TRUE., opt=\\\"E\\\")\\n  want = 0\\n  CALL IS(found, want, testname//\\\"  interface 3 e (order= \\\"// &\\n          ToString(order)//\\\"): \\\")\\n\\n  found = fedof%GetTotalDOF(globalElement=1, islocal=.TRUE., opt=\\\"F\\\")\\n  want = 0\\n  CALL IS(found, want, testname//\\\"  interface 3 f (order= \\\"// &\\n          ToString(order)//\\\"): \\\")\\n\\n  found = fedof%GetTotalDOF(globalElement=1, islocal=.TRUE., opt=\\\"c\\\")\\n  want = 0\\n  CALL IS(found, want, testname//\\\"  interface 3 c (order= \\\"// &\\n          ToString(order)//\\\"): \\\")\\n\\nEND SUBROUTINE test1\\n\\n!----------------------------------------------------------------------------\\n!                                                                      test2\\n!----------------------------------------------------------------------------\\n\\nSUBROUTINE test2\\n  INTEGER(I4B) :: tsize, found, want\\n\\n  order = 2\\n  CALL fedof%Initiate(baseContinuity=baseContinuity, &\\n                      baseInterpolation=baseInterpolation, &\\n                      order=order, mesh=meshptr)\\n\\n  found = fedof%GetTotalDOF()\\n  want = meshptr%GetTotalVertexNodes() + meshptr%GetTotalFaces() * (order - 1)\\n  CALL IS(found, want, testname//\\\"  interface 1 (order= \\\"// &\\n          ToString(order)//\\\"): \\\")\\n\\n  found = fedof%GetTotalDOF(globalElement=1, islocal=.TRUE.)\\n  want = 6\\n  CALL IS(found, want, testname//\\\" interface 2 (order= \\\"// &\\n          ToString(order)//\\\"): \\\")\\n\\n  found = fedof%GetTotalDOF(globalElement=1, islocal=.TRUE., opt=\\\"A\\\")\\n  want = 6\\n  CALL IS(found, want, testname//\\\"  interface 3 a (order= \\\"// &\\n          ToString(order)//\\\"): \\\")\\n\\n  found = fedof%GetTotalDOF(globalElement=1, islocal=.TRUE., opt=\\\"E\\\")\\n  want = 0\\n  CALL IS(found, want, testname//\\\"  interface 3 e (order= \\\"// &\\n          ToString(order)//\\\"): \\\")\\n\\n  found = fedof%GetTotalDOF(globalElement=1, islocal=.TRUE., opt=\\\"F\\\")\\n  want = 3\\n  CALL IS(found, want, testname//\\\"  interface 3 f (order= \\\"// &\\n          ToString(order)//\\\"): \\\")\\n\\n  found = fedof%GetTotalDOF(globalElement=1, islocal=.TRUE., opt=\\\"c\\\")\\n  want = 0\\n  CALL IS(found, want, testname//\\\"  interface 3 c (order= \\\"// &\\n          ToString(order)//\\\"): \\\")\\n\\nEND SUBROUTINE test2\\n\\n!----------------------------------------------------------------------------\\n!                                                                     test3\\n!----------------------------------------------------------------------------\\n\\nSUBROUTINE test3\\n  INTEGER(I4B) :: tsize, found, want\\n\\n  order = 3\\n  CALL fedof%Initiate(baseContinuity=baseContinuity, &\\n                      baseInterpolation=baseInterpolation, &\\n                      order=order, mesh=meshptr)\\n\\n  found = fedof%GetTotalDOF()\\n  want = meshptr%GetTotalVertexNodes() + meshptr%GetTotalFaces() * (order - 1) &\\n       + meshptr%GetTotalCells() * (order - 2) * (order - 1) * 0.5\\n  CALL IS(found, want, testname//\\\"  interface 1 (order= \\\"// &\\n          ToString(order)//\\\"): \\\")\\n\\n  found = fedof%GetTotalDOF(globalElement=1, islocal=.TRUE.)\\n  want = 10\\n  CALL IS(found, want, testname//\\\" interface 2 (order= \\\"// &\\n          ToString(order)//\\\"): \\\")\\n\\n  found = fedof%GetTotalDOF(globalElement=1, islocal=.TRUE., opt=\\\"A\\\")\\n  want = 10\\n  CALL IS(found, want, testname//\\\"  interface 3 a (order= \\\"// &\\n          ToString(order)//\\\"): \\\")\\n\\n  found = fedof%GetTotalDOF(globalElement=1, islocal=.TRUE., opt=\\\"E\\\")\\n  want = 0\\n  CALL IS(found, want, testname//\\\"  interface 3 e (order= \\\"// &\\n          ToString(order)//\\\"): \\\")\\n\\n  found = fedof%GetTotalDOF(globalElement=1, islocal=.TRUE., opt=\\\"F\\\")\\n  want = 6\\n  CALL IS(found, want, testname//\\\"  interface 3 f (order= \\\"// &\\n          ToString(order)//\\\"): \\\")\\n\\n  found = fedof%GetTotalDOF(globalElement=1, islocal=.TRUE., opt=\\\"c\\\")\\n  want = 1\\n  CALL IS(found, want, testname//\\\"  interface 3 c (order= \\\"// &\\n          ToString(order)//\\\"): \\\")\\n\\nEND SUBROUTINE test3\\n\\n!----------------------------------------------------------------------------\\n!\\n!----------------------------------------------------------------------------\\n\\nEND PROGRAM main\\n\");\n;// ./docs/docs-api/FEDOF/examples/_GetTotalDOF_test_1.md\n\n\nconst frontMatter = {};\nconst contentTitle = undefined;\n\n\n\n\n\n\n\nconst toc = [];\nfunction _createMdxContent(props) {\n  return (0,jsx_runtime.jsx)(CodeBlock[\"default\"], {\n    language: \"fortran\",\n    children: _GetTotalDOF_test_1\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n\n;// ./node_modules/raw-loader/dist/cjs.js!./docs/docs-api/FEDOF/examples/_GetTotalDOF_test_2.F90\n/* harmony default export */ const _GetTotalDOF_test_2 = (\"!> author: Vikas Sharma, Ph. D.\\n! date: 2025-06-08\\n! summary:  Testing GetTotalDOF method of FEDOF class\\n\\nPROGRAM main\\nUSE FEDOF_Class\\nUSE FEDomain_Class\\nUSE AbstractMesh_Class\\nUSE HDF5File_Class\\nUSE Display_Method\\nUSE GlobalData\\nUSE Test_Method\\nUSE ExceptionHandler_Class, ONLY: e, EXCEPTION_INFORMATION\\nUSE AppendUtility\\nUSE ArangeUtility\\nUSE ReallocateUtility\\n\\nIMPLICIT NONE\\n\\nCHARACTER(*), PARAMETER :: &\\n  filename = \\\"../../FEMesh/examples/meshdata/small_tri6_mesh.h5\\\", &\\n  baseContinuity = \\\"H1\\\", &\\n  baseInterpolation = \\\"Heirarchical\\\", &\\n  testname = baseContinuity//\\\" \\\"//baseInterpolation//\\\" GetTotalDOF\\\"\\n\\nTYPE(FEDOF_) :: fedof\\nTYPE(FEDomain_) :: dom\\nCLASS(AbstractMesh_), POINTER :: meshptr => NULL()\\nTYPE(HDF5File_) :: meshfile\\nINTEGER(I4B) :: order, totalVertexNodes, totalFaces\\nLOGICAL(LGT) :: isok\\n\\nCALL e%SetQuietMode(EXCEPTION_INFORMATION, .TRUE.)\\n\\nCALL meshfile%Initiate(filename, mode=\\\"READ\\\")\\nCALL meshfile%OPEN()\\nCALL dom%Initiate(meshfile, '')\\nmeshptr => dom%GetMeshPointer()\\ntotalVertexNodes = meshptr%GetTotalVertexNodes()\\ntotalFaces = meshptr%GetTotalFaces()\\n\\nCALL test1\\nCALL test2\\nCALL test3\\n\\nCALL dom%DEALLOCATE()\\nCALL meshfile%DEALLOCATE()\\n\\nCONTAINS\\n\\n!----------------------------------------------------------------------------\\n!                                                                      test1\\n!----------------------------------------------------------------------------\\n\\nSUBROUTINE test1\\n  INTEGER(I4B) :: tsize, found, want\\n\\n  order = 1\\n  CALL fedof%Initiate(baseContinuity=baseContinuity, &\\n                      baseInterpolation=baseInterpolation, &\\n                      order=order, mesh=meshptr)\\n\\n  found = fedof%GetTotalDOF()\\n  want = meshptr%GetTotalVertexNodes()\\n  CALL IS(found, want, testname//\\\"  interface 1 (order= \\\"// &\\n          ToString(order)//\\\"): \\\")\\n\\n  found = fedof%GetTotalDOF(globalElement=1, islocal=.TRUE.)\\n  want = meshptr%GetTotalVertexNodes(globalElement=1, islocal=.TRUE.)\\n  CALL IS(found, want, testname//\\\" interface 2 (order= \\\"// &\\n          ToString(order)//\\\"): \\\")\\n\\n  found = fedof%GetTotalDOF(globalElement=1, islocal=.TRUE., opt=\\\"A\\\")\\n  want = meshptr%GetTotalVertexNodes(globalElement=1, islocal=.TRUE.)\\n  CALL IS(found, want, testname//\\\"  interface 3 a (order= \\\"// &\\n          ToString(order)//\\\"): \\\")\\n\\n  found = fedof%GetTotalDOF(globalElement=1, islocal=.TRUE., opt=\\\"E\\\")\\n  want = 0\\n  CALL IS(found, want, testname//\\\"  interface 3 e (order= \\\"// &\\n          ToString(order)//\\\"): \\\")\\n\\n  found = fedof%GetTotalDOF(globalElement=1, islocal=.TRUE., opt=\\\"F\\\")\\n  want = 0\\n  CALL IS(found, want, testname//\\\"  interface 3 f (order= \\\"// &\\n          ToString(order)//\\\"): \\\")\\n\\n  found = fedof%GetTotalDOF(globalElement=1, islocal=.TRUE., opt=\\\"c\\\")\\n  want = 0\\n  CALL IS(found, want, testname//\\\"  interface 3 c (order= \\\"// &\\n          ToString(order)//\\\"): \\\")\\n\\nEND SUBROUTINE test1\\n\\n!----------------------------------------------------------------------------\\n!                                                                      test2\\n!----------------------------------------------------------------------------\\n\\nSUBROUTINE test2\\n  INTEGER(I4B) :: tsize, found, want\\n\\n  order = 2\\n  CALL fedof%Initiate(baseContinuity=baseContinuity, &\\n                      baseInterpolation=baseInterpolation, &\\n                      order=order, mesh=meshptr)\\n\\n  found = fedof%GetTotalDOF()\\n  want = meshptr%GetTotalVertexNodes() + meshptr%GetTotalFaces() * (order - 1)\\n  CALL IS(found, want, testname//\\\"  interface 1 (order= \\\"// &\\n          ToString(order)//\\\"): \\\")\\n\\n  found = fedof%GetTotalDOF(globalElement=1, islocal=.TRUE.)\\n  want = 6\\n  CALL IS(found, want, testname//\\\" interface 2 (order= \\\"// &\\n          ToString(order)//\\\"): \\\")\\n\\n  found = fedof%GetTotalDOF(globalElement=1, islocal=.TRUE., opt=\\\"A\\\")\\n  want = 6\\n  CALL IS(found, want, testname//\\\"  interface 3 a (order= \\\"// &\\n          ToString(order)//\\\"): \\\")\\n\\n  found = fedof%GetTotalDOF(globalElement=1, islocal=.TRUE., opt=\\\"E\\\")\\n  want = 0\\n  CALL IS(found, want, testname//\\\"  interface 3 e (order= \\\"// &\\n          ToString(order)//\\\"): \\\")\\n\\n  found = fedof%GetTotalDOF(globalElement=1, islocal=.TRUE., opt=\\\"F\\\")\\n  want = 3\\n  CALL IS(found, want, testname//\\\"  interface 3 f (order= \\\"// &\\n          ToString(order)//\\\"): \\\")\\n\\n  found = fedof%GetTotalDOF(globalElement=1, islocal=.TRUE., opt=\\\"c\\\")\\n  want = 0\\n  CALL IS(found, want, testname//\\\"  interface 3 c (order= \\\"// &\\n          ToString(order)//\\\"): \\\")\\n\\nEND SUBROUTINE test2\\n\\n!----------------------------------------------------------------------------\\n!                                                                     test3\\n!----------------------------------------------------------------------------\\n\\nSUBROUTINE test3\\n  INTEGER(I4B) :: tsize, found, want\\n\\n  order = 3\\n  CALL fedof%Initiate(baseContinuity=baseContinuity, &\\n                      baseInterpolation=baseInterpolation, &\\n                      order=order, mesh=meshptr)\\n\\n  found = fedof%GetTotalDOF()\\n  want = meshptr%GetTotalVertexNodes() + meshptr%GetTotalFaces() * (order - 1) &\\n       + meshptr%GetTotalCells() * (order - 2) * (order - 1) * 0.5\\n  CALL IS(found, want, testname//\\\"  interface 1 (order= \\\"// &\\n          ToString(order)//\\\"): \\\")\\n\\n  found = fedof%GetTotalDOF(globalElement=1, islocal=.TRUE.)\\n  want = 10\\n  CALL IS(found, want, testname//\\\" interface 2 (order= \\\"// &\\n          ToString(order)//\\\"): \\\")\\n\\n  found = fedof%GetTotalDOF(globalElement=1, islocal=.TRUE., opt=\\\"A\\\")\\n  want = 10\\n  CALL IS(found, want, testname//\\\"  interface 3 a (order= \\\"// &\\n          ToString(order)//\\\"): \\\")\\n\\n  found = fedof%GetTotalDOF(globalElement=1, islocal=.TRUE., opt=\\\"E\\\")\\n  want = 0\\n  CALL IS(found, want, testname//\\\"  interface 3 e (order= \\\"// &\\n          ToString(order)//\\\"): \\\")\\n\\n  found = fedof%GetTotalDOF(globalElement=1, islocal=.TRUE., opt=\\\"F\\\")\\n  want = 6\\n  CALL IS(found, want, testname//\\\"  interface 3 f (order= \\\"// &\\n          ToString(order)//\\\"): \\\")\\n\\n  found = fedof%GetTotalDOF(globalElement=1, islocal=.TRUE., opt=\\\"c\\\")\\n  want = 1\\n  CALL IS(found, want, testname//\\\"  interface 3 c (order= \\\"// &\\n          ToString(order)//\\\"): \\\")\\n\\nEND SUBROUTINE test3\\n\\n!----------------------------------------------------------------------------\\n!\\n!----------------------------------------------------------------------------\\n\\nEND PROGRAM main\\n\");\n;// ./docs/docs-api/FEDOF/examples/_GetTotalDOF_test_2.md\n\n\nconst _GetTotalDOF_test_2_frontMatter = {};\nconst _GetTotalDOF_test_2_contentTitle = undefined;\n\n\n\n\n\n\n\nconst _GetTotalDOF_test_2_toc = [];\nfunction _GetTotalDOF_test_2_createMdxContent(props) {\n  return (0,jsx_runtime.jsx)(CodeBlock[\"default\"], {\n    language: \"fortran\",\n    children: _GetTotalDOF_test_2\n  });\n}\nfunction _GetTotalDOF_test_2_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_GetTotalDOF_test_2_createMdxContent, {\n      ...props\n    })\n  }) : _GetTotalDOF_test_2_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/FEDOF/GetTotalDOF.md\n\n\nconst GetTotalDOF_frontMatter = {};\nconst GetTotalDOF_contentTitle = 'GetTotalDOF';\n\nconst assets = {\n\n};\n\n\n\n\n\nconst GetTotalDOF_toc = [{\n  \"value\": \"Interface 1\",\n  \"id\": \"interface-1\",\n  \"level\": 2\n}, {\n  \"value\": \"Parameters\",\n  \"id\": \"parameters\",\n  \"level\": 3\n}, {\n  \"value\": \"Functionality\",\n  \"id\": \"functionality\",\n  \"level\": 3\n}, {\n  \"value\": \"Interface 2\",\n  \"id\": \"interface-2\",\n  \"level\": 2\n}, {\n  \"value\": \"Parameters\",\n  \"id\": \"parameters-1\",\n  \"level\": 3\n}, {\n  \"value\": \"Functionality\",\n  \"id\": \"functionality-1\",\n  \"level\": 3\n}, {\n  \"value\": \"Interface 3\",\n  \"id\": \"interface-3\",\n  \"level\": 2\n}, {\n  \"value\": \"Parameters\",\n  \"id\": \"parameters-2\",\n  \"level\": 3\n}, {\n  \"value\": \"Functionality\",\n  \"id\": \"functionality-2\",\n  \"level\": 3\n}, {\n  \"value\": \"Usage\",\n  \"id\": \"usage\",\n  \"level\": 2\n}, {\n  \"value\": \"Example 1\",\n  \"id\": \"example-1\",\n  \"level\": 2\n}, ...toc, {\n  \"value\": \"Example 2\",\n  \"id\": \"example-2\",\n  \"level\": 2\n}, ..._GetTotalDOF_test_2_toc];\nfunction GetTotalDOF_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    h3: \"h3\",\n    header: \"header\",\n    li: \"li\",\n    ol: \"ol\",\n    p: \"p\",\n    pre: \"pre\",\n    strong: \"strong\",\n    table: \"table\",\n    tbody: \"tbody\",\n    td: \"td\",\n    th: \"th\",\n    thead: \"thead\",\n    tr: \"tr\",\n    ul: \"ul\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.header, {\n      children: (0,jsx_runtime.jsx)(_components.h1, {\n        id: \"gettotaldof\",\n        children: \"GetTotalDOF\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"These methods provide a comprehensive interface for querying degree of freedom information at different levels of granularity, from global system-wide counts to element-specific and entity-specific counts.\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.table, {\n      children: [(0,jsx_runtime.jsx)(_components.thead, {\n        children: (0,jsx_runtime.jsxs)(_components.tr, {\n          children: [(0,jsx_runtime.jsx)(_components.th, {\n            children: \"Method\"\n          }), (0,jsx_runtime.jsx)(_components.th, {\n            children: \"Purpose\"\n          })]\n        })\n      }), (0,jsx_runtime.jsxs)(_components.tbody, {\n        children: [(0,jsx_runtime.jsxs)(_components.tr, {\n          children: [(0,jsx_runtime.jsx)(_components.td, {\n            children: (0,jsx_runtime.jsx)(_components.strong, {\n              children: \"GetTotalDOF1\"\n            })\n          }), (0,jsx_runtime.jsx)(_components.td, {\n            children: \"Returns the total number of degrees of freedom in the entire domain\"\n          })]\n        }), (0,jsx_runtime.jsxs)(_components.tr, {\n          children: [(0,jsx_runtime.jsx)(_components.td, {\n            children: (0,jsx_runtime.jsx)(_components.strong, {\n              children: \"GetTotalDOF2\"\n            })\n          }), (0,jsx_runtime.jsx)(_components.td, {\n            children: \"Returns the total number of DOFs for a specific element\"\n          })]\n        }), (0,jsx_runtime.jsxs)(_components.tr, {\n          children: [(0,jsx_runtime.jsx)(_components.td, {\n            children: (0,jsx_runtime.jsx)(_components.strong, {\n              children: \"GetTotalDOF3\"\n            })\n          }), (0,jsx_runtime.jsx)(_components.td, {\n            children: \"Returns filtered DOFs for a specific element based on entity type\"\n          })]\n        })]\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-1\",\n      children: \"Interface 1\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"MODULE FUNCTION obj_GetTotalDOF1(obj) RESULT(ans)\\n  CLASS(FEDOF_), INTENT(IN) :: obj\\n  INTEGER(I4B) :: ans\\nEND FUNCTION obj_GetTotalDOF1\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"parameters\",\n      children: \"Parameters\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"obj\"\n        }), \": The FEDOF_ object\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"ans\"\n        }), \": Integer result containing the total number of degrees of freedom\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"functionality\",\n      children: \"Functionality\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"This method returns the total number of degrees of freedom in the entire FEDOF object. It simply returns the \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"tdof\"\n      }), \" field of the object, which represents the global count of all degrees of freedom across the domain.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-2\",\n      children: \"Interface 2\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"MODULE FUNCTION obj_GetTotalDOF2(obj, globalElement, islocal) RESULT(ans)\\n  CLASS(FEDOF_), INTENT(IN) :: obj\\n  INTEGER(I4B), INTENT(IN) :: globalElement\\n  LOGICAL(LGT), OPTIONAL, INTENT(IN) :: islocal\\n  INTEGER(I4B) :: ans\\nEND FUNCTION obj_GetTotalDOF2\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"parameters-1\",\n      children: \"Parameters\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"obj\"\n        }), \": The FEDOF_ object\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"globalElement\"\n        }), \": Global element number to retrieve the total DOFs for\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"islocal\"\n        }), \": Optional logical flag - if true, globalElement is treated as a local element number\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"ans\"\n        }), \": Integer result containing the total number of degrees of freedom for the specified element\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"functionality-1\",\n      children: \"Functionality\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This method returns the total number of degrees of freedom associated with a specific element. It:\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ol, {\n      children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Gets the element data pointer for the specified element\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Retrieves the total entities (points, edges, faces, cells) for the element\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Counts vertex node DOFs\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Adds the DOFs from all edges of the element\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Adds the DOFs from all faces of the element\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Adds the DOFs from the cell itself\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Returns the total sum as the result\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-3\",\n      children: \"Interface 3\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"MODULE FUNCTION obj_GetTotalDOF3(obj, globalElement, opt, islocal) RESULT(ans)\\n  CLASS(FEDOF_), INTENT(IN) :: obj\\n  INTEGER(I4B), INTENT(IN) :: globalElement\\n  !! global or local element number\\n  CHARACTER(*), INTENT(IN) :: opt\\n  !! opt for Vertex, Edge, Face, Cell, and All\\n  !! opt = Vertex\\n  !! opt = Edge\\n  !! opt = Face\\n  !! opt = Cell\\n  !! opt = All\\n  LOGICAL(LGT), OPTIONAL, INTENT(IN) :: islocal\\n  !! if islocal true then globalElement is local element number\\n  INTEGER(I4B) :: ans\\n  !! Total number of dof in the FEDOF with opt filter\\nEND FUNCTION obj_GetTotalDOF3\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"parameters-2\",\n      children: \"Parameters\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"obj\"\n        }), \": The FEDOF_ object\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"globalElement\"\n        }), \": Global element number to retrieve the total DOFs for\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"opt\"\n        }), \": Filter option specifying which type of DOFs to count\", \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"\\\"Vertex\\\" or \\\"V\\\" - Only count vertex DOFs\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"\\\"Edge\\\" or \\\"E\\\" - Only count edge DOFs\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"\\\"Face\\\" or \\\"F\\\" - Only count face DOFs\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"\\\"Cell\\\" or \\\"C\\\" - Only count cell DOFs\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"Any other value - Count all DOFs (same as GetTotalDOF2)\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"islocal\"\n        }), \": Optional logical flag - if true, globalElement is treated as a local element number\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"ans\"\n        }), \": Integer result containing the filtered total of degrees of freedom\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"functionality-2\",\n      children: \"Functionality\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This method is similar to GetTotalDOF2 but allows filtering the DOF count by entity type. It:\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ol, {\n      children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Gets the element data pointer for the specified element\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Checks the first character of the opt parameter to determine which entity types to include\"\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"Calls the appropriate internal subroutine(s) to count DOFs for the selected entity types:\", \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"onlyVertex: Counts vertex DOFs\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"onlyEdge: Counts edge DOFs\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"onlyFace: Counts face DOFs\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"onlyCell: Counts cell DOFs\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Returns the total sum as the result\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"usage\",\n      children: \"Usage\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"The generic \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"GetTotalDOF\"\n      }), \" method is fundamental in finite element analysis for:\"]\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Allocating memory for element matrices and vectors\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Determining the size of local element contributions\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Computing the total size of the global system\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Estimating computational requirements\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Filtering DOFs by entity type for specialized operations\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This flexible interface allows for both global analysis (total DOFs in the system), local element-wise operations (DOFs per element), and entity-specific queries (e.g., only edge DOFs), providing comprehensive flexibility in how degree of freedom information is accessed throughout the finite element code.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"example-1\",\n      children: \"Example 1\"\n    }), \"\\n\", \"\\n\", (0,jsx_runtime.jsx)(MDXContent, {}), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"example-2\",\n      children: \"Example 2\"\n    }), \"\\n\", \"\\n\", (0,jsx_runtime.jsx)(_GetTotalDOF_test_2_MDXContent, {})]\n  });\n}\nfunction GetTotalDOF_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(GetTotalDOF_createMdxContent, {\n      ...props\n    })\n  }) : GetTotalDOF_createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./docs/docs-api/FEDOF/GetTotalDOF.md\n");

/***/ }),

/***/ "./node_modules/@mdx-js/react/lib/index.js":
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MDXProvider: () => (/* binding */ MDXProvider),\n/* harmony export */   useMDXComponents: () => (/* binding */ useMDXComponents)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/react/index.js\");\n/**\n * @import {MDXComponents} from 'mdx/types.js'\n * @import {Component, ReactElement, ReactNode} from 'react'\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\n\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nfunction useMDXComponents(components) {\n  const contextComponents = react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {ReactElement}\n *   Element.\n * @satisfies {Component}\n */\nfunction MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Vhc2lmZW0tZG9jcy8uL25vZGVfbW9kdWxlcy9AbWR4LWpzL3JlYWN0L2xpYi9pbmRleC5qcz9hZjEyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGltcG9ydCB7TURYQ29tcG9uZW50c30gZnJvbSAnbWR4L3R5cGVzLmpzJ1xuICogQGltcG9ydCB7Q29tcG9uZW50LCBSZWFjdEVsZW1lbnQsIFJlYWN0Tm9kZX0gZnJvbSAncmVhY3QnXG4gKi9cblxuLyoqXG4gKiBAY2FsbGJhY2sgTWVyZ2VDb21wb25lbnRzXG4gKiAgIEN1c3RvbSBtZXJnZSBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7UmVhZG9ubHk8TURYQ29tcG9uZW50cz59IGN1cnJlbnRDb21wb25lbnRzXG4gKiAgIEN1cnJlbnQgY29tcG9uZW50cyBmcm9tIHRoZSBjb250ZXh0LlxuICogQHJldHVybnMge01EWENvbXBvbmVudHN9XG4gKiAgIEFkZGl0aW9uYWwgY29tcG9uZW50cy5cbiAqXG4gKiBAdHlwZWRlZiBQcm9wc1xuICogICBDb25maWd1cmF0aW9uIGZvciBgTURYUHJvdmlkZXJgLlxuICogQHByb3BlcnR5IHtSZWFjdE5vZGUgfCBudWxsIHwgdW5kZWZpbmVkfSBbY2hpbGRyZW5dXG4gKiAgIENoaWxkcmVuIChvcHRpb25hbCkuXG4gKiBAcHJvcGVydHkge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+IHwgTWVyZ2VDb21wb25lbnRzIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2NvbXBvbmVudHNdXG4gKiAgIEFkZGl0aW9uYWwgY29tcG9uZW50cyB0byB1c2Ugb3IgYSBmdW5jdGlvbiB0aGF0IGNyZWF0ZXMgdGhlbSAob3B0aW9uYWwpLlxuICogQHByb3BlcnR5IHtib29sZWFuIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2Rpc2FibGVQYXJlbnRDb250ZXh0PWZhbHNlXVxuICogICBUdXJuIG9mZiBvdXRlciBjb21wb25lbnQgY29udGV4dCAoZGVmYXVsdDogYGZhbHNlYCkuXG4gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuXG4vKiogQHR5cGUge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+fSAqL1xuY29uc3QgZW1wdHlDb21wb25lbnRzID0ge31cblxuY29uc3QgTURYQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoZW1wdHlDb21wb25lbnRzKVxuXG4vKipcbiAqIEdldCBjdXJyZW50IGNvbXBvbmVudHMgZnJvbSB0aGUgTURYIENvbnRleHQuXG4gKlxuICogQHBhcmFtIHtSZWFkb25seTxNRFhDb21wb25lbnRzPiB8IE1lcmdlQ29tcG9uZW50cyB8IG51bGwgfCB1bmRlZmluZWR9IFtjb21wb25lbnRzXVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMgdG8gdXNlIG9yIGEgZnVuY3Rpb24gdGhhdCBjcmVhdGVzIHRoZW0gKG9wdGlvbmFsKS5cbiAqIEByZXR1cm5zIHtNRFhDb21wb25lbnRzfVxuICogICBDdXJyZW50IGNvbXBvbmVudHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VNRFhDb21wb25lbnRzKGNvbXBvbmVudHMpIHtcbiAgY29uc3QgY29udGV4dENvbXBvbmVudHMgPSBSZWFjdC51c2VDb250ZXh0KE1EWENvbnRleHQpXG5cbiAgLy8gTWVtb2l6ZSB0byBhdm9pZCB1bm5lY2Vzc2FyeSB0b3AtbGV2ZWwgY29udGV4dCBjaGFuZ2VzXG4gIHJldHVybiBSZWFjdC51c2VNZW1vKFxuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIEN1c3RvbSBtZXJnZSB2aWEgYSBmdW5jdGlvbiBwcm9wXG4gICAgICBpZiAodHlwZW9mIGNvbXBvbmVudHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGNvbXBvbmVudHMoY29udGV4dENvbXBvbmVudHMpXG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7Li4uY29udGV4dENvbXBvbmVudHMsIC4uLmNvbXBvbmVudHN9XG4gICAgfSxcbiAgICBbY29udGV4dENvbXBvbmVudHMsIGNvbXBvbmVudHNdXG4gIClcbn1cblxuLyoqXG4gKiBQcm92aWRlciBmb3IgTURYIGNvbnRleHQuXG4gKlxuICogQHBhcmFtIHtSZWFkb25seTxQcm9wcz59IHByb3BlcnRpZXNcbiAqICAgUHJvcGVydGllcy5cbiAqIEByZXR1cm5zIHtSZWFjdEVsZW1lbnR9XG4gKiAgIEVsZW1lbnQuXG4gKiBAc2F0aXNmaWVzIHtDb21wb25lbnR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBNRFhQcm92aWRlcihwcm9wZXJ0aWVzKSB7XG4gIC8qKiBAdHlwZSB7UmVhZG9ubHk8TURYQ29tcG9uZW50cz59ICovXG4gIGxldCBhbGxDb21wb25lbnRzXG5cbiAgaWYgKHByb3BlcnRpZXMuZGlzYWJsZVBhcmVudENvbnRleHQpIHtcbiAgICBhbGxDb21wb25lbnRzID1cbiAgICAgIHR5cGVvZiBwcm9wZXJ0aWVzLmNvbXBvbmVudHMgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBwcm9wZXJ0aWVzLmNvbXBvbmVudHMoZW1wdHlDb21wb25lbnRzKVxuICAgICAgICA6IHByb3BlcnRpZXMuY29tcG9uZW50cyB8fCBlbXB0eUNvbXBvbmVudHNcbiAgfSBlbHNlIHtcbiAgICBhbGxDb21wb25lbnRzID0gdXNlTURYQ29tcG9uZW50cyhwcm9wZXJ0aWVzLmNvbXBvbmVudHMpXG4gIH1cblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICBNRFhDb250ZXh0LlByb3ZpZGVyLFxuICAgIHt2YWx1ZTogYWxsQ29tcG9uZW50c30sXG4gICAgcHJvcGVydGllcy5jaGlsZHJlblxuICApXG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@mdx-js/react/lib/index.js\n");

/***/ })

}]);