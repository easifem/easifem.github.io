"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkeasifem_docs"] = globalThis["webpackChunkeasifem_docs"] || []).push([["content---docs-api-swap-utility-swap-793-22e"],{

/***/ "./docs/docs-api/SwapUtility/Swap.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  assets: () => (/* binding */ assets),\n  contentTitle: () => (/* binding */ Swap_contentTitle),\n  \"default\": () => (/* binding */ Swap_MDXContent),\n  frontMatter: () => (/* binding */ Swap_frontMatter),\n  metadata: () => (/* reexport */ site_docs_docs_api_swap_utility_swap_md_793_namespaceObject),\n  toc: () => (/* binding */ Swap_toc)\n});\n\n;// ./.docusaurus/docusaurus-plugin-content-docs/docs-api/site-docs-docs-api-swap-utility-swap-md-793.json\nconst site_docs_docs_api_swap_utility_swap_md_793_namespaceObject = /*#__PURE__*/JSON.parse('{\"id\":\"SwapUtility/Swap\",\"title\":\"Swap\",\"description\":\"This subroutine can swap two integer (scalar, vector, matrix) and two real numbers (scalar, vector, matrix). It can also swap the dimension of a Fortran array.\",\"source\":\"@site/docs/docs-api/SwapUtility/Swap.md\",\"sourceDirName\":\"SwapUtility\",\"slug\":\"/SwapUtility/Swap\",\"permalink\":\"/docs-api/SwapUtility/Swap\",\"draft\":false,\"unlisted\":false,\"editUrl\":\"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/SwapUtility/Swap.md\",\"tags\":[],\"version\":\"current\",\"lastUpdatedAt\":1539502055000,\"frontMatter\":{},\"sidebar\":\"tutorialSidebar\",\"previous\":{\"title\":\"SwapUtility\",\"permalink\":\"/docs-api/SwapUtility/\"},\"next\":{\"title\":\"SymUtility\",\"permalink\":\"/docs-api/SymUtility/\"}}');\n// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n// EXTERNAL MODULE: ./node_modules/@mdx-js/react/lib/index.js\nvar lib = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js + 2 modules\nvar Tabs = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js + 1 modules\nvar TabItem = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js\");\n;// ./docs/docs-api/SwapUtility/_Swap_test_1.md\n\n\nconst frontMatter = {};\nconst contentTitle = undefined;\n\n\n\n\n\nconst toc = [];\nfunction _createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.p, {\n      children: \"Swap two scalars.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n    USE easifemBase\\n    IMPLICIT NONE\\n    REAL( DFP ), ALLOCATABLE :: a2(:,:), b2(:,:), a3(:,:,:), b3(:,:,:), &\\n      & a4(:,:,:,:), b4(:,:,:,:)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Make a random matrix and display it.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL Reallocate( b2, 4, 3 )\\nCALL RANDOM_NUMBER(b2)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"Make another matrix \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"a\"\n      }), \" so that we can swap the indices of \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"b\"\n      }), \" and SAVE it in \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"a\"\n      }), \".\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"In this swap we are using:\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"i1=1\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"i2=2\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"which means \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"a=b\"\n      }), \".\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL SWAP(a=a2,b=b2,i1=1,i2=2)\\nCALL OK( ALL( a2 .approxeq. b2 ), \\\"swap\\\"  )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Now let us use\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"i1=2\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"i2=1\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"which will produce \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"a=transpose(b)\"\n      }), \".\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL SWAP(a=a2,b=b2,i1=2,i2=1)\\nCALL OK( ALL( a2 .approxeq. TRANSPOSE(b2) ), \\\"swap\\\"  )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"Let us see what happens when i1=1, i2=1. Actually, it will DO nothing but \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"a=b\"\n      }), \".\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL SWAP(a=a2,b=b2,i1=1,i2=1)\\nCALL OK( ALL( a2 .approxeq. b2), \\\"swap\\\"  )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"We DO not indend to USE \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"swap\"\n      }), \" for two-dimensional arrays, because we already have \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"transpose\"\n      }), \" FUNCTION for doing the same. The purpose was to check that algorithm works.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"END PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/SwapUtility/_Swap_test_2.md\n\n\nconst _Swap_test_2_frontMatter = {};\nconst _Swap_test_2_contentTitle = undefined;\n\n\n\n\n\nconst _Swap_test_2_toc = [];\nfunction _Swap_test_2_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    table: \"table\",\n    tbody: \"tbody\",\n    td: \"td\",\n    th: \"th\",\n    thead: \"thead\",\n    tr: \"tr\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"This example shows the usage of \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"Swap\"\n      }), \" method.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n  USE easifemBase\\n  IMPLICIT NONE\\n  REAL( DFP ), ALLOCATABLE :: a2(:,:), b2(:,:), a3(:,:,:), b3(:,:,:), &\\n    & a4(:,:,:,:), b4(:,:,:,:)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"Now let us USE \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"swap\"\n      }), \" for rank 3 Fortran array. But, first generate a rank 3 arrays, and display its content.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL Reallocate(b3, 2,3,2)\\nCALL Random_NUMBER(b3)\\nCALL Display(MdEncode(b3), \\\"b3 = \\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"b3 = ( :, :, 1 ) =\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.table, {\n      children: [(0,jsx_runtime.jsx)(_components.thead, {\n        children: (0,jsx_runtime.jsxs)(_components.tr, {\n          children: [(0,jsx_runtime.jsx)(_components.th, {}), (0,jsx_runtime.jsx)(_components.th, {}), (0,jsx_runtime.jsx)(_components.th, {})]\n        })\n      }), (0,jsx_runtime.jsxs)(_components.tbody, {\n        children: [(0,jsx_runtime.jsxs)(_components.tr, {\n          children: [(0,jsx_runtime.jsx)(_components.td, {\n            children: \"0.85128\"\n          }), (0,jsx_runtime.jsx)(_components.td, {\n            children: \"7.97914E-03\"\n          }), (0,jsx_runtime.jsx)(_components.td, {\n            children: \"0.12877\"\n          })]\n        }), (0,jsx_runtime.jsxs)(_components.tr, {\n          children: [(0,jsx_runtime.jsx)(_components.td, {\n            children: \"0.61923\"\n          }), (0,jsx_runtime.jsx)(_components.td, {\n            children: \"2.30844E-02\"\n          }), (0,jsx_runtime.jsx)(_components.td, {\n            children: \"0.67707\"\n          })]\n        })]\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"( :, :, 2 ) =\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.table, {\n      children: [(0,jsx_runtime.jsx)(_components.thead, {\n        children: (0,jsx_runtime.jsxs)(_components.tr, {\n          children: [(0,jsx_runtime.jsx)(_components.th, {}), (0,jsx_runtime.jsx)(_components.th, {}), (0,jsx_runtime.jsx)(_components.th, {})]\n        })\n      }), (0,jsx_runtime.jsxs)(_components.tbody, {\n        children: [(0,jsx_runtime.jsxs)(_components.tr, {\n          children: [(0,jsx_runtime.jsx)(_components.td, {\n            children: \"9.43064E-02\"\n          }), (0,jsx_runtime.jsx)(_components.td, {\n            children: \"0.82267\"\n          }), (0,jsx_runtime.jsx)(_components.td, {\n            children: \"0.40266\"\n          })]\n        }), (0,jsx_runtime.jsxs)(_components.tr, {\n          children: [(0,jsx_runtime.jsx)(_components.td, {\n            children: \"0.26413\"\n          }), (0,jsx_runtime.jsx)(_components.td, {\n            children: \"0.32497\"\n          }), (0,jsx_runtime.jsx)(_components.td, {\n            children: \"0.9931\"\n          })]\n        })]\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Now swap dimension 2 with dimension 3.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL SWAP(a3, b3, 1,3,2)\\nCALL Display(MdEncode(a3), \\\"a3=\\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"a3=( :, :, 1 ) =\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.table, {\n      children: [(0,jsx_runtime.jsx)(_components.thead, {\n        children: (0,jsx_runtime.jsxs)(_components.tr, {\n          children: [(0,jsx_runtime.jsx)(_components.th, {}), (0,jsx_runtime.jsx)(_components.th, {})]\n        })\n      }), (0,jsx_runtime.jsxs)(_components.tbody, {\n        children: [(0,jsx_runtime.jsxs)(_components.tr, {\n          children: [(0,jsx_runtime.jsx)(_components.td, {\n            children: \"0.85128\"\n          }), (0,jsx_runtime.jsx)(_components.td, {\n            children: \"9.43064E-02\"\n          })]\n        }), (0,jsx_runtime.jsxs)(_components.tr, {\n          children: [(0,jsx_runtime.jsx)(_components.td, {\n            children: \"0.61923\"\n          }), (0,jsx_runtime.jsx)(_components.td, {\n            children: \"0.26413\"\n          })]\n        })]\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"( :, :, 2 ) =\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.table, {\n      children: [(0,jsx_runtime.jsx)(_components.thead, {\n        children: (0,jsx_runtime.jsxs)(_components.tr, {\n          children: [(0,jsx_runtime.jsx)(_components.th, {}), (0,jsx_runtime.jsx)(_components.th, {})]\n        })\n      }), (0,jsx_runtime.jsxs)(_components.tbody, {\n        children: [(0,jsx_runtime.jsxs)(_components.tr, {\n          children: [(0,jsx_runtime.jsx)(_components.td, {\n            children: \"7.97914E-03\"\n          }), (0,jsx_runtime.jsx)(_components.td, {\n            children: \"0.82267\"\n          })]\n        }), (0,jsx_runtime.jsxs)(_components.tr, {\n          children: [(0,jsx_runtime.jsx)(_components.td, {\n            children: \"2.30844E-02\"\n          }), (0,jsx_runtime.jsx)(_components.td, {\n            children: \"0.32497\"\n          })]\n        })]\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"( :, :, 3 ) =\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.table, {\n      children: [(0,jsx_runtime.jsx)(_components.thead, {\n        children: (0,jsx_runtime.jsxs)(_components.tr, {\n          children: [(0,jsx_runtime.jsx)(_components.th, {}), (0,jsx_runtime.jsx)(_components.th, {})]\n        })\n      }), (0,jsx_runtime.jsxs)(_components.tbody, {\n        children: [(0,jsx_runtime.jsxs)(_components.tr, {\n          children: [(0,jsx_runtime.jsx)(_components.td, {\n            children: \"0.12877\"\n          }), (0,jsx_runtime.jsx)(_components.td, {\n            children: \"0.40266\"\n          })]\n        }), (0,jsx_runtime.jsxs)(_components.tr, {\n          children: [(0,jsx_runtime.jsx)(_components.td, {\n            children: \"0.67707\"\n          }), (0,jsx_runtime.jsx)(_components.td, {\n            children: \"0.9931\"\n          })]\n        })]\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"You can verify that the dimension 2 and dimension 3 are changed.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"END PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction _Swap_test_2_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_Swap_test_2_createMdxContent, {\n      ...props\n    })\n  }) : _Swap_test_2_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/SwapUtility/_Swap_test_3.md\n\n\nconst _Swap_test_3_frontMatter = {};\nconst _Swap_test_3_contentTitle = undefined;\n\n\n\n\n\nconst _Swap_test_3_toc = [];\nfunction _Swap_test_3_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    table: \"table\",\n    tbody: \"tbody\",\n    td: \"td\",\n    th: \"th\",\n    thead: \"thead\",\n    tr: \"tr\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"This example shows the usage of \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"Swap\"\n      }), \" method.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Swap method for rank4.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n    USE easifemBase\\n    IMPLICIT NONE\\n    REAL( DFP ), ALLOCATABLE :: a2(:,:), b2(:,:), a3(:,:,:), b3(:,:,:), &\\n      & a4(:,:,:,:), b4(:,:,:,:)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"call reallocate(a2, 2,2)\\ncall reallocate(b2, 2,2)\\na2(1,:) = [2,1]\\na2(2,:) = [4,2]\\nb2(1,1) = 1; b2(2,2) = 2\\nb4 = outerprod(a2, b2)\\ncall swap(a=a4, b=b4, i1=1, i2=2, i3=3, i4=4)\\ncall display(MdEncode(a4), \\\"a4\\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"a4(:,:,1,1) =\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.table, {\n      children: [(0,jsx_runtime.jsx)(_components.thead, {\n        children: (0,jsx_runtime.jsxs)(_components.tr, {\n          children: [(0,jsx_runtime.jsx)(_components.th, {}), (0,jsx_runtime.jsx)(_components.th, {})]\n        })\n      }), (0,jsx_runtime.jsxs)(_components.tbody, {\n        children: [(0,jsx_runtime.jsxs)(_components.tr, {\n          children: [(0,jsx_runtime.jsx)(_components.td, {\n            children: \"2\"\n          }), (0,jsx_runtime.jsx)(_components.td, {\n            children: \"1\"\n          })]\n        }), (0,jsx_runtime.jsxs)(_components.tr, {\n          children: [(0,jsx_runtime.jsx)(_components.td, {\n            children: \"4\"\n          }), (0,jsx_runtime.jsx)(_components.td, {\n            children: \"2\"\n          })]\n        })]\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"(:,:,2,1) =\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.table, {\n      children: [(0,jsx_runtime.jsx)(_components.thead, {\n        children: (0,jsx_runtime.jsxs)(_components.tr, {\n          children: [(0,jsx_runtime.jsx)(_components.th, {}), (0,jsx_runtime.jsx)(_components.th, {})]\n        })\n      }), (0,jsx_runtime.jsxs)(_components.tbody, {\n        children: [(0,jsx_runtime.jsxs)(_components.tr, {\n          children: [(0,jsx_runtime.jsx)(_components.td, {\n            children: \"0\"\n          }), (0,jsx_runtime.jsx)(_components.td, {\n            children: \"0\"\n          })]\n        }), (0,jsx_runtime.jsxs)(_components.tr, {\n          children: [(0,jsx_runtime.jsx)(_components.td, {\n            children: \"0\"\n          }), (0,jsx_runtime.jsx)(_components.td, {\n            children: \"0\"\n          })]\n        })]\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"(:,:,1,2) =\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.table, {\n      children: [(0,jsx_runtime.jsx)(_components.thead, {\n        children: (0,jsx_runtime.jsxs)(_components.tr, {\n          children: [(0,jsx_runtime.jsx)(_components.th, {}), (0,jsx_runtime.jsx)(_components.th, {})]\n        })\n      }), (0,jsx_runtime.jsxs)(_components.tbody, {\n        children: [(0,jsx_runtime.jsxs)(_components.tr, {\n          children: [(0,jsx_runtime.jsx)(_components.td, {\n            children: \"0\"\n          }), (0,jsx_runtime.jsx)(_components.td, {\n            children: \"0\"\n          })]\n        }), (0,jsx_runtime.jsxs)(_components.tr, {\n          children: [(0,jsx_runtime.jsx)(_components.td, {\n            children: \"0\"\n          }), (0,jsx_runtime.jsx)(_components.td, {\n            children: \"0\"\n          })]\n        })]\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"(:,:,2,2) =\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.table, {\n      children: [(0,jsx_runtime.jsx)(_components.thead, {\n        children: (0,jsx_runtime.jsxs)(_components.tr, {\n          children: [(0,jsx_runtime.jsx)(_components.th, {}), (0,jsx_runtime.jsx)(_components.th, {})]\n        })\n      }), (0,jsx_runtime.jsxs)(_components.tbody, {\n        children: [(0,jsx_runtime.jsxs)(_components.tr, {\n          children: [(0,jsx_runtime.jsx)(_components.td, {\n            children: \"4\"\n          }), (0,jsx_runtime.jsx)(_components.td, {\n            children: \"2\"\n          })]\n        }), (0,jsx_runtime.jsxs)(_components.tr, {\n          children: [(0,jsx_runtime.jsx)(_components.td, {\n            children: \"8\"\n          }), (0,jsx_runtime.jsx)(_components.td, {\n            children: \"4\"\n          })]\n        })]\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"call swap(a=a4, b=b4, i1=1, i2=3, i3=2, i4=4)\\ncall display(MdEncode(a4), \\\"a4\\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"a4(:,:,1,1) =\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.table, {\n      children: [(0,jsx_runtime.jsx)(_components.thead, {\n        children: (0,jsx_runtime.jsxs)(_components.tr, {\n          children: [(0,jsx_runtime.jsx)(_components.th, {}), (0,jsx_runtime.jsx)(_components.th, {})]\n        })\n      }), (0,jsx_runtime.jsxs)(_components.tbody, {\n        children: [(0,jsx_runtime.jsxs)(_components.tr, {\n          children: [(0,jsx_runtime.jsx)(_components.td, {\n            children: \"2\"\n          }), (0,jsx_runtime.jsx)(_components.td, {\n            children: \"0\"\n          })]\n        }), (0,jsx_runtime.jsxs)(_components.tr, {\n          children: [(0,jsx_runtime.jsx)(_components.td, {\n            children: \"4\"\n          }), (0,jsx_runtime.jsx)(_components.td, {\n            children: \"0\"\n          })]\n        })]\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"(:,:,2,1) =\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.table, {\n      children: [(0,jsx_runtime.jsx)(_components.thead, {\n        children: (0,jsx_runtime.jsxs)(_components.tr, {\n          children: [(0,jsx_runtime.jsx)(_components.th, {}), (0,jsx_runtime.jsx)(_components.th, {})]\n        })\n      }), (0,jsx_runtime.jsxs)(_components.tbody, {\n        children: [(0,jsx_runtime.jsxs)(_components.tr, {\n          children: [(0,jsx_runtime.jsx)(_components.td, {\n            children: \"1\"\n          }), (0,jsx_runtime.jsx)(_components.td, {\n            children: \"0\"\n          })]\n        }), (0,jsx_runtime.jsxs)(_components.tr, {\n          children: [(0,jsx_runtime.jsx)(_components.td, {\n            children: \"2\"\n          }), (0,jsx_runtime.jsx)(_components.td, {\n            children: \"0\"\n          })]\n        })]\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"(:,:,1,2) =\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.table, {\n      children: [(0,jsx_runtime.jsx)(_components.thead, {\n        children: (0,jsx_runtime.jsxs)(_components.tr, {\n          children: [(0,jsx_runtime.jsx)(_components.th, {}), (0,jsx_runtime.jsx)(_components.th, {})]\n        })\n      }), (0,jsx_runtime.jsxs)(_components.tbody, {\n        children: [(0,jsx_runtime.jsxs)(_components.tr, {\n          children: [(0,jsx_runtime.jsx)(_components.td, {\n            children: \"0\"\n          }), (0,jsx_runtime.jsx)(_components.td, {\n            children: \"4\"\n          })]\n        }), (0,jsx_runtime.jsxs)(_components.tr, {\n          children: [(0,jsx_runtime.jsx)(_components.td, {\n            children: \"0\"\n          }), (0,jsx_runtime.jsx)(_components.td, {\n            children: \"8\"\n          })]\n        })]\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"(:,:,2,2) =\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.table, {\n      children: [(0,jsx_runtime.jsx)(_components.thead, {\n        children: (0,jsx_runtime.jsxs)(_components.tr, {\n          children: [(0,jsx_runtime.jsx)(_components.th, {}), (0,jsx_runtime.jsx)(_components.th, {})]\n        })\n      }), (0,jsx_runtime.jsxs)(_components.tbody, {\n        children: [(0,jsx_runtime.jsxs)(_components.tr, {\n          children: [(0,jsx_runtime.jsx)(_components.td, {\n            children: \"0\"\n          }), (0,jsx_runtime.jsx)(_components.td, {\n            children: \"2\"\n          })]\n        }), (0,jsx_runtime.jsxs)(_components.tr, {\n          children: [(0,jsx_runtime.jsx)(_components.td, {\n            children: \"0\"\n          }), (0,jsx_runtime.jsx)(_components.td, {\n            children: \"4\"\n          })]\n        })]\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"END PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction _Swap_test_3_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_Swap_test_3_createMdxContent, {\n      ...props\n    })\n  }) : _Swap_test_3_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/SwapUtility/_Swap_test_4.md\n\n\nconst _Swap_test_4_frontMatter = {};\nconst _Swap_test_4_contentTitle = undefined;\n\n\n\n\n\nconst _Swap_test_4_toc = [];\nfunction _Swap_test_4_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsx)(_components.pre, {\n    children: (0,jsx_runtime.jsx)(_components.code, {\n      className: \"language-fortran\",\n      children: \"program main\\nuse easifemBase\\nimplicit none\\n\\nreal(dfp) :: a, b\\n\\na = 3; b=4\\nCALL Swap(a,b)\\nCALL OK(a.EQ.4 .AND. b.EQ.3, \\\"test(1):\\\")\\nend program main\\n\"\n    })\n  });\n}\nfunction _Swap_test_4_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_Swap_test_4_createMdxContent, {\n      ...props\n    })\n  }) : _Swap_test_4_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/SwapUtility/_Swap_test_5.md\n\n\nconst _Swap_test_5_frontMatter = {};\nconst _Swap_test_5_contentTitle = undefined;\n\n\n\n\n\nconst _Swap_test_5_toc = [];\nfunction _Swap_test_5_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsx)(_components.pre, {\n    children: (0,jsx_runtime.jsx)(_components.code, {\n      className: \"language-fortran\",\n      children: \"program main\\nuse easifemBase\\nimplicit none\\n\\nreal(dfp) :: a(3), b(3)\\n\\na = 3; b=4\\nCALL Swap(a,b)\\nCALL OK(ALL(a.EQ.4) .AND. ALL(b.EQ.3), \\\"test(1):\\\")\\nend program main\\n\"\n    })\n  });\n}\nfunction _Swap_test_5_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_Swap_test_5_createMdxContent, {\n      ...props\n    })\n  }) : _Swap_test_5_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/SwapUtility/_Swap_test_6.md\n\n\nconst _Swap_test_6_frontMatter = {};\nconst _Swap_test_6_contentTitle = undefined;\n\n\n\n\n\nconst _Swap_test_6_toc = [];\nfunction _Swap_test_6_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsx)(_components.pre, {\n    children: (0,jsx_runtime.jsx)(_components.code, {\n      className: \"language-fortran\",\n      children: \"program main\\nuse easifemBase\\nimplicit none\\n\\nreal(dfp) :: a(3, 2), b(3, 2)\\n\\na = 3; b=4\\nCALL Swap(a,b)\\nCALL OK(ALL(a.EQ.4) .AND. ALL(b.EQ.3), \\\"test(1):\\\")\\nend program main\\n\"\n    })\n  });\n}\nfunction _Swap_test_6_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_Swap_test_6_createMdxContent, {\n      ...props\n    })\n  }) : _Swap_test_6_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/SwapUtility/_Swap_test_7.md\n\n\nconst _Swap_test_7_frontMatter = {};\nconst _Swap_test_7_contentTitle = undefined;\n\n\n\n\n\nconst _Swap_test_7_toc = [];\nfunction _Swap_test_7_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsx)(_components.pre, {\n    children: (0,jsx_runtime.jsx)(_components.code, {\n      className: \"language-fortran\",\n      children: \"program main\\nuse easifemBase\\nimplicit none\\n\\nreal(dfp) :: a, b\\n\\na = 3; b=4\\nCALL Swap(a,b, a .LE.b )\\nCALL OK(a.EQ.4 .AND. b.EQ.3, \\\"test(1):\\\")\\n\\n\\nCALL Swap(a,b, a .LE.b )\\nCALL OK(a.EQ.4 .AND. b.EQ.3, \\\"test(2):\\\")\\nend program main\\n\"\n    })\n  });\n}\nfunction _Swap_test_7_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_Swap_test_7_createMdxContent, {\n      ...props\n    })\n  }) : _Swap_test_7_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/SwapUtility/_Swap_test_8.md\n\n\nconst _Swap_test_8_frontMatter = {};\nconst _Swap_test_8_contentTitle = undefined;\n\n\n\n\n\nconst _Swap_test_8_toc = [];\nfunction _Swap_test_8_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsx)(_components.pre, {\n    children: (0,jsx_runtime.jsx)(_components.code, {\n      className: \"language-fortran\",\n      children: \"program main\\nuse easifemBase\\nimplicit none\\n\\nreal(dfp) :: a(2), b(2)\\n\\na = 3; b=4\\nCALL Swap(a,b, a .LE.b )\\nCALL OK(ALL(a.EQ.4 .AND. b.EQ.3), \\\"test(1):\\\")\\n\\n\\nCALL Swap(a,b, a .LE.b )\\nCALL OK(ALL(a.EQ.4 .AND. b.EQ.3), \\\"test(2):\\\")\\nend program main\\n\"\n    })\n  });\n}\nfunction _Swap_test_8_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_Swap_test_8_createMdxContent, {\n      ...props\n    })\n  }) : _Swap_test_8_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/SwapUtility/_Swap_test_9.md\n\n\nconst _Swap_test_9_frontMatter = {};\nconst _Swap_test_9_contentTitle = undefined;\n\n\n\n\n\nconst _Swap_test_9_toc = [];\nfunction _Swap_test_9_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsx)(_components.pre, {\n    children: (0,jsx_runtime.jsx)(_components.code, {\n      className: \"language-fortran\",\n      children: \"program main\\nuse easifemBase\\nimplicit none\\n\\nreal(dfp) :: a(2,2), b(2,2)\\n\\na = 3; b=4\\nCALL Swap(a,b, a .LE.b )\\nCALL OK(ALL(a.EQ.4 .AND. b.EQ.3), \\\"test(1):\\\")\\n\\n\\nCALL Swap(a,b, a .LE.b )\\nCALL OK(ALL(a.EQ.4 .AND. b.EQ.3), \\\"test(2):\\\")\\nend program main\\n\"\n    })\n  });\n}\nfunction _Swap_test_9_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_Swap_test_9_createMdxContent, {\n      ...props\n    })\n  }) : _Swap_test_9_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/SwapUtility/Swap.md\n\n\nconst Swap_frontMatter = {};\nconst Swap_contentTitle = 'Swap';\n\nconst assets = {\n\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst Swap_toc = [{\n  \"value\": \"Interface 1\",\n  \"id\": \"interface-1\",\n  \"level\": 2\n}, ...toc, {\n  \"value\": \"Interface 2\",\n  \"id\": \"interface-2\",\n  \"level\": 2\n}, ..._Swap_test_2_toc, {\n  \"value\": \"Interface 3\",\n  \"id\": \"interface-3\",\n  \"level\": 2\n}, ..._Swap_test_3_toc, {\n  \"value\": \"Interface 4\",\n  \"id\": \"interface-4\",\n  \"level\": 2\n}, ..._Swap_test_4_toc, {\n  \"value\": \"Interface 5\",\n  \"id\": \"interface-5\",\n  \"level\": 2\n}, ..._Swap_test_5_toc, {\n  \"value\": \"Interface 6\",\n  \"id\": \"interface-6\",\n  \"level\": 2\n}, ..._Swap_test_6_toc, {\n  \"value\": \"Interface 7\",\n  \"id\": \"interface-7\",\n  \"level\": 2\n}, ..._Swap_test_7_toc, {\n  \"value\": \"Interface 8\",\n  \"id\": \"interface-8\",\n  \"level\": 2\n}, ..._Swap_test_8_toc, {\n  \"value\": \"Interface 9\",\n  \"id\": \"interface-9\",\n  \"level\": 2\n}, ..._Swap_test_9_toc];\nfunction Swap_createMdxContent(props) {\n  const _components = {\n    admonition: \"admonition\",\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    header: \"header\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.header, {\n      children: (0,jsx_runtime.jsx)(_components.h1, {\n        id: \"swap\",\n        children: \"Swap\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This subroutine can swap two integer (scalar, vector, matrix) and two real numbers (scalar, vector, matrix). It can also swap the dimension of a Fortran array.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.admonition, {\n      type: \"note\",\n      children: (0,jsx_runtime.jsxs)(_components.p, {\n        children: [\"We can use this method for swapping two variables \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"a\"\n        }), \" and \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"b\"\n        }), \", where \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"a\"\n        }), \" and \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"b\"\n        }), \" can be scalar, vector or matrix of Fortran intrinsic types.\"]\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.admonition, {\n      type: \"note\",\n      children: (0,jsx_runtime.jsxs)(_components.p, {\n        children: [\"We can also use this method for swaping the dimension of a multi-dimension array.\\nFor example, consider an array \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"b(3,4)\"\n        }), \", we can interchange the row and column dimension (i.e., transpose operation) by using swap.\"]\n      })\n    }), \"\\n\", \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-1\",\n      children: \"Interface 1\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE PURE SUBROUTINE Swap(a, b, i1, i2)\\n    REAL(Real32), ALLOCATABLE, INTENT(INOUT) :: a(:, :)\\n      !! the returned array\\n    REAL(Real32), INTENT(IN) :: b(:, :)\\n      !! input array, it will be untouched\\n    INTEGER(I4B), INTENT(IN) :: i1\\n      !! index 1 is Swapped with index `i1`\\n      !! make sure i1 is lesser than or equal to 2\\n    INTEGER(I4B), INTENT(IN) :: i2\\n      !! index 2 is Swapped with index `i2`\\n      !! make sure i2 is less than or equal to 2\\n  END SUBROUTINE Swap\\nEND INTERFACE\\n\"\n          })\n        })\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-2\",\n      children: \"Interface 2\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE PURE SUBROUTINE Swap(a, b, i1, i2, i3)\\n    REAL(Real32|Real64), ALLOCATABLE, INTENT(INOUT) :: a(:, :, :)\\n    !! the returned array\\n    REAL(Real32|Real64), INTENT(IN) :: b(:, :, :)\\n    !! input array, it will be untouched\\n    INTEGER(I4B), INTENT(IN) :: i1\\n    !! index 1 is Swapped with index `i1`\\n    !! make sure i1 is lesser than or equal to 3\\n    INTEGER(I4B), INTENT(IN) :: i2\\n    !! index 2 is Swapped with index `i2`\\n    !! make sure i2 is less than or equal to 3\\n    INTEGER(I4B), INTENT(IN) :: i3\\n    !! index 3 is Swapped with index `i3`\\n    !! make sure i3 is less than or equal to 3\\n  END SUBROUTINE Swap\\nEND INTERFACE\\n\"\n          })\n        })\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_Swap_test_2_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-3\",\n      children: \"Interface 3\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE PURE SUBROUTINE Swap(a, b, i1, i2, i3, i4)\\n    REAL(Real64), ALLOCATABLE, INTENT(INOUT) :: a(:, :, :, :)\\n    !! the returned array\\n    REAL(Real64), INTENT(IN) :: b(:, :, :, :)\\n    !! input array, it will be untouched\\n    INTEGER(I4B), INTENT(IN) :: i1\\n    !! index 1 is Swapped with index `i1`\\n    !! make sure i1 is lesser than or equal to 4\\n    INTEGER(I4B), INTENT(IN) :: i2\\n    !! index 2 is Swapped with index `i2`\\n    !! make sure i2 is less than or equal to 4\\n    INTEGER(I4B), INTENT(IN) :: i3\\n    !! index 3 is Swapped with index `i3`\\n    !! make sure i3 is less than or equal to 4\\n    INTEGER(I4B), INTENT(IN) :: i4\\n    !! index 4 is Swapped with index `i4`\\n    !! make sure i4 is less than or equal to 4\\n  END SUBROUTINE Swap\\nEND INTERFACE\\n\"\n          })\n        })\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_Swap_test_3_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-4\",\n      children: \"Interface 4\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE PURE SUBROUTINE Swap(a, b)\\n    INTEGER(Int8| Int16 | Int32 | Int64| Real32 | Real64), INTENT(INOUT) :: a, b\\n  END SUBROUTINE Swap\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsx)(_components.p, {\n          children: \"Swap two scalar numbers.\"\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_Swap_test_4_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-5\",\n      children: \"Interface 5\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE PURE SUBROUTINE Swap(a, b)\\n    INTEGER(Int8| Int16 | Int32 | Int64 | Real32 | Real64), INTENT(INOUT) :: a(:), b(:)\\n  END SUBROUTINE Swap\\nEND INTERFACE\\n\"\n          })\n        })\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_Swap_test_5_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-6\",\n      children: \"Interface 6\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE PURE SUBROUTINE Swap(a, b)\\n    INTEGER(Int8| Int16 | Int32 | Int64 | Real32 | Real64), INTENT(INOUT) :: a(:,:), b(:,:)\\n  END SUBROUTINE Swap\\nEND INTERFACE\\n\"\n          })\n        })\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_Swap_test_6_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-7\",\n      children: \"Interface 7\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE PURE SUBROUTINE Swap(a, b, mask)\\n    INTEGER(Int8| Int16 | Int32 | Int64 | Real32 | Real64), INTENT(INOUT) :: a, b\\n    LOGICAL(LGT), INTENT(IN) :: mask\\n  END SUBROUTINE Swap\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsx)(_components.p, {\n          children: \"Masked swap.\"\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_Swap_test_7_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-8\",\n      children: \"Interface 8\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE PURE SUBROUTINE Swap(a, b, mask)\\n    INTEGER(Int8| Int16 | Int32 | Int64 | Real32 | Real64), INTENT(INOUT) :: a(:), b(:)\\n    LOGICAL(LGT), INTENT(IN) :: mask(:)\\n  END SUBROUTINE Swap\\nEND INTERFACE\\n\"\n          })\n        })\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_Swap_test_8_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-9\",\n      children: \"Interface 9\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE PURE SUBROUTINE Swap(a, b, mask)\\n    INTEGER(Int8| Int16 | Int32 | Int64 | Real32 | Real64), INTENT(INOUT) :: a(:, :), b(:, :)\\n    LOGICAL(LGT), INTENT(IN) :: mask(:, :)\\n  END SUBROUTINE Swap\\nEND INTERFACE\\n\"\n          })\n        })\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_Swap_test_9_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    })]\n  });\n}\nfunction Swap_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(Swap_createMdxContent, {\n      ...props\n    })\n  }) : Swap_createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./docs/docs-api/SwapUtility/Swap.md\n");

/***/ })

}]);