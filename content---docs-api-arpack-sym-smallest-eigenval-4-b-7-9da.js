"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkeasifem_docs"] = globalThis["webpackChunkeasifem_docs"] || []).push([["content---docs-api-arpack-sym-smallest-eigenval-4-b-7-9da"],{

/***/ "./docs/docs-api/ARPACK/SymSmallestEigenval.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  assets: () => (/* binding */ assets),\n  contentTitle: () => (/* binding */ contentTitle),\n  \"default\": () => (/* binding */ MDXContent),\n  frontMatter: () => (/* binding */ frontMatter),\n  metadata: () => (/* reexport */ site_docs_docs_api_arpack_sym_smallest_eigenval_md_4b7_namespaceObject),\n  toc: () => (/* binding */ toc)\n});\n\n;// ./.docusaurus/docusaurus-plugin-content-docs/docs-api/site-docs-docs-api-arpack-sym-smallest-eigenval-md-4b7.json\nconst site_docs_docs_api_arpack_sym_smallest_eigenval_md_4b7_namespaceObject = /*#__PURE__*/JSON.parse('{\"id\":\"ARPACK/SymSmallestEigenval\",\"title\":\"SymSmallestEigenVal\",\"description\":\"This function calculates the smallest eigenvalue of a real sym dense matrix.\",\"source\":\"@site/docs/docs-api/ARPACK/SymSmallestEigenval.md\",\"sourceDirName\":\"ARPACK\",\"slug\":\"/ARPACK/SymSmallestEigenval\",\"permalink\":\"/docs-api/ARPACK/SymSmallestEigenval\",\"draft\":false,\"unlisted\":false,\"editUrl\":\"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/ARPACK/SymSmallestEigenval.md\",\"tags\":[],\"version\":\"current\",\"lastUpdatedAt\":1539502055000,\"frontMatter\":{},\"sidebar\":\"tutorialSidebar\",\"previous\":{\"title\":\"SymLargestEigenval\",\"permalink\":\"/docs-api/ARPACK/SymLargestEigenval\"},\"next\":{\"title\":\"AbstractBC\",\"permalink\":\"/docs-api/AbstractBC/\"}}');\n// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n// EXTERNAL MODULE: ./node_modules/@mdx-js/react/lib/index.js\nvar lib = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js + 2 modules\nvar Tabs = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js + 1 modules\nvar TabItem = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js\");\n;// ./docs/docs-api/ARPACK/SymSmallestEigenval.md\n\n\nconst frontMatter = {};\nconst contentTitle = 'SymSmallestEigenVal';\n\nconst assets = {\n\n};\n\n\n\n\n\nconst toc = [];\nfunction _createMdxContent(props) {\n  const _components = {\n    admonition: \"admonition\",\n    code: \"code\",\n    h1: \"h1\",\n    header: \"header\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.header, {\n      children: (0,jsx_runtime.jsx)(_components.h1, {\n        id: \"symsmallesteigenval\",\n        children: \"SymSmallestEigenVal\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This function calculates the smallest eigenvalue of a real sym dense matrix.\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"It calls ARPACK SSAUPD or DSAUPD routine with MODE=3\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Currently, there are four interfaces under this generic method.\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"In this routine we use shift-inverted method to compute the smallest eigenvalue of a regular (standard) eigenvalue problem.\"\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"This is because \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"ARPACK\"\n        }), \" is good at finding the largest eigenvalue.\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"Internally this routine solves a system of linear equations: \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"mat * y = x\"\n        }), \" by using LU decomposition.\"]\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"In this routine we make a call to SymLUSolve and SymGetLU routine.\"\n      }), \"\\n\"]\n    }), \"\\n\", \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface1\",\n        label: \"܀ Interface 1\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE FUNCTION SymSmallestEigenVal(mat, sigma, which, NCV, maxIter, tol) &\\n    & RESULT(ans)\\n    REAL(DFP), INTENT(IN) :: mat(:, :)\\n    !! dense matrix\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: sigma\\n    !! Default value is 0.0\\n    CHARACTER(LEN=*), OPTIONAL, INTENT(IN) :: which\\n    !! `which = \\\"SM\\\"` ⇨ absolute smallest eigenvalue\\n    !! `which = \\\"SA\\\"` ⇨ algebraic smallest eigenvalue\\n    !! default is \\\"SA\\\"\\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: NCV\\n    !! Number of Lanczos vectors generated\\n    !! It must be greater than 1 and smaller than `size(mat,1)`\\n    !! Default is `NCV = MIN(n, 20)`\\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: maxIter\\n    !! Maximum number of iteration default = `N*10`\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: tol\\n    !! tolerance, default = 0.0\\n    REAL(DFP) :: ans\\n    !! maximum eigenvalue\\n  END FUNCTION SymSmallestEigenVal\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsx)(_components.admonition, {\n          type: \"caution\",\n          children: (0,jsx_runtime.jsx)(_components.p, {\n            children: \"This routine makes a copy of mat in mat0. Then, compute the LU decomposition of mat0.\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"mat\"\n            }), \" dense matrix\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"sigma\"\n            }), \" Default value is 0.0\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"which = \\\"SM\\\"\"\n            }), \" ⇨ absolute smallest eigenvalue\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"which = \\\"SA\\\"\"\n            }), \" ⇨ algebraic smallest eigenvalue\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"default value of \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"which\"\n            }), \" is \\\"SA\\\"\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"NCV\"\n            }), \" Number of Lanczos vectors generated. It must be greater than 1 and smaller than \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"size(mat,1)\"\n            }), \". Default is \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"NCV = MIN(n, 20)\"\n            })]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"maxIter\"\n            }), \" Maximum number of iteration default = \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"N*10\"\n            })]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"tol\"\n            }), \" tolerance, default = 0.0\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"ans\"\n            }), \" maximum eigenvalue.\"]\n          }), \"\\n\"]\n        })]\n      }), (0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface2\",\n        label: \"܀ Interface 2\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE FUNCTION SymSmallestEigenVal(mat, isFactor, ipiv, sigma, which, &\\n    & NCV, maxIter, tol) RESULT(ans)\\n    REAL(DFP), INTENT(INOUT) :: mat(:, :)\\n    !!\\n    !! Dense matrix\\n    !! If isFactor is false, then this matrix will change on return\\n    !!    in this case, it will contain LU decomposition\\n    !! If isFactor is true, then this matrix will not change\\n    !!\\n    LOGICAL(LGT), INTENT(INOUT) :: isFactor\\n    !! if mat is already factorized, the set isFactor to true\\n    !! if mat is not factorized, then set isFactor to false\\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: ipiv(:)\\n    !! When `isFactor` is true, then `mat` represents the\\n    !! `LU` factorization obtained by `SymGetLU` routine.\\n    !! In this case `ipiv` is returned by `SymGetLU`.\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: sigma\\n    !! Default value is 0.0\\n    CHARACTER(LEN=*), OPTIONAL, INTENT(IN) :: which\\n    !! `which = \\\"SM\\\"` ⇨ absolute smallest eigenvalue\\n    !! `which = \\\"SA\\\"` ⇨ algebraic smallest eigenvalue\\n    !! default is \\\"SA\\\"\\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: NCV\\n    !! Number of Lanczos vectors generated\\n    !! It must be greater than 1 and smaller than `size(mat,1)`\\n    !! Default is `NCV = MIN(n, 20)`\\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: maxIter\\n    !! Maximum number of iteration default = `N*10`\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: tol\\n    !! tolerance, default = 0.0\\n    REAL(DFP) :: ans\\n    !! maximum eigenvalue\\n  END FUNCTION SymSmallestEigenVal\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"mat\"\n            }), \" Dense matrix\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"isFactor\"\n            }), \" if mat is already factorized, then set isFactor to true. if mat is not factorized, then set isFactor to false. If isFactor is false, then this matrix will change on return. In this case, it will contain LU decomposition computed by \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"SymGetLU\"\n            }), \". If \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"isFactor\"\n            }), \" is true, then this matrix will not change, and matrix \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"mat\"\n            }), \" should contain the \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"LU\"\n            }), \" decomposition computed from \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"SymGetLU\"\n            }), \".\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"ipiv\"\n            }), \" When \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"isFactor\"\n            }), \" is true, then \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"mat\"\n            }), \" represents the \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"LU\"\n            }), \" factorization obtained by \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"SymGetLU\"\n            }), \" routine. In this case \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"ipiv\"\n            }), \" is returned by \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"SymGetLU\"\n            }), \".\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"sigma\"\n            }), \" Default value is 0.0\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"which = \\\"SM\\\"\"\n            }), \" ⇨ absolute smallest eigenvalue\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"which = \\\"SA\\\"\"\n            }), \" ⇨ algebraic smallest eigenvalue\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"default value of \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"which\"\n            }), \" is \\\"SA\\\"\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"NCV\"\n            }), \" Number of Lanczos vectors generated\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"It must be greater than 1 and smaller than \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"size(mat,1)\"\n            })]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"Default value of \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"NCV\"\n            }), \" is \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"NCV = MIN(n, 20)\"\n            })]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"maxIter\"\n            }), \" Maximum number of iteration default = \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"N*10\"\n            })]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"tol\"\n            }), \" tolerance, default = 0.0\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"ans\"\n            }), \", the smallest eigenvalue.\"]\n          }), \"\\n\"]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ Close\"\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./docs/docs-api/ARPACK/SymSmallestEigenval.md\n");

/***/ })

}]);