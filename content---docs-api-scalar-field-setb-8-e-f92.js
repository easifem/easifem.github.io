"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkeasifem_docs"] = globalThis["webpackChunkeasifem_docs"] || []).push([["content---docs-api-scalar-field-setb-8-e-f92"],{

/***/ "./docs/docs-api/ScalarField/Set.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  assets: () => (/* binding */ assets),\n  contentTitle: () => (/* binding */ Set_contentTitle),\n  \"default\": () => (/* binding */ Set_MDXContent),\n  frontMatter: () => (/* binding */ Set_frontMatter),\n  metadata: () => (/* reexport */ site_docs_docs_api_scalar_field_set_md_b8e_namespaceObject),\n  toc: () => (/* binding */ Set_toc)\n});\n\n;// ./.docusaurus/docusaurus-plugin-content-docs/docs-api/site-docs-docs-api-scalar-field-set-md-b8e.json\nconst site_docs_docs_api_scalar_field_set_md_b8e_namespaceObject = /*#__PURE__*/JSON.parse('{\"id\":\"ScalarField/Set\",\"title\":\"Set\",\"description\":\"Set the entries in the ScalarField.\",\"source\":\"@site/docs/docs-api/ScalarField/Set.md\",\"sourceDirName\":\"ScalarField\",\"slug\":\"/ScalarField/Set\",\"permalink\":\"/docs-api/ScalarField/Set\",\"draft\":false,\"unlisted\":false,\"editUrl\":\"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/ScalarField/Set.md\",\"tags\":[],\"version\":\"current\",\"lastUpdatedAt\":1539502055000,\"frontMatter\":{},\"sidebar\":\"tutorialSidebar\",\"previous\":{\"title\":\"Norm2\",\"permalink\":\"/docs-api/ScalarField/Norm2\"},\"next\":{\"title\":\"SetScalarFieldParam\",\"permalink\":\"/docs-api/ScalarField/SetScalarFieldParam\"}}');\n// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n// EXTERNAL MODULE: ./node_modules/@mdx-js/react/lib/index.js\nvar lib = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n;// ./docs/docs-api/ScalarField/examples/_Set_test_1.md\n\n\nconst frontMatter = {};\nconst contentTitle = undefined;\n\n\n\n\n\nconst toc = [];\nfunction _createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsx)(_components.pre, {\n    children: (0,jsx_runtime.jsx)(_components.code, {\n      className: \"language-fortran\",\n      children: \"!> author: Vikas Sharma, Ph. D.\\n! date: 2024-06-05\\n! summary: Set1\\n\\nPROGRAM main\\nUSE FEDomain_Class\\nUSE HDF5File_Class\\nUSE AbstractMesh_Class\\nUSE AbstractField_Class, ONLY: TypeField\\nUSE ScalarField_Class\\nUSE FPL, ONLY: FPL_Init, FPL_FINALIZE, ParameterList_\\nUSE GlobalData\\nUSE Test_Method\\nUSE FEDOF_Class\\nUSE ExceptionHandler_Class, ONLY: e, EXCEPTION_INFORMATION\\nUSE ApproxUtility\\n\\nTYPE(FEDomain_) :: dom\\nCLASS(AbstractMesh_), POINTER :: mesh\\nTYPE(HDF5File_) :: meshfile\\nTYPE(ParameterList_) :: param\\nREAL(DFP), ALLOCATABLE :: realVec(:)\\nCHARACTER(LEN=*), PARAMETER :: engine = \\\"NATIVE_SERIAL\\\"\\nCHARACTER(*), PARAMETER :: meshfilename = &\\n                           \\\"../../Mesh/examples/meshdata/small_mesh.h5\\\"\\nINTEGER(I4B), PARAMETER :: nsd = 2\\nCHARACTER(:), ALLOCATABLE :: msg\\nINTEGER(I4B) :: localNode\\nREAL(DFP) :: VALUE, tol\\nLOGICAL(LGT) :: isok\\n\\nCALL e%setQuietMode(EXCEPTION_INFORMATION, .TRUE.)\\n\\nCALL FPL_Init()\\nCALL param%Initiate()\\n\\n!> start creating domain\\nCALL meshfile%Initiate(filename=meshfilename, mode=\\\"READ\\\")\\nCALL meshfile%OPEN()\\nCALL dom%Initiate(hdf5=meshfile, group=\\\"\\\")\\n!> end creating domain\\n\\nmesh => dom%GetMeshPointer(dim=nsd)\\n\\nBLOCK\\n  INTEGER(I4B), PARAMETER :: order = 1\\n  CHARACTER(*), PARAMETER :: baseContinuity = \\\"H1\\\"\\n  CHARACTER(*), PARAMETER :: baseInterpolation = \\\"Lagrange\\\"\\n  TYPE(FEDOF_) :: fedof\\n  TYPE(ScalarField_) :: obj\\n\\n  CALL fedof%Initiate(baseContinuity=baseContinuity, &\\n                  baseInterpolation=baseInterpolation, order=order, mesh=mesh)\\n\\n  CALL SetScalarFieldParam(param=param, &\\n                           fieldType=TypeField%normal, &\\n                           name=\\\"U\\\", &\\n                           engine=engine)\\n\\n  CALL obj%Initiate(param, fedof)\\n\\n  msg = \\\"Set1 \\\"\\n  localNode = 1\\n  CALL obj%Set(globalnode=localNode, VALUE=100.0_DFP, islocal=.TRUE.)\\n  CALL obj%Get(globalnode=localNode, VALUE=VALUE, islocal=.TRUE.)\\n  tol = 1.0E-5\\n  isok = SOFTEQ(100.0_DFP, VALUE, tol)\\n  CALL OK(isok, msg)\\n\\n  localNode = 2\\n  CALL obj%Set(globalnode=localNode, VALUE=200.0_DFP, islocal=.TRUE.)\\n  CALL obj%Get(globalnode=localNode, VALUE=VALUE, islocal=.TRUE.)\\n  tol = 1.0E-5\\n  isok = SOFTEQ(200.0_DFP, VALUE, tol)\\n  CALL OK(isok, msg)\\n\\n  CALL obj%DEALLOCATE()\\nEND BLOCK\\n\\nBLOCK\\n  INTEGER(I4B), PARAMETER :: order = 2\\n  CHARACTER(*), PARAMETER :: baseContinuity = \\\"H1\\\"\\n  CHARACTER(*), PARAMETER :: baseInterpolation = \\\"Heirarchical\\\"\\n  TYPE(FEDOF_) :: fedof\\n  TYPE(ScalarField_) :: obj\\n\\n  CALL fedof%Initiate(baseContinuity=baseContinuity, &\\n                  baseInterpolation=baseInterpolation, order=order, mesh=mesh)\\n\\n  CALL SetScalarFieldParam(param=param, &\\n                           fieldType=TypeField%normal, &\\n                           name=\\\"U\\\", &\\n                           engine=engine)\\n\\n  CALL obj%Initiate(param, fedof)\\n\\n  msg = \\\"Set1 \\\"\\n  localNode = 3\\n  CALL obj%Set(globalnode=localNode, VALUE=100.0_DFP, islocal=.TRUE.)\\n  CALL obj%Get(globalnode=localNode, VALUE=VALUE, islocal=.TRUE.)\\n  tol = 1.0E-5\\n  isok = SOFTEQ(100.0_DFP, VALUE, tol)\\n  CALL OK(isok, msg)\\n\\n  CALL obj%DEALLOCATE()\\nEND BLOCK\\n\\nmesh => NULL()\\nCALL dom%DEALLOCATE()\\nCALL meshfile%DEALLOCATE()\\nCALL param%DEALLOCATE()\\nCALL FPL_FINALIZE()\\nEND PROGRAM main\\n\"\n    })\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/ScalarField/examples/_Set_test_2.md\n\n\nconst _Set_test_2_frontMatter = {};\nconst _Set_test_2_contentTitle = undefined;\n\n\n\n\n\nconst _Set_test_2_toc = [];\nfunction _Set_test_2_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsx)(_components.pre, {\n    children: (0,jsx_runtime.jsx)(_components.code, {\n      className: \"language-fortran\",\n      children: \"!> author: Vikas Sharma, Ph. D.\\n! date: 2024-06-05\\n! summary: Set2\\n\\nPROGRAM main\\nUSE FEDomain_Class\\nUSE HDF5File_Class\\nUSE AbstractMesh_Class\\nUSE AbstractField_Class, ONLY: TypeField\\nUSE ScalarField_Class\\nUSE FPL, ONLY: FPL_Init, FPL_FINALIZE, ParameterList_\\nUSE GlobalData\\nUSE Test_Method\\nUSE FEDOF_Class\\nUSE ExceptionHandler_Class, ONLY: e, EXCEPTION_INFORMATION\\nUSE ApproxUtility\\n\\nTYPE(FEDomain_) :: dom\\nCLASS(AbstractMesh_), POINTER :: mesh\\nTYPE(HDF5File_) :: meshfile\\nTYPE(ParameterList_) :: param\\nCHARACTER(LEN=*), PARAMETER :: engine = \\\"NATIVE_SERIAL\\\"\\nCHARACTER(*), PARAMETER :: meshfilename = &\\n                           \\\"../../Mesh/examples/meshdata/small_mesh.h5\\\"\\nINTEGER(I4B), PARAMETER :: nsd = 2\\n\\nCALL e%setQuietMode(EXCEPTION_INFORMATION, .TRUE.)\\n\\nCALL FPL_Init()\\nCALL param%Initiate()\\n\\n!> start creating domain\\nCALL meshfile%Initiate(filename=meshfilename, mode=\\\"READ\\\")\\nCALL meshfile%OPEN()\\nCALL dom%Initiate(hdf5=meshfile, group=\\\"\\\")\\n!> end creating domain\\n\\nmesh => dom%GetMeshPointer(dim=nsd)\\n\\nBLOCK\\n  INTEGER(I4B), PARAMETER :: order = 1\\n  CHARACTER(*), PARAMETER :: baseContinuity = \\\"H1\\\"\\n  CHARACTER(*), PARAMETER :: baseInterpolation = \\\"Lagrange\\\"\\n  TYPE(FEDOF_) :: fedof\\n  TYPE(ScalarField_) :: obj\\n  REAL(DFP) :: found(100), want(100), VALUE, tol\\n  INTEGER(I4B) :: tsize\\n  CHARACTER(:), ALLOCATABLE :: msg\\n  LOGICAL(LGT) :: isok\\n\\n  CALL fedof%Initiate(baseContinuity=baseContinuity, &\\n                  baseInterpolation=baseInterpolation, order=order, mesh=mesh)\\n\\n  CALL SetScalarFieldParam(param=param, &\\n                           fieldType=TypeField%normal, &\\n                           name=\\\"U\\\", &\\n                           engine=engine)\\n\\n  CALL obj%Initiate(param, fedof)\\n\\n  msg = \\\"Set2 \\\"\\n  VALUE = 100.0_DFP\\n  CALL obj%Set(VALUE=VALUE)\\n  CALL obj%Get(VALUE=found, tsize=tsize)\\n\\n  want(1:tsize) = VALUE\\n  tol = 1.0E-5\\n  isok = ALL(SOFTEQ(found(1:tsize), want(1:tsize), tol))\\n  CALL OK(isok, msg)\\n\\n  CALL obj%Set(VALUE=VALUE, scale=2.0_DFP, addContribution=.TRUE.)\\n  CALL obj%Get(VALUE=found, tsize=tsize)\\n  want(1:tsize) = 3.0_DFP * VALUE\\n  tol = 1.0E-5\\n  isok = ALL(SOFTEQ(found(1:tsize), want(1:tsize), tol))\\n  CALL OK(isok, msg)\\n\\n  CALL obj%Set(VALUE=VALUE, addContribution=.TRUE.)\\n  CALL obj%Get(VALUE=found, tsize=tsize)\\n  want(1:tsize) = 4.0_DFP * VALUE\\n  tol = 1.0E-5\\n  isok = ALL(SOFTEQ(found(1:tsize), want(1:tsize), tol))\\n  CALL OK(isok, msg)\\n\\n  CALL obj%DEALLOCATE()\\nEND BLOCK\\n\\nBLOCK\\n  INTEGER(I4B), PARAMETER :: order = 2\\n  CHARACTER(*), PARAMETER :: baseContinuity = \\\"H1\\\"\\n  CHARACTER(*), PARAMETER :: baseInterpolation = \\\"Heirarchical\\\"\\n  TYPE(FEDOF_) :: fedof\\n  TYPE(ScalarField_) :: obj\\n  REAL(DFP) :: found(100), want(100), VALUE, tol\\n  INTEGER(I4B) :: tsize\\n  CHARACTER(:), ALLOCATABLE :: msg\\n  LOGICAL(LGT) :: isok\\n\\n  CALL fedof%Initiate(baseContinuity=baseContinuity, &\\n                  baseInterpolation=baseInterpolation, order=order, mesh=mesh)\\n\\n  CALL SetScalarFieldParam(param=param, &\\n                           fieldType=TypeField%normal, &\\n                           name=\\\"U\\\", &\\n                           engine=engine)\\n\\n  CALL obj%Initiate(param, fedof)\\n\\n  msg = \\\"Set2 \\\"\\n  VALUE = 100.0_DFP\\n  CALL obj%Set(VALUE=VALUE)\\n  CALL obj%Get(VALUE=found, tsize=tsize)\\n\\n  want(1:tsize) = VALUE\\n  tol = 1.0E-5\\n  isok = ALL(SOFTEQ(found(1:tsize), want(1:tsize), tol))\\n  CALL OK(isok, msg)\\n\\n  CALL obj%Set(VALUE=VALUE, scale=2.0_DFP, addContribution=.TRUE.)\\n  CALL obj%Get(VALUE=found, tsize=tsize)\\n  want(1:tsize) = 3.0_DFP * VALUE\\n  tol = 1.0E-5\\n  isok = ALL(SOFTEQ(found(1:tsize), want(1:tsize), tol))\\n  CALL OK(isok, msg)\\n\\n  CALL obj%Set(VALUE=VALUE, addContribution=.TRUE.)\\n  CALL obj%Get(VALUE=found, tsize=tsize)\\n  want(1:tsize) = 4.0_DFP * VALUE\\n  tol = 1.0E-5\\n  isok = ALL(SOFTEQ(found(1:tsize), want(1:tsize), tol))\\n  CALL OK(isok, msg)\\n\\n  CALL obj%DEALLOCATE()\\nEND BLOCK\\n\\nmesh => NULL()\\nCALL dom%DEALLOCATE()\\nCALL meshfile%DEALLOCATE()\\nCALL param%DEALLOCATE()\\nCALL FPL_FINALIZE()\\nEND PROGRAM main\\n\"\n    })\n  });\n}\nfunction _Set_test_2_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_Set_test_2_createMdxContent, {\n      ...props\n    })\n  }) : _Set_test_2_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/ScalarField/examples/_Set_test_3.md\n\n\nconst _Set_test_3_frontMatter = {};\nconst _Set_test_3_contentTitle = undefined;\n\n\n\n\n\nconst _Set_test_3_toc = [];\nfunction _Set_test_3_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsx)(_components.pre, {\n    children: (0,jsx_runtime.jsx)(_components.code, {\n      className: \"language-fortran\",\n      children: \"!> author: Vikas Sharma, Ph. D.\\n! date: 2024-06-05\\n! summary: Set3\\n\\nPROGRAM main\\nUSE FEDomain_Class\\nUSE HDF5File_Class\\nUSE AbstractMesh_Class\\nUSE AbstractField_Class, ONLY: TypeField\\nUSE ScalarField_Class\\nUSE FPL, ONLY: FPL_Init, FPL_FINALIZE, ParameterList_\\nUSE GlobalData\\nUSE Test_Method\\nUSE FEDOF_Class\\nUSE ExceptionHandler_Class, ONLY: e, EXCEPTION_INFORMATION\\nUSE ApproxUtility\\nUSE ArangeUtility\\n\\nTYPE(FEDomain_) :: dom\\nCLASS(AbstractMesh_), POINTER :: mesh\\nTYPE(HDF5File_) :: meshfile\\nTYPE(ParameterList_) :: param\\nCHARACTER(LEN=*), PARAMETER :: engine = \\\"NATIVE_SERIAL\\\"\\nCHARACTER(*), PARAMETER :: meshfilename = &\\n                           \\\"../../Mesh/examples/meshdata/small_mesh.h5\\\"\\nINTEGER(I4B), PARAMETER :: nsd = 2\\n\\nCALL e%setQuietMode(EXCEPTION_INFORMATION, .TRUE.)\\n\\nCALL FPL_Init()\\nCALL param%Initiate()\\n\\n!> start creating domain\\nCALL meshfile%Initiate(filename=meshfilename, mode=\\\"READ\\\")\\nCALL meshfile%OPEN()\\nCALL dom%Initiate(hdf5=meshfile, group=\\\"\\\")\\n!> end creating domain\\n\\nmesh => dom%GetMeshPointer(dim=nsd)\\n\\nBLOCK\\n  INTEGER(I4B), PARAMETER :: order = 1\\n  CHARACTER(*), PARAMETER :: baseContinuity = \\\"H1\\\"\\n  CHARACTER(*), PARAMETER :: baseInterpolation = \\\"Lagrange\\\"\\n  TYPE(FEDOF_) :: fedof\\n  TYPE(ScalarField_) :: obj\\n  REAL(DFP) :: found(100), want(100), VALUE(100), tol\\n  INTEGER(I4B) :: tsize\\n  CHARACTER(:), ALLOCATABLE :: msg\\n  LOGICAL(LGT) :: isok\\n\\n  CALL fedof%Initiate(baseContinuity=baseContinuity, &\\n                  baseInterpolation=baseInterpolation, order=order, mesh=mesh)\\n\\n  CALL SetScalarFieldParam(param=param, &\\n                           fieldType=TypeField%normal, &\\n                           name=\\\"U\\\", &\\n                           engine=engine)\\n\\n  CALL obj%Initiate(param, fedof)\\n\\n  msg = \\\"Set3 \\\"\\n  tsize = obj%SIZE()\\n  VALUE(1:tsize) = arange(1, tsize)\\n  CALL obj%Set(VALUE=VALUE(1:tsize))\\n  CALL obj%Get(VALUE=found, tsize=tsize)\\n\\n  want(1:tsize) = VALUE(1:tsize)\\n  tol = 1.0E-5\\n  isok = ALL(SOFTEQ(found(1:tsize), want(1:tsize), tol))\\n  CALL OK(isok, msg)\\n\\n  CALL obj%Set(VALUE=VALUE(1:tsize), scale=2.0_DFP, addContribution=.TRUE.)\\n  CALL obj%Get(VALUE=found, tsize=tsize)\\n  want(1:tsize) = 3.0_DFP * VALUE(1:tsize)\\n  tol = 1.0E-5\\n  isok = ALL(SOFTEQ(found(1:tsize), want(1:tsize), tol))\\n  CALL OK(isok, msg)\\n\\n  CALL obj%Set(VALUE=VALUE(1:tsize), addContribution=.TRUE.)\\n  CALL obj%Get(VALUE=found, tsize=tsize)\\n  want(1:tsize) = 4.0_DFP * VALUE\\n  tol = 1.0E-5\\n  isok = ALL(SOFTEQ(found(1:tsize), want(1:tsize), tol))\\n  CALL OK(isok, msg)\\n\\n  CALL obj%DEALLOCATE()\\nEND BLOCK\\n\\nBLOCK\\n  INTEGER(I4B), PARAMETER :: order = 2\\n  CHARACTER(*), PARAMETER :: baseContinuity = \\\"H1\\\"\\n  CHARACTER(*), PARAMETER :: baseInterpolation = \\\"Heirarchical\\\"\\n  TYPE(FEDOF_) :: fedof\\n  TYPE(ScalarField_) :: obj\\n  REAL(DFP) :: found(100), want(100), VALUE, tol\\n  INTEGER(I4B) :: tsize\\n  CHARACTER(:), ALLOCATABLE :: msg\\n  LOGICAL(LGT) :: isok\\n\\n  CALL fedof%Initiate(baseContinuity=baseContinuity, &\\n                  baseInterpolation=baseInterpolation, order=order, mesh=mesh)\\n\\n  CALL SetScalarFieldParam(param=param, &\\n                           fieldType=TypeField%normal, &\\n                           name=\\\"U\\\", &\\n                           engine=engine)\\n\\n  CALL obj%Initiate(param, fedof)\\n\\n  msg = \\\"Set3 \\\"\\n  VALUE = 100.0_DFP\\n  CALL obj%Set(VALUE=VALUE)\\n  CALL obj%Get(VALUE=found, tsize=tsize)\\n\\n  want(1:tsize) = VALUE\\n  tol = 1.0E-5\\n  isok = ALL(SOFTEQ(found(1:tsize), want(1:tsize), tol))\\n  CALL OK(isok, msg)\\n\\n  CALL obj%Set(VALUE=VALUE, scale=2.0_DFP, addContribution=.TRUE.)\\n  CALL obj%Get(VALUE=found, tsize=tsize)\\n  want(1:tsize) = 3.0_DFP * VALUE\\n  tol = 1.0E-5\\n  isok = ALL(SOFTEQ(found(1:tsize), want(1:tsize), tol))\\n  CALL OK(isok, msg)\\n\\n  CALL obj%Set(VALUE=VALUE, addContribution=.TRUE.)\\n  CALL obj%Get(VALUE=found, tsize=tsize)\\n  want(1:tsize) = 4.0_DFP * VALUE\\n  tol = 1.0E-5\\n  isok = ALL(SOFTEQ(found(1:tsize), want(1:tsize), tol))\\n  CALL OK(isok, msg)\\n\\n  CALL obj%DEALLOCATE()\\nEND BLOCK\\n\\nmesh => NULL()\\nCALL dom%DEALLOCATE()\\nCALL meshfile%DEALLOCATE()\\nCALL param%DEALLOCATE()\\nCALL FPL_FINALIZE()\\nEND PROGRAM main\\n\"\n    })\n  });\n}\nfunction _Set_test_3_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_Set_test_3_createMdxContent, {\n      ...props\n    })\n  }) : _Set_test_3_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/ScalarField/examples/_Set_test_4.md\n\n\nconst _Set_test_4_frontMatter = {};\nconst _Set_test_4_contentTitle = undefined;\n\n\n\n\n\nconst _Set_test_4_toc = [];\nfunction _Set_test_4_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsx)(_components.pre, {\n    children: (0,jsx_runtime.jsx)(_components.code, {\n      className: \"language-fortran\",\n      children: \"!> author: Vikas Sharma, Ph. D.\\n! date: 2024-06-05\\n! summary: Set4\\n\\nPROGRAM main\\nUSE FEDomain_Class\\nUSE HDF5File_Class\\nUSE AbstractMesh_Class\\nUSE AbstractField_Class, ONLY: TypeField\\nUSE ScalarField_Class\\nUSE FPL, ONLY: FPL_Init, FPL_FINALIZE, ParameterList_\\nUSE GlobalData\\nUSE Test_Method\\nUSE FEDOF_Class\\nUSE ExceptionHandler_Class, ONLY: e, EXCEPTION_INFORMATION\\nUSE ApproxUtility\\n\\nTYPE(FEDomain_) :: dom\\nCLASS(AbstractMesh_), POINTER :: mesh\\nTYPE(HDF5File_) :: meshfile\\nTYPE(ParameterList_) :: param\\nCHARACTER(LEN=*), PARAMETER :: engine = \\\"NATIVE_SERIAL\\\"\\nCHARACTER(*), PARAMETER :: meshfilename = &\\n                           \\\"../../Mesh/examples/meshdata/small_mesh.h5\\\"\\nINTEGER(I4B), PARAMETER :: nsd = 2\\n\\nCALL e%setQuietMode(EXCEPTION_INFORMATION, .TRUE.)\\n\\nCALL FPL_Init()\\nCALL param%Initiate()\\n\\n!> start creating domain\\nCALL meshfile%Initiate(filename=meshfilename, mode=\\\"READ\\\")\\nCALL meshfile%OPEN()\\nCALL dom%Initiate(hdf5=meshfile, group=\\\"\\\")\\n!> end creating domain\\n\\nmesh => dom%GetMeshPointer(dim=nsd)\\n\\nBLOCK\\n  INTEGER(I4B), PARAMETER :: order = 1\\n  CHARACTER(*), PARAMETER :: baseContinuity = \\\"H1\\\"\\n  CHARACTER(*), PARAMETER :: baseInterpolation = \\\"Lagrange\\\"\\n  TYPE(FEDOF_) :: fedof\\n  TYPE(ScalarField_) :: obj\\n  REAL(DFP) :: found(100), want(100), VALUE, tol\\n  INTEGER(I4B) :: tsize, localNode(3)\\n  CHARACTER(:), ALLOCATABLE :: msg\\n  LOGICAL(LGT) :: isok\\n\\n  CALL fedof%Initiate(baseContinuity=baseContinuity, &\\n                  baseInterpolation=baseInterpolation, order=order, mesh=mesh)\\n\\n  CALL SetScalarFieldParam(param=param, &\\n                           fieldType=TypeField%normal, &\\n                           name=\\\"U\\\", &\\n                           engine=engine)\\n\\n  CALL obj%Initiate(param, fedof)\\n\\n  localNode = [1, 3, 5]\\n\\n  msg = \\\"Set4 \\\"\\n  VALUE = 100.0_DFP\\n  CALL obj%Set(VALUE=VALUE, globalNode=localNode, islocal=.TRUE.)\\n  CALL obj%Get(VALUE=found, tsize=tsize)\\n\\n  want = 0.0_DFP\\n  want(localNode) = VALUE\\n  tol = 1.0E-5\\n  isok = ALL(SOFTEQ(found(1:tsize), want(1:tsize), tol))\\n  CALL OK(isok, msg)\\n\\n  CALL obj%DEALLOCATE()\\nEND BLOCK\\n\\nBLOCK\\n  INTEGER(I4B), PARAMETER :: order = 2\\n  CHARACTER(*), PARAMETER :: baseContinuity = \\\"H1\\\"\\n  CHARACTER(*), PARAMETER :: baseInterpolation = \\\"Heirarchical\\\"\\n  TYPE(FEDOF_) :: fedof\\n  TYPE(ScalarField_) :: obj\\n  REAL(DFP) :: found(100), want(100), VALUE, tol\\n  INTEGER(I4B) :: tsize, localNode(3)\\n  CHARACTER(:), ALLOCATABLE :: msg\\n  LOGICAL(LGT) :: isok\\n\\n  CALL fedof%Initiate(baseContinuity=baseContinuity, &\\n                  baseInterpolation=baseInterpolation, order=order, mesh=mesh)\\n\\n  CALL SetScalarFieldParam(param=param, &\\n                           fieldType=TypeField%normal, &\\n                           name=\\\"U\\\", &\\n                           engine=engine)\\n\\n  CALL obj%Initiate(param, fedof)\\n\\n  localNode = [1, 3, 5]\\n\\n  msg = \\\"Set4 \\\"\\n  VALUE = 100.0_DFP\\n  CALL obj%Set(VALUE=VALUE, globalNode=localNode, islocal=.TRUE.)\\n  CALL obj%Get(VALUE=found, tsize=tsize)\\n\\n  want = 0.0_DFP\\n  want(localNode) = VALUE\\n  tol = 1.0E-5\\n  isok = ALL(SOFTEQ(found(1:tsize), want(1:tsize), tol))\\n  CALL OK(isok, msg)\\n\\n  CALL obj%DEALLOCATE()\\nEND BLOCK\\n\\nmesh => NULL()\\nCALL dom%DEALLOCATE()\\nCALL meshfile%DEALLOCATE()\\nCALL param%DEALLOCATE()\\nCALL FPL_FINALIZE()\\nEND PROGRAM main\\n\"\n    })\n  });\n}\nfunction _Set_test_4_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_Set_test_4_createMdxContent, {\n      ...props\n    })\n  }) : _Set_test_4_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/ScalarField/examples/_Set_test_5.md\n\n\nconst _Set_test_5_frontMatter = {};\nconst _Set_test_5_contentTitle = undefined;\n\n\n\n\n\nconst _Set_test_5_toc = [];\nfunction _Set_test_5_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsx)(_components.pre, {\n    children: (0,jsx_runtime.jsx)(_components.code, {\n      className: \"language-fortran\",\n      children: \"!> author: Vikas Sharma, Ph. D.\\n! date: 2024-06-05\\n! summary: Set5\\n\\nPROGRAM main\\nUSE FEDomain_Class\\nUSE HDF5File_Class\\nUSE AbstractMesh_Class\\nUSE AbstractField_Class, ONLY: TypeField\\nUSE ScalarField_Class\\nUSE FPL, ONLY: FPL_Init, FPL_FINALIZE, ParameterList_\\nUSE GlobalData\\nUSE Test_Method\\nUSE FEDOF_Class\\nUSE ExceptionHandler_Class, ONLY: e, EXCEPTION_INFORMATION\\nUSE ApproxUtility\\n\\nTYPE(FEDomain_) :: dom\\nCLASS(AbstractMesh_), POINTER :: mesh\\nTYPE(HDF5File_) :: meshfile\\nTYPE(ParameterList_) :: param\\nCHARACTER(LEN=*), PARAMETER :: engine = \\\"NATIVE_SERIAL\\\"\\nCHARACTER(*), PARAMETER :: meshfilename = &\\n                           \\\"../../Mesh/examples/meshdata/small_mesh.h5\\\"\\nINTEGER(I4B), PARAMETER :: nsd = 2\\n\\nCALL e%setQuietMode(EXCEPTION_INFORMATION, .TRUE.)\\n\\nCALL FPL_Init()\\nCALL param%Initiate()\\n\\n!> start creating domain\\nCALL meshfile%Initiate(filename=meshfilename, mode=\\\"READ\\\")\\nCALL meshfile%OPEN()\\nCALL dom%Initiate(hdf5=meshfile, group=\\\"\\\")\\n!> end creating domain\\n\\nmesh => dom%GetMeshPointer(dim=nsd)\\n\\nBLOCK\\n  INTEGER(I4B), PARAMETER :: order = 1\\n  CHARACTER(*), PARAMETER :: baseContinuity = \\\"H1\\\"\\n  CHARACTER(*), PARAMETER :: baseInterpolation = \\\"Lagrange\\\"\\n  TYPE(FEDOF_) :: fedof\\n  TYPE(ScalarField_) :: obj\\n  REAL(DFP) :: found(100), want(100), VALUE(100), tol\\n  INTEGER(I4B) :: tsize, localNode(3)\\n  CHARACTER(:), ALLOCATABLE :: msg\\n  LOGICAL(LGT) :: isok\\n\\n  CALL fedof%Initiate(baseContinuity=baseContinuity, &\\n                  baseInterpolation=baseInterpolation, order=order, mesh=mesh)\\n\\n  CALL SetScalarFieldParam(param=param, &\\n                           fieldType=TypeField%normal, &\\n                           name=\\\"U\\\", &\\n                           engine=engine)\\n\\n  CALL obj%Initiate(param, fedof)\\n\\n  localNode = [1, 3, 5]\\n\\n  msg = \\\"Set5 \\\"\\n\\n  VALUE(1:3) = [10, 20, 30]\\n  CALL obj%Set(VALUE=VALUE(1:3), globalNode=localNode, islocal=.TRUE.)\\n  CALL obj%Get(VALUE=found, tsize=tsize)\\n  want = 0.0_DFP\\n  want(localNode) = VALUE(1:3)\\n  tol = 1.0E-5\\n  isok = ALL(SOFTEQ(found(1:tsize), want(1:tsize), tol))\\n  CALL OK(isok, msg)\\n\\n  VALUE(1:3) = [10, 20, 30]\\n  CALL obj%Set(VALUE=VALUE(1:3), globalNode=localNode, islocal=.TRUE., &\\n               addContribution=.TRUE., scale=2.0_DFP)\\n  CALL obj%Get(VALUE=found, tsize=tsize)\\n  want = 0.0_DFP\\n  want(localNode) = 3 * VALUE(1:3)\\n  tol = 1.0E-5\\n  isok = ALL(SOFTEQ(found(1:tsize), want(1:tsize), tol))\\n  CALL OK(isok, msg)\\n\\n  VALUE(1:3) = [10, 20, 30]\\n  CALL obj%Set(VALUE=VALUE(1:3), globalNode=localNode, islocal=.TRUE., &\\n               addContribution=.TRUE.)\\n\\n  CALL obj%Get(VALUE=found, tsize=tsize)\\n  want = 0.0_DFP\\n  want(localNode) = 4 * VALUE(1:3)\\n  tol = 1.0E-5\\n  isok = ALL(SOFTEQ(found(1:tsize), want(1:tsize), tol))\\n  CALL OK(isok, msg)\\n\\n  CALL obj%DEALLOCATE()\\nEND BLOCK\\n\\nBLOCK\\n  INTEGER(I4B), PARAMETER :: order = 2\\n  CHARACTER(*), PARAMETER :: baseContinuity = \\\"H1\\\"\\n  CHARACTER(*), PARAMETER :: baseInterpolation = \\\"Heirarchical\\\"\\n  TYPE(FEDOF_) :: fedof\\n  TYPE(ScalarField_) :: obj\\n  REAL(DFP) :: found(100), want(100), VALUE(100), tol\\n  INTEGER(I4B) :: tsize, localNode(3)\\n  CHARACTER(:), ALLOCATABLE :: msg\\n  LOGICAL(LGT) :: isok\\n\\n  CALL fedof%Initiate(baseContinuity=baseContinuity, &\\n                  baseInterpolation=baseInterpolation, order=order, mesh=mesh)\\n\\n  CALL SetScalarFieldParam(param=param, &\\n                           fieldType=TypeField%normal, &\\n                           name=\\\"U\\\", &\\n                           engine=engine)\\n\\n  CALL obj%Initiate(param, fedof)\\n\\n  localNode = [1, 3, 5]\\n\\n  msg = \\\"Set5 \\\"\\n  VALUE(1:3) = [10, 20, 30]\\n  CALL obj%Set(VALUE=VALUE(1:3), globalNode=localNode, islocal=.TRUE.)\\n  CALL obj%Get(VALUE=found, tsize=tsize)\\n\\n  want = 0.0_DFP\\n  want(localNode) = VALUE(1:3)\\n  tol = 1.0E-5\\n  isok = ALL(SOFTEQ(found(1:tsize), want(1:tsize), tol))\\n  CALL OK(isok, msg)\\n\\n  CALL obj%DEALLOCATE()\\nEND BLOCK\\n\\nmesh => NULL()\\nCALL dom%DEALLOCATE()\\nCALL meshfile%DEALLOCATE()\\nCALL param%DEALLOCATE()\\nCALL FPL_FINALIZE()\\nEND PROGRAM main\\n\"\n    })\n  });\n}\nfunction _Set_test_5_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_Set_test_5_createMdxContent, {\n      ...props\n    })\n  }) : _Set_test_5_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/ScalarField/examples/_Set_test_6.md\n\n\nconst _Set_test_6_frontMatter = {};\nconst _Set_test_6_contentTitle = undefined;\n\n\n\n\n\nconst _Set_test_6_toc = [];\nfunction _Set_test_6_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsx)(_components.pre, {\n    children: (0,jsx_runtime.jsx)(_components.code, {\n      className: \"language-fortran\",\n      children: \"!> author: Vikas Sharma, Ph. D.\\n! date: 2024-06-05\\n! summary: Set5\\n\\nPROGRAM main\\nUSE FEDomain_Class\\nUSE HDF5File_Class\\nUSE AbstractMesh_Class\\nUSE AbstractField_Class, ONLY: TypeField\\nUSE ScalarField_Class\\nUSE FPL, ONLY: FPL_Init, FPL_FINALIZE, ParameterList_\\nUSE GlobalData\\nUSE Test_Method\\nUSE FEDOF_Class\\nUSE ExceptionHandler_Class, ONLY: e, EXCEPTION_INFORMATION\\nUSE ApproxUtility\\n\\nTYPE(FEDomain_) :: dom\\nCLASS(AbstractMesh_), POINTER :: mesh\\nTYPE(HDF5File_) :: meshfile\\nTYPE(ParameterList_) :: param\\nCHARACTER(LEN=*), PARAMETER :: engine = \\\"NATIVE_SERIAL\\\"\\nCHARACTER(*), PARAMETER :: meshfilename = &\\n                           \\\"../../Mesh/examples/meshdata/small_mesh.h5\\\"\\nINTEGER(I4B), PARAMETER :: nsd = 2\\n\\nCALL e%setQuietMode(EXCEPTION_INFORMATION, .TRUE.)\\n\\nCALL FPL_Init()\\nCALL param%Initiate()\\n\\n!> start creating domain\\nCALL meshfile%Initiate(filename=meshfilename, mode=\\\"READ\\\")\\nCALL meshfile%OPEN()\\nCALL dom%Initiate(hdf5=meshfile, group=\\\"\\\")\\n!> end creating domain\\n\\nmesh => dom%GetMeshPointer(dim=nsd)\\n\\nBLOCK\\n  INTEGER(I4B), PARAMETER :: order = 1\\n  CHARACTER(*), PARAMETER :: baseContinuity = \\\"H1\\\"\\n  CHARACTER(*), PARAMETER :: baseInterpolation = \\\"Lagrange\\\"\\n  TYPE(FEDOF_) :: fedof\\n  TYPE(ScalarField_) :: obj\\n  REAL(DFP) :: found(100), want(100), VALUE(100), tol\\n  INTEGER(I4B) :: tsize, localNode(3)\\n  CHARACTER(:), ALLOCATABLE :: msg\\n  LOGICAL(LGT) :: isok\\n\\n  CALL fedof%Initiate(baseContinuity=baseContinuity, &\\n                  baseInterpolation=baseInterpolation, order=order, mesh=mesh)\\n\\n  CALL SetScalarFieldParam(param=param, &\\n                           fieldType=TypeField%normal, &\\n                           name=\\\"U\\\", &\\n                           engine=engine)\\n\\n  CALL obj%Initiate(param, fedof)\\n\\n  localNode = [1, 3, 5]\\n\\n  msg = \\\"Set5 \\\"\\n\\n  VALUE(1:3) = [10, 20, 30]\\n  CALL obj%Set(VALUE=VALUE(1:3), globalNode=localNode, islocal=.TRUE.)\\n  CALL obj%Get(VALUE=found, tsize=tsize)\\n  want = 0.0_DFP\\n  want(localNode) = VALUE(1:3)\\n  tol = 1.0E-5\\n  isok = ALL(SOFTEQ(found(1:tsize), want(1:tsize), tol))\\n  CALL OK(isok, msg)\\n\\n  VALUE(1:3) = [10, 20, 30]\\n  CALL obj%Set(VALUE=VALUE(1:3), globalNode=localNode, islocal=.TRUE., &\\n               addContribution=.TRUE., scale=2.0_DFP)\\n  CALL obj%Get(VALUE=found, tsize=tsize)\\n  want = 0.0_DFP\\n  want(localNode) = 3 * VALUE(1:3)\\n  tol = 1.0E-5\\n  isok = ALL(SOFTEQ(found(1:tsize), want(1:tsize), tol))\\n  CALL OK(isok, msg)\\n\\n  VALUE(1:3) = [10, 20, 30]\\n  CALL obj%Set(VALUE=VALUE(1:3), globalNode=localNode, islocal=.TRUE., &\\n               addContribution=.TRUE.)\\n\\n  CALL obj%Get(VALUE=found, tsize=tsize)\\n  want = 0.0_DFP\\n  want(localNode) = 4 * VALUE(1:3)\\n  tol = 1.0E-5\\n  isok = ALL(SOFTEQ(found(1:tsize), want(1:tsize), tol))\\n  CALL OK(isok, msg)\\n\\n  CALL obj%DEALLOCATE()\\nEND BLOCK\\n\\nBLOCK\\n  INTEGER(I4B), PARAMETER :: order = 2\\n  CHARACTER(*), PARAMETER :: baseContinuity = \\\"H1\\\"\\n  CHARACTER(*), PARAMETER :: baseInterpolation = \\\"Heirarchical\\\"\\n  TYPE(FEDOF_) :: fedof\\n  TYPE(ScalarField_) :: obj\\n  REAL(DFP) :: found(100), want(100), VALUE(100), tol\\n  INTEGER(I4B) :: tsize, localNode(3)\\n  CHARACTER(:), ALLOCATABLE :: msg\\n  LOGICAL(LGT) :: isok\\n\\n  CALL fedof%Initiate(baseContinuity=baseContinuity, &\\n                  baseInterpolation=baseInterpolation, order=order, mesh=mesh)\\n\\n  CALL SetScalarFieldParam(param=param, &\\n                           fieldType=TypeField%normal, &\\n                           name=\\\"U\\\", &\\n                           engine=engine)\\n\\n  CALL obj%Initiate(param, fedof)\\n\\n  localNode = [1, 3, 5]\\n\\n  msg = \\\"Set5 \\\"\\n  VALUE(1:3) = [10, 20, 30]\\n  CALL obj%Set(VALUE=VALUE(1:3), globalNode=localNode, islocal=.TRUE.)\\n  CALL obj%Get(VALUE=found, tsize=tsize)\\n\\n  want = 0.0_DFP\\n  want(localNode) = VALUE(1:3)\\n  tol = 1.0E-5\\n  isok = ALL(SOFTEQ(found(1:tsize), want(1:tsize), tol))\\n  CALL OK(isok, msg)\\n\\n  CALL obj%DEALLOCATE()\\nEND BLOCK\\n\\nmesh => NULL()\\nCALL dom%DEALLOCATE()\\nCALL meshfile%DEALLOCATE()\\nCALL param%DEALLOCATE()\\nCALL FPL_FINALIZE()\\nEND PROGRAM main\\n\"\n    })\n  });\n}\nfunction _Set_test_6_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_Set_test_6_createMdxContent, {\n      ...props\n    })\n  }) : _Set_test_6_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/ScalarField/examples/_Set_test_7.md\n\n\nconst _Set_test_7_frontMatter = {};\nconst _Set_test_7_contentTitle = undefined;\n\n\n\n\n\nconst _Set_test_7_toc = [];\nfunction _Set_test_7_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsx)(_components.pre, {\n    children: (0,jsx_runtime.jsx)(_components.code, {\n      className: \"language-fortran\",\n      children: \"!> author: Vikas Sharma, Ph. D.\\n! date: 2024-06-05\\n! summary: Set7\\n\\nPROGRAM main\\nUSE FEDomain_Class\\nUSE HDF5File_Class\\nUSE AbstractMesh_Class\\nUSE AbstractField_Class, ONLY: TypeField\\nUSE ScalarField_Class\\nUSE FPL, ONLY: FPL_Init, FPL_FINALIZE, ParameterList_\\nUSE GlobalData\\nUSE Test_Method\\nUSE FEDOF_Class\\nUSE ExceptionHandler_Class, ONLY: e, EXCEPTION_INFORMATION\\nUSE ApproxUtility\\n\\nTYPE(FEDomain_) :: dom\\nCLASS(AbstractMesh_), POINTER :: mesh\\nTYPE(HDF5File_) :: meshfile\\nTYPE(ParameterList_) :: param\\nCHARACTER(LEN=*), PARAMETER :: engine = \\\"NATIVE_SERIAL\\\"\\nCHARACTER(*), PARAMETER :: meshfilename = &\\n                           \\\"../../Mesh/examples/meshdata/small_mesh.h5\\\"\\nINTEGER(I4B), PARAMETER :: nsd = 2\\n\\nCALL e%setQuietMode(EXCEPTION_INFORMATION, .TRUE.)\\n\\nCALL FPL_Init()\\nCALL param%Initiate()\\n\\n!> start creating domain\\nCALL meshfile%Initiate(filename=meshfilename, mode=\\\"READ\\\")\\nCALL meshfile%OPEN()\\nCALL dom%Initiate(hdf5=meshfile, group=\\\"\\\")\\n!> end creating domain\\n\\nmesh => dom%GetMeshPointer(dim=nsd)\\n\\nBLOCK\\n  INTEGER(I4B), PARAMETER :: order = 1\\n  CHARACTER(*), PARAMETER :: baseContinuity = \\\"H1\\\"\\n  CHARACTER(*), PARAMETER :: baseInterpolation = \\\"Lagrange\\\"\\n  TYPE(FEDOF_) :: fedof\\n  TYPE(ScalarField_) :: obj, VALUE\\n  REAL(DFP) :: found(100), want(100), tol\\n  INTEGER(I4B) :: tsize, localNode(3)\\n  CHARACTER(:), ALLOCATABLE :: msg\\n  LOGICAL(LGT) :: isok\\n\\n  CALL fedof%Initiate(baseContinuity=baseContinuity, &\\n                  baseInterpolation=baseInterpolation, order=order, mesh=mesh)\\n\\n  CALL SetScalarFieldParam(param=param, &\\n                           fieldType=TypeField%normal, &\\n                           name=\\\"U\\\", &\\n                           engine=engine)\\n\\n  CALL obj%Initiate(param, fedof)\\n  CALL VALUE%Initiate(param, fedof)\\n\\n  localNode = [1, 3, 5]\\n\\n  msg = \\\"Set7 \\\"\\n\\n  DO ii = 1, SIZE(localNode)\\n    CALL VALUE%Set(VALUE=REAL(localNode(ii), kind=DFP), &\\n                   globalNode=localNode(ii), islocal=.TRUE.)\\n  END DO\\n\\n  CALL obj%Set(VALUE=VALUE)\\n  CALL obj%Get(VALUE=found, tsize=tsize)\\n  want = 0.0_DFP\\n  want(localNode) = localNode\\n  tol = 1.0E-5\\n  isok = ALL(SOFTEQ(found(1:tsize), want(1:tsize), tol))\\n  CALL OK(isok, msg)\\n\\n  CALL obj%Set(0.0_DFP)\\n  obj = VALUE\\n  CALL obj%Get(VALUE=found, tsize=tsize)\\n  want = 0.0_DFP\\n  want(localNode) = localNode\\n  tol = 1.0E-5\\n  isok = ALL(SOFTEQ(found(1:tsize), want(1:tsize), tol))\\n  CALL OK(isok, msg)\\n\\n  CALL obj%DEALLOCATE()\\nEND BLOCK\\n\\nmesh => NULL()\\nCALL dom%DEALLOCATE()\\nCALL meshfile%DEALLOCATE()\\nCALL param%DEALLOCATE()\\nCALL FPL_FINALIZE()\\nEND PROGRAM main\\n\"\n    })\n  });\n}\nfunction _Set_test_7_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_Set_test_7_createMdxContent, {\n      ...props\n    })\n  }) : _Set_test_7_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/ScalarField/examples/_Set_test_8.md\n\n\nconst _Set_test_8_frontMatter = {};\nconst _Set_test_8_contentTitle = undefined;\n\n\n\n\n\nconst _Set_test_8_toc = [];\nfunction _Set_test_8_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsx)(_components.pre, {\n    children: (0,jsx_runtime.jsx)(_components.code, {\n      className: \"language-fortran\",\n      children: \"!> author: Vikas Sharma, Ph. D.\\n! date: 2024-06-05\\n! summary: Set8\\n\\nPROGRAM main\\nUSE FEDomain_Class\\nUSE HDF5File_Class\\nUSE AbstractMesh_Class\\nUSE AbstractField_Class, ONLY: TypeField\\nUSE ScalarField_Class\\nUSE FPL, ONLY: FPL_Init, FPL_FINALIZE, ParameterList_\\nUSE GlobalData\\nUSE Test_Method\\nUSE FEDOF_Class\\nUSE ExceptionHandler_Class, ONLY: e, EXCEPTION_INFORMATION\\nUSE ApproxUtility\\n\\nTYPE(FEDomain_) :: dom\\nCLASS(AbstractMesh_), POINTER :: mesh\\nTYPE(HDF5File_) :: meshfile\\nTYPE(ParameterList_) :: param\\nCHARACTER(LEN=*), PARAMETER :: engine = \\\"NATIVE_SERIAL\\\"\\nCHARACTER(*), PARAMETER :: meshfilename = &\\n                           \\\"../../Mesh/examples/meshdata/small_mesh.h5\\\"\\nINTEGER(I4B), PARAMETER :: nsd = 2\\n\\nCALL e%setQuietMode(EXCEPTION_INFORMATION, .TRUE.)\\n\\nCALL FPL_Init()\\nCALL param%Initiate()\\n\\n!> start creating domain\\nCALL meshfile%Initiate(filename=meshfilename, mode=\\\"READ\\\")\\nCALL meshfile%OPEN()\\nCALL dom%Initiate(hdf5=meshfile, group=\\\"\\\")\\n!> end creating domain\\n\\nmesh => dom%GetMeshPointer(dim=nsd)\\n\\nBLOCK\\n  INTEGER(I4B), PARAMETER :: order = 1\\n  CHARACTER(*), PARAMETER :: baseContinuity = \\\"H1\\\"\\n  CHARACTER(*), PARAMETER :: baseInterpolation = \\\"Lagrange\\\"\\n  TYPE(FEDOF_) :: fedof\\n  TYPE(ScalarField_) :: obj, VALUE\\n  REAL(DFP) :: found(100), want(100), tol\\n  INTEGER(I4B) :: tsize, localNode(3)\\n  CHARACTER(:), ALLOCATABLE :: msg\\n  LOGICAL(LGT) :: isok\\n\\n  CALL fedof%Initiate(baseContinuity=baseContinuity, &\\n                  baseInterpolation=baseInterpolation, order=order, mesh=mesh)\\n\\n  CALL SetScalarFieldParam(param=param, &\\n                           fieldType=TypeField%normal, &\\n                           name=\\\"U\\\", &\\n                           engine=engine)\\n\\n  CALL obj%Initiate(param, fedof)\\n  CALL VALUE%Initiate(param, fedof)\\n\\n  localNode = [1, 3, 5]\\n\\n  msg = \\\"Set8 \\\"\\n\\n  DO ii = 1, SIZE(localNode)\\n    CALL VALUE%Set(VALUE=REAL(localNode(ii), kind=DFP), &\\n                   globalNode=localNode(ii), islocal=.TRUE.)\\n  END DO\\n\\n  CALL obj%Set(VALUE=VALUE)\\n  CALL obj%Get(VALUE=found, tsize=tsize)\\n  want = 0.0_DFP\\n  want(localNode) = localNode\\n  tol = 1.0E-5\\n  isok = ALL(SOFTEQ(found(1:tsize), want(1:tsize), tol))\\n  CALL OK(isok, msg)\\n\\n  CALL obj%Set(VALUE=VALUE, scale=2.0_DFP, addContribution=.TRUE.)\\n  CALL obj%Get(VALUE=found, tsize=tsize)\\n  want = 0.0_DFP\\n  want(localNode) = 3 * localNode\\n  tol = 1.0E-5\\n  isok = ALL(SOFTEQ(found(1:tsize), want(1:tsize), tol))\\n  CALL OK(isok, msg)\\n\\n  CALL obj%DEALLOCATE()\\nEND BLOCK\\n\\nmesh => NULL()\\nCALL dom%DEALLOCATE()\\nCALL meshfile%DEALLOCATE()\\nCALL param%DEALLOCATE()\\nCALL FPL_FINALIZE()\\nEND PROGRAM main\\n\"\n    })\n  });\n}\nfunction _Set_test_8_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_Set_test_8_createMdxContent, {\n      ...props\n    })\n  }) : _Set_test_8_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/ScalarField/Set.md\n\n\nconst Set_frontMatter = {};\nconst Set_contentTitle = 'Set';\n\nconst assets = {\n\n};\n\n\n\n\n\n\n\n\n\n\n\nconst Set_toc = [{\n  \"value\": \"Interface 1\",\n  \"id\": \"interface-1\",\n  \"level\": 2\n}, ...toc, {\n  \"value\": \"Interface 2\",\n  \"id\": \"interface-2\",\n  \"level\": 2\n}, ..._Set_test_2_toc, {\n  \"value\": \"Interface 3\",\n  \"id\": \"interface-3\",\n  \"level\": 2\n}, ..._Set_test_3_toc, {\n  \"value\": \"Interface 4\",\n  \"id\": \"interface-4\",\n  \"level\": 2\n}, ..._Set_test_4_toc, {\n  \"value\": \"Interface 5\",\n  \"id\": \"interface-5\",\n  \"level\": 2\n}, ..._Set_test_5_toc, {\n  \"value\": \"Interface 6\",\n  \"id\": \"interface-6\",\n  \"level\": 2\n}, ..._Set_test_6_toc, {\n  \"value\": \"Interface 7\",\n  \"id\": \"interface-7\",\n  \"level\": 2\n}, ..._Set_test_7_toc, {\n  \"value\": \"Interface 8\",\n  \"id\": \"interface-8\",\n  \"level\": 2\n}, ..._Set_test_8_toc, {\n  \"value\": \"Interface 9\",\n  \"id\": \"interface-9\",\n  \"level\": 2\n}, {\n  \"value\": \"Interface 10\",\n  \"id\": \"interface-10\",\n  \"level\": 2\n}, {\n  \"value\": \"Interface 11\",\n  \"id\": \"interface-11\",\n  \"level\": 2\n}];\nfunction Set_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    header: \"header\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  }, {TabItem, Tabs} = _components;\n  if (!TabItem) _missingMdxReference(\"TabItem\", true);\n  if (!Tabs) _missingMdxReference(\"Tabs\", true);\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.header, {\n      children: (0,jsx_runtime.jsx)(_components.h1, {\n        id: \"set\",\n        children: \"Set\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"Set the entries in the \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"ScalarField\"\n      }), \".\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Calling example:\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(\"span\", {\n      class: \"badge badge--success\",\n      children: (0,jsx_runtime.jsx)(_components.p, {\n        children: \"Set a single entry\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL Set(\\n    CLASS(ScalarField_):: obj\\n    INTEGER(I4B):: globalNode\\n    REAL(DFP):: VALUE\\n    REAL(DFP):: scale\\n    LOGICAL(LGT):: addContribution\\n)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(\"span\", {\n      class: \"badge badge--success\",\n      children: (0,jsx_runtime.jsx)(_components.p, {\n        children: \"Set all entries to a single scalar value\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL Set(\\n    CLASS(ScalarField_):: obj\\n    REAL(DFP):: VALUE\\n    REAL(DFP):: scale\\n    LOGICAL(LGT):: addContribution\\n)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(\"span\", {\n      class: \"badge badge--success\",\n      children: (0,jsx_runtime.jsx)(_components.p, {\n        children: \"Set all entries of scalar field to a given vector.\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL Set(\\n    CLASS(ScalarField_):: obj\\n    REAL(DFP):: VALUE(:)\\n    REAL(DFP):: scale\\n    LOGICAL(LGT):: addContribution\\n)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(\"span\", {\n      class: \"badge badge--success\",\n      children: (0,jsx_runtime.jsx)(_components.p, {\n        children: \"Set selected entries to a single value.\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL Set(\\n    CLASS(ScalarField_):: obj\\n    INTEGER(I4B):: globalNode(:)\\n    REAL(DFP):: VALUE\\n    REAL(DFP):: scale\\n    LOGICAL(LGT):: addContribution\\n)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(\"span\", {\n      class: \"badge badge--success\",\n      children: (0,jsx_runtime.jsx)(_components.p, {\n        children: \"Set multiple entries to different values.\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL Set(\\n    CLASS(ScalarField_):: obj\\n    INTEGER(I4B):: globalNode(:)\\n    REAL(DFP):: VALUE(:)\\n    REAL(DFP):: scale\\n    LOGICAL(LGT):: addContribution\\n)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(\"span\", {\n      class: \"badge badge--success\",\n      children: (0,jsx_runtime.jsx)(_components.p, {\n        children: \"Select multiple enties using triads.\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL Set(\\n    CLASS(ScalarField_):: obj\\n    INTEGER(I4B):: istart\\n    INTEGER(I4B):: iend\\n    INTEGER(I4B):: stride\\n    REAL(DFP):: VALUE\\n    REAL(DFP):: scale\\n    LOGICAL(LGT):: addContribution\\n)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(\"span\", {\n      class: \"badge badge--success\",\n      children: (0,jsx_runtime.jsx)(_components.p, {\n        children: \"Select multiple enties using triads.\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL Set(\\n    CLASS(ScalarField_):: obj\\n    INTEGER(I4B):: istart\\n    INTEGER(I4B):: iend\\n    INTEGER(I4B):: stride\\n    REAL(DFP):: VALUE(:)\\n    REAL(DFP):: scale\\n    LOGICAL(LGT):: addContribution\\n)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(\"span\", {\n      class: \"badge badge--success\",\n      children: (0,jsx_runtime.jsx)(_components.p, {\n        children: \"Copy obj2 in obj.\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL Set(\\n    CLASS(ScalarField_):: obj\\n    CLASS(ScalarField_):: obj2\\n)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(\"span\", {\n      class: \"badge badge--success\",\n      children: (0,jsx_runtime.jsx)(_components.p, {\n        children: \"Select multiple values using FEVariable.\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL Set(\\n    CLASS(ScalarField_):: obj\\n    INTEGER(I4B):: globalNode(:)\\n    TYPE(FEVariable_):: VALUE\\n    REAL(DFP):: scale\\n    LOGICAL(LGT):: addContribution\\n)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(\"span\", {\n      class: \"badge badge--success\",\n      children: (0,jsx_runtime.jsx)(_components.p, {\n        children: \"Copy obj2 into obj like AXPY.\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL Set(\\n    CLASS(ScalarField_):: obj\\n    CLASS(ScalarField_):: obj2\\n    REAL(DFP):: scale\\n    LOGICAL(LGT):: addContribution\\n)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-1\",\n      children: \"Interface 1\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs, {\n      children: [(0,jsx_runtime.jsxs)(TabItem, {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE SUBROUTINE set1(obj, globalNode, VALUE, scale, &\\n    & addContribution)\\n    CLASS(ScalarField_), INTENT(INOUT) :: obj\\n    INTEGER(I4B), INTENT(IN) :: globalNode\\n    REAL(DFP), INTENT(IN) :: VALUE\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\\n  END SUBROUTINE set1\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"Set single entry.\"\n          }), \"\\n\"]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem, {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem, {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-2\",\n      children: \"Interface 2\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs, {\n      children: [(0,jsx_runtime.jsxs)(TabItem, {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE SUBROUTINE set2(obj, VALUE, scale, addContribution)\\n    CLASS(ScalarField_), INTENT(INOUT) :: obj\\n    REAL(DFP), INTENT(IN) :: VALUE\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\\n  END SUBROUTINE set2\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"Set all values of scalar field to a given scalar.\"\n          }), \"\\n\"]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem, {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_Set_test_2_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem, {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-3\",\n      children: \"Interface 3\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs, {\n      children: [(0,jsx_runtime.jsxs)(TabItem, {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE SUBROUTINE set3(obj, VALUE, scale, addContribution)\\n    CLASS(ScalarField_), INTENT(INOUT) :: obj\\n    REAL(DFP), INTENT(IN) :: VALUE(:)\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\\n  END SUBROUTINE set3\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"Set all values of scalarfield using a vector of reals.\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"The size of value should be same as the size of scalar field.\"\n          }), \"\\n\"]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem, {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_Set_test_3_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem, {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-4\",\n      children: \"Interface 4\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs, {\n      children: [(0,jsx_runtime.jsxs)(TabItem, {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n MODULE SUBROUTINE set4(obj, globalNode, VALUE, scale, addContribution)\\n    CLASS(ScalarField_), INTENT(INOUT) :: obj\\n    INTEGER(I4B), INTENT(IN) :: globalNode(:)\\n    REAL(DFP), INTENT(IN) :: VALUE\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\\n  END SUBROUTINE set4\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsx)(_components.p, {\n          children: \"Set multiple values to a scalar value.\"\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem, {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_Set_test_4_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem, {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-5\",\n      children: \"Interface 5\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs, {\n      children: [(0,jsx_runtime.jsxs)(TabItem, {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n MODULE SUBROUTINE set5(obj, globalNode, VALUE, scale, addContribution)\\n    CLASS(ScalarField_), INTENT(INOUT) :: obj\\n    INTEGER(I4B), INTENT(IN) :: globalNode(:)\\n    REAL(DFP), INTENT(IN) :: VALUE(:)\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\\n  END SUBROUTINE set5\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsx)(_components.p, {\n          children: \"Set multiple values of scalar field.\"\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem, {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_Set_test_5_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem, {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-6\",\n      children: \"Interface 6\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs, {\n      children: [(0,jsx_runtime.jsxs)(TabItem, {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE SUBROUTINE set6(obj, istart, iend, stride, VALUE, &\\n    & scale, addContribution)\\n    CLASS(ScalarField_), INTENT(INOUT) :: obj\\n    INTEGER(I4B), INTENT(IN) :: istart\\n    INTEGER(I4B), INTENT(IN) :: iend\\n    INTEGER(I4B), INTENT(IN) :: stride\\n    REAL(DFP), INTENT(IN) :: VALUE\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\\n  END SUBROUTINE set6\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.p, {\n          children: [\"Set multiple values by using triplets \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"istart:iend:stride\"\n          })]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem, {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_Set_test_6_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem, {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-7\",\n      children: \"Interface 7\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs, {\n      children: [(0,jsx_runtime.jsxs)(TabItem, {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE SUBROUTINE set7(obj, istart, iend, stride, VALUE, &\\n    & scale, addContribution)\\n    CLASS(ScalarField_), INTENT(INOUT) :: obj\\n    INTEGER(I4B), INTENT(IN) :: istart\\n    INTEGER(I4B), INTENT(IN) :: iend\\n    INTEGER(I4B), INTENT(IN) :: stride\\n    REAL(DFP), INTENT(IN) :: VALUE(:)\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\\n  END SUBROUTINE set7\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsx)(_components.p, {\n          children: \"Set multiple values using triplets.\"\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem, {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_Set_test_7_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem, {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-8\",\n      children: \"Interface 8\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs, {\n      children: [(0,jsx_runtime.jsx)(TabItem, {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE SUBROUTINE set8(obj, obj2)\\n    CLASS(ScalarField_), INTENT(INOUT) :: obj\\n    CLASS(ScalarField_), INTENT(IN) :: obj2\\n  END SUBROUTINE set8\\nEND INTERFACE\\n\"\n          })\n        })\n      }), (0,jsx_runtime.jsx)(TabItem, {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_Set_test_8_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem, {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-9\",\n      children: \"Interface 9\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n MODULE SUBROUTINE set9(obj, globalNode, VALUE, scale, addContribution)\\n    CLASS(ScalarField_), INTENT(INOUT) :: obj\\n    INTEGER(I4B), INTENT(IN) :: globalNode(:)\\n    TYPE(FEVariable_), INTENT(IN) :: VALUE\\n  !! Scalar, Nodal, FEVariable (Space or Constant)\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\\n  END SUBROUTINE set9\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-10\",\n      children: \"Interface 10\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \" INTERFACE\\n  MODULE SUBROUTINE set10(obj, obj2, scale, addContribution)\\n    CLASS(ScalarField_), INTENT(INOUT) :: obj\\n    CLASS(ScalarField_), INTENT(IN) :: obj2\\n    REAL(DFP), INTENT(IN) :: scale\\n    LOGICAL(LGT), INTENT(IN) :: addContribution\\n  END SUBROUTINE set10\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-11\",\n      children: \"Interface 11\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \" INTERFACE\\n  MODULE SUBROUTINE Set11(obj, ivar, idof, VALUE, ivar_value, &\\n    & idof_value, scale, addContribution)\\n    CLASS(ScalarField_), INTENT(INOUT) :: obj\\n    INTEGER(I4B), INTENT(IN) :: ivar\\n    INTEGER(I4B), INTENT(IN) :: idof\\n    CLASS(AbstractNodeField_), INTENT(IN) :: VALUE\\n    INTEGER(I4B), INTENT(IN) :: ivar_value\\n    INTEGER(I4B), INTENT(IN) :: idof_value\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\\n  END SUBROUTINE Set11\\nEND INTERFACE\\n\"\n      })\n    })]\n  });\n}\nfunction Set_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(Set_createMdxContent, {\n      ...props\n    })\n  }) : Set_createMdxContent(props);\n}\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./docs/docs-api/ScalarField/Set.md\n");

/***/ }),

/***/ "./node_modules/@mdx-js/react/lib/index.js":
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MDXProvider: () => (/* binding */ MDXProvider),\n/* harmony export */   useMDXComponents: () => (/* binding */ useMDXComponents)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/react/index.js\");\n/**\n * @import {MDXComponents} from 'mdx/types.js'\n * @import {Component, ReactElement, ReactNode} from 'react'\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\n\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nfunction useMDXComponents(components) {\n  const contextComponents = react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {ReactElement}\n *   Element.\n * @satisfies {Component}\n */\nfunction MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Vhc2lmZW0tZG9jcy8uL25vZGVfbW9kdWxlcy9AbWR4LWpzL3JlYWN0L2xpYi9pbmRleC5qcz9hZjEyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGltcG9ydCB7TURYQ29tcG9uZW50c30gZnJvbSAnbWR4L3R5cGVzLmpzJ1xuICogQGltcG9ydCB7Q29tcG9uZW50LCBSZWFjdEVsZW1lbnQsIFJlYWN0Tm9kZX0gZnJvbSAncmVhY3QnXG4gKi9cblxuLyoqXG4gKiBAY2FsbGJhY2sgTWVyZ2VDb21wb25lbnRzXG4gKiAgIEN1c3RvbSBtZXJnZSBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7UmVhZG9ubHk8TURYQ29tcG9uZW50cz59IGN1cnJlbnRDb21wb25lbnRzXG4gKiAgIEN1cnJlbnQgY29tcG9uZW50cyBmcm9tIHRoZSBjb250ZXh0LlxuICogQHJldHVybnMge01EWENvbXBvbmVudHN9XG4gKiAgIEFkZGl0aW9uYWwgY29tcG9uZW50cy5cbiAqXG4gKiBAdHlwZWRlZiBQcm9wc1xuICogICBDb25maWd1cmF0aW9uIGZvciBgTURYUHJvdmlkZXJgLlxuICogQHByb3BlcnR5IHtSZWFjdE5vZGUgfCBudWxsIHwgdW5kZWZpbmVkfSBbY2hpbGRyZW5dXG4gKiAgIENoaWxkcmVuIChvcHRpb25hbCkuXG4gKiBAcHJvcGVydHkge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+IHwgTWVyZ2VDb21wb25lbnRzIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2NvbXBvbmVudHNdXG4gKiAgIEFkZGl0aW9uYWwgY29tcG9uZW50cyB0byB1c2Ugb3IgYSBmdW5jdGlvbiB0aGF0IGNyZWF0ZXMgdGhlbSAob3B0aW9uYWwpLlxuICogQHByb3BlcnR5IHtib29sZWFuIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2Rpc2FibGVQYXJlbnRDb250ZXh0PWZhbHNlXVxuICogICBUdXJuIG9mZiBvdXRlciBjb21wb25lbnQgY29udGV4dCAoZGVmYXVsdDogYGZhbHNlYCkuXG4gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuXG4vKiogQHR5cGUge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+fSAqL1xuY29uc3QgZW1wdHlDb21wb25lbnRzID0ge31cblxuY29uc3QgTURYQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoZW1wdHlDb21wb25lbnRzKVxuXG4vKipcbiAqIEdldCBjdXJyZW50IGNvbXBvbmVudHMgZnJvbSB0aGUgTURYIENvbnRleHQuXG4gKlxuICogQHBhcmFtIHtSZWFkb25seTxNRFhDb21wb25lbnRzPiB8IE1lcmdlQ29tcG9uZW50cyB8IG51bGwgfCB1bmRlZmluZWR9IFtjb21wb25lbnRzXVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMgdG8gdXNlIG9yIGEgZnVuY3Rpb24gdGhhdCBjcmVhdGVzIHRoZW0gKG9wdGlvbmFsKS5cbiAqIEByZXR1cm5zIHtNRFhDb21wb25lbnRzfVxuICogICBDdXJyZW50IGNvbXBvbmVudHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VNRFhDb21wb25lbnRzKGNvbXBvbmVudHMpIHtcbiAgY29uc3QgY29udGV4dENvbXBvbmVudHMgPSBSZWFjdC51c2VDb250ZXh0KE1EWENvbnRleHQpXG5cbiAgLy8gTWVtb2l6ZSB0byBhdm9pZCB1bm5lY2Vzc2FyeSB0b3AtbGV2ZWwgY29udGV4dCBjaGFuZ2VzXG4gIHJldHVybiBSZWFjdC51c2VNZW1vKFxuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIEN1c3RvbSBtZXJnZSB2aWEgYSBmdW5jdGlvbiBwcm9wXG4gICAgICBpZiAodHlwZW9mIGNvbXBvbmVudHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGNvbXBvbmVudHMoY29udGV4dENvbXBvbmVudHMpXG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7Li4uY29udGV4dENvbXBvbmVudHMsIC4uLmNvbXBvbmVudHN9XG4gICAgfSxcbiAgICBbY29udGV4dENvbXBvbmVudHMsIGNvbXBvbmVudHNdXG4gIClcbn1cblxuLyoqXG4gKiBQcm92aWRlciBmb3IgTURYIGNvbnRleHQuXG4gKlxuICogQHBhcmFtIHtSZWFkb25seTxQcm9wcz59IHByb3BlcnRpZXNcbiAqICAgUHJvcGVydGllcy5cbiAqIEByZXR1cm5zIHtSZWFjdEVsZW1lbnR9XG4gKiAgIEVsZW1lbnQuXG4gKiBAc2F0aXNmaWVzIHtDb21wb25lbnR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBNRFhQcm92aWRlcihwcm9wZXJ0aWVzKSB7XG4gIC8qKiBAdHlwZSB7UmVhZG9ubHk8TURYQ29tcG9uZW50cz59ICovXG4gIGxldCBhbGxDb21wb25lbnRzXG5cbiAgaWYgKHByb3BlcnRpZXMuZGlzYWJsZVBhcmVudENvbnRleHQpIHtcbiAgICBhbGxDb21wb25lbnRzID1cbiAgICAgIHR5cGVvZiBwcm9wZXJ0aWVzLmNvbXBvbmVudHMgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBwcm9wZXJ0aWVzLmNvbXBvbmVudHMoZW1wdHlDb21wb25lbnRzKVxuICAgICAgICA6IHByb3BlcnRpZXMuY29tcG9uZW50cyB8fCBlbXB0eUNvbXBvbmVudHNcbiAgfSBlbHNlIHtcbiAgICBhbGxDb21wb25lbnRzID0gdXNlTURYQ29tcG9uZW50cyhwcm9wZXJ0aWVzLmNvbXBvbmVudHMpXG4gIH1cblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICBNRFhDb250ZXh0LlByb3ZpZGVyLFxuICAgIHt2YWx1ZTogYWxsQ29tcG9uZW50c30sXG4gICAgcHJvcGVydGllcy5jaGlsZHJlblxuICApXG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@mdx-js/react/lib/index.js\n");

/***/ })

}]);