"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkeasifem_docs"] = globalThis["webpackChunkeasifem_docs"] || []).push([["content---docs-api-csr-matrix-get-ilutp-216-388"],{

/***/ "./docs/docs-api/CSRMatrix/GetILUTP.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  assets: () => (/* binding */ assets),\n  contentTitle: () => (/* binding */ contentTitle),\n  \"default\": () => (/* binding */ MDXContent),\n  frontMatter: () => (/* binding */ frontMatter),\n  metadata: () => (/* reexport */ site_docs_docs_api_csr_matrix_get_ilutp_md_216_namespaceObject),\n  toc: () => (/* binding */ toc)\n});\n\n;// ./.docusaurus/docusaurus-plugin-content-docs/docs-api/site-docs-docs-api-csr-matrix-get-ilutp-md-216.json\nconst site_docs_docs_api_csr_matrix_get_ilutp_md_216_namespaceObject = /*#__PURE__*/JSON.parse('{\"id\":\"CSRMatrix/GetILUTP\",\"title\":\"GetILUTP\",\"description\":\"Incomplete LU factorization with dual truncation mechanism\",\"source\":\"@site/docs/docs-api/CSRMatrix/GetILUTP.md\",\"sourceDirName\":\"CSRMatrix\",\"slug\":\"/CSRMatrix/GetILUTP\",\"permalink\":\"/docs-api/CSRMatrix/GetILUTP\",\"draft\":false,\"unlisted\":false,\"editUrl\":\"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/CSRMatrix/GetILUTP.md\",\"tags\":[],\"version\":\"current\",\"lastUpdatedAt\":1539502055000,\"frontMatter\":{},\"sidebar\":\"tutorialSidebar\",\"previous\":{\"title\":\"GetILUT\",\"permalink\":\"/docs-api/CSRMatrix/GetILUT\"},\"next\":{\"title\":\"GetLowerTriangle\",\"permalink\":\"/docs-api/CSRMatrix/GetLowerTriangle\"}}');\n// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n// EXTERNAL MODULE: ./node_modules/@mdx-js/react/lib/index.js\nvar lib = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js + 2 modules\nvar Tabs = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js + 1 modules\nvar TabItem = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js\");\n;// ./docs/docs-api/CSRMatrix/GetILUTP.md\n\n\nconst frontMatter = {};\nconst contentTitle = 'GetILUTP';\n\nconst assets = {\n\n};\n\n\n\n\n\nconst toc = [{\n  \"value\": \"Interface\",\n  \"id\": \"interface\",\n  \"level\": 2\n}];\nfunction _createMdxContent(props) {\n  const _components = {\n    admonition: \"admonition\",\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    header: \"header\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.header, {\n      children: (0,jsx_runtime.jsx)(_components.h1, {\n        id: \"getilutp\",\n        children: \"GetILUTP\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Incomplete LU factorization with dual truncation mechanism\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This routine builds the ILUTP precondition, that is ILUT with pivoting.\"\n    }), \"\\n\", \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface\",\n      children: \"Interface\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"üìù Interface 1\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE SUBROUTINE GetILUTP(obj, ALU, JLU, JU, lfil, droptol, &\\n    & permtol, mbloc, IPERM)\\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\\n    REAL(DFP), ALLOCATABLE, INTENT(INOUT) :: ALU(:)\\n    INTEGER(I4B), ALLOCATABLE, INTENT(INOUT) :: JLU(:)\\n    INTEGER(I4B), ALLOCATABLE, INTENT(INOUT) :: JU(:)\\n    INTEGER(I4B), INTENT(IN) :: lfil\\n    REAL(DFP), INTENT(IN) :: droptol\\n    REAL(DFP), INTENT(IN) :: permtol\\n    INTEGER(I4B), INTENT(IN) :: mbloc\\n    INTEGER(I4B), ALLOCATABLE, INTENT(INOUT) :: IPERM(:)\\n  END SUBROUTINE GetILUTP\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"obj\"\n            }), \" matrix stored in Compressed Sparse Row format.\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"lfil\"\n            }), \" denotes the fill-in parameter. Each row of L and each row of U will have a maximum of lfil elements (excluding the diagonal element). lfil must be .ge. 0.\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"droptol\"\n            }), \" sets the threshold for dropping small terms in the factorization. See below for details on dropping strategy.\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"permtol\"\n            }), \" = tolerance ratio used to determine whether or not to permute two columns. The columns i and j are permuted when \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"abs(a(i,j))*permtol .gt. abs(a(i,i))\"\n            }), \".\"]\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"permtol=0 implies never permute; good values 0.1 to 0.01\"\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"mbloc\"\n            }), \" = if desired, permuting can be done only within the diagonal blocks of size mbloc. Useful for PDE problems with several degrees of freedom.. If feature not wanted take mbloc=n, that is size of problem.\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"iperm\"\n            }), \" = contains the permutation arrays. iperm(1\", \":n\", \") = old numbers of unknowns iperm(n+1:2*n) = reverse permutation = new unknowns.\"]\n          }), \"\\n\"]\n        }), (0,jsx_runtime.jsx)(_components.admonition, {\n          type: \"note\",\n          children: (0,jsx_runtime.jsxs)(_components.p, {\n            children: [\"Due to the permuatation of cols of sparse matrix \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"obj\"\n            }), \", we need to permuate the solution vectors after calling a LUSolve method. This is because, due to permuation, the col indices of \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"obj\"\n            }), \" (csrmatrix) has been changed. If you want to permute the matrix back to its original state then you can use the following loop (where, n is the number of rows in obj):\"]\n          })\n        }), (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"do k=obj%ia(1), obj%ia(n+1)-1\\n  obj%ja(k) = iperm(ja(k))\\nenddo\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"ALU, JLU\"\n            }), \", matrix are stored in Modified Sparse Row (MSR) Format containing the L and U factors together. The diagonal (stored in ALU(1\", \":n\", \") ) is inverted. Each ith row of the ALU,JLU matrix contains the ith row of L (excluding the diagonal entry=1) followed by the ith row of U.\"]\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"JU = integer array of length n containing the pointers to the beginning of each row of U in the matrix ALU,JLU.\"\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"droptol\"\n            }), \" sets the threshold in L and U. Any element whose MAGNITUDE is less than some tolerance (relative to the abs value of diagonal element in U) is dropped.\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"Keeping only the largest \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"lfil\"\n            }), \" elements in the ith row of L and the largest \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"lfil\"\n            }), \" elements in the ith row of \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"U\"\n            }), \" (excluding diagonal elements).\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"Flexibility: one can use \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"droptol=0\"\n            }), \" to get a strategy based on keeping the largest elements in each row of \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"L\"\n            }), \" and \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"U\"\n            }), \".\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"Taking \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"droptol .ne. 0\"\n            }), \" but \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"lfil=n\"\n            }), \" will give the usual threshold strategy (however, fill-in is then mpredictible).\"]\n          }), \"\\n\"]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"iface2\",\n        label: \"Interface 2\",\n        children: (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE SUBROUTINE GetILUTP(obj, Pmat, lfil, droptol, permtol, &\\n    & mbloc, IPERM)\\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\\n    TYPE(CSRMatrix_), INTENT(INOUT) :: Pmat\\n    INTEGER(I4B), INTENT(IN) :: lfil\\n    REAL(DFP), INTENT(IN) :: droptol\\n    REAL(DFP), INTENT(IN) :: permtol\\n    INTEGER(I4B), INTENT(IN) :: mbloc\\n    INTEGER(I4B), ALLOCATABLE, INTENT(INOUT) :: IPERM(:)\\n  END SUBROUTINE GetILUTP\\nEND INTERFACE\\n\"\n          })\n        })\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"‚óâ Close\"\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./docs/docs-api/CSRMatrix/GetILUTP.md\n");

/***/ })

}]);