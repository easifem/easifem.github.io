"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkeasifem_docs"] = globalThis["webpackChunkeasifem_docs"] || []).push([["content---docs-api-domain-connectivity-initiate-node-to-nodesb-4-e-563"],{

/***/ "./docs/docs-api/DomainConnectivity/InitiateNodeToNodes.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  assets: () => (/* binding */ assets),\n  contentTitle: () => (/* binding */ InitiateNodeToNodes_contentTitle),\n  \"default\": () => (/* binding */ InitiateNodeToNodes_MDXContent),\n  frontMatter: () => (/* binding */ InitiateNodeToNodes_frontMatter),\n  metadata: () => (/* reexport */ site_docs_docs_api_domain_connectivity_initiate_node_to_nodes_md_b4e_namespaceObject),\n  toc: () => (/* binding */ InitiateNodeToNodes_toc)\n});\n\n;// ./.docusaurus/docusaurus-plugin-content-docs/docs-api/site-docs-docs-api-domain-connectivity-initiate-node-to-nodes-md-b4e.json\nconst site_docs_docs_api_domain_connectivity_initiate_node_to_nodes_md_b4e_namespaceObject = /*#__PURE__*/JSON.parse('{\"id\":\"DomainConnectivity/InitiateNodeToNodes\",\"title\":\"InitiateNodeToNodeData\",\"description\":\"This routine initiates nodeToNode data (mapping) between two domains or parts of domains.\",\"source\":\"@site/docs/docs-api/DomainConnectivity/InitiateNodeToNodes.md\",\"sourceDirName\":\"DomainConnectivity\",\"slug\":\"/DomainConnectivity/InitiateNodeToNodes\",\"permalink\":\"/docs-api/DomainConnectivity/InitiateNodeToNodes\",\"draft\":false,\"unlisted\":false,\"editUrl\":\"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/DomainConnectivity/InitiateNodeToNodes.md\",\"tags\":[],\"version\":\"current\",\"lastUpdatedAt\":1539502055000,\"frontMatter\":{},\"sidebar\":\"tutorialSidebar\",\"previous\":{\"title\":\"InitiateFacetToCellData\",\"permalink\":\"/docs-api/DomainConnectivity/InitiateFacetToCellData\"},\"next\":{\"title\":\"MasterCellNumber\",\"permalink\":\"/docs-api/DomainConnectivity/MasterCellNumber\"}}');\n// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n// EXTERNAL MODULE: ./node_modules/@mdx-js/react/lib/index.js\nvar lib = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js + 2 modules\nvar Tabs = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js + 1 modules\nvar TabItem = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js\");\n;// ./docs/docs-api/DomainConnectivity/_DomainConnectivity_test_1.md\n\n\nconst frontMatter = {};\nconst contentTitle = undefined;\n\n\n\n\n\nconst toc = [];\nfunction _createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.p, {\n      children: \"In this example we will generate node to node-connectivity information between part of pressure-domain and part of pressure-Domain.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Pressure domain consists Triangle3 elements as shown below.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Importing modules and variables\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n  USE easifemBase\\n  USE easifemClasses\\n  IMPLICIT NONE\\n  TYPE(DomainConnectivity_) :: obj\\n  TYPE( Domain_ ) :: pressureDomain\\n  TYPE( HDF5File_ ) :: pressureMeshFile\\n  CLASS( Mesh_ ), POINTER :: pressureMesh\\n  INTEGER( I4B ), POINTER :: nodeToNode( : )\\n  REAL( DFP ), POINTER :: pressureNode( :, : )\\n  INTEGER( I4B ) :: ii\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL pressureMeshFile%Initiate( FileName=\\\"./mesh_tri3.h5\\\", MODE=\\\"READ\\\" )\\nCALL pressureMeshFile%Open()\\nCALL pressureDomain%Initiate( pressureMeshFile, \\\"\\\")\\nCALL pressureMeshFile%Deallocate()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This will create node to node-connectivity data from domain1 (dim=2, entityNum=1) to domain2 (dim=2, entityNum=2).\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL obj%InitiateNodeToNodeData( domain1=pressureDomain, &\\n  & domain2=pressureDomain, dim1=2, entityNum1=1, dim2=2, entityNum2=1)\\nnodeToNode => obj%getNodeToNodePointer()\\npressureMesh => pressureDomain%getMeshPointer( 2, 1 )\\npressureNode => pressureDomain%getNodeCoordPointer()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"  DO ii = pressureMesh%minNptrs, pressureMesh%maxNptrs\\n    IF( .NOT. pressureMesh%isNodePresent( globalNode=ii ) ) CYCLE\\n    IF( ALL( pressureNode(:,pressureDomain%getLocalNodeNumber(ii)) &\\n      & .APPROXEQ.  &\\n      & pressureNode(:, &\\n      & pressureDomain%getLocalNodeNumber(nodeToNode(ii)))) ) THEN\\n      !CALL Display( \\\"pressure Node = \\\" // TOSTRING(ii)  &\\n      !  & // \\\" matches with pressure Node = \\\" // TOSTRING( nodeToNode(ii)))\\n    ELSE\\n      CALL Display( \\\"ERROR: pressure Node = \\\" // TOSTRING(ii)  &\\n        & // \\\" not matches with pressure Node = \\\"  &\\n        & // TOSTRING( nodeToNode(ii)))\\n      STOP\\n    END IF\\n  END DO\\n\\n  call OK(.TRUE.)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Cleaning up.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"  CALL pressureDomain%Deallocate()\\n  CALL obj%Deallocate()\\nEND PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/DomainConnectivity/_DomainConnectivity_test_2.md\n\n\nconst _DomainConnectivity_test_2_frontMatter = {};\nconst _DomainConnectivity_test_2_contentTitle = undefined;\n\n\n\n\n\nconst _DomainConnectivity_test_2_toc = [];\nfunction _DomainConnectivity_test_2_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.p, {\n      children: \"In this example we will generate node to node connectivity information between part of velocity-domain and part of velocity-Domain.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Velocity domain consists Triangle6 elements as shown below.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Import modules and define variables\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n  USE easifemBase\\n  USE easifemClasses\\n  IMPLICIT NONE\\n  TYPE(DomainConnectivity_) :: obj\\n  TYPE( Domain_ ) :: velocityDomain\\n  TYPE( HDF5File_ ) :: velocityMeshFile\\n  CLASS( Mesh_ ), POINTER :: velocityMesh\\n  INTEGER( I4B ), POINTER :: nodeToNode( : )\\n  REAL( DFP ), POINTER :: velocityNode( :, : )\\n  INTEGER( I4B ) :: ii\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL velocityMeshFile%Initiate( FileName=\\\"./mesh_tri6.h5\\\", MODE=\\\"READ\\\" )\\nCALL velocityMeshFile%Open()\\nCALL velocityDomain%Initiate( velocityMeshFile, \\\"\\\")\\nCALL velocityMeshFile%Deallocate()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL obj%InitiateNodeToNodeData( domain1=velocityDomain, &\\n  & domain2=velocityDomain, dim1=2, entityNum1=1, dim2=2, entityNum2=1)\\nnodeToNode => obj%getNodeToNodePointer()\\nvelocityMesh => velocityDomain%getMeshPointer( 2, 1 )\\nvelocityNode => velocityDomain%getNodeCoordPointer()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Simple testing\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"DO ii = velocityMesh%minNptrs, velocityMesh%maxNptrs\\n  IF( .NOT. velocityMesh%isNodePresent( globalNode=ii ) ) CYCLE\\n  IF( nodeToNode( ii ) .EQ. 0 ) THEN\\n    CALL Display( \\\"ERRRO: nodeToNode( \\\"//TOSTRING(ii) // \\\") = 0 \\\" )\\n    STOP\\n  END IF\\n  IF( ALL( velocityNode(:,velocityDomain%getLocalNodeNumber(ii)) &\\n    & .APPROXEQ.  &\\n    & velocityNode(:, &\\n    & velocityDomain%getLocalNodeNumber(nodeToNode(ii)))) ) THEN\\n    !CALL Display( \\\"velocity Node = \\\" // TOSTRING(ii)  &\\n    !  & // \\\" matches with velocity Node = \\\" // TOSTRING( nodeToNode(ii)))\\n  ELSE\\n    CALL Display( \\\"ERROR: velocity Node = \\\" // TOSTRING(ii)  &\\n      & // \\\" not matches with velocity Node = \\\"  &\\n      & // TOSTRING( nodeToNode(ii)))\\n    STOP\\n  END IF\\nEND DO\\nCALL OK(.true.)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"cleaning up\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"  CALL velocityDomain%Deallocate()\\n  CALL obj%Deallocate()\\nEND PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction _DomainConnectivity_test_2_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_DomainConnectivity_test_2_createMdxContent, {\n      ...props\n    })\n  }) : _DomainConnectivity_test_2_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/DomainConnectivity/_DomainConnectivity_test_3.md\n\n\nconst _DomainConnectivity_test_3_frontMatter = {};\nconst _DomainConnectivity_test_3_contentTitle = undefined;\n\n\n\n\n\nconst _DomainConnectivity_test_3_toc = [];\nfunction _DomainConnectivity_test_3_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.p, {\n      children: \"In this example we will generate node to node connectivity information between part of velocity-domain and part of pressure-Domain.\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"Pressure domain consists \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"Triangle3\"\n        }), \" elements.\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"Velocity domain consists \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"Triangle6\"\n        }), \" elements.\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n  USE easifemBase\\n  USE easifemClasses\\n  IMPLICIT NONE\\n  TYPE(DomainConnectivity_) :: obj\\n  TYPE( Domain_ ) :: pressureDomain\\n  TYPE( Domain_ ) :: velocityDomain\\n  TYPE( HDF5File_ ) :: pressureMeshFile\\n  TYPE( HDF5File_ ) :: velocityMeshFile\\n  CLASS( Mesh_ ), POINTER :: velocityMesh\\n  CLASS( Mesh_ ), POINTER :: pressureMesh\\n  INTEGER( I4B ), POINTER :: nodeToNode( : )\\n  REAL( DFP ), POINTER :: pressureNode( :, : )\\n  REAL( DFP ), POINTER :: velocityNode( :, : )\\n  INTEGER( I4B ) :: ii\\n\\nCALL velocityMeshFile%Initiate( FileName=\\\"./mesh_tri6.h5\\\", MODE=\\\"READ\\\" )\\nCALL velocityMeshFile%Open()\\nCALL pressureMeshFile%Initiate( FileName=\\\"./mesh_tri3.h5\\\", MODE=\\\"READ\\\" )\\nCALL pressureMeshFile%Open()\\n\\nCALL velocityDomain%Initiate( velocityMeshFile, \\\"\\\")\\nCALL velocityMeshFile%Deallocate()\\nCALL pressureDomain%Initiate( pressureMeshFile, \\\"\\\")\\nCALL pressureMeshFile%Deallocate()\\n\\nCALL obj%InitiateNodeToNodeData( domain1=velocityDomain, &\\n   domain2=pressureDomain, dim1=2, entityNum1=1, dim2=2, entityNum2=1)\\nnodeToNode => obj%getNodeToNodePointer()\\nvelocityMesh => velocityDomain%getMeshPointer( 2, 1 )\\npressureMesh => pressureDomain%getMeshPointer( 2, 1 )\\npressureNode => pressureDomain%getNodeCoordPointer()\\nvelocityNode => velocityDomain%getNodeCoordPointer()\\n\\n!! running some simple tests.\\n\\nDO ii = velocityMesh%minNptrs, velocityMesh%maxNptrs\\n  IF( .NOT. velocityMesh%isNodePresent( globalNode=ii ) ) CYCLE\\n  IF( nodeToNode( ii ) .EQ. 0 ) CYCLE\\n  IF( ALL( velocityNode(:,velocityDomain%getLocalNodeNumber(ii)) &\\n    & .APPROXEQ. pressureNode(:, &\\n    & pressureDomain%getLocalNodeNumber(nodeToNode(ii)))) ) THEN\\n    !CALL Display( \\\"velocity Node = \\\" // TOSTRING(ii)  &\\n    !  & // \\\" matches with pressure Node = \\\" // TOSTRING( nodeToNode(ii)))\\n  ELSE\\n    CALL Display( \\\"ERROR: velocity Node = \\\" // TOSTRING(ii)  &\\n      & // \\\" not matches with pressure Node = \\\"  &\\n      & // TOSTRING( nodeToNode(ii)))\\n    STOP\\n  END IF\\nEND DO\\nCALL OK(.true.)\\n\\n  CALL pressureDomain%Deallocate()\\n  CALL velocityDomain%Deallocate()\\n  CALL obj%Deallocate()\\nEND PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction _DomainConnectivity_test_3_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_DomainConnectivity_test_3_createMdxContent, {\n      ...props\n    })\n  }) : _DomainConnectivity_test_3_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/DomainConnectivity/_DomainConnectivity_test_4.md\n\n\nconst _DomainConnectivity_test_4_frontMatter = {};\nconst _DomainConnectivity_test_4_contentTitle = undefined;\n\n\n\n\n\nconst _DomainConnectivity_test_4_toc = [];\nfunction _DomainConnectivity_test_4_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.p, {\n      children: \"In this example we will generate node to node-connectivity information between part of velocity-domain (dim=2, entity=1) and part of pressure-Domain (dim=1).\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Pressure domain consists Triangle3 elements as shown below.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Velocity domain consists Triangle6 elements as shown below.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n  USE easifemBase\\n  USE easifemClasses\\n  IMPLICIT NONE\\n  TYPE(DomainConnectivity_) :: obj\\n  TYPE( Domain_ ) :: pressureDomain\\n  TYPE( Domain_ ) :: velocityDomain\\n  TYPE( HDF5File_ ) :: pressureMeshFile\\n  TYPE( HDF5File_ ) :: velocityMeshFile\\n  CLASS( Mesh_ ), POINTER :: velocityMesh\\n  CLASS( Mesh_ ), POINTER :: pressureMesh\\n  INTEGER( I4B ), POINTER :: nodeToNode( : )\\n  REAL( DFP ), POINTER :: pressureNode( :, : )\\n  REAL( DFP ), POINTER :: velocityNode( :, : )\\n  INTEGER( I4B ), PARAMETER :: dim1=2, dim2=1, entityNum1=1, entityNum2=1\\n  INTEGER( I4B ) :: ii\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL velocityMeshFile%Initiate( FileName=\\\"./mesh_tri6.h5\\\", MODE=\\\"READ\\\" )\\nCALL velocityMeshFile%Open()\\nCALL pressureMeshFile%Initiate( FileName=\\\"./mesh_tri3.h5\\\", MODE=\\\"READ\\\" )\\nCALL pressureMeshFile%Open()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL velocityDomain%Initiate( velocityMeshFile, \\\"\\\")\\nCALL velocityMeshFile%Deallocate()\\nCALL pressureDomain%Initiate( pressureMeshFile, \\\"\\\")\\nCALL pressureMeshFile%Deallocate()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL obj%InitiateNodeToNodeData( domain1=velocityDomain, &\\n  & domain2=pressureDomain, dim1=dim1, entityNum1=entityNum1, &\\n  & dim2=dim2, entityNum2=entityNum2 )\\nnodeToNode => obj%getNodeToNodePointer()\\nvelocityMesh => velocityDomain%getMeshPointer( dim1, entityNum1 )\\npressureMesh => pressureDomain%getMeshPointer( dim2, entityNum2 )\\npressureNode => pressureDomain%getNodeCoordPointer()\\nvelocityNode => velocityDomain%getNodeCoordPointer()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Simple testing\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"DO ii = velocityMesh%minNptrs, velocityMesh%maxNptrs\\n  IF( .NOT. velocityMesh%isNodePresent( globalNode=ii ) ) CYCLE\\n  IF( nodeToNode( ii ) .EQ. 0 ) CYCLE\\n  IF( ALL( velocityNode(:,velocityDomain%getLocalNodeNumber(ii)) &\\n    & .APPROXEQ. pressureNode(:, &\\n    & pressureDomain%getLocalNodeNumber(nodeToNode(ii)))) ) THEN\\n    !CALL Display( \\\"velocity Node = \\\" // TOSTRING(ii)  &\\n    !  & // \\\" matches with pressure Node = \\\" // TOSTRING( nodeToNode(ii)))\\n  ELSE\\n    CALL Display( \\\"ERROR: velocity Node = \\\" // TOSTRING(ii)  &\\n      & // \\\" not matches with pressure Node = \\\"  &\\n      & // TOSTRING( nodeToNode(ii)))\\n    STOP\\n  END IF\\nEND DO\\ncall ok(.true.)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Cleanup\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"  CALL pressureDomain%Deallocate()\\n  CALL velocityDomain%Deallocate()\\n  CALL obj%Deallocate()\\nEND PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction _DomainConnectivity_test_4_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_DomainConnectivity_test_4_createMdxContent, {\n      ...props\n    })\n  }) : _DomainConnectivity_test_4_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/DomainConnectivity/_DomainConnectivity_test_5.md\n\n\nconst _DomainConnectivity_test_5_frontMatter = {};\nconst _DomainConnectivity_test_5_contentTitle = undefined;\n\n\n\n\n\nconst _DomainConnectivity_test_5_toc = [];\nfunction _DomainConnectivity_test_5_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.p, {\n      children: \"In this example we will generate node to node-connectivity information between part of velocity-domain (2,1) and part of pressure-Domain (1,2).\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Pressure domain consists Triangle3 elements as shown below.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Velocity domain consists Triangle6 elements as shown below.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n  USE easifemBase\\n  USE easifemClasses\\n  IMPLICIT NONE\\n  TYPE(DomainConnectivity_) :: obj\\n  TYPE( Domain_ ) :: pressureDomain\\n  TYPE( Domain_ ) :: velocityDomain\\n  TYPE( HDF5File_ ) :: pressureMeshFile\\n  TYPE( HDF5File_ ) :: velocityMeshFile\\n  CLASS( Mesh_ ), POINTER :: velocityMesh\\n  CLASS( Mesh_ ), POINTER :: pressureMesh\\n  INTEGER( I4B ), POINTER :: nodeToNode( : )\\n  REAL( DFP ), POINTER :: pressureNode( :, : )\\n  REAL( DFP ), POINTER :: velocityNode( :, : )\\n  INTEGER( I4B ), PARAMETER :: dim1=2, entityNum1=1, dim2=1, entityNum2=2\\n  INTEGER( I4B ) :: ii\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL velocityMeshFile%Initiate( FileName=\\\"./mesh_tri6.h5\\\", MODE=\\\"READ\\\" )\\nCALL velocityMeshFile%Open()\\nCALL pressureMeshFile%Initiate( FileName=\\\"./mesh_tri3.h5\\\", MODE=\\\"READ\\\" )\\nCALL pressureMeshFile%Open()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL velocityDomain%Initiate( velocityMeshFile, \\\"\\\")\\nCALL velocityMeshFile%Deallocate()\\nCALL pressureDomain%Initiate( pressureMeshFile, \\\"\\\")\\nCALL pressureMeshFile%Deallocate()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL obj%InitiateNodeToNodeData( domain1=velocityDomain, &\\n  & domain2=pressureDomain, dim1=dim1, entityNum1=entityNum1, &\\n  & dim2=dim2, entityNum2=entityNum2 )\\nnodeToNode => obj%getNodeToNodePointer()\\nvelocityMesh => velocityDomain%getMeshPointer( dim1, entityNum1 )\\npressureMesh => pressureDomain%getMeshPointer( dim2, entityNum2 )\\npressureNode => pressureDomain%getNodeCoordPointer()\\nvelocityNode => velocityDomain%getNodeCoordPointer()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Simple testing\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"DO ii = velocityMesh%minNptrs, velocityMesh%maxNptrs\\n  IF( .NOT. velocityMesh%isNodePresent( globalNode=ii ) ) CYCLE\\n  IF( nodeToNode( ii ) .EQ. 0 ) CYCLE\\n  IF( ALL( velocityNode(:,velocityDomain%getLocalNodeNumber(ii)) &\\n    & .APPROXEQ. pressureNode(:, &\\n    & pressureDomain%getLocalNodeNumber(nodeToNode(ii)))) ) THEN\\n    !CALL Display( \\\"velocity Node = \\\" // TOSTRING(ii)  &\\n    !  & // \\\" matches with pressure Node = \\\" // TOSTRING( nodeToNode(ii)))\\n  ELSE\\n    CALL Display( \\\"ERROR: velocity Node = \\\" // TOSTRING(ii)  &\\n      & // \\\" not matches with pressure Node = \\\"  &\\n      & // TOSTRING( nodeToNode(ii)))\\n    STOP\\n  END IF\\nEND DO\\ncall ok(.true.)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"cleanup\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"  CALL pressureDomain%Deallocate()\\n  CALL velocityDomain%Deallocate()\\n  CALL obj%Deallocate()\\nEND PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction _DomainConnectivity_test_5_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_DomainConnectivity_test_5_createMdxContent, {\n      ...props\n    })\n  }) : _DomainConnectivity_test_5_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/DomainConnectivity/_DomainConnectivity_test_6.md\n\n\nconst _DomainConnectivity_test_6_frontMatter = {};\nconst _DomainConnectivity_test_6_contentTitle = undefined;\n\n\n\n\n\nconst _DomainConnectivity_test_6_toc = [];\nfunction _DomainConnectivity_test_6_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.p, {\n      children: \"In this example we will generate node to node-connectivity information between part of velocity-domain (2,1) and part of pressure-Domain (1,3).\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Pressure domain consists Triangle3 elements as shown below.\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Velocity domain consists Triangle6 elements as shown below.\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n  USE easifemBase\\n  USE easifemClasses\\n  IMPLICIT NONE\\n  TYPE(DomainConnectivity_) :: obj\\n  TYPE( Domain_ ) :: pressureDomain\\n  TYPE( Domain_ ) :: velocityDomain\\n  TYPE( HDF5File_ ) :: pressureMeshFile\\n  TYPE( HDF5File_ ) :: velocityMeshFile\\n  CLASS( Mesh_ ), POINTER :: velocityMesh\\n  CLASS( Mesh_ ), POINTER :: pressureMesh\\n  INTEGER( I4B ), POINTER :: nodeToNode( : )\\n  REAL( DFP ), POINTER :: pressureNode( :, : )\\n  REAL( DFP ), POINTER :: velocityNode( :, : )\\n  INTEGER( I4B ), PARAMETER :: dim1=2, entityNum1=1, dim2=1, entityNum2=3\\n  INTEGER( I4B ) :: ii\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL velocityMeshFile%Initiate( FileName=\\\"./mesh_tri6.h5\\\", MODE=\\\"READ\\\" )\\nCALL velocityMeshFile%Open()\\nCALL pressureMeshFile%Initiate( FileName=\\\"./mesh_tri3.h5\\\", MODE=\\\"READ\\\" )\\nCALL pressureMeshFile%Open()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL velocityDomain%Initiate( velocityMeshFile, \\\"\\\")\\nCALL velocityMeshFile%Deallocate()\\nCALL pressureDomain%Initiate( pressureMeshFile, \\\"\\\")\\nCALL pressureMeshFile%Deallocate()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL obj%InitiateNodeToNodeData( domain1=velocityDomain, &\\n  & domain2=pressureDomain, dim1=dim1, entityNum1=entityNum1, &\\n  & dim2=dim2, entityNum2=entityNum2 )\\nnodeToNode => obj%getNodeToNodePointer()\\nvelocityMesh => velocityDomain%getMeshPointer( dim1, entityNum1 )\\npressureMesh => pressureDomain%getMeshPointer( dim2, entityNum2 )\\npressureNode => pressureDomain%getNodeCoordPointer()\\nvelocityNode => velocityDomain%getNodeCoordPointer()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Simple testing\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"DO ii = velocityMesh%minNptrs, velocityMesh%maxNptrs\\n  IF( .NOT. velocityMesh%isNodePresent( globalNode=ii ) ) CYCLE\\n  IF( nodeToNode( ii ) .EQ. 0 ) CYCLE\\n  IF( ALL( velocityNode(:,velocityDomain%getLocalNodeNumber(ii)) &\\n    & .APPROXEQ. pressureNode(:, &\\n    & pressureDomain%getLocalNodeNumber(nodeToNode(ii)))) ) THEN\\n    !CALL Display( \\\"velocity Node = \\\" // TOSTRING(ii)  &\\n    !  & // \\\" matches with pressure Node = \\\" // TOSTRING( nodeToNode(ii)))\\n  ELSE\\n    CALL Display( \\\"ERROR: velocity Node = \\\" // TOSTRING(ii)  &\\n      & // \\\" not matches with pressure Node = \\\"  &\\n      & // TOSTRING( nodeToNode(ii)))\\n    STOP\\n  END IF\\nEND DO\\ncall ok(.true.)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"clean up\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"  CALL pressureDomain%Deallocate()\\n  CALL velocityDomain%Deallocate()\\n  CALL obj%Deallocate()\\nEND PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction _DomainConnectivity_test_6_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_DomainConnectivity_test_6_createMdxContent, {\n      ...props\n    })\n  }) : _DomainConnectivity_test_6_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/DomainConnectivity/_DomainConnectivity_test_7.md\n\n\nconst _DomainConnectivity_test_7_frontMatter = {};\nconst _DomainConnectivity_test_7_contentTitle = undefined;\n\n\n\n\n\nconst _DomainConnectivity_test_7_toc = [];\nfunction _DomainConnectivity_test_7_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.p, {\n      children: \"In this example we will generate node to node connectivity information between part of velocity-domain (2,1) and part of pressure-Domain (1,4).\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"Pressure domain consists \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"Triangle3\"\n        }), \" elements as shown below.\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"Velocity domain consists \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"Triangle6\"\n        }), \" elements as shown below.\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n  USE easifemBase\\n  USE easifemClasses\\n  IMPLICIT NONE\\n  TYPE(DomainConnectivity_) :: obj\\n  TYPE( Domain_ ) :: pressureDomain\\n  TYPE( Domain_ ) :: velocityDomain\\n  TYPE( HDF5File_ ) :: pressureMeshFile\\n  TYPE( HDF5File_ ) :: velocityMeshFile\\n  CLASS( Mesh_ ), POINTER :: velocityMesh\\n  CLASS( Mesh_ ), POINTER :: pressureMesh\\n  INTEGER( I4B ), POINTER :: nodeToNode( : )\\n  REAL( DFP ), POINTER :: pressureNode( :, : )\\n  REAL( DFP ), POINTER :: velocityNode( :, : )\\n  INTEGER( I4B ), PARAMETER :: dim1=2, entityNum1=1, dim2=1, entityNum2=4\\n  INTEGER( I4B ) :: ii\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL velocityMeshFile%Initiate( FileName=\\\"./mesh_tri6.h5\\\", MODE=\\\"READ\\\" )\\nCALL velocityMeshFile%Open()\\nCALL pressureMeshFile%Initiate( FileName=\\\"./mesh_tri3.h5\\\", MODE=\\\"READ\\\" )\\nCALL pressureMeshFile%Open()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL velocityDomain%Initiate( velocityMeshFile, \\\"\\\")\\nCALL velocityMeshFile%Deallocate()\\nCALL pressureDomain%Initiate( pressureMeshFile, \\\"\\\")\\nCALL pressureMeshFile%Deallocate()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL obj%InitiateNodeToNodeData( domain1=velocityDomain, &\\n  & domain2=pressureDomain, dim1=dim1, entityNum1=entityNum1, &\\n  & dim2=dim2, entityNum2=entityNum2 )\\nnodeToNode => obj%getNodeToNodePointer()\\nvelocityMesh => velocityDomain%getMeshPointer( dim1, entityNum1 )\\npressureMesh => pressureDomain%getMeshPointer( dim2, entityNum2 )\\npressureNode => pressureDomain%getNodeCoordPointer()\\nvelocityNode => velocityDomain%getNodeCoordPointer()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Simple testing\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"DO ii = velocityMesh%minNptrs, velocityMesh%maxNptrs\\n  IF( .NOT. velocityMesh%isNodePresent( globalNode=ii ) ) CYCLE\\n  IF( nodeToNode( ii ) .EQ. 0 ) CYCLE\\n  IF( ALL( velocityNode(:,velocityDomain%getLocalNodeNumber(ii)) &\\n    & .APPROXEQ. pressureNode(:, &\\n    & pressureDomain%getLocalNodeNumber(nodeToNode(ii)))) ) THEN\\n    CALL Display( \\\"velocity Node = \\\" // TOSTRING(ii)  &\\n      & // \\\" matches with pressure Node = \\\" // TOSTRING( nodeToNode(ii)))\\n  ELSE\\n    CALL Display( \\\"ERROR: velocity Node = \\\" // TOSTRING(ii)  &\\n      & // \\\" not matches with pressure Node = \\\"  &\\n      & // TOSTRING( nodeToNode(ii)))\\n    STOP\\n  END IF\\nEND DO\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"cleanup\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"  CALL pressureDomain%Deallocate()\\n  CALL velocityDomain%Deallocate()\\n  CALL obj%Deallocate()\\nEND PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction _DomainConnectivity_test_7_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_DomainConnectivity_test_7_createMdxContent, {\n      ...props\n    })\n  }) : _DomainConnectivity_test_7_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/DomainConnectivity/_DomainConnectivity_test_8.md\n\n\nconst _DomainConnectivity_test_8_frontMatter = {};\nconst _DomainConnectivity_test_8_contentTitle = undefined;\n\n\n\n\n\nconst _DomainConnectivity_test_8_toc = [];\nfunction _DomainConnectivity_test_8_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.p, {\n      children: \"In this example we will generate node to node connectivity information between part of velocity-domain (2,1) and part of pressure-Domain (2,1).\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Pressure domain consists Triangle3 elements as shown below.\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Velocity domain consists Triangle6 elements as shown below.\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n  USE easifemBase\\n  USE easifemClasses\\n  IMPLICIT NONE\\n  TYPE(DomainConnectivity_) :: obj\\n  TYPE( Domain_ ) :: pressureDomain\\n  TYPE( Domain_ ) :: velocityDomain\\n  TYPE( HDF5File_ ) :: pressureMeshFile\\n  TYPE( HDF5File_ ) :: velocityMeshFile\\n  CLASS( Mesh_ ), POINTER :: velocityMesh\\n  CLASS( Mesh_ ), POINTER :: pressureMesh\\n  INTEGER( I4B ), POINTER :: nodeToNode( : )\\n  REAL( DFP ), POINTER :: pressureNode( :, : )\\n  REAL( DFP ), POINTER :: velocityNode( :, : )\\n  INTEGER( I4B ), PARAMETER :: dim1=2, entityNum1=1, dim2=2, entityNum2=1\\n  INTEGER( I4B ) :: ii\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL velocityMeshFile%Initiate( FileName=\\\"./mesh_tri6.h5\\\", MODE=\\\"READ\\\" )\\nCALL velocityMeshFile%Open()\\nCALL pressureMeshFile%Initiate( FileName=\\\"./mesh_tri3.h5\\\", MODE=\\\"READ\\\" )\\nCALL pressureMeshFile%Open()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL velocityDomain%Initiate( velocityMeshFile, \\\"\\\")\\nCALL velocityMeshFile%Deallocate()\\nCALL pressureDomain%Initiate( pressureMeshFile, \\\"\\\")\\nCALL pressureMeshFile%Deallocate()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL obj%InitiateNodeToNodeData( domain2=velocityDomain, &\\n  & domain1=pressureDomain, dim1=dim1, entityNum1=entityNum1, &\\n  & dim2=dim2, entityNum2=entityNum2 )\\nnodeToNode => obj%getNodeToNodePointer()\\nvelocityMesh => velocityDomain%getMeshPointer( dim1, entityNum1 )\\npressureMesh => pressureDomain%getMeshPointer( dim2, entityNum2 )\\npressureNode => pressureDomain%getNodeCoordPointer()\\nvelocityNode => velocityDomain%getNodeCoordPointer()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Simple testing\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"DO ii = pressureMesh%minNptrs, pressureMesh%maxNptrs\\n  IF( .NOT. pressureMesh%isNodePresent( globalNode=ii ) ) CYCLE\\n  IF( nodeToNode( ii ) .EQ. 0 ) CYCLE\\n  IF( ALL( pressureNode(:,pressureDomain%getLocalNodeNumber(ii)) &\\n    & .APPROXEQ. velocityNode(:, &\\n    & velocityDomain%getLocalNodeNumber(nodeToNode(ii)))) ) THEN\\n    CALL Display( \\\"pressure Node = \\\" // TOSTRING(ii)  &\\n      & // \\\" matches with velocity Node = \\\" // TOSTRING( nodeToNode(ii)))\\n  ELSE\\n    CALL Display( \\\"ERROR: pressure Node = \\\" // TOSTRING(ii)  &\\n      & // \\\" not matches with velocity Node = \\\"  &\\n      & // TOSTRING( nodeToNode(ii)))\\n    STOP\\n  END IF\\nEND DO\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Cleanup\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"  CALL pressureDomain%Deallocate()\\n  CALL velocityDomain%Deallocate()\\n  CALL obj%Deallocate()\\nEND PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction _DomainConnectivity_test_8_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_DomainConnectivity_test_8_createMdxContent, {\n      ...props\n    })\n  }) : _DomainConnectivity_test_8_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/DomainConnectivity/_DomainConnectivity_test_9.md\n\n\nconst _DomainConnectivity_test_9_frontMatter = {};\nconst _DomainConnectivity_test_9_contentTitle = undefined;\n\n\n\n\n\nconst _DomainConnectivity_test_9_toc = [];\nfunction _DomainConnectivity_test_9_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.p, {\n      children: \"In this example we will generate node to node connectivity information between velocity-domain and pressure-Domain.\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Pressure domain consists Triangle3 elements as shown below.\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Velocity domain consists Triangle6 elements as shown below.\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n  USE easifemBase\\n  USE easifemClasses\\n  IMPLICIT NONE\\n  TYPE(DomainConnectivity_) :: obj\\n  TYPE( Domain_ ) :: pressureDomain\\n  TYPE( Domain_ ) :: velocityDomain\\n  TYPE( HDF5File_ ) :: pressureMeshFile\\n  TYPE( HDF5File_ ) :: velocityMeshFile\\n  INTEGER( I4B ), POINTER :: nodeToNode( : )\\n  REAL( DFP ), POINTER :: pressureNode( :, : )\\n  REAL( DFP ), POINTER :: velocityNode( :, : )\\n  INTEGER( I4B ) :: ii\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL velocityMeshFile%Initiate( FileName=\\\"./mesh_tri6.h5\\\", MODE=\\\"READ\\\" )\\nCALL velocityMeshFile%Open()\\nCALL pressureMeshFile%Initiate( FileName=\\\"./mesh_tri3.h5\\\", MODE=\\\"READ\\\" )\\nCALL pressureMeshFile%Open()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL velocityDomain%Initiate( velocityMeshFile, \\\"\\\")\\nCALL velocityMeshFile%Deallocate()\\nCALL pressureDomain%Initiate( pressureMeshFile, \\\"\\\")\\nCALL pressureMeshFile%Deallocate()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL obj%InitiateNodeToNodeData( domain1=velocityDomain, &\\n  & domain2=pressureDomain )\\nnodeToNode => obj%getNodeToNodePointer()\\npressureNode => pressureDomain%getNodeCoordPointer()\\nvelocityNode => velocityDomain%getNodeCoordPointer()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Simple testing\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"DO ii = velocityDomain%minNptrs, velocityDomain%maxNptrs\\n  IF( .NOT. velocityDomain%isNodePresent( globalNode=ii ) ) CYCLE\\n  IF( nodeToNode( ii ) .EQ. 0 ) CYCLE\\n  IF( ALL( velocityNode(:,velocityDomain%getLocalNodeNumber(ii)) &\\n    & .APPROXEQ. pressureNode(:, &\\n    & pressureDomain%getLocalNodeNumber(nodeToNode(ii)))) ) THEN\\n    CALL Display( \\\"velocity Node = \\\" // TOSTRING(ii)  &\\n      & // \\\" matches with pressure Node = \\\" // TOSTRING( nodeToNode(ii)))\\n  ELSE\\n    CALL Display( \\\"ERROR: velocity Node = \\\" // TOSTRING(ii)  &\\n      & // \\\" not matches with pressure Node = \\\"  &\\n      & // TOSTRING( nodeToNode(ii)))\\n    STOP\\n  END IF\\nEND DO\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"cleanup\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"  CALL pressureDomain%Deallocate()\\n  CALL velocityDomain%Deallocate()\\n  CALL obj%Deallocate()\\nEND PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction _DomainConnectivity_test_9_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_DomainConnectivity_test_9_createMdxContent, {\n      ...props\n    })\n  }) : _DomainConnectivity_test_9_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/DomainConnectivity/_DomainConnectivity_test_10.md\n\n\nconst _DomainConnectivity_test_10_frontMatter = {};\nconst _DomainConnectivity_test_10_contentTitle = undefined;\n\n\n\n\n\nconst _DomainConnectivity_test_10_toc = [];\nfunction _DomainConnectivity_test_10_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.p, {\n      children: \"In this example we will generate node to node connectivity information between velocity-domain and pressure-domain.\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Pressure domain consists Triangle3 elements as shown below.\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Velocity domain consists Triangle6 elements as shown below.\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n  USE easifemBase\\n  USE easifemClasses\\n  IMPLICIT NONE\\n  TYPE(DomainConnectivity_) :: obj\\n  TYPE( Domain_ ) :: pressureDomain\\n  TYPE( Domain_ ) :: velocityDomain\\n  TYPE( HDF5File_ ) :: pressureMeshFile\\n  TYPE( HDF5File_ ) :: velocityMeshFile\\n  INTEGER( I4B ), POINTER :: nodeToNode( : )\\n  REAL( DFP ), POINTER :: pressureNode( :, : )\\n  REAL( DFP ), POINTER :: velocityNode( :, : )\\n  INTEGER( I4B ) :: ii\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL velocityMeshFile%Initiate( FileName=\\\"./mesh_tri6.h5\\\", MODE=\\\"READ\\\" )\\nCALL velocityMeshFile%Open()\\nCALL pressureMeshFile%Initiate( FileName=\\\"./mesh_tri3.h5\\\", MODE=\\\"READ\\\" )\\nCALL pressureMeshFile%Open()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL velocityDomain%Initiate( velocityMeshFile, \\\"\\\")\\nCALL velocityMeshFile%Deallocate()\\nCALL pressureDomain%Initiate( pressureMeshFile, \\\"\\\")\\nCALL pressureMeshFile%Deallocate()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL obj%InitiateNodeToNodeData( domain2=velocityDomain, &\\n  & domain1=pressureDomain )\\nnodeToNode => obj%getNodeToNodePointer()\\npressureNode => pressureDomain%getNodeCoordPointer()\\nvelocityNode => velocityDomain%getNodeCoordPointer()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Simple testing\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"DO ii = pressureDomain%minNptrs, pressureDomain%maxNptrs\\n  IF( .NOT. pressureDomain%isNodePresent( globalNode=ii ) ) CYCLE\\n  IF( nodeToNode( ii ) .EQ. 0 ) CYCLE\\n  IF( ALL( pressureNode(:,pressureDomain%getLocalNodeNumber(ii)) &\\n    & .APPROXEQ. velocityNode(:, &\\n    & velocityDomain%getLocalNodeNumber(nodeToNode(ii)))) ) THEN\\n    !CALL Display( \\\"pressure Node = \\\" // TOSTRING(ii)  &\\n    !  & // \\\" matches with velocity Node = \\\" // TOSTRING( nodeToNode(ii)))\\n  ELSE\\n    CALL Display( \\\"ERROR: pressure Node = \\\" // TOSTRING(ii)  &\\n      & // \\\" not matches with velocity Node = \\\"  &\\n      & // TOSTRING( nodeToNode(ii)))\\n    STOP\\n  END IF\\nEND DO\\nCALL OK(.TRUE.)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"cleanup\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"  CALL pressureDomain%Deallocate()\\n  CALL velocityDomain%Deallocate()\\n  CALL obj%Deallocate()\\nEND PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction _DomainConnectivity_test_10_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_DomainConnectivity_test_10_createMdxContent, {\n      ...props\n    })\n  }) : _DomainConnectivity_test_10_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/DomainConnectivity/InitiateNodeToNodes.md\n\n\nconst InitiateNodeToNodes_frontMatter = {};\nconst InitiateNodeToNodes_contentTitle = 'InitiateNodeToNodeData';\n\nconst assets = {\n\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst InitiateNodeToNodes_toc = [{\n  \"value\": \"Interface1\",\n  \"id\": \"interface1\",\n  \"level\": 3\n}, ...toc, ..._DomainConnectivity_test_2_toc, ..._DomainConnectivity_test_3_toc, ..._DomainConnectivity_test_4_toc, ..._DomainConnectivity_test_5_toc, ..._DomainConnectivity_test_6_toc, ..._DomainConnectivity_test_7_toc, ..._DomainConnectivity_test_8_toc, {\n  \"value\": \"Interface2\",\n  \"id\": \"interface2\",\n  \"level\": 2\n}, ..._DomainConnectivity_test_9_toc, ..._DomainConnectivity_test_10_toc];\nfunction InitiateNodeToNodes_createMdxContent(props) {\n  const _components = {\n    admonition: \"admonition\",\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    h3: \"h3\",\n    header: \"header\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.header, {\n      children: (0,jsx_runtime.jsx)(_components.h1, {\n        id: \"initiatenodetonodedata\",\n        children: \"InitiateNodeToNodeData\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This routine initiates nodeToNode data (mapping) between two domains or parts of domains.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"interface1\",\n      children: \"Interface1\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This subroutine generates the node to node connectivity between two meshes\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"obj%nodeToNode\"\n        }), \" will be initiated\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"domain1\"\n        }), \" main domain\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"domain2\"\n        }), \" secondary domain\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"dim1, entitynum1\"\n        }), \" dimension and entity number of mesh in \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"domain1\"\n        })]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"dim2, entitynum2\"\n        }), \" dimension and entity number of mesh in \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"domain2\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.admonition, {\n      type: \"caution\",\n      children: (0,jsx_runtime.jsxs)(_components.p, {\n        children: [\"In this case bounds of \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"nodeToNode\"\n        }), \" will be from 1 to \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"mesh1%maxNptrs\"\n        }), \".\"]\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n  MODULE SUBROUTINE dc_InitiateNodeToNodeData1(obj, domain1, domain2, &\\n    & dim1, dim2, entityNum1, entityNum2)\\n    CLASS(DomainConnectivity_), INTENT(INOUT) :: obj\\n    !! Domain connectivity object,\\n    !! [[DomainConnectivity:nodeToNode]] will be initiated\\n    CLASS(Domain_), INTENT(IN) :: domain1\\n    !! Primary domain, in nodeToNode(i), i denotes the\\n    !! global node number in domain1 domain.\\n    CLASS(Domain_), INTENT(IN) :: domain2\\n    !! secondary domain, => nodeToNode(i) denotes the\\n    !! global node number in `domain2` domain.\\n    INTEGER(I4B), INTENT(IN) :: dim1\\n    !! dimension of mesh in domain1\\n    INTEGER(I4B), INTENT(IN) :: dim2\\n    !! dimension of mesh in domain2\\n    INTEGER(I4B), INTENT(IN) :: entityNum1\\n    !! entity num of mesh in domain1\\n    INTEGER(I4B), INTENT(IN) :: entityNum2\\n    !! entity num of mesh in domain2\\n  END SUBROUTINE dc_InitiateNodeToNodeData1\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"1\",\n        label: \"️܀ Example 1\",\n        children: (0,jsx_runtime.jsx)(MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"2\",\n        label: \"️܀ Example 2\",\n        children: (0,jsx_runtime.jsx)(_DomainConnectivity_test_2_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"3\",\n        label: \"️܀ Example 3\",\n        children: (0,jsx_runtime.jsx)(_DomainConnectivity_test_3_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"4\",\n        label: \"️܀ Example 4\",\n        children: (0,jsx_runtime.jsx)(_DomainConnectivity_test_4_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"5\",\n        label: \"️܀ Example 5\",\n        children: (0,jsx_runtime.jsx)(_DomainConnectivity_test_5_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢\",\n        default: true\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"6\",\n        label: \"️܀ Example 6\",\n        children: (0,jsx_runtime.jsx)(_DomainConnectivity_test_6_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"7\",\n        label: \"️܀ Example 7\",\n        children: (0,jsx_runtime.jsx)(_DomainConnectivity_test_7_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"8\",\n        label: \"️܀ Example 8\",\n        children: (0,jsx_runtime.jsx)(_DomainConnectivity_test_8_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢\",\n        default: true\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface2\",\n      children: \"Interface2\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n  MODULE SUBROUTINE dc_InitiateNodeToNodeData2(obj, domain1, domain2)\\n    CLASS(DomainConnectivity_), INTENT(INOUT) :: obj\\n    !! Domain connectivity object\\n    CLASS(Domain_), INTENT(IN) :: domain1\\n    !! Primary domain, in nodeToNode(i), i denotes the\\n    !! global node number in domain1 domain.\\n    CLASS(Domain_), INTENT(IN) :: domain2\\n    !! Secondary domain => nodeToNode(i) denotes the\\n    !! global node number in domain2 domain.\\n  END SUBROUTINE dc_InitiateNodeToNodeData2\\nEND INTERFACE\\n!# Introduction\\n!\\n!  This subroutine generates the node to node connectivity between two domains\\n!\\n!@note\\n!In this routine nodeToNode connectivity info of all meshes in domain1 to\\n!all meshes in the domain2 will be generated!\\n!@endnote\\n!\\n! - `obj%nodeToNode` will be initiated\\n! - `domain1` main domain\\n! - `domain2` secondary domain\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"1\",\n        label: \"️܀ Example 1\",\n        children: (0,jsx_runtime.jsx)(_DomainConnectivity_test_9_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"2\",\n        label: \"️܀ Example 2\",\n        children: (0,jsx_runtime.jsx)(_DomainConnectivity_test_10_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢\",\n        default: true\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This is a powerful 🔥 and useful method. You can learn about this routine at following links.\"\n    })]\n  });\n}\nfunction InitiateNodeToNodes_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(InitiateNodeToNodes_createMdxContent, {\n      ...props\n    })\n  }) : InitiateNodeToNodes_createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./docs/docs-api/DomainConnectivity/InitiateNodeToNodes.md\n");

/***/ })

}]);