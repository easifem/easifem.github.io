"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkeasifem_docs"] = globalThis["webpackChunkeasifem_docs"] || []).push([["content---docs-api-csr-matrix-initiated-11-01b"],{

/***/ "./docs/docs-api/CSRMatrix/Initiate.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  assets: () => (/* binding */ assets),\n  contentTitle: () => (/* binding */ Initiate_contentTitle),\n  \"default\": () => (/* binding */ Initiate_MDXContent),\n  frontMatter: () => (/* binding */ Initiate_frontMatter),\n  metadata: () => (/* reexport */ site_docs_docs_api_csr_matrix_initiate_md_d11_namespaceObject),\n  toc: () => (/* binding */ Initiate_toc)\n});\n\n;// ./.docusaurus/docusaurus-plugin-content-docs/docs-api/site-docs-docs-api-csr-matrix-initiate-md-d11.json\nconst site_docs_docs_api_csr_matrix_initiate_md_d11_namespaceObject = /*#__PURE__*/JSON.parse('{\"id\":\"CSRMatrix/Initiate\",\"title\":\"Initiate\",\"description\":\"Initiate() method constructs an instance of CSRMatrix_.\",\"source\":\"@site/docs/docs-api/CSRMatrix/Initiate.md\",\"sourceDirName\":\"CSRMatrix\",\"slug\":\"/CSRMatrix/Initiate\",\"permalink\":\"/docs-api/CSRMatrix/Initiate\",\"draft\":false,\"unlisted\":false,\"editUrl\":\"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/CSRMatrix/Initiate.md\",\"tags\":[],\"version\":\"current\",\"lastUpdatedAt\":1539502055000,\"frontMatter\":{},\"sidebar\":\"tutorialSidebar\",\"previous\":{\"title\":\"Import\",\"permalink\":\"/docs-api/CSRMatrix/Import\"},\"next\":{\"title\":\"LUSolve\",\"permalink\":\"/docs-api/CSRMatrix/LUSolve\"}}');\n// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n// EXTERNAL MODULE: ./node_modules/@mdx-js/react/lib/index.js\nvar lib = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js + 2 modules\nvar Tabs = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js + 1 modules\nvar TabItem = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js\");\n;// ./docs/docs-api/CSRMatrix/examples/_Initiate_test_1.md\n\n\nconst frontMatter = {};\nconst contentTitle = undefined;\n\n\n\n\n\nconst toc = [];\nfunction _createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    li: \"li\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n  USE easifemBase\\n  IMPLICIT NONE\\n  TYPE( CSRMatrix_ ) :: obj\\n  TYPE( DOF_ ) :: dofobj\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"First, we initiate DOF, which contains the structure of Degrees of freedom\"\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"The degrees of freedom has:\", \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"1 physical variable\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"1 space component\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"1 time component\"\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [\"12 number of spatial nodes are stored in \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"NODES_FMT\"\n            }), \".\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL Initiate( obj=dofobj, tNodes=[12], names=['K'], &\\n  & spaceCompo=[1], timeCompo=[1], storageFMT=NODES_FMT )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Below we create a sparse matrix with 12 number of rows and 12 number of cols.\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL Initiate( obj, ncol=12, nrow=12, idof=dofobj, jdof=dofobj )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"  CALL Deallocate( obj )\\nEND PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/CSRMatrix/examples/_Initiate_test_2.md\n\n\nconst _Initiate_test_2_frontMatter = {};\nconst _Initiate_test_2_contentTitle = undefined;\n\n\n\n\n\nconst _Initiate_test_2_toc = [];\nfunction _Initiate_test_2_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n    USE easifemBase\\n    IMPLICIT NONE\\n    TYPE( CSRMatrix_ ) :: obj\\n    TYPE( DOF_ ) :: dofobj\\n    REAL( DFP ), ALLOCATABLE :: m2(:,:)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Initiate degrees of freedom object DOF\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL Initiate( obj=dofobj, tNodes=[4, 2], names=['V', 'P'], &\\n  & spaceCompo=[2, 1], timeCompo=[1,1], storageFMT=FMT_DOF )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Initiate CSRMatrix\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL Initiate( obj, &\\n  & ncol=.tnodes. dofobj, &\\n  & nrow=.tnodes. dofobj, &\\n  & idof=dofobj, jdof=dofobj )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Convert CSRMatrix to dense matrix.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"m2 = obj\\nCALL Display( m2, \\\"test2\\\" )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Cleanup\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"    CALL Deallocate( obj )\\nEND PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction _Initiate_test_2_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_Initiate_test_2_createMdxContent, {\n      ...props\n    })\n  }) : _Initiate_test_2_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/CSRMatrix/Initiate.md\n\n\nconst Initiate_frontMatter = {};\nconst Initiate_contentTitle = 'Initiate';\n\nconst assets = {\n\n};\n\n\n\n\n\n\n\nconst Initiate_toc = [{\n  \"value\": \"Interface\",\n  \"id\": \"interface\",\n  \"level\": 2\n}, ...toc, ..._Initiate_test_2_toc];\nfunction Initiate_createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    header: \"header\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.header, {\n      children: (0,jsx_runtime.jsx)(_components.h1, {\n        id: \"initiate\",\n        children: \"Initiate\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [(0,jsx_runtime.jsx)(_components.code, {\n        children: \"Initiate()\"\n      }), \" method constructs an instance of \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"CSRMatrix_\"\n      }), \".\"]\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"At present, there are 6 interfaces to \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"initiate\"\n      }), \" method. You can see their interface and examples below.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Calling example:\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL Initiate(CSRMatrix_::obj, Integer::ncol, Integer::nrow &\\n  & [, DOF_::idof, DOF_::jdof, CHAR::MatrixProp] )\\n!!\\nCALL Initiate(CSRMatrix_::obj, CSRSparsity_::csr [, CHAR::matrixProp])\\n!!\\nCALL Initiate(CSRMatrix_:: obj, Real::A(:), Integer::IA(:), Integer::JA(:) &\\n  & [, CHAR::MatrixProp])\\n!!\\nCALL Initiate(CSRMatrix_::obj, CSRMatrix_::obj2)\\n!!\\nCALL Initiate(CSRMatrix_::obj, CSRMatrix_::obj2, &\\n  & Integer::i1, Integer::i2, Integer::j1, Integer::j2)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface\",\n      children: \"Interface\"\n    }), \"\\n\", \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Initiate(obj, ncol, nrow, idof, jdof, matrixProp)\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE SUBROUTINE Initiate(obj, ncol, nrow, idof, jdof, matrixProp)\\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\\n    INTEGER(I4B), INTENT(IN) :: ncol\\n    !! number of columns in sparse matrix\\n    INTEGER(I4B), INTENT(IN) :: nrow\\n    !! number of rows in sparse matrix\\n    TYPE(DOF_), OPTIONAL, INTENT(IN) :: idof, jdof\\n    !! degree of freedom object; It contains information like\\n    !! storage format (NODES_FMT, DOF_FMT), and names of physical variable\\n    !! space-time component in each physical variables\\n    !! Total number of nodes used for these physical variables\\n    CHARACTER(LEN=*), OPTIONAL, INTENT(IN) :: MatrixProp\\n    !! Matrix is `SYM`, `UNSYM`\\n  END SUBROUTINE Initiate\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.p, {\n          children: [\"If user has information about the number of rows \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"nrow\"\n          }), \", number of columns \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"ncol\"\n          }), \" of sparse matrix, then the above interface can be used to initiate an instance of \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"CSRMatrix_\"\n          }), \".\"]\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"dof\"\n            }), \" and \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"matrixProp\"\n            }), \" are optional.\", \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n              children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n                children: [(0,jsx_runtime.jsx)(_components.code, {\n                  children: \"dof\"\n                }), \" is DOF object, and it is used to initiate \", (0,jsx_runtime.jsx)(_components.code, {\n                  children: \"obj%csr\"\n                }), \", CSRSparsity field.\"]\n              }), \"\\n\"]\n            }), \"\\n\"]\n          }), \"\\n\"]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ Example 1\",\n        children: (0,jsx_runtime.jsx)(MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example2\",\n        label: \"️܀ Example 2\",\n        children: (0,jsx_runtime.jsx)(_Initiate_test_2_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢\"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"iface2\",\n        label: \"Initiate(obj, csr, matrixProp)\",\n        children: [(0,jsx_runtime.jsxs)(_components.p, {\n          children: [\"We can also initiate the sparse matrix by providing an instance of \", (0,jsx_runtime.jsx)(_components.a, {\n            href: \"../CSRSparsity/CSRSparsity_\",\n            children: \"CSRSparsity\"\n          }), \".\"]\n        }), (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE SUBROUTINE Initiate(obj, csr, matrixProp)\\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\\n    TYPE(CSRSparsity_), INTENT(IN) :: csr\\n    !! number of columns in sparse matrix\\n    !! number of rows in sparse matrix\\n    !! degree of freedom object; It contains information like\\n    !! storage format (NODES_FMT, DOF_FMT), and names of physical variable\\n    !! space-time component in each physical variables\\n    !! Total number of nodes used for these physical variables\\n    CHARACTER(LEN=*), OPTIONAL, INTENT(IN) :: MatrixProp\\n    !! Matrix is `SYM`, `UNSYM`\\n  END SUBROUTINE Initiate\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.p, {\n          children: [\"In the above call, \", (0,jsx_runtime.jsx)(_components.a, {\n            href: \"../CSRSparsity/CSRSparsity_\",\n            children: \"CSRSparsity\"\n          }), \" object, \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"csr\"\n          }), \", should be initiated by the user before passing it to the routine. This is because \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"initiate\"\n          }), \" uses information such as \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"ncol, nrow, nnz\"\n          }), \" stored inside \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"csr\"\n          }), \".\"]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_components.p, {\n          children: \"TODO\"\n        })\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢\"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"iface3\",\n        label: \"Interface 3\",\n        children: [(0,jsx_runtime.jsxs)(_components.p, {\n          children: [\"We can also pass \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"INT::IA(:)\"\n          }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"INT:JA(:)\"\n          }), \" and matrix value \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"REAL::A(:)\"\n          }), \" to \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"Initiate()\"\n          }), \" method for constructing the sparse matrix. The interface is given below.\"]\n        }), (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE SUBROUTINE Initiate(obj, A, IA, JA, MatrixProp)\\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\\n    REAL(DFP), INTENT(IN) :: A(:)\\n    INTEGER(I4B), INTENT(IN) :: IA(:), JA(:)\\n    CHARACTER(LEN=*), OPTIONAL, INTENT(IN) :: MatrixProp\\n  END SUBROUTINE Initiate\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.p, {\n          children: [\"This subroutine will allocate memory for \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"csr\"\n          }), \", which is an instance of \", (0,jsx_runtime.jsx)(_components.a, {\n            href: \"../CSRSparsity/CSRSparsity_\",\n            children: \"CSRSparsity\"\n          }), \".\"]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_components.p, {\n          children: \"TODO\"\n        })\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢\"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"iface4\",\n        label: \"Interface 4\",\n        children: [(0,jsx_runtime.jsx)(_components.p, {\n          children: \"EASIFEM also provides an assignment operator for copying contents of one sparse matrix into another sparse matrix. The syntax is given below.\"\n        }), (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE SUBROUTINE Initiate(obj, obj2)\\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\\n    TYPE(CSRMatrix_), INTENT(IN) :: obj2\\n  END SUBROUTINE Initiate\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.p, {\n          children: [\"The above call is equivalent to \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"obj=obj2\"\n          }), \", and it will also copy \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"obj%csr\"\n          }), \".\"]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_components.p, {\n          children: \"TODO\"\n        })\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢\"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"iface5\",\n        label: \"Interface 5\",\n        children: [(0,jsx_runtime.jsx)(_components.p, {\n          children: \"We can also create a csrmatrix from a subset of another csrmatrix.\"\n        }), (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE SUBROUTINE Initiate(obj, obj2, i1, i2, j1, j2)\\n    TYPE(CSRMatrix_), INTENT(INOUT) :: obj\\n    TYPE(CSRMatrix_), INTENT(IN) :: obj2\\n    INTEGER(I4B), INTENT(IN) :: i1, i2\\n    INTEGER(I4B), INTENT(IN) :: j1, j2\\n  END SUBROUTINE Initiate\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.p, {\n          children: [\"Symbolically the above call is equivalent to \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"obj=obj2(i1:i2, j1:j2)\"\n          }), \", and it will allocate memory for \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"obj%csr\"\n          }), \".\"]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_components.p, {\n          children: \"TODO\"\n        })\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢\"\n      })]\n    })]\n  });\n}\nfunction Initiate_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(Initiate_createMdxContent, {\n      ...props\n    })\n  }) : Initiate_createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./docs/docs-api/CSRMatrix/Initiate.md\n");

/***/ })

}]);