"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkeasifem_docs"] = globalThis["webpackChunkeasifem_docs"] || []).push([["content---docs-api-abstract-mesh-elem-data-ad-0-2c4"],{

/***/ "./docs/docs-api/AbstractMesh/ElemData_.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  assets: () => (/* binding */ assets),\n  contentTitle: () => (/* binding */ contentTitle),\n  \"default\": () => (/* binding */ MDXContent),\n  frontMatter: () => (/* binding */ frontMatter),\n  metadata: () => (/* reexport */ site_docs_docs_api_abstract_mesh_elem_data_md_ad0_namespaceObject),\n  toc: () => (/* binding */ toc)\n});\n\n;// ./.docusaurus/docusaurus-plugin-content-docs/docs-api/site-docs-docs-api-abstract-mesh-elem-data-md-ad0.json\nconst site_docs_docs_api_abstract_mesh_elem_data_md_ad0_namespaceObject = /*#__PURE__*/JSON.parse('{\"id\":\"AbstractMesh/ElemData_\",\"title\":\"ElemData\",\"description\":\"It is a data type for storing the element-data information.\",\"source\":\"@site/docs/docs-api/AbstractMesh/ElemData_.md\",\"sourceDirName\":\"AbstractMesh\",\"slug\":\"/AbstractMesh/ElemData_\",\"permalink\":\"/docs-api/AbstractMesh/ElemData_\",\"draft\":false,\"unlisted\":false,\"editUrl\":\"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/AbstractMesh/ElemData_.md\",\"tags\":[],\"version\":\"current\",\"lastUpdatedAt\":1539502055000,\"sidebarPosition\":3,\"frontMatter\":{\"sidebar_position\":3},\"sidebar\":\"tutorialSidebar\",\"previous\":{\"title\":\"Structure\",\"permalink\":\"/docs-api/AbstractMesh/AbstractMesh_\"},\"next\":{\"title\":\"NodeData\",\"permalink\":\"/docs-api/AbstractMesh/NodeData_\"}}');\n// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n// EXTERNAL MODULE: ./node_modules/@mdx-js/react/lib/index.js\nvar lib = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n;// ./docs/docs-api/AbstractMesh/ElemData_.md\n\n\nconst frontMatter = {\n\tsidebar_position: 3\n};\nconst contentTitle = 'ElemData';\n\nconst assets = {\n\n};\n\n\n\nconst toc = [{\n  \"value\": \"Structure\",\n  \"id\": \"structure\",\n  \"level\": 2\n}, {\n  \"value\": \"<code>isActive</code>\",\n  \"id\": \"isactive\",\n  \"level\": 3\n}, {\n  \"value\": \"<code>globalElements</code>\",\n  \"id\": \"globalelements\",\n  \"level\": 3\n}, {\n  \"value\": \"<code>localElemNum</code>\",\n  \"id\": \"localelemnum\",\n  \"level\": 3\n}, {\n  \"value\": \"<code>elementType</code>\",\n  \"id\": \"elementtype\",\n  \"level\": 3\n}, {\n  \"value\": \"<code>name</code>\",\n  \"id\": \"name\",\n  \"level\": 3\n}, {\n  \"value\": \"<code>meshID</code>\",\n  \"id\": \"meshid\",\n  \"level\": 3\n}, {\n  \"value\": \"<code>material</code>\",\n  \"id\": \"material\",\n  \"level\": 3\n}, {\n  \"value\": \"<code>globalNodes</code>\",\n  \"id\": \"globalnodes\",\n  \"level\": 3\n}, {\n  \"value\": \"<code>globalEdges</code> and <code>edgeOrient</code>\",\n  \"id\": \"globaledges-and-edgeorient\",\n  \"level\": 3\n}, {\n  \"value\": \"<code>globalFaces</code> and <code>faceOrient</code>\",\n  \"id\": \"globalfaces-and-faceorient\",\n  \"level\": 3\n}, {\n  \"value\": \"<code>globalElements</code>\",\n  \"id\": \"globalelements-1\",\n  \"level\": 3\n}, {\n  \"value\": \"<code>boundaryData</code>\",\n  \"id\": \"boundarydata\",\n  \"level\": 3\n}, {\n  \"value\": \"ElemdataType\",\n  \"id\": \"elemdatatype\",\n  \"level\": 2\n}, {\n  \"value\": \"Elemdata_Copy\",\n  \"id\": \"elemdata_copy\",\n  \"level\": 2\n}, {\n  \"value\": \"Elemdata_Display\",\n  \"id\": \"elemdata_display\",\n  \"level\": 2\n}, {\n  \"value\": \"Elemdata_ElemType2String\",\n  \"id\": \"elemdata_elemtype2string\",\n  \"level\": 2\n}, {\n  \"value\": \"Elemdata_Deallocate\",\n  \"id\": \"elemdata_deallocate\",\n  \"level\": 2\n}, {\n  \"value\": \"Elemdata_SetTotalMaterial\",\n  \"id\": \"elemdata_settotalmaterial\",\n  \"level\": 2\n}, {\n  \"value\": \"Elemdata_Set\",\n  \"id\": \"elemdata_set\",\n  \"level\": 2\n}, {\n  \"value\": \"Elemdata_Pointer\",\n  \"id\": \"elemdata_pointer\",\n  \"level\": 2\n}, {\n  \"value\": \"Elemdata_lt\",\n  \"id\": \"elemdata_lt\",\n  \"level\": 2\n}, {\n  \"value\": \"Elemdata_eq\",\n  \"id\": \"elemdata_eq\",\n  \"level\": 2\n}, {\n  \"value\": \"Elemdata_SetID\",\n  \"id\": \"elemdata_setid\",\n  \"level\": 2\n}, {\n  \"value\": \"Elemdata_GetGlobalFaceCon\",\n  \"id\": \"elemdata_getglobalfacecon\",\n  \"level\": 2\n}, {\n  \"value\": \"Elemdata_GetConnectivity\",\n  \"id\": \"elemdata_getconnectivity\",\n  \"level\": 2\n}, {\n  \"value\": \"Elemdata_GetConnectivity2\",\n  \"id\": \"elemdata_getconnectivity2\",\n  \"level\": 2\n}, {\n  \"value\": \"Elemdata_GetTotalEntities\",\n  \"id\": \"elemdata_gettotalentities\",\n  \"level\": 2\n}, {\n  \"value\": \"Elemdata_GetVertex\",\n  \"id\": \"elemdata_getvertex\",\n  \"level\": 2\n}, {\n  \"value\": \"Elemdata_GetEdge\",\n  \"id\": \"elemdata_getedge\",\n  \"level\": 2\n}, {\n  \"value\": \"Elemdata_GetFace\",\n  \"id\": \"elemdata_getface\",\n  \"level\": 2\n}, {\n  \"value\": \"Elemdata_GetCell\",\n  \"id\": \"elemdata_getcell\",\n  \"level\": 2\n}, {\n  \"value\": \"Elemdata_GetTotalEdgeDOF\",\n  \"id\": \"elemdata_gettotaledgedof\",\n  \"level\": 2\n}, {\n  \"value\": \"Elemdata_GetTotalFaceDOF\",\n  \"id\": \"elemdata_gettotalfacedof\",\n  \"level\": 2\n}, {\n  \"value\": \"Elemdata_GetTotalCellDOF\",\n  \"id\": \"elemdata_gettotalcelldof\",\n  \"level\": 2\n}, {\n  \"value\": \"Elemdata_GetElementToElements1\",\n  \"id\": \"elemdata_getelementtoelements1\",\n  \"level\": 2\n}, {\n  \"value\": \"Elemdata_GetElementToElements2\",\n  \"id\": \"elemdata_getelementtoelements2\",\n  \"level\": 2\n}, {\n  \"value\": \"Elemdata_GetEdgeConnectivity\",\n  \"id\": \"elemdata_getedgeconnectivity\",\n  \"level\": 2\n}, {\n  \"value\": \"Elemdata_isActive\",\n  \"id\": \"elemdata_isactive\",\n  \"level\": 2\n}, {\n  \"value\": \"Elemdata_globalElemNum\",\n  \"id\": \"elemdata_globalelemnum\",\n  \"level\": 2\n}, {\n  \"value\": \"Elemdata_localElemNum\",\n  \"id\": \"elemdata_localelemnum\",\n  \"level\": 2\n}, {\n  \"value\": \"Elemdata_name\",\n  \"id\": \"elemdata_name\",\n  \"level\": 2\n}, {\n  \"value\": \"Elemdata_topoName\",\n  \"id\": \"elemdata_toponame\",\n  \"level\": 2\n}, {\n  \"value\": \"Elemdata_topoIndx\",\n  \"id\": \"elemdata_topoindx\",\n  \"level\": 2\n}, {\n  \"value\": \"Elemdata_meshid\",\n  \"id\": \"elemdata_meshid\",\n  \"level\": 2\n}, {\n  \"value\": \"Elemdata_GetTotalMaterial\",\n  \"id\": \"elemdata_gettotalmaterial\",\n  \"level\": 2\n}, {\n  \"value\": \"Elemdata_GetTotalGlobalNodes\",\n  \"id\": \"elemdata_gettotalglobalnodes\",\n  \"level\": 2\n}, {\n  \"value\": \"Elemdata_GetTotalGlobalEdges\",\n  \"id\": \"elemdata_gettotalglobaledges\",\n  \"level\": 2\n}, {\n  \"value\": \"Elemdata_GetTotalEdgeOrient\",\n  \"id\": \"elemdata_gettotaledgeorient\",\n  \"level\": 2\n}, {\n  \"value\": \"Elemdata_GetTotalGlobalFaces\",\n  \"id\": \"elemdata_gettotalglobalfaces\",\n  \"level\": 2\n}, {\n  \"value\": \"Elemdata_GetTotalFaceOrient\",\n  \"id\": \"elemdata_gettotalfaceorient\",\n  \"level\": 2\n}, {\n  \"value\": \"Elemdata_GetTotalGlobalElements\",\n  \"id\": \"elemdata_gettotalglobalelements\",\n  \"level\": 2\n}, {\n  \"value\": \"Elemdata_GetTotalBoundaryData\",\n  \"id\": \"elemdata_gettotalboundarydata\",\n  \"level\": 2\n}, {\n  \"value\": \"Elemdata_GetMaterial\",\n  \"id\": \"elemdata_getmaterial\",\n  \"level\": 2\n}, {\n  \"value\": \"Elemdata_GetGlobalNodes\",\n  \"id\": \"elemdata_getglobalnodes\",\n  \"level\": 2\n}, {\n  \"value\": \"Elemdata_GetGlobalEdges\",\n  \"id\": \"elemdata_getglobaledges\",\n  \"level\": 2\n}, {\n  \"value\": \"Elemdata_GetGlobalFaces\",\n  \"id\": \"elemdata_getglobalfaces\",\n  \"level\": 2\n}, {\n  \"value\": \"Elemdata_GetGlobalFaceNumber\",\n  \"id\": \"elemdata_getglobalfacenumber\",\n  \"level\": 2\n}, {\n  \"value\": \"Elemdata_GetGlobalEdgeNumber\",\n  \"id\": \"elemdata_getglobaledgenumber\",\n  \"level\": 2\n}, {\n  \"value\": \"Elemdata_GetGlobalElements\",\n  \"id\": \"elemdata_getglobalelements\",\n  \"level\": 2\n}, {\n  \"value\": \"Elemdata_GetBoundaryData\",\n  \"id\": \"elemdata_getboundarydata\",\n  \"level\": 2\n}, {\n  \"value\": \"Elemdata_GetGlobalNodesPointer\",\n  \"id\": \"elemdata_getglobalnodespointer\",\n  \"level\": 2\n}, {\n  \"value\": \"Elemdata_GetEdgeOrient\",\n  \"id\": \"elemdata_getedgeorient\",\n  \"level\": 2\n}, {\n  \"value\": \"Elemdata_GetFaceOrient\",\n  \"id\": \"elemdata_getfaceorient\",\n  \"level\": 2\n}, {\n  \"value\": \"Elemdata_GetOrientation\",\n  \"id\": \"elemdata_getorientation\",\n  \"level\": 2\n}, {\n  \"value\": \"Elemdata_FindFace\",\n  \"id\": \"elemdata_findface\",\n  \"level\": 2\n}, {\n  \"value\": \"Elemdata_FindEdge\",\n  \"id\": \"elemdata_findedge\",\n  \"level\": 2\n}, {\n  \"value\": \"Elemdata_IsBoundaryElement\",\n  \"id\": \"elemdata_isboundaryelement\",\n  \"level\": 2\n}, {\n  \"value\": \"Elemdata_Order\",\n  \"id\": \"elemdata_order\",\n  \"level\": 2\n}];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    admonition: \"admonition\",\n    annotation: \"annotation\",\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    h3: \"h3\",\n    header: \"header\",\n    li: \"li\",\n    math: \"math\",\n    mo: \"mo\",\n    mrow: \"mrow\",\n    p: \"p\",\n    pre: \"pre\",\n    semantics: \"semantics\",\n    span: \"span\",\n    ul: \"ul\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.header, {\n      children: (0,jsx_runtime.jsx)(_components.h1, {\n        id: \"elemdata\",\n        children: \"ElemData\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"It is a data type for storing the element-data information.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"structure\",\n      children: \"Structure\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"TYPE :: ElemData_\\n  LOGICAL(LGT) :: isActive = .TRUE.\\n    !! Is element in active stage\\n  INTEGER(I4B) :: globalElemNum = 0_I4B\\n    !! global element number\\n    !! cell connectivity number\\n  INTEGER(I4B) :: localElemNum = 0_I4B\\n    !! local element number\\n  INTEGER(I4B) :: elementType = INTERNAL_ELEMENT\\n    !! BOUNDARY_ELEMENT: If the element contqains the boundary node\\n    !! it will be called the boundary element\\n    !! INTERNAL_ELEMENT: If the element does not contain the boundary node\\n    !! then it will be called the internal element\\n  INTEGER(I4B) :: name = 0\\n    !! This is name of the element\\n    !! It can be Triangle, Triangle3, Triangle6, etc.\\n    !! Quadrangle,\\n  INTEGER(I4B) :: meshID = 0\\n    !! ID of mesh to which the element belong\\n    !! This is a gmsh concept\\n  INTEGER(INT8), ALLOCATABLE :: material(:)\\n    !! materials mapped to the mesh\\n    !! material(1) is the material-id (type of material) of medium 1\\n    !! material(2) is the material-id (type of material) of medium 2\\n    !!\\n    !! ...\\n    !!\\n    !! For example, soil is a porous medium with n = 1,\\n    !! fluid is a medium with n =2\\n    !! then material(1) denotes the type of soil => clay, sand, silt\\n    !! and material(2) denotes the type of fluid => water, oil, air\\n  INTEGER(I4B), ALLOCATABLE :: globalNodes(:)\\n    !! nodes contained in the element, connectivity\\n    !! Vertex connectivity\\n  INTEGER(I4B), ALLOCATABLE :: globalEdges(:)\\n    !! Edge connectivity\\n  INTEGER(INT8), ALLOCATABLE :: edgeOrient(:)\\n    !! Orientation of edge\\n  INTEGER(I4B), ALLOCATABLE :: globalFaces(:)\\n    !! Face connectivity\\n  INTEGER(INT8), ALLOCATABLE :: faceOrient(:, :)\\n    !! Orientation of face\\n  INTEGER(I4B), ALLOCATABLE :: globalElements(:)\\n    !! Contains the information about the element surrounding an element\\n    !! Lets us say that `globalElem1`, `globalElem2`, `globalElem3`\\n    !! surrounds a local element ielem (its global element number is\\n    !! globalElem), then\\n    !! - globalElements( [1,2,3] ) contains globalElem1, pFace, nFace\\n    !! - globalElements( [4,5,6] ) contains globalElem2, pFace, nFace\\n    !! - globalElements( [7,8,9] ) contains globalElem3, pFace, nFace.\\n    !! Here,\\n    !! - pFace is the local facet number of parent element\\n    !! globalElem (ielem) which is connected to the nFace of the neighbor\\n    !! element\\n    !! All element numbers are global element number\\n  INTEGER(I4B), ALLOCATABLE :: boundaryData(:)\\n    !! If `iel` is boundary element, then boudnaryData contains\\n    !! the local facet number of iel which concides with the\\n    !! mesh boundary.\\n    !! If an element contains the boundary node then it is considered\\n    !! as a boundary element.\\n    !! It may happen that a boundary element has no boundary face, in which\\n    !! case boundaryData will have zero size\\nEND TYPE ElemData_\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"isactive\",\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        children: \"isActive\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"If the element is active or not.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"globalelements\",\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        children: \"globalElements\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [(0,jsx_runtime.jsx)(_components.code, {\n        children: \"globalElemNum\"\n      }), \" global element number, this number is given by the mesh generator.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"localelemnum\",\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        children: \"localElemNum\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [(0,jsx_runtime.jsx)(_components.code, {\n        children: \"localElemNum\"\n      }), \" local element number, This number is decided internally. It represents the internal storage address.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"elementtype\",\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        children: \"elementType\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [(0,jsx_runtime.jsx)(_components.code, {\n        children: \"elementType\"\n      }), \" has following meaning as of 2024-04-14\"]\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"BOUNDARY_ELEMENT\"\n        }), \": If the element contains a facet which coincides with the boundary then, then it will be called the boundary element\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"INTERNAL_ELEMENT\"\n        }), \": Otherwise the element is classified as the internal element.\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"name\",\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        children: \"name\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Name of the element. You can find more information about this on following pages:\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: (0,jsx_runtime.jsx)(_components.a, {\n          href: \"/docs-api/GlobalData/\",\n          children: \"GlobalData\"\n        })\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: (0,jsx_runtime.jsx)(_components.a, {\n          href: \"../ReferenceElement\",\n          children: \"ReferenceElement\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"meshid\",\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        children: \"meshID\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"It represent the mesh region. This parameter can be used to assign material properties, boundary conditions, etc to a region of the mesh.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"material\",\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        children: \"material\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [(0,jsx_runtime.jsx)(_components.code, {\n        children: \"material\"\n      }), \" maps the material to the mesh, for example\"]\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"material(1)\"\n        }), \" is the material-id of medium 1 (here 1 may denote soil)\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"material(2)\"\n        }), \" is the material-id of medium 2 (here, 2 may denote water)\"]\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: (0,jsx_runtime.jsxs)(_components.span, {\n          className: \"katex\",\n          children: [(0,jsx_runtime.jsx)(_components.span, {\n            className: \"katex-mathml\",\n            children: (0,jsx_runtime.jsx)(_components.math, {\n              xmlns: \"http://www.w3.org/1998/Math/MathML\",\n              children: (0,jsx_runtime.jsxs)(_components.semantics, {\n                children: [(0,jsx_runtime.jsx)(_components.mrow, {\n                  children: (0,jsx_runtime.jsx)(_components.mo, {\n                    children: \"⋯\"\n                  })\n                }), (0,jsx_runtime.jsx)(_components.annotation, {\n                  encoding: \"application/x-tex\",\n                  children: \"\\\\cdots\"\n                })]\n              })\n            })\n          }), (0,jsx_runtime.jsx)(_components.span, {\n            className: \"katex-html\",\n            \"aria-hidden\": \"true\",\n            children: (0,jsx_runtime.jsxs)(_components.span, {\n              className: \"base\",\n              children: [(0,jsx_runtime.jsx)(_components.span, {\n                className: \"strut\",\n                style: {\n                  height: \"0.313em\"\n                }\n              }), (0,jsx_runtime.jsx)(_components.span, {\n                className: \"minner\",\n                children: \"⋯\"\n              })]\n            })\n          })]\n        })\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"material(n)\"\n        }), \" is the material-id of medium n\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"For example, soil is a porous medium with material id = 1, fluid is a medium with id=2. Then, material(1) denotes the type of soil, that is, clay, sand, and silt. Also, material(2) denotes the type of fluid, water, oil, air.\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"The size of \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"material\"\n      }), \" denotes the total number of materials assigned to the element.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"globalnodes\",\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        children: \"globalNodes\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [(0,jsx_runtime.jsx)(_components.code, {\n        children: \"globalNodes\"\n      }), \" nodes contained in the element, i.e., vertex connectivity.\"]\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.h3, {\n      id: \"globaledges-and-edgeorient\",\n      children: [(0,jsx_runtime.jsx)(_components.code, {\n        children: \"globalEdges\"\n      }), \" and \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"edgeOrient\"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"edge connectivity and edge orientation.\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.h3, {\n      id: \"globalfaces-and-faceorient\",\n      children: [(0,jsx_runtime.jsx)(_components.code, {\n        children: \"globalFaces\"\n      }), \" and \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"faceOrient\"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"face connectivity and face orientation.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"globalelements-1\",\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        children: \"globalElements\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [(0,jsx_runtime.jsx)(_components.code, {\n        children: \"globalElements\"\n      }), \" contains the information about the elements surrounding an element. This is explained below:\"]\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"Let us say that \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"globalElem1\"\n      }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"globalElem2\"\n      }), \", and \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"globalElem3\"\n      }), \" surround a local element \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"ielem\"\n      }), \" (its global element number is \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"globalElem\"\n      }), \"), then\"]\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"globalElements( [1,2,3] )\"\n        }), \" contains \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"globalElem1\"\n        }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"pFace\"\n        }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"nFace\"\n        })]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"globalElements( [4,5,6] )\"\n        }), \" contains \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"globalElem2\"\n        }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"pFace\"\n        }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"nFace\"\n        })]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"globalElements( [7,8,9] )\"\n        }), \" contains \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"globalElem3\"\n        }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"pFace\"\n        }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"nFace\"\n        }), \".\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"pFace\"\n        }), \" is the local facet number of parent element\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"nFace\"\n        }), \" is the local facet number of the neighbor\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"Here, \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"pFace\"\n      }), \" is the local facet number of parent element, (i.e., \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"globalElem (ielem)\"\n      }), \"). The \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"nFace\"\n      }), \" (local-facet-number) of the neighboring element.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"boundarydata\",\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        children: \"boundaryData\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"It represents the information about the boundary element. It should be used only when the element is a boundary element.\"\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"If an element \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"iel\"\n        }), \" is a boundary element, then \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"boundaryData\"\n        }), \" contains the local facet numbers of \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"iel\"\n        }), \" which coincides with the mesh boundary. It may happen that a boundary element has no boundary face (but only a single boundary node), in this case \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"boundaryData\"\n        }), \" will have zero size.\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"In addition we have defined \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"ElemdataPointer_\"\n      }), \" which is a pointer to \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"Elemdata_\"\n      }), \" type. The pointer is defined as follows:\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"TYPE ElemdataPointer_\\n  CLASS(Elemdata_), POINTER :: ptr => NULL()\\nEND TYPE ElemdataPointer_\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"elemdatatype\",\n      children: \"ElemdataType\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"The \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"ElemdataType_\"\n      }), \" is a derived type which contains the information about the element data. The structure of the \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"ElemdataType_\"\n      }), \" is as follows:\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"TYPE ElemdataType_\\n  INTEGER(I4B) :: internal = INTERNAL_ELEMENT\\n  INTEGER(I4B) :: boundary = BOUNDARY_ELEMENT\\n  INTEGER(I4B) :: domainBoundary = DOMAIN_BOUNDARY_ELEMENT\\n  INTEGER(I4B) :: ghost = GHOST_ELEMENT\\nEND TYPE ElemdataType_\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.admonition, {\n      type: \"info\",\n      children: (0,jsx_runtime.jsxs)(_components.p, {\n        children: [\"The \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"ElemdataType_\"\n        }), \" is private but you can use its instance called \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"TypeElem\"\n        }), \". For example to get the field \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"internal\"\n        }), \" you should use \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"TypeElem%internal\"\n        }), \".\"]\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This module exposes following methods.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"elemdata_copy\",\n      children: \"Elemdata_Copy\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Copy obj2 to obj1\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"SUBROUTINE Elemdata_Copy(obj1, obj2)\\n  TYPE(Elemdata_), INTENT(INOUT) :: obj1\\n  TYPE(Elemdata_), INTENT(IN) :: obj2\\nEND SUBROUTINE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"elemdata_display\",\n      children: \"Elemdata_Display\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Display the element data information.\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"SUBROUTINE Elemdata_Display(obj)\\n  TYPE(Elemdata_), INTENT(IN) :: obj\\nEND SUBROUTINE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"elemdata_elemtype2string\",\n      children: \"Elemdata_ElemType2String\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Convert the element type to string.\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"FUNCTION Elemdata_ElemType2String(elementType) RESULT(ans)\\n  INTEGER(I4B), INTENT(IN) :: elementType\\n  CHARACTER(:), ALLOCATABLE :: ans\\nEND FUNCTION\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"elemdata_deallocate\",\n      children: \"Elemdata_Deallocate\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Deallocate the element data.\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"SUBROUTINE Elemdata_Deallocate(obj)\\n  TYPE(Elemdata_), INTENT(INOUT) :: obj\\nEND SUBROUTINE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"elemdata_settotalmaterial\",\n      children: \"Elemdata_SetTotalMaterial\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Set the total number of materials.\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"SUBROUTINE Elemdata_SetTotalMaterial(obj, n)\\n  TYPE(Elemdata_), INTENT(INOUT) :: obj\\n  INTEGER(I4B), INTENT(IN) :: n\\nEND SUBROUTINE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"elemdata_set\",\n      children: \"Elemdata_Set\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Set the element data.\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PURE SUBROUTINE Elemdata_Set(obj, globalElemNum, localElemNum, &\\n        elementType, globalNodes, globalElements, boundaryData, globalEdges, &\\n   globalFaces, name, topoName, isActive, meshID, medium, material, materials)\\n  ! obj%elementData(ii)%globalElemNum = elemNumber(ii)\\n  ! obj%elementData(ii)%localElemNum = ii\\n  ! obj%elementData(ii)%globalNodes = connectivity(:, ii)\\n  TYPE(Elemdata_), INTENT(INOUT) :: obj\\n  !! element data object\\n  INTEGER(I4B), OPTIONAL, INTENT(IN) :: globalElemNum\\n  !! global element number\\n  INTEGER(I4B), OPTIONAL, INTENT(IN) :: localElemNum\\n  !! local element number\\n  INTEGER(I4B), OPTIONAL, INTENT(IN) :: elementType\\n  !! element type: internal element, boundary element, etc.\\n  INTEGER(I4B), OPTIONAL, INTENT(IN) :: globalNodes(:)\\n  !! vertex connectivity\\n  INTEGER(I4B), OPTIONAL, INTENT(IN) :: globalElements(:)\\n  !! element to element mapping\\n  INTEGER(I4B), OPTIONAL, INTENT(IN) :: boundaryData(:)\\n  !! boundary data\\n  INTEGER(I4B), OPTIONAL, INTENT(IN) :: globalEdges(:)\\n  !! edge connectivity\\n  INTEGER(I4B), OPTIONAL, INTENT(IN) :: globalFaces(:)\\n  !! gace connectivity\\n  INTEGER(I4B), OPTIONAL, INTENT(IN) :: name\\n  !! Type of element, triangle, triangle3, Quadrangle4, etc\\n  INTEGER(I4B), OPTIONAL, INTENT(IN) :: topoName\\n  !! topology  name of the element\\n  LOGICAL(LGT), OPTIONAL, INTENT(IN) :: isActive\\n  !! is element active\\n  INTEGER(I4B), OPTIONAL, INTENT(IN) :: meshID\\n  INTEGER(I4B), OPTIONAL, INTENT(IN) :: medium\\n  !! medium id like soil,water, etc\\n  INTEGER(I4B), OPTIONAL, INTENT(IN) :: material\\n  !! material like soil1, soil2, wate1, water2, etc\\n  INTEGER(I4B), OPTIONAL, INTENT(IN) :: materials(:)\\n  !! materials\\nEND SUBROUTINE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"elemdata_pointer\",\n      children: \"Elemdata_Pointer\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Create a pointer to the element data.\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"FUNCTION Elemdata_Pointer() RESULT(ans)\\n  CLASS(Elemdata_), POINTER :: ans\\n  ALLOCATE (Elemdata_ :: ans)\\nEND FUNCTION Elemdata_Pointer\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"elemdata_lt\",\n      children: \"Elemdata_lt\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Compare two element data objects. Less than operator.\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"FUNCTION Elemdata_lt(obj, obj2) RESULT(ans)\\n  TYPE(Elemdata_), INTENT(IN) :: obj\\n  TYPE(Elemdata_), INTENT(IN) :: obj2\\n  LOGICAL(LGT) :: ans\\n  ans = obj%globalElemNum .GT. obj2%globalElemNum\\nEND FUNCTION Elemdata_lt\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"elemdata_eq\",\n      children: \"Elemdata_eq\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Compare two element data objects. Equal operator.\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"FUNCTION Elemdata_eq(obj, obj2) RESULT(ans)\\n  TYPE(Elemdata_), INTENT(IN) :: obj\\n  TYPE(Elemdata_), INTENT(IN) :: obj2\\n  LOGICAL(LGT) :: ans\\n  ans = obj%globalElemNum .EQ. obj2%globalElemNum\\nEND FUNCTION Elemdata_eq\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"elemdata_setid\",\n      children: \"Elemdata_SetID\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Set the element ID.\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"SUBROUTINE Elemdata_SetID(obj, id)\\n  TYPE(Elemdata_), INTENT(INOUT) :: obj\\n  INTEGER(I4B), INTENT(IN) :: id\\nEND SUBROUTINE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"elemdata_getglobalfacecon\",\n      children: \"Elemdata_GetGlobalFaceCon\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Get the global face connectivity. Returns the vertex connectivity of global face of elements.\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"SUBROUTINE Elemdata_GetGlobalFaceCon(obj, globalFaceCon, localFaceCon)\\n  TYPE(Elemdata_), INTENT(INOUT) :: obj\\n  INTEGER(I4B), INTENT(INOUT) :: globalFaceCon(:, :)\\n  INTEGER(I4B), OPTIONAL, INTENT(INOUT) :: localFaceCon(:, :)\\nEND SUBROUTINE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"elemdata_getconnectivity\",\n      children: \"Elemdata_GetConnectivity\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This subroutine returns the connectivity of the element.\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"tsize is the size of data written in con\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"con is the connectivity array, it should be allocated\"\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"opt is the type of connectivity, following options are allowed\", \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"\\\"V\\\" or \\\"v\\\" : vertex connectivity\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"\\\"E\\\" or \\\"e\\\" : edge connectivity\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"\\\"F\\\" or \\\"f\\\" : face connectivity\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"\\\"C\\\" or \\\"c\\\" : cell connectivity\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"\\\"A\\\" or \\\"a\\\" : all connectivity\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"SUBROUTINE Elemdata_GetConnectivity(obj, con, tsize, opt)\\n  TYPE(Elemdata_), INTENT(IN) :: obj\\n  INTEGER(I4B), INTENT(INOUT) :: con(:)\\n  INTEGER(I4B), INTENT(OUT) :: tsize\\n  CHARACTER(*), INTENT(IN), OPTIONAL :: opt\\nEND SUBROUTINE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"elemdata_getconnectivity2\",\n      children: \"Elemdata_GetConnectivity2\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This subroutine returns the connectivity of the element.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"SUBROUTINE Elemdata_GetConnectivity2(obj, cellCon, faceCon, edgeCon, nodeCon, &\\n                                     tCellCon, tFaceCon, tEdgeCon, tNodeCon)\\n  TYPE(Elemdata_), INTENT(IN) :: obj\\n  INTEGER(I4B), INTENT(INOUT) :: cellCon(:)\\n  !! cell connectivity\\n  INTEGER(I4B), INTENT(INOUT) :: faceCon(:)\\n  !! face connectivity\\n  INTEGER(I4B), INTENT(INOUT) :: edgeCon(:)\\n  !! edge connectivity\\n  INTEGER(I4B), INTENT(INOUT) :: nodeCon(:)\\n  !! node connectivity\\n  INTEGER(I4B), INTENT(OUT) :: tCellCon\\n  !! total data written in cellCon\\n  INTEGER(I4B), INTENT(OUT) :: tFaceCon\\n  !! total data written in faceCon\\n  INTEGER(I4B), INTENT(OUT) :: tEdgeCon\\n  !! total data written in edgeCon\\n  INTEGER(I4B), INTENT(OUT) :: tNodeCon\\n  !! total data written in nodeCon\\nEND SUBROUTINE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"elemdata_gettotalentities\",\n      children: \"Elemdata_GetTotalEntities\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This function returns the total number of vertex, edge, face and cell entities in the element.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"FUNCTION Elemdata_GetTotalEntities(obj) RESULT(ans)\\n  TYPE(Elemdata_), INTENT(in) :: obj\\n  INTEGER(I4B) :: ans(4)\\n  ans(1) = SIZE(obj%globalNodes)\\n  ans(2) = SIZE(obj%globalEdges)\\n  ans(3) = SIZE(obj%globalFaces)\\n  ans(4) = 1\\nEND FUNCTION Elemdata_GetTotalEntities\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"elemdata_getvertex\",\n      children: \"Elemdata_GetVertex\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This function returns the global vertex number of a given local vertex number.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"FUNCTION Elemdata_GetVertex(obj, ii) RESULT(ans)\\n  TYPE(Elemdata_), INTENT(in) :: obj\\n  INTEGER(I4B), INTENT(in) :: ii\\n  !! local vertex number\\n  INTEGER(I4B) :: ans\\n  !! global vertex number\\n  \\n  ans = obj%globalNodes(ii)\\nEND FUNCTION Elemdata_GetVertex\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"elemdata_getedge\",\n      children: \"Elemdata_GetEdge\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This function returns the global edge number of a given local edge number.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"FUNCTION Elemdata_GetEdge(obj, ii) RESULT(ans)\\n  TYPE(Elemdata_), INTENT(in) :: obj\\n  INTEGER(I4B), INTENT(in) :: ii\\n  !! local edge number\\n  INTEGER(I4B) :: ans\\n  !! global edge number\\n  ans = obj%globalEdges(ii)\\nEND FUNCTION Elemdata_GetEdge\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"elemdata_getface\",\n      children: \"Elemdata_GetFace\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This function returns the global face number of a given local face number.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"FUNCTION Elemdata_GetFace(obj, ii) RESULT(ans)\\n  TYPE(Elemdata_), INTENT(in) :: obj\\n  INTEGER(I4B), INTENT(in) :: ii\\n  !! local face number\\n  INTEGER(I4B) :: ans\\n  !! global face number\\n  ans = obj%globalFaces(ii)\\nEND FUNCTION Elemdata_GetFace\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"elemdata_getcell\",\n      children: \"Elemdata_GetCell\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This function returns the global or local cell number of the element.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"FUNCTION Elemdata_GetCell(obj, islocal) RESULT(ans)\\n  TYPE(Elemdata_), INTENT(in) :: obj\\n  LOGICAL(LGT), INTENT(in) :: islocal\\n  !! If true then local cell number is returned\\n  INTEGER(I4B) :: ans\\n  !! global or local element number (cell number)\\n\\n  IF (islocal) THEN\\n    ans = obj%localElemNum\\n  ELSE\\n    ans = obj%globalElemNum\\n  END IF\\nEND FUNCTION Elemdata_GetCell\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"elemdata_gettotaledgedof\",\n      children: \"Elemdata_GetTotalEdgeDOF\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This function returns the total number of edge dof on the edge of an element. It does not return the edge dof on the boundary of the element.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"FUNCTION Elemdata_GetTotalEdgeDOF(obj, ii, order, baseContinuity, &\\n                                  baseInterpolation) RESULT(ans)\\n  TYPE(Elemdata_), INTENT(in) :: obj\\n  !! Element data object\\n  INTEGER(I4B), INTENT(IN) :: ii\\n  !! Local edge number\\n  INTEGER(I4B), INTENT(IN) :: order\\n  !! Order on the edge\\n  CHARACTER(*), INTENT(IN) :: baseContinuity\\n  !! base continuity: H1, HDiv, HCurl\\n  CHARACTER(*), INTENT(IN) :: baseInterpolation\\n  !! base interpolation type\\n  INTEGER(I4B) :: ans\\n  !! Total number of dof on edge\\n  ans = MAX(order - 2, 0_I4B)\\nEND FUNCTION Elemdata_GetTotalEdgeDOF\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"elemdata_gettotalfacedof\",\n      children: \"Elemdata_GetTotalFaceDOF\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This function returns the total number of face dofs on the face of an element.\\nAll dofs are internal to face, that is edge and vertex dof are not included.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"FUNCTION Elemdata_GetTotalFaceDOF(obj, ii, order, baseContinuity, &\\n                                  baseInterpolation) RESULT(ans)\\n  TYPE(Elemdata_), INTENT(in) :: obj\\n  !! Element data object\\n  INTEGER(I4B), INTENT(IN) :: ii\\n  !! Local face number\\n  INTEGER(I4B), INTENT(IN) :: order\\n  !! Order on the edge\\n  CHARACTER(*), INTENT(IN) :: baseContinuity\\n  !! base continuity: H1, HDiv, HCurl\\n  CHARACTER(*), INTENT(IN) :: baseInterpolation\\n  !! base interpolation type\\n  INTEGER(I4B) :: ans\\n  !! Total number of dof on edge\\nEND FUNCTION Elemdata_GetTotalFaceDOF\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"elemdata_gettotalcelldof\",\n      children: \"Elemdata_GetTotalCellDOF\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This function returns the total number of cell dofs on the cell of an element. All dofs are internal to cell, that is edge and vertex dof are not included.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"FUNCTION Elemdata_GetTotalCellDOF(obj, order, baseContinuity, &\\n                                  baseInterpolation) RESULT(ans)\\n  TYPE(Elemdata_), INTENT(in) :: obj\\n  !! Element data object\\n  INTEGER(I4B), INTENT(IN) :: order\\n  !! Order on the edge\\n  CHARACTER(*), INTENT(IN) :: baseContinuity\\n  !! base continuity: H1, HDiv, HCurl\\n  CHARACTER(*), INTENT(IN) :: baseInterpolation\\n  !! base interpolation type\\n  INTEGER(I4B) :: ans\\n  !! Total number of dof on edge\\nEND FUNCTION Elemdata_GetTotalCellDOF\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"elemdata_getelementtoelements1\",\n      children: \"Elemdata_GetElementToElements1\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This subroutine returns the global element number of elements which surrounds the element.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"SUBROUTINE Elemdata_GetElementToElements1(obj, ans, tsize)\\n  TYPE(Elemdata_), INTENT(IN) :: obj\\n  INTEGER(I4B), INTENT(INOUT) :: ans(:)\\n  !! Element to element, it should be allocated by user before calling\\n  INTEGER(I4B), INTENT(OUT) :: tsize\\n  !! The size of data written to ans\\nEND SUBROUTINE Elemdata_GetElementToElements1\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"elemdata_getelementtoelements2\",\n      children: \"Elemdata_GetElementToElements2\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Get the element to element mapping including the local face number of the element and its neighbor.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"SUBROUTINE Elemdata_GetElementToElements2(obj, ans, nrow, ncol, &\\n                                          includeBoundaryElement)\\n  TYPE(Elemdata_), INTENT(IN) :: obj\\n  INTEGER(I4B), INTENT(INOUT) :: ans(:, :)\\n  !! Element to element, it should be allocated by user before calling\\n  !! each row denotes the information of a neighbor element.\\n  !! Therefore nrow is the total number of neighboring elements\\n  !! number of columns is 3. \\n  !! The first column is global element of the neighbor element\\n  !! The second column is local face number of parent element (this element)\\n  !! The third column is local face number of neighbor element\\n  INTEGER(I4B), INTENT(OUT) :: nrow\\n  !! Number of rows written to ans\\n  INTEGER(I4B), INTENT(OUT) :: ncol\\n  !! Number of columns written to ans\\n  LOGICAL(LGT), OPTIONAL, INTENT(IN) :: includeBoundaryElement\\n  !! If includeBoundaryElement is present and true, \\n  !! then the boundary element data is included in ans\\n  !! In this case the current element is considered as the boundary element\\n  !! ans(nrow, 1) contains the global element number of the current element\\n  !! ans(nrow, 2) contains the boundary data (local face number which coincides with\\n  !! the mesh boundary)\\n  !! ans(nrow, 3) is set to 0\\nEND SUBROUTINE Elemdata_GetElementToElements2\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"elemdata_getedgeconnectivity\",\n      children: \"Elemdata_GetEdgeConnectivity\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Get the connectivity of the local edge.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"SUBROUTINE Elemdata_GetEdgeConnectivity(obj, ans, tsize, ii)\\n  TYPE(Elemdata_), INTENT(IN) :: obj\\n  !! Element data object\\n  INTEGER(I4B), INTENT(INOUT) :: ans(:)\\n  !! edge connectivity, node numbers are global\\n  INTEGER(I4B), INTENT(OUT) :: tsize\\n  !! total data written to ans\\n  INTEGER(I4B), INTENT(IN) :: ii\\n  !! Edge number (local)\\nEND SUBROUTINE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"elemdata_isactive\",\n      children: \"Elemdata_isActive\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This function return true if the element is active, false otherwise.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PURE FUNCTION Elemdata_isActive(obj) RESULT(ans)\\n  TYPE(Elemdata_), INTENT(IN) :: obj\\n  LOGICAL(LGT) :: ans\\n  ans = obj%isActive\\nEND FUNCTION Elemdata_isActive\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"elemdata_globalelemnum\",\n      children: \"Elemdata_globalElemNum\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This function returns the global element number of the element.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PURE FUNCTION Elemdata_globalElemNum(obj) RESULT(ans)\\n  TYPE(Elemdata_), INTENT(IN) :: obj\\n  INTEGER(I4B) :: ans\\n  ans = obj%globalElemNum\\nEND FUNCTION Elemdata_globalElemNum\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"elemdata_localelemnum\",\n      children: \"Elemdata_localElemNum\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This function returns the local element number of the element.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PURE FUNCTION Elemdata_localElemNum(obj) RESULT(ans)\\n  TYPE(Elemdata_), INTENT(IN) :: obj\\n  INTEGER(I4B) :: ans\\n  ans = obj%localElemNum\\nEND FUNCTION Elemdata_localElemNum\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"elemdata_name\",\n      children: \"Elemdata_name\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This function returns the name of the element.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PURE FUNCTION Elemdata_name(obj) RESULT(ans)\\n  TYPE(Elemdata_), INTENT(IN) :: obj\\n  INTEGER(I4B) :: ans\\n  ans = obj%name\\nEND FUNCTION Elemdata_name\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"elemdata_toponame\",\n      children: \"Elemdata_topoName\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This function returns the topology name of the element.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PURE FUNCTION Elemdata_topoName(obj) RESULT(ans)\\n  TYPE(Elemdata_), INTENT(IN) :: obj\\n  INTEGER(I4B) :: ans\\n  ans = obj%topoName\\nEND FUNCTION Elemdata_topoName\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"elemdata_topoindx\",\n      children: \"Elemdata_topoIndx\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This function returns the topology index of the element.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PURE FUNCTION Elemdata_topoIndx(obj) RESULT(ans)\\n  TYPE(Elemdata_), INTENT(IN) :: obj\\n  INTEGER(I4B) :: ans\\n  ans = GetElementIndex(obj%topoName)\\nEND FUNCTION Elemdata_topoIndx\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"elemdata_meshid\",\n      children: \"Elemdata_meshid\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This function returns the mesh id of the element.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PURE FUNCTION Elemdata_meshid(obj) RESULT(ans)\\n  TYPE(Elemdata_), INTENT(IN) :: obj\\n  INTEGER(I4B) :: ans\\n  ans = obj%meshid\\nEND FUNCTION Elemdata_meshid\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"elemdata_gettotalmaterial\",\n      children: \"Elemdata_GetTotalMaterial\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This function returns the total number of materials in the element (that is material assigned the element).\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PURE FUNCTION Elemdata_GetTotalMaterial(obj) RESULT(ans)\\n  TYPE(Elemdata_), INTENT(IN) :: obj\\n  INTEGER(I4B) :: ans\\n  ans = SIZE(obj%material)\\nEND FUNCTION Elemdata_GetTotalMaterial\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"elemdata_gettotalglobalnodes\",\n      children: \"Elemdata_GetTotalGlobalNodes\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This function returns the total number of global nodes in the element.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PURE FUNCTION Elemdata_GetTotalGlobalNodes(obj) RESULT(ans)\\n  TYPE(Elemdata_), INTENT(IN) :: obj\\n  INTEGER(I4B) :: ans\\n  ans = SIZE(obj%globalNodes)\\nEND FUNCTION Elemdata_GetTotalGlobalNodes\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"elemdata_gettotalglobaledges\",\n      children: \"Elemdata_GetTotalGlobalEdges\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This function returns the total number of global edges in the element.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PURE FUNCTION Elemdata_GetTotalGlobalEdges(obj) RESULT(ans)\\n  TYPE(Elemdata_), INTENT(IN) :: obj\\n  INTEGER(I4B) :: ans\\n  ans = SIZE(obj%globalEdges)\\nEND FUNCTION Elemdata_GetTotalGlobalEdges\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"elemdata_gettotaledgeorient\",\n      children: \"Elemdata_GetTotalEdgeOrient\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This function returns the size of edgeOrient array.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PURE FUNCTION Elemdata_GetTotalEdgeOrient(obj) RESULT(ans)\\n  TYPE(Elemdata_), INTENT(IN) :: obj\\n  INTEGER(I4B) :: ans\\n  ans = SIZE(obj%edgeOrient)\\nEND FUNCTION Elemdata_GetTotalEdgeOrient\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"elemdata_gettotalglobalfaces\",\n      children: \"Elemdata_GetTotalGlobalFaces\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This function returns the size of globalFaces array.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"elemdata_gettotalfaceorient\",\n      children: \"Elemdata_GetTotalFaceOrient\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This function returns the size of faceOrient array.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"elemdata_gettotalglobalelements\",\n      children: \"Elemdata_GetTotalGlobalElements\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This function returns the size of globalElements array.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"elemdata_gettotalboundarydata\",\n      children: \"Elemdata_GetTotalBoundaryData\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This function returns the size of boundaryData array.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"elemdata_getmaterial\",\n      children: \"Elemdata_GetMaterial\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This subroutine returns the materials assigned to the element.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PURE SUBROUTINE Elemdata_GetMaterial(obj, ans, tsize)\\n  TYPE(Elemdata_), INTENT(in) :: obj\\n  INTEGER(I4B), INTENT(INOUT) :: ans(:)\\n  INTEGER(I4B), INTENT(OUT) :: tsize\\nEND SUBROUTINE Elemdata_GetMaterial\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"elemdata_getglobalnodes\",\n      children: \"Elemdata_GetGlobalNodes\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This subroutine returns the list of global nodes in the element.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PURE SUBROUTINE Elemdata_GetGlobalNodes(obj, ans, tsize)\\n  TYPE(Elemdata_), INTENT(in) :: obj\\n  INTEGER(I4B), INTENT(INOUT) :: ans(:)\\n  INTEGER(I4B), INTENT(OUT) :: tsize\\nEND SUBROUTINE Elemdata_GetGlobalNodes\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"elemdata_getglobaledges\",\n      children: \"Elemdata_GetGlobalEdges\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This subroutine returns the list of global edges in the element.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PURE SUBROUTINE Elemdata_GetGlobalEdges(obj, ans, tsize)\\n  TYPE(Elemdata_), INTENT(in) :: obj\\n  INTEGER(I4B), INTENT(INOUT) :: ans(:)\\n  INTEGER(I4B), INTENT(OUT) :: tsize\\nEND SUBROUTINE Elemdata_GetGlobalEdges\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"elemdata_getglobalfaces\",\n      children: \"Elemdata_GetGlobalFaces\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This subroutine returns the list of global faces in the element.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PURE SUBROUTINE Elemdata_GetGlobalFaces(obj, ans, tsize)\\n  TYPE(Elemdata_), INTENT(in) :: obj\\n  INTEGER(I4B), INTENT(INOUT) :: ans(:)\\n  INTEGER(I4B), INTENT(OUT) :: tsize\\nEND SUBROUTINE Elemdata_GetGlobalFaces\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"elemdata_getglobalfacenumber\",\n      children: \"Elemdata_GetGlobalFaceNumber\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This function returns the global face number from a local face number.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PURE FUNCTION Elemdata_GetGlobalFaceNumber(obj, localFaceNumber) RESULT(ans)\\n  TYPE(Elemdata_), INTENT(IN) :: obj\\n  INTEGER(I4B), INTENT(IN) :: localFaceNumber\\n  !! local face number\\n  INTEGER(I4B) :: ans\\n  !! global face number\\nEND FUNCTION Elemdata_GetGlobalFaceNumber\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"elemdata_getglobaledgenumber\",\n      children: \"Elemdata_GetGlobalEdgeNumber\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This function returns the global edge number from a local edge number.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PURE FUNCTION Elemdata_GetGlobalEdgeNumber(obj, localEdgeNumber) RESULT(ans)\\n  TYPE(Elemdata_), INTENT(IN) :: obj\\n  INTEGER(I4B), INTENT(IN) :: localEdgeNumber\\n  !! local edge number\\n  INTEGER(I4B) :: ans\\n  !! global edge number\\nEND FUNCTION Elemdata_GetGlobalEdgeNumber\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"elemdata_getglobalelements\",\n      children: \"Elemdata_GetGlobalElements\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This subroutine returns the list of globalElements in the element.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PURE SUBROUTINE Elemdata_GetGlobalElements(obj, ans, tsize)\\n  TYPE(Elemdata_), INTENT(in) :: obj\\n  INTEGER(I4B), INTENT(INOUT) :: ans(:)\\n  INTEGER(I4B), INTENT(OUT) :: tsize\\nEND SUBROUTINE Elemdata_GetGlobalElements\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.admonition, {\n      type: \"note\",\n      children: (0,jsx_runtime.jsxs)(_components.p, {\n        children: [\"This routine returns all the entries of globalElements, so you should look at the meaning of globalElements in the \", (0,jsx_runtime.jsx)(_components.a, {\n          href: \"#structure\",\n          children: \"Structure\"\n        }), \" section.\"]\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"elemdata_getboundarydata\",\n      children: \"Elemdata_GetBoundaryData\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This subroutine returns the list of boundaryData in the element.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PURE SUBROUTINE Elemdata_GetBoundaryData(obj, ans, tsize)\\n  TYPE(Elemdata_), INTENT(in) :: obj\\n  INTEGER(I4B), INTENT(INOUT) :: ans(:)\\n  !! boundary data, see the boundaryData in the type definition\\n  INTEGER(I4B), INTENT(OUT) :: tsize\\nEND SUBROUTINE Elemdata_GetBoundaryData\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"elemdata_getglobalnodespointer\",\n      children: \"Elemdata_GetGlobalNodesPointer\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This function returns the pointer to the globalNodes in the element.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"FUNCTION Elemdata_GetGlobalNodesPointer(obj) RESULT(ans)\\n  TYPE(Elemdata_), TARGET, INTENT(IN) :: obj\\n  INTEGER(I4B), POINTER :: ans(:)\\n  ans => obj%globalNodes\\nEND FUNCTION Elemdata_GetGlobalNodesPointer\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"elemdata_getedgeorient\",\n      children: \"Elemdata_GetEdgeOrient\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This subroutine returns the list of edgeOrient vector in the element.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PURE SUBROUTINE Elemdata_GetEdgeOrient(obj, ans, tsize)\\n  TYPE(Elemdata_), INTENT(in) :: obj\\n  INTEGER(I4B), INTENT(INOUT) :: ans(:)\\n  INTEGER(I4B), INTENT(OUT) :: tsize\\nEND SUBROUTINE Elemdata_GetEdgeOrient\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"elemdata_getfaceorient\",\n      children: \"Elemdata_GetFaceOrient\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This subroutine returns the list of faceOrient vector in the element.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PURE SUBROUTINE Elemdata_GetFaceOrient(obj, ans, nrow, ncol)\\n  TYPE(Elemdata_), INTENT(in) :: obj\\n  INTEGER(I4B), INTENT(INOUT) :: ans(:, :)\\n  INTEGER(I4B), INTENT(OUT) :: nrow, ncol\\nEND SUBROUTINE Elemdata_GetFaceOrient\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"elemdata_getorientation\",\n      children: \"Elemdata_GetOrientation\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This subroutine returns the orientation related vectors in the element.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PURE SUBROUTINE Elemdata_GetOrientation(obj, cellOrient, faceOrient, &\\n                            edgeOrient, tCellOrient, tFaceOrient, tEdgeOrient)\\n  TYPE(Elemdata_), INTENT(IN) :: obj\\n  !! element dataa\\n  INTEGER(I4B), INTENT(INOUT) :: cellOrient(:)\\n  !! cell connectivity of element\\n  INTEGER(I4B), INTENT(INOUT) :: faceOrient(:, :)\\n  !! face connectivity of element\\n  INTEGER(I4B), INTENT(INOUT) :: edgeOrient(:)\\n  !! edge connectivity of element\\n  INTEGER(I4B), INTENT(OUT) :: tCellOrient\\n  !! size of data written in cellCon\\n  INTEGER(I4B), INTENT(OUT) :: tFaceOrient(2)\\n  !! size of data written in faceCon\\n  INTEGER(I4B), INTENT(OUT) :: tEdgeOrient\\n  !! size of data written in edgecon\\nEND SUBROUTINE Elemdata_GetOrientation\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"elemdata_findface\",\n      children: \"Elemdata_FindFace\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This subroutine finds the local face number of the element which contains the given face. The given face is described by its connectivity of the vertices.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"SUBROUTINE Elemdata_FindFace(obj, faceCon, isFace, &\\n                             localFaceNumber, onlyBoundaryElement)\\n  TYPE(Elemdata_), INTENT(IN) :: obj\\n    !! abstract mesh\\n  INTEGER(I4B), INTENT(IN) :: faceCon(:)\\n    !! vertex connectivity of face\\n  LOGICAL(LGT), INTENT(OUT) :: isFace\\n    !! if faceCon is a face of globalElement then it is true, else false\\n  INTEGER(I4B), INTENT(OUT) :: localFaceNumber\\n    !! local face number if found, else 0\\n  LOGICAL(LGT), INTENT(IN) :: onlyBoundaryElement\\n    !! if true then we will search if the element is boundary element\\nEND SUBROUTINE Elemdata_FindFace\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"elemdata_findedge\",\n      children: \"Elemdata_FindEdge\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This subroutine finds the local edge number of the element which contains the given edge. The given edge is described by its connectivity of the vertices.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"SUBROUTINE Elemdata_FindEdge(obj, edgeCon, isEdge, localEdgeNumber, &\\n                             onlyBoundaryElement)\\n  TYPE(Elemdata_), INTENT(IN) :: obj\\n  !! abstract mesh\\n  INTEGER(I4B), INTENT(IN) :: edgeCon(:)\\n  !! vertex connectivity of Edge\\n  LOGICAL(LGT), INTENT(OUT) :: isEdge\\n  !! if EdgeCon is a Edge of globalElement then it is true, else false\\n  INTEGER(I4B), INTENT(OUT) :: localEdgeNumber\\n  !! local Edge number if found, else 0\\n  LOGICAL(LGT), INTENT(IN) :: onlyBoundaryElement\\n  !! if true then we will search if the element is boundary element\\nEND SUBROUTINE Elemdata_FindEdge\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"elemdata_isboundaryelement\",\n      children: \"Elemdata_IsBoundaryElement\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This function returns true if the element is a boundary element, false otherwise.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"FUNCTION Elemdata_IsBoundaryElement(obj) RESULT(ans)\\n  TYPE(Elemdata_), INTENT(IN) :: obj\\n  LOGICAL(LGT) :: ans\\n  ans = (obj%elementType .EQ. TypeElem%boundary) .OR. &\\n        (obj%elementType .EQ. TypeElem%domainBoundary)\\nEND FUNCTION Elemdata_IsBoundaryElement\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"elemdata_order\",\n      children: \"Elemdata_Order\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This function returns the order of the element.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PURE FUNCTION Elemdata_Order(obj) RESULT(ans)\\n  TYPE(Elemdata_), INTENT(IN) :: obj\\n  INTEGER(I4B) :: ans\\n  ans = ElementOrder(obj%name)\\nEND FUNCTION Elemdata_Order\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./docs/docs-api/AbstractMesh/ElemData_.md\n");

/***/ }),

/***/ "./node_modules/@mdx-js/react/lib/index.js":
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MDXProvider: () => (/* binding */ MDXProvider),\n/* harmony export */   useMDXComponents: () => (/* binding */ useMDXComponents)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/react/index.js\");\n/**\n * @import {MDXComponents} from 'mdx/types.js'\n * @import {Component, ReactElement, ReactNode} from 'react'\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\n\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nfunction useMDXComponents(components) {\n  const contextComponents = react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {ReactElement}\n *   Element.\n * @satisfies {Component}\n */\nfunction MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Vhc2lmZW0tZG9jcy8uL25vZGVfbW9kdWxlcy9AbWR4LWpzL3JlYWN0L2xpYi9pbmRleC5qcz9hZjEyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGltcG9ydCB7TURYQ29tcG9uZW50c30gZnJvbSAnbWR4L3R5cGVzLmpzJ1xuICogQGltcG9ydCB7Q29tcG9uZW50LCBSZWFjdEVsZW1lbnQsIFJlYWN0Tm9kZX0gZnJvbSAncmVhY3QnXG4gKi9cblxuLyoqXG4gKiBAY2FsbGJhY2sgTWVyZ2VDb21wb25lbnRzXG4gKiAgIEN1c3RvbSBtZXJnZSBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7UmVhZG9ubHk8TURYQ29tcG9uZW50cz59IGN1cnJlbnRDb21wb25lbnRzXG4gKiAgIEN1cnJlbnQgY29tcG9uZW50cyBmcm9tIHRoZSBjb250ZXh0LlxuICogQHJldHVybnMge01EWENvbXBvbmVudHN9XG4gKiAgIEFkZGl0aW9uYWwgY29tcG9uZW50cy5cbiAqXG4gKiBAdHlwZWRlZiBQcm9wc1xuICogICBDb25maWd1cmF0aW9uIGZvciBgTURYUHJvdmlkZXJgLlxuICogQHByb3BlcnR5IHtSZWFjdE5vZGUgfCBudWxsIHwgdW5kZWZpbmVkfSBbY2hpbGRyZW5dXG4gKiAgIENoaWxkcmVuIChvcHRpb25hbCkuXG4gKiBAcHJvcGVydHkge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+IHwgTWVyZ2VDb21wb25lbnRzIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2NvbXBvbmVudHNdXG4gKiAgIEFkZGl0aW9uYWwgY29tcG9uZW50cyB0byB1c2Ugb3IgYSBmdW5jdGlvbiB0aGF0IGNyZWF0ZXMgdGhlbSAob3B0aW9uYWwpLlxuICogQHByb3BlcnR5IHtib29sZWFuIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2Rpc2FibGVQYXJlbnRDb250ZXh0PWZhbHNlXVxuICogICBUdXJuIG9mZiBvdXRlciBjb21wb25lbnQgY29udGV4dCAoZGVmYXVsdDogYGZhbHNlYCkuXG4gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuXG4vKiogQHR5cGUge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+fSAqL1xuY29uc3QgZW1wdHlDb21wb25lbnRzID0ge31cblxuY29uc3QgTURYQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoZW1wdHlDb21wb25lbnRzKVxuXG4vKipcbiAqIEdldCBjdXJyZW50IGNvbXBvbmVudHMgZnJvbSB0aGUgTURYIENvbnRleHQuXG4gKlxuICogQHBhcmFtIHtSZWFkb25seTxNRFhDb21wb25lbnRzPiB8IE1lcmdlQ29tcG9uZW50cyB8IG51bGwgfCB1bmRlZmluZWR9IFtjb21wb25lbnRzXVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMgdG8gdXNlIG9yIGEgZnVuY3Rpb24gdGhhdCBjcmVhdGVzIHRoZW0gKG9wdGlvbmFsKS5cbiAqIEByZXR1cm5zIHtNRFhDb21wb25lbnRzfVxuICogICBDdXJyZW50IGNvbXBvbmVudHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VNRFhDb21wb25lbnRzKGNvbXBvbmVudHMpIHtcbiAgY29uc3QgY29udGV4dENvbXBvbmVudHMgPSBSZWFjdC51c2VDb250ZXh0KE1EWENvbnRleHQpXG5cbiAgLy8gTWVtb2l6ZSB0byBhdm9pZCB1bm5lY2Vzc2FyeSB0b3AtbGV2ZWwgY29udGV4dCBjaGFuZ2VzXG4gIHJldHVybiBSZWFjdC51c2VNZW1vKFxuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIEN1c3RvbSBtZXJnZSB2aWEgYSBmdW5jdGlvbiBwcm9wXG4gICAgICBpZiAodHlwZW9mIGNvbXBvbmVudHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGNvbXBvbmVudHMoY29udGV4dENvbXBvbmVudHMpXG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7Li4uY29udGV4dENvbXBvbmVudHMsIC4uLmNvbXBvbmVudHN9XG4gICAgfSxcbiAgICBbY29udGV4dENvbXBvbmVudHMsIGNvbXBvbmVudHNdXG4gIClcbn1cblxuLyoqXG4gKiBQcm92aWRlciBmb3IgTURYIGNvbnRleHQuXG4gKlxuICogQHBhcmFtIHtSZWFkb25seTxQcm9wcz59IHByb3BlcnRpZXNcbiAqICAgUHJvcGVydGllcy5cbiAqIEByZXR1cm5zIHtSZWFjdEVsZW1lbnR9XG4gKiAgIEVsZW1lbnQuXG4gKiBAc2F0aXNmaWVzIHtDb21wb25lbnR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBNRFhQcm92aWRlcihwcm9wZXJ0aWVzKSB7XG4gIC8qKiBAdHlwZSB7UmVhZG9ubHk8TURYQ29tcG9uZW50cz59ICovXG4gIGxldCBhbGxDb21wb25lbnRzXG5cbiAgaWYgKHByb3BlcnRpZXMuZGlzYWJsZVBhcmVudENvbnRleHQpIHtcbiAgICBhbGxDb21wb25lbnRzID1cbiAgICAgIHR5cGVvZiBwcm9wZXJ0aWVzLmNvbXBvbmVudHMgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBwcm9wZXJ0aWVzLmNvbXBvbmVudHMoZW1wdHlDb21wb25lbnRzKVxuICAgICAgICA6IHByb3BlcnRpZXMuY29tcG9uZW50cyB8fCBlbXB0eUNvbXBvbmVudHNcbiAgfSBlbHNlIHtcbiAgICBhbGxDb21wb25lbnRzID0gdXNlTURYQ29tcG9uZW50cyhwcm9wZXJ0aWVzLmNvbXBvbmVudHMpXG4gIH1cblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICBNRFhDb250ZXh0LlByb3ZpZGVyLFxuICAgIHt2YWx1ZTogYWxsQ29tcG9uZW50c30sXG4gICAgcHJvcGVydGllcy5jaGlsZHJlblxuICApXG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@mdx-js/react/lib/index.js\n");

/***/ })

}]);