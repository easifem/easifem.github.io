"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkeasifem_docs"] = globalThis["webpackChunkeasifem_docs"] || []).push([["content---docs-api-chebyshev-1-polynomial-utility-chebyshev-1-transform-25-b-e93"],{

/***/ "./docs/docs-api/Chebyshev1PolynomialUtility/Chebyshev1Transform.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  assets: () => (/* binding */ assets),\n  contentTitle: () => (/* binding */ Chebyshev1Transform_contentTitle),\n  \"default\": () => (/* binding */ Chebyshev1Transform_MDXContent),\n  frontMatter: () => (/* binding */ Chebyshev1Transform_frontMatter),\n  metadata: () => (/* reexport */ site_docs_docs_api_chebyshev_1_polynomial_utility_chebyshev_1_transform_md_25b_namespaceObject),\n  toc: () => (/* binding */ Chebyshev1Transform_toc)\n});\n\n;// ./.docusaurus/docusaurus-plugin-content-docs/docs-api/site-docs-docs-api-chebyshev-1-polynomial-utility-chebyshev-1-transform-md-25b.json\nconst site_docs_docs_api_chebyshev_1_polynomial_utility_chebyshev_1_transform_md_25b_namespaceObject = /*#__PURE__*/JSON.parse('{\"id\":\"Chebyshev1PolynomialUtility/Chebyshev1Transform\",\"title\":\"Chebyshev1Transform\",\"description\":\"Discrete Chebyshev1 transform.\",\"source\":\"@site/docs/docs-api/Chebyshev1PolynomialUtility/Chebyshev1Transform.md\",\"sourceDirName\":\"Chebyshev1PolynomialUtility\",\"slug\":\"/Chebyshev1PolynomialUtility/Chebyshev1Transform\",\"permalink\":\"/docs-api/Chebyshev1PolynomialUtility/Chebyshev1Transform\",\"draft\":false,\"unlisted\":false,\"editUrl\":\"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/Chebyshev1PolynomialUtility/Chebyshev1Transform.md\",\"tags\":[],\"version\":\"current\",\"lastUpdatedAt\":1539502055000,\"frontMatter\":{},\"sidebar\":\"tutorialSidebar\",\"previous\":{\"title\":\"Chebyshev1Quadrature\",\"permalink\":\"/docs-api/Chebyshev1PolynomialUtility/Chebyshev1Quadrature\"},\"next\":{\"title\":\"Chebyshev1Zeros\",\"permalink\":\"/docs-api/Chebyshev1PolynomialUtility/Chebyshev1Zeros\"}}');\n// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n// EXTERNAL MODULE: ./node_modules/@mdx-js/react/lib/index.js\nvar lib = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js + 2 modules\nvar Tabs = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js + 1 modules\nvar TabItem = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js\");\n;// ./docs/docs-api/Chebyshev1PolynomialUtility/_Chebyshev1Transform_test_1.md\n\n\nconst frontMatter = {};\nconst contentTitle = undefined;\n\n\n\n\n\nconst toc = [];\nfunction _createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    li: \"li\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"This example shows the usage of \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"Chebyshev1Transform\"\n        }), \" method.\"]\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"This routine performs the forward Chebyshev1 transform.\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"program main\\n  use easifembase\\n  implicit none\\n  integer( i4b ) :: n\\n  real(dfp), allocatable :: uhat(:), u( : ), pt( : ), &\\n    & wt(:), exact(:), error(:,:)\\n  real( dfp ), parameter :: tol=1.0E-10\\n  type(string) :: astr\\n  integer( i4b ), parameter :: quadType = GaussLobatto\\n  n = 10\\n  call reallocate( pt, n+1, wt, n+1 )\\n  call Chebyshev1Quadrature( n=n+1, pt=pt, wt=wt, &\\n    & quadType=quadType )\\n  u = Chebyshev1Eval(n=5_I4B, x=pt)\\n  uhat = Chebyshev1Transform(n=n, coeff=u, x=pt, w=wt, &\\n    & quadType=quadType)\\n  uhat( 6 ) = uhat( 6 ) - 1.0_dFP\\n  CALL ok( SOFTEQ( NORM2(uhat), 0.0_DFP, tol), \\\"test\\\"  )\\n  n = 10\\n  call reallocate( pt, n+1, wt, n+1, exact, n+1 )\\n  call Chebyshev1Quadrature( n=n+1, &\\n    & pt=pt, wt=wt, quadType=quadType )\\n  !u = 1.0 / (1.0 + 16.0*pt**2)\\n  u = 1.0*pt + 2.0*pt**2\\n  uhat = Chebyshev1Transform(n=n, &\\n    & coeff=u, x=pt, w=wt, quadType=quadType)\\n  exact(1:3) = 1.0_DFP\\n  call ok( ALL(SOFTEQ(exact, uhat, tol)), \\\"n=10 \\\"//CHAR_LF)\\nend program main\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/Chebyshev1PolynomialUtility/_Chebyshev1Transform_test_2.md\n\n\nconst _Chebyshev1Transform_test_2_frontMatter = {};\nconst _Chebyshev1Transform_test_2_contentTitle = undefined;\n\n\n\n\n\nconst _Chebyshev1Transform_test_2_toc = [];\nfunction _Chebyshev1Transform_test_2_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    li: \"li\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"This example shows the usage of \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"Chebyshev1Transform\"\n        }), \" method.\"]\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"This routine performs the forward Chebyshev1 transform.\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"program main\\n  use easifembase\\n  implicit none\\n  integer( i4b ) :: n\\n  real(dfp), allocatable :: uhat(:), u( : ), pt( : ), &\\n    & wt(:), exact(:), error(:,:)\\n  real( dfp ), parameter :: tol=1.0E-10\\n  type(string) :: astr\\n  integer( i4b ), parameter :: quadType = Gauss\\n  n = 10\\n  call reallocate( pt, n+1, wt, n+1 )\\n  call Chebyshev1Quadrature( n=n+1, pt=pt, wt=wt, &\\n    & quadType=quadType )\\n  u = Chebyshev1Eval(n=5_I4B, x=pt)\\n  uhat = Chebyshev1Transform(n=n, coeff=u, x=pt, w=wt, &\\n    & quadType=quadType)\\n  uhat( 6 ) = uhat( 6 ) - 1.0_dFP\\n  CALL ok( SOFTEQ( NORM2(uhat), 0.0_DFP, tol), \\\"test\\\"  )\\n  n = 10\\n  call reallocate( pt, n+1, wt, n+1, exact, n+1 )\\n  call Chebyshev1Quadrature( n=n+1, &\\n    & pt=pt, wt=wt, quadType=quadType )\\n  !u = 1.0 / (1.0 + 16.0*pt**2)\\n  u = 1.0*pt + 2.0*pt**2\\n  uhat = Chebyshev1Transform(n=n, &\\n    & coeff=u, x=pt, w=wt, quadType=quadType)\\n  exact(1:3) = 1.0_DFP\\n  call ok( ALL(SOFTEQ(exact, uhat, tol)), \\\"n=10 \\\"//CHAR_LF)\\nend program main\\n\"\n      })\n    })]\n  });\n}\nfunction _Chebyshev1Transform_test_2_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_Chebyshev1Transform_test_2_createMdxContent, {\n      ...props\n    })\n  }) : _Chebyshev1Transform_test_2_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/Chebyshev1PolynomialUtility/Chebyshev1Transform.md\n\n\nconst Chebyshev1Transform_frontMatter = {};\nconst Chebyshev1Transform_contentTitle = 'Chebyshev1Transform';\n\nconst assets = {\n\n};\n\n\n\n\n\n\n\nconst Chebyshev1Transform_toc = [{\n  \"value\": \"Interface 1\",\n  \"id\": \"interface-1\",\n  \"level\": 2\n}, ...toc, {\n  \"value\": \"Interface 2\",\n  \"id\": \"interface-2\",\n  \"level\": 2\n}, {\n  \"value\": \"Interface 3\",\n  \"id\": \"interface-3\",\n  \"level\": 2\n}, ..._Chebyshev1Transform_test_2_toc];\nfunction Chebyshev1Transform_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    header: \"header\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.header, {\n      children: (0,jsx_runtime.jsx)(_components.h1, {\n        id: \"chebyshev1transform\",\n        children: \"Chebyshev1Transform\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Discrete Chebyshev1 transform.\"\n    }), \"\\n\", \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-1\",\n      children: \"Interface 1\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE PURE FUNCTION Chebyshev1Transform(n, coeff, x, w, &\\n    &  quadType) RESULT(ans)\\n    INTEGER(I4B), INTENT(IN) :: n\\n    !! order of jacobi polynomial\\n    REAL(DFP), INTENT(IN) :: coeff(0:n)\\n    !! nodal value (at quad points)\\n    REAL(DFP), INTENT(IN) :: x(0:n)\\n    !! quadrature points\\n    REAL(DFP), INTENT(IN) :: w(0:n)\\n    !! weights\\n    INTEGER(I4B), INTENT(IN) :: quadType\\n    !! Quadrature type, Gauss, GaussLobatto, GaussRadau, GaussRadauLeft\\n    !! GaussRadauRight\\n    REAL(DFP) :: ans(0:n)\\n    !! modal values  or coefficients\\n  END FUNCTION Chebyshev1Transform\\nEND INTERFACE\\n\"\n          })\n        })\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-2\",\n      children: \"Interface 2\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE PURE FUNCTION Chebyshev1Transform(n, coeff, x, w, &\\n    & quadType) RESULT(ans)\\n    INTEGER(I4B), INTENT(IN) :: n\\n    !! order of polynomial\\n    REAL(DFP), INTENT(IN) :: coeff(0:, 1:)\\n    !! nodal value (at quad points)\\n    REAL(DFP), INTENT(IN) :: x(0:n)\\n    !! quadrature points\\n    REAL(DFP), INTENT(IN) :: w(0:n)\\n    !! weights\\n    INTEGER(I4B), INTENT(IN) :: quadType\\n    !! Quadrature type, Gauss, GaussLobatto, GaussRadau, GaussRadauLeft\\n    !! GaussRadauRight\\n    REAL(DFP) :: ans(0:n, 1:SIZE(coeff, 2))\\n    !! modal values  or coefficients for each column of val\\n  END FUNCTION Chebyshev1Transform\\nEND INTERFACE\\n\"\n          })\n        })\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\"\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-3\",\n      children: \"Interface 3\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE\\n  MODULE FUNCTION Chebyshev1Transform(n, f, quadType) &\\n    & RESULT(ans)\\n    INTEGER(I4B), INTENT(IN) :: n\\n    !! order of jacobi polynomial\\n    PROCEDURE(iface_1DFunction), POINTER, INTENT(IN) :: f\\n    !! 1D space function\\n    INTEGER(I4B), INTENT(IN) :: quadType\\n    !! Quadrature type, Gauss, GaussLobatto, GaussRadau, GaussRadauLeft\\n    !! GaussRadauRight\\n    REAL(DFP) :: ans(0:n)\\n    !! modal values  or coefficients\\n  END FUNCTION Chebyshev1Transform\\nEND INTERFACE\\n\"\n          })\n        })\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_Chebyshev1Transform_test_2_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    })]\n  });\n}\nfunction Chebyshev1Transform_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(Chebyshev1Transform_createMdxContent, {\n      ...props\n    })\n  }) : Chebyshev1Transform_createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./docs/docs-api/Chebyshev1PolynomialUtility/Chebyshev1Transform.md\n");

/***/ })

}]);