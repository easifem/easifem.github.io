"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkeasifem_docs"] = globalThis["webpackChunkeasifem_docs"] || []).push([["content---docs-api-fedof-get-max-total-connectivity-480-a26"],{

/***/ "./docs/docs-api/FEDOF/GetMaxTotalConnectivity.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  assets: () => (/* binding */ assets),\n  contentTitle: () => (/* binding */ GetMaxTotalConnectivity_contentTitle),\n  \"default\": () => (/* binding */ GetMaxTotalConnectivity_MDXContent),\n  frontMatter: () => (/* binding */ GetMaxTotalConnectivity_frontMatter),\n  metadata: () => (/* reexport */ site_docs_docs_api_fedof_get_max_total_connectivity_md_480_namespaceObject),\n  toc: () => (/* binding */ GetMaxTotalConnectivity_toc)\n});\n\n;// ./.docusaurus/docusaurus-plugin-content-docs/docs-api/site-docs-docs-api-fedof-get-max-total-connectivity-md-480.json\nconst site_docs_docs_api_fedof_get_max_total_connectivity_md_480_namespaceObject = /*#__PURE__*/JSON.parse('{\"id\":\"FEDOF/GetMaxTotalConnectivity\",\"title\":\"GetMaxTotalConnectivity\",\"description\":\"Interface\",\"source\":\"@site/docs/docs-api/FEDOF/GetMaxTotalConnectivity.md\",\"sourceDirName\":\"FEDOF\",\"slug\":\"/FEDOF/GetMaxTotalConnectivity\",\"permalink\":\"/docs-api/FEDOF/GetMaxTotalConnectivity\",\"draft\":false,\"unlisted\":false,\"editUrl\":\"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/FEDOF/GetMaxTotalConnectivity.md\",\"tags\":[],\"version\":\"current\",\"lastUpdatedAt\":1539502055000,\"frontMatter\":{},\"sidebar\":\"tutorialSidebar\",\"previous\":{\"title\":\"GetLocalElemShapeData\",\"permalink\":\"/docs-api/FEDOF/GetLocalElemShapeData\"},\"next\":{\"title\":\"GetMeshPointer\",\"permalink\":\"/docs-api/FEDOF/GetMeshPointer\"}}');\n// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n// EXTERNAL MODULE: ./node_modules/@mdx-js/react/lib/index.js\nvar lib = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/CodeBlock/index.js + 27 modules\nvar CodeBlock = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/CodeBlock/index.js\");\n;// ./node_modules/raw-loader/dist/cjs.js!./docs/docs-api/FEDOF/examples/_GetMaxTotalConnectivity_test_1.F90\n/* harmony default export */ const _GetMaxTotalConnectivity_test_1 = (\"!> author: Vikas Sharma, Ph. D.\\n! date: 2025-06-08\\n! summary:  Testing GetMaxTotalConnectivity method of FEDOF class\\n\\nPROGRAM main\\nUSE BaseType, ONLY: TypeQuadratureOpt\\nUSE FEDOF_Class\\nUSE FEDomain_Class\\nUSE AbstractMesh_Class\\nUSE HDF5File_Class\\nUSE Display_Method\\nUSE GlobalData\\nUSE Test_Method\\nUSE ExceptionHandler_Class, ONLY: e, EXCEPTION_INFORMATION\\n\\nIMPLICIT NONE\\n\\nTYPE(FEDOF_) :: obj\\nTYPE(FEDomain_) :: dom\\nCLASS(AbstractMesh_), POINTER :: meshptr => NULL()\\nCHARACTER(*), PARAMETER :: &\\n  filename = \\\"../../FEMesh/examples/meshdata/small_tri3_mesh.h5\\\", &\\n  baseContinuity = \\\"H1\\\", &\\n  baseInterpolation = \\\"Heirarchical\\\", &\\n  testname = baseContinuity//\\\" \\\"//baseInterpolation// &\\n  \\\" GetMaxTotalConnectivity test\\\"\\n\\nINTEGER(I4B) :: order = 1\\n\\nTYPE(HDF5File_) :: meshfile\\nLOGICAL(LGT) :: isok\\n\\nCALL e%setQuietMode(EXCEPTION_INFORMATION, .TRUE.)\\nCALL meshfile%Initiate(filename, mode=\\\"READ\\\")\\nCALL meshfile%OPEN()\\nCALL dom%Initiate(meshfile, '')\\nmeshptr => dom%GetMeshPointer()\\n\\nCALL test1\\nCALL test2\\nCALL test3\\n\\nCALL dom%DEALLOCATE()\\nCALL meshfile%DEALLOCATE()\\n\\nCONTAINS\\n\\nSUBROUTINE test1\\n  INTEGER(I4B) :: found, want\\n\\n  order = 1\\n\\n  CALL obj%Initiate(baseContinuity=baseContinuity, &\\n                    baseInterpolation=baseInterpolation, &\\n                    order=order, mesh=meshptr, &\\n                    ipType=TypeQuadratureOpt%equidistance)\\n\\n  found = obj%GetMaxTotalConnectivity()\\n  want = 3\\n  isok = found .EQ. want\\n\\n  CALL IS(found, want, testname//\\\" test 1\\\")\\nEND SUBROUTINE test1\\n\\nSUBROUTINE test2\\n  INTEGER(I4B) :: found, want\\n\\n  order = 2\\n  CALL obj%Initiate(baseContinuity=baseContinuity, &\\n                    baseInterpolation=baseInterpolation, &\\n                    order=order, mesh=meshptr, &\\n                    ipType=TypeQuadratureOpt%equidistance)\\n\\n  found = obj%GetMaxTotalConnectivity()\\n  want = 6\\n  isok = found .EQ. want\\n\\n  CALL IS(found, want, testname//\\\" test 2\\\")\\nEND SUBROUTINE test2\\n\\nSUBROUTINE test3\\n  INTEGER(I4B) :: found, want\\n\\n  order = 3\\n  CALL obj%Initiate(baseContinuity=baseContinuity, &\\n                    baseInterpolation=baseInterpolation, &\\n                    order=order, mesh=meshptr, &\\n                    ipType=TypeQuadratureOpt%equidistance)\\n\\n  found = obj%GetMaxTotalConnectivity()\\n  want = 10\\n  isok = found .EQ. want\\n\\n  CALL IS(found, want, testname//\\\" test 3\\\")\\nEND SUBROUTINE test3\\n\\nEND PROGRAM main\\n\");\n;// ./docs/docs-api/FEDOF/examples/_GetMaxTotalConnectivity_test_1.md\n\n\nconst frontMatter = {};\nconst contentTitle = undefined;\n\n\n\n\n\n\n\nconst toc = [];\nfunction _createMdxContent(props) {\n  return (0,jsx_runtime.jsx)(CodeBlock[\"default\"], {\n    language: \"fortran\",\n    children: _GetMaxTotalConnectivity_test_1\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n\n;// ./node_modules/raw-loader/dist/cjs.js!./docs/docs-api/FEDOF/examples/_GetMaxTotalConnectivity_test_2.F90\n/* harmony default export */ const _GetMaxTotalConnectivity_test_2 = (\"!> author: Vikas Sharma, Ph. D.\\n! date: 2025-06-08\\n! summary:  Testing GetMaxTotalConnectivity method of FEDOF class\\n\\nPROGRAM main\\nUSE BaseType, ONLY: TypeQuadratureOpt\\nUSE FEDOF_Class\\nUSE FEDomain_Class\\nUSE AbstractMesh_Class\\nUSE HDF5File_Class\\nUSE Display_Method\\nUSE GlobalData\\nUSE Test_Method\\nUSE ExceptionHandler_Class, ONLY: e, EXCEPTION_INFORMATION\\n\\nIMPLICIT NONE\\n\\nTYPE(FEDOF_) :: obj\\nTYPE(FEDomain_) :: dom\\nCLASS(AbstractMesh_), POINTER :: meshptr => NULL()\\nCHARACTER(*), PARAMETER :: &\\n  filename = \\\"../../FEMesh/examples/meshdata/small_tri6_mesh.h5\\\", &\\n  baseContinuity = \\\"H1\\\", &\\n  baseInterpolation = \\\"Heirarchical\\\", &\\n  testname = baseContinuity//\\\" \\\"//baseInterpolation// &\\n  \\\" GetMaxTotalConnectivity test\\\"\\n\\nINTEGER(I4B) :: order = 1\\n\\nTYPE(HDF5File_) :: meshfile\\nLOGICAL(LGT) :: isok\\n\\nCALL e%setQuietMode(EXCEPTION_INFORMATION, .TRUE.)\\nCALL meshfile%Initiate(filename, mode=\\\"READ\\\")\\nCALL meshfile%OPEN()\\nCALL dom%Initiate(meshfile, '')\\nmeshptr => dom%GetMeshPointer()\\n\\nCALL test1\\nCALL test2\\nCALL test3\\n\\nCALL dom%DEALLOCATE()\\nCALL meshfile%DEALLOCATE()\\n\\nCONTAINS\\n\\nSUBROUTINE test1\\n  INTEGER(I4B) :: found, want\\n\\n  order = 1\\n\\n  CALL obj%Initiate(baseContinuity=baseContinuity, &\\n                    baseInterpolation=baseInterpolation, &\\n                    order=order, mesh=meshptr, &\\n                    ipType=TypeQuadratureOpt%equidistance)\\n\\n  found = obj%GetMaxTotalConnectivity()\\n  want = 3\\n  isok = found .EQ. want\\n\\n  CALL IS(found, want, testname//\\\" test 1\\\")\\nEND SUBROUTINE test1\\n\\nSUBROUTINE test2\\n  INTEGER(I4B) :: found, want\\n\\n  order = 2\\n  CALL obj%Initiate(baseContinuity=baseContinuity, &\\n                    baseInterpolation=baseInterpolation, &\\n                    order=order, mesh=meshptr, &\\n                    ipType=TypeQuadratureOpt%equidistance)\\n\\n  found = obj%GetMaxTotalConnectivity()\\n  want = 6\\n  isok = found .EQ. want\\n\\n  CALL IS(found, want, testname//\\\" test 2\\\")\\nEND SUBROUTINE test2\\n\\nSUBROUTINE test3\\n  INTEGER(I4B) :: found, want\\n\\n  order = 3\\n  CALL obj%Initiate(baseContinuity=baseContinuity, &\\n                    baseInterpolation=baseInterpolation, &\\n                    order=order, mesh=meshptr, &\\n                    ipType=TypeQuadratureOpt%equidistance)\\n\\n  found = obj%GetMaxTotalConnectivity()\\n  want = 10\\n  isok = found .EQ. want\\n\\n  CALL IS(found, want, testname//\\\" test 3\\\")\\nEND SUBROUTINE test3\\n\\nEND PROGRAM main\\n\");\n;// ./docs/docs-api/FEDOF/examples/_GetMaxTotalConnectivity_test_2.md\n\n\nconst _GetMaxTotalConnectivity_test_2_frontMatter = {};\nconst _GetMaxTotalConnectivity_test_2_contentTitle = undefined;\n\n\n\n\n\n\n\nconst _GetMaxTotalConnectivity_test_2_toc = [];\nfunction _GetMaxTotalConnectivity_test_2_createMdxContent(props) {\n  return (0,jsx_runtime.jsx)(CodeBlock[\"default\"], {\n    language: \"fortran\",\n    children: _GetMaxTotalConnectivity_test_2\n  });\n}\nfunction _GetMaxTotalConnectivity_test_2_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_GetMaxTotalConnectivity_test_2_createMdxContent, {\n      ...props\n    })\n  }) : _GetMaxTotalConnectivity_test_2_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/FEDOF/GetMaxTotalConnectivity.md\n\n\nconst GetMaxTotalConnectivity_frontMatter = {};\nconst GetMaxTotalConnectivity_contentTitle = 'GetMaxTotalConnectivity';\n\nconst assets = {\n\n};\n\n\n\n\n\nconst GetMaxTotalConnectivity_toc = [{\n  \"value\": \"Interface\",\n  \"id\": \"interface\",\n  \"level\": 2\n}, {\n  \"value\": \"Description\",\n  \"id\": \"description\",\n  \"level\": 2\n}, {\n  \"value\": \"Parameters\",\n  \"id\": \"parameters\",\n  \"level\": 3\n}, {\n  \"value\": \"Implementation Details\",\n  \"id\": \"implementation-details\",\n  \"level\": 3\n}, {\n  \"value\": \"Usage Example\",\n  \"id\": \"usage-example\",\n  \"level\": 2\n}, {\n  \"value\": \"Important Notes\",\n  \"id\": \"important-notes\",\n  \"level\": 2\n}, {\n  \"value\": \"Related Methods\",\n  \"id\": \"related-methods\",\n  \"level\": 2\n}, {\n  \"value\": \"Example 1\",\n  \"id\": \"example-1\",\n  \"level\": 2\n}, ...toc, {\n  \"value\": \"Example 2\",\n  \"id\": \"example-2\",\n  \"level\": 2\n}, ..._GetMaxTotalConnectivity_test_2_toc];\nfunction GetMaxTotalConnectivity_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    h3: \"h3\",\n    header: \"header\",\n    li: \"li\",\n    ol: \"ol\",\n    p: \"p\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.header, {\n      children: (0,jsx_runtime.jsx)(_components.h1, {\n        id: \"getmaxtotalconnectivity\",\n        children: \"GetMaxTotalConnectivity\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface\",\n      children: \"Interface\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"MODULE FUNCTION obj_GetMaxTotalConnectivity(obj) RESULT(ans)\\n  CLASS(FEDOF_), INTENT(IN) :: obj\\n  INTEGER(I4B) :: ans\\nEND FUNCTION obj_GetMaxTotalConnectivity\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"description\",\n      children: \"Description\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"The \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"GetMaxTotalConnectivity\"\n      }), \" method determines the maximum number of degrees of freedom (DOF) associated with any single element in the mesh. This value represents the largest connectivity array size needed to store all DOFs for any element, which is crucial for pre-allocating arrays in finite element assembly operations.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"parameters\",\n      children: \"Parameters\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"obj\"\n        }), \" - Input, \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"CLASS(FEDOF_)\"\n        }), \", FEDOF object instance\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"ans\"\n        }), \" - Output, \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"INTEGER(I4B)\"\n        }), \", maximum connectivity size across all elements\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"implementation-details\",\n      children: \"Implementation Details\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"The implementation iterates through all elements in the mesh, calculates the total DOF for each element, and keeps track of the maximum value:\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"ans = 0\\ntelems = obj%mesh%GetTotalElements()\\n\\nDO ii = 1, telems\\n  tdof = obj%GetTotalDOF(globalElement=ii, isLocal=.TRUE.)\\n  ans = MAX(ans, tdof)\\nEND DO\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This efficient approach ensures that the returned value is large enough to accommodate the connectivity of any element in the mesh.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"usage-example\",\n      children: \"Usage Example\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"! Example to get the maximum connectivity size\\nINTEGER(I4B) :: maxConnSize\\nTYPE(FEDOF_) :: myDOF\\n\\n! Get maximum connectivity size\\nmaxConnSize = myDOF%GetMaxTotalConnectivity()\\n\\n! Use this value to allocate arrays for element operations\\nINTEGER(I4B), ALLOCATABLE :: elemDOFs(:)\\nALLOCATE (elemDOFs(maxConnSize))\\n\\n! Now elemDOFs is guaranteed to be large enough for any element\\n! in the mesh, regardless of element type or polynomial order\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"important-notes\",\n      children: \"Important Notes\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ol, {\n      children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"This method is particularly valuable in heterogeneous meshes where different element types or polynomial orders are used\"\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"The returned value is often cached in the \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"maxTotalConnectivity\"\n        }), \" member variable to avoid recalculation\"]\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"This method can be computationally expensive for large meshes as it loops through all elements\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"related-methods\",\n      children: \"Related Methods\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"GetTotalDOF\"\n        }), \" - Used internally to calculate the DOF count for each element\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"GetConnectivity\"\n        }), \" - Returns the actual connectivity for a specific element\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"GetConnectivity_\"\n        }), \" - Lower-level method for retrieving element connectivity\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"The \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"GetMaxTotalConnectivity\"\n      }), \" method is an important utility function for memory management in finite element codes, ensuring that sufficient memory is allocated for element-wise operations without excessive over-allocation.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"example-1\",\n      children: \"Example 1\"\n    }), \"\\n\", \"\\n\", (0,jsx_runtime.jsx)(MDXContent, {}), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"example-2\",\n      children: \"Example 2\"\n    }), \"\\n\", \"\\n\", (0,jsx_runtime.jsx)(_GetMaxTotalConnectivity_test_2_MDXContent, {})]\n  });\n}\nfunction GetMaxTotalConnectivity_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(GetMaxTotalConnectivity_createMdxContent, {\n      ...props\n    })\n  }) : GetMaxTotalConnectivity_createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./docs/docs-api/FEDOF/GetMaxTotalConnectivity.md\n");

/***/ }),

/***/ "./node_modules/@mdx-js/react/lib/index.js":
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MDXProvider: () => (/* binding */ MDXProvider),\n/* harmony export */   useMDXComponents: () => (/* binding */ useMDXComponents)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/react/index.js\");\n/**\n * @import {MDXComponents} from 'mdx/types.js'\n * @import {Component, ReactElement, ReactNode} from 'react'\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\n\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nfunction useMDXComponents(components) {\n  const contextComponents = react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {ReactElement}\n *   Element.\n * @satisfies {Component}\n */\nfunction MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Vhc2lmZW0tZG9jcy8uL25vZGVfbW9kdWxlcy9AbWR4LWpzL3JlYWN0L2xpYi9pbmRleC5qcz9hZjEyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGltcG9ydCB7TURYQ29tcG9uZW50c30gZnJvbSAnbWR4L3R5cGVzLmpzJ1xuICogQGltcG9ydCB7Q29tcG9uZW50LCBSZWFjdEVsZW1lbnQsIFJlYWN0Tm9kZX0gZnJvbSAncmVhY3QnXG4gKi9cblxuLyoqXG4gKiBAY2FsbGJhY2sgTWVyZ2VDb21wb25lbnRzXG4gKiAgIEN1c3RvbSBtZXJnZSBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7UmVhZG9ubHk8TURYQ29tcG9uZW50cz59IGN1cnJlbnRDb21wb25lbnRzXG4gKiAgIEN1cnJlbnQgY29tcG9uZW50cyBmcm9tIHRoZSBjb250ZXh0LlxuICogQHJldHVybnMge01EWENvbXBvbmVudHN9XG4gKiAgIEFkZGl0aW9uYWwgY29tcG9uZW50cy5cbiAqXG4gKiBAdHlwZWRlZiBQcm9wc1xuICogICBDb25maWd1cmF0aW9uIGZvciBgTURYUHJvdmlkZXJgLlxuICogQHByb3BlcnR5IHtSZWFjdE5vZGUgfCBudWxsIHwgdW5kZWZpbmVkfSBbY2hpbGRyZW5dXG4gKiAgIENoaWxkcmVuIChvcHRpb25hbCkuXG4gKiBAcHJvcGVydHkge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+IHwgTWVyZ2VDb21wb25lbnRzIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2NvbXBvbmVudHNdXG4gKiAgIEFkZGl0aW9uYWwgY29tcG9uZW50cyB0byB1c2Ugb3IgYSBmdW5jdGlvbiB0aGF0IGNyZWF0ZXMgdGhlbSAob3B0aW9uYWwpLlxuICogQHByb3BlcnR5IHtib29sZWFuIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2Rpc2FibGVQYXJlbnRDb250ZXh0PWZhbHNlXVxuICogICBUdXJuIG9mZiBvdXRlciBjb21wb25lbnQgY29udGV4dCAoZGVmYXVsdDogYGZhbHNlYCkuXG4gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuXG4vKiogQHR5cGUge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+fSAqL1xuY29uc3QgZW1wdHlDb21wb25lbnRzID0ge31cblxuY29uc3QgTURYQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoZW1wdHlDb21wb25lbnRzKVxuXG4vKipcbiAqIEdldCBjdXJyZW50IGNvbXBvbmVudHMgZnJvbSB0aGUgTURYIENvbnRleHQuXG4gKlxuICogQHBhcmFtIHtSZWFkb25seTxNRFhDb21wb25lbnRzPiB8IE1lcmdlQ29tcG9uZW50cyB8IG51bGwgfCB1bmRlZmluZWR9IFtjb21wb25lbnRzXVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMgdG8gdXNlIG9yIGEgZnVuY3Rpb24gdGhhdCBjcmVhdGVzIHRoZW0gKG9wdGlvbmFsKS5cbiAqIEByZXR1cm5zIHtNRFhDb21wb25lbnRzfVxuICogICBDdXJyZW50IGNvbXBvbmVudHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VNRFhDb21wb25lbnRzKGNvbXBvbmVudHMpIHtcbiAgY29uc3QgY29udGV4dENvbXBvbmVudHMgPSBSZWFjdC51c2VDb250ZXh0KE1EWENvbnRleHQpXG5cbiAgLy8gTWVtb2l6ZSB0byBhdm9pZCB1bm5lY2Vzc2FyeSB0b3AtbGV2ZWwgY29udGV4dCBjaGFuZ2VzXG4gIHJldHVybiBSZWFjdC51c2VNZW1vKFxuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIEN1c3RvbSBtZXJnZSB2aWEgYSBmdW5jdGlvbiBwcm9wXG4gICAgICBpZiAodHlwZW9mIGNvbXBvbmVudHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGNvbXBvbmVudHMoY29udGV4dENvbXBvbmVudHMpXG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7Li4uY29udGV4dENvbXBvbmVudHMsIC4uLmNvbXBvbmVudHN9XG4gICAgfSxcbiAgICBbY29udGV4dENvbXBvbmVudHMsIGNvbXBvbmVudHNdXG4gIClcbn1cblxuLyoqXG4gKiBQcm92aWRlciBmb3IgTURYIGNvbnRleHQuXG4gKlxuICogQHBhcmFtIHtSZWFkb25seTxQcm9wcz59IHByb3BlcnRpZXNcbiAqICAgUHJvcGVydGllcy5cbiAqIEByZXR1cm5zIHtSZWFjdEVsZW1lbnR9XG4gKiAgIEVsZW1lbnQuXG4gKiBAc2F0aXNmaWVzIHtDb21wb25lbnR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBNRFhQcm92aWRlcihwcm9wZXJ0aWVzKSB7XG4gIC8qKiBAdHlwZSB7UmVhZG9ubHk8TURYQ29tcG9uZW50cz59ICovXG4gIGxldCBhbGxDb21wb25lbnRzXG5cbiAgaWYgKHByb3BlcnRpZXMuZGlzYWJsZVBhcmVudENvbnRleHQpIHtcbiAgICBhbGxDb21wb25lbnRzID1cbiAgICAgIHR5cGVvZiBwcm9wZXJ0aWVzLmNvbXBvbmVudHMgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBwcm9wZXJ0aWVzLmNvbXBvbmVudHMoZW1wdHlDb21wb25lbnRzKVxuICAgICAgICA6IHByb3BlcnRpZXMuY29tcG9uZW50cyB8fCBlbXB0eUNvbXBvbmVudHNcbiAgfSBlbHNlIHtcbiAgICBhbGxDb21wb25lbnRzID0gdXNlTURYQ29tcG9uZW50cyhwcm9wZXJ0aWVzLmNvbXBvbmVudHMpXG4gIH1cblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICBNRFhDb250ZXh0LlByb3ZpZGVyLFxuICAgIHt2YWx1ZTogYWxsQ29tcG9uZW50c30sXG4gICAgcHJvcGVydGllcy5jaGlsZHJlblxuICApXG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@mdx-js/react/lib/index.js\n");

/***/ })

}]);