"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkeasifem_docs"] = globalThis["webpackChunkeasifem_docs"] || []).push([["content---docs-api-line-interpolation-utility-interpolation-point-line-161-35a"],{

/***/ "./docs/docs-api/LineInterpolationUtility/InterpolationPoint_Line.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  assets: () => (/* binding */ assets),\n  contentTitle: () => (/* binding */ InterpolationPoint_Line_contentTitle),\n  \"default\": () => (/* binding */ InterpolationPoint_Line_MDXContent),\n  frontMatter: () => (/* binding */ InterpolationPoint_Line_frontMatter),\n  metadata: () => (/* reexport */ site_docs_docs_api_line_interpolation_utility_interpolation_point_line_md_161_namespaceObject),\n  toc: () => (/* binding */ InterpolationPoint_Line_toc)\n});\n\n;// ./.docusaurus/docusaurus-plugin-content-docs/docs-api/site-docs-docs-api-line-interpolation-utility-interpolation-point-line-md-161.json\nconst site_docs_docs_api_line_interpolation_utility_interpolation_point_line_md_161_namespaceObject = /*#__PURE__*/JSON.parse('{\"id\":\"LineInterpolationUtility/InterpolationPoint_Line\",\"title\":\"InterpolationPoint_Line\",\"description\":\"This routine returns the interplation points on the line.\",\"source\":\"@site/docs/docs-api/LineInterpolationUtility/InterpolationPoint_Line.md\",\"sourceDirName\":\"LineInterpolationUtility\",\"slug\":\"/LineInterpolationUtility/InterpolationPoint_Line\",\"permalink\":\"/docs-api/LineInterpolationUtility/InterpolationPoint_Line\",\"draft\":false,\"unlisted\":false,\"editUrl\":\"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/LineInterpolationUtility/InterpolationPoint_Line.md\",\"tags\":[],\"version\":\"current\",\"lastUpdatedAt\":1539502055000,\"frontMatter\":{\"sidebar_label\":\"InterpolationPoint\"},\"sidebar\":\"tutorialSidebar\",\"previous\":{\"title\":\"EquidistancePoint\",\"permalink\":\"/docs-api/LineInterpolationUtility/EquidistancePoint_Line\"},\"next\":{\"title\":\"LagrangeCoeff\",\"permalink\":\"/docs-api/LineInterpolationUtility/LagrangeCoeff_Line\"}}');\n// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n// EXTERNAL MODULE: ./node_modules/@mdx-js/react/lib/index.js\nvar lib = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js + 2 modules\nvar Tabs = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js + 1 modules\nvar TabItem = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js\");\n;// ./docs/docs-api/LineInterpolationUtility/_InterpolationPoint_Line_test_1.md\n\n\nconst frontMatter = {};\nconst contentTitle = undefined;\n\n\n\n\n\nconst toc = [];\nfunction _createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"program main\\n  use easifemBase\\n  implicit none\\n  integer(i4b) :: order\\n  real(dfp) :: x\\n  real(dfp), allocatable :: xij(:,:), coeff(:,:), ans(:, :)\\n  character( len = * ), parameter :: layout=\\\"VEFC\\\" \\n  integer(i4b) :: ipType\\n  !! \\\"INCREASING\\\"\\n  xij = zeros(1, 2, 1.0_DFP)\\n  xij(1, :) = [0,1]\\n  order = 4_I4B\\n\\n  iptype = Equidistance\\n  ans = InterpolationPoint_Line(order=order, iptype=iptype, layout=layout, xij=xij)\\n  call display(ans, \\\"Equidistance: \\\")\\n\\n  iptype = GaussLegendre\\n  ans = InterpolationPoint_Line(order=order, iptype=iptype, layout=layout, xij=xij)\\n  call display(ans, \\\"GaussLegendre: \\\")\\n\\n  iptype = GaussLegendreLobatto \\n  ans = InterpolationPoint_Line(order=order, iptype=iptype, layout=layout, xij=xij)\\n  call display(ans, \\\"GaussLegendreLobatto: \\\")\\n\\n  iptype = GaussChebyshev\\n  ans = InterpolationPoint_Line(order=order, iptype=iptype, layout=layout, xij=xij)\\n  call display(ans, \\\"GaussChebyshev: \\\")\\n\\n  iptype = GaussChebyshevLobatto\\n  ans = InterpolationPoint_Line(order=order, iptype=iptype, layout=layout, xij=xij)\\n  call display(ans, \\\"GaussChebyshevLobatto: \\\")\\n\\nend program main\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        children: \"               Equidistance:               \\n-------------------------------------------\\n0.00000  1.00000  0.25000  0.50000  0.75000\\n                 GaussLegendre:                 \\n------------------------------------------------\\n0.046910  0.230765  0.500000  0.769235  0.953090\\n             GaussLegendreLobatto:              \\n------------------------------------------------\\n-0.00000   1.00000   0.17267   0.50000   0.82733\\n                GaussChebyshev:                 \\n------------------------------------------------\\n0.024472  0.206107  0.500000  0.793893  0.975528\\n          GaussChebyshevLobatto:           \\n-------------------------------------------\\n0.00000  1.00000  0.14645  0.50000  0.85355\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/LineInterpolationUtility/InterpolationPoint_Line.md\n\n\nconst InterpolationPoint_Line_frontMatter = {\n\tsidebar_label: 'InterpolationPoint'\n};\nconst InterpolationPoint_Line_contentTitle = 'InterpolationPoint_Line';\n\nconst assets = {\n\n};\n\n\n\n\n\n\nconst InterpolationPoint_Line_toc = [{\n  \"value\": \"Interface 1\",\n  \"id\": \"interface-1\",\n  \"level\": 2\n}, ...toc, {\n  \"value\": \"Interface 2\",\n  \"id\": \"interface-2\",\n  \"level\": 2\n}];\nfunction InterpolationPoint_Line_createMdxContent(props) {\n  const _components = {\n    admonition: \"admonition\",\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    header: \"header\",\n    li: \"li\",\n    mdxAdmonitionTitle: \"mdxAdmonitionTitle\",\n    ol: \"ol\",\n    p: \"p\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.header, {\n      children: (0,jsx_runtime.jsx)(_components.h1, {\n        id: \"interpolationpoint_line\",\n        children: \"InterpolationPoint_Line\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This routine returns the interplation points on the line.\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [(0,jsx_runtime.jsx)(\"span\", {\n        class: \"badge badge--primary\",\n        children: \" Calling example \"\n      }), \":\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"ans = InterpolationPoint_Line(order, ipType, layout, xij)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(\"span\", {\n      class: \"badge badge--secondary\",\n      children: \" Interplation points: \"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [(0,jsx_runtime.jsx)(_components.code, {\n        children: \"ipType\"\n      }), \" is interpolation point type, it can take following values:\"]\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ol, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"Equidistance\"\n        }), \", uniformly/evenly distributed points\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"GaussLegendre\"\n        }), \", Zeros of Legendre polynomials, all nodes are strictly inside the domain.\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"GaussLegendreLobatto\"\n        }), \" are zeros of Lobatto polynomials they always contain boundary points\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"GaussChebyshev\"\n        }), \" Zeros of Chebyshev polynomials of first kind, all nodes are internal\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"GaussChebyshevLobatto\"\n        }), \" they contain boundary points \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"GaussJacobi\"\n        }), \" and \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"GaussJacobiLobatto\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-1\",\n      children: \"Interface 1\"\n    }), \"\\n\", \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE InterpolationPoint_Line\\n  MODULE FUNCTION InterpolationPoint_Line1(order, ipType, &\\n    & layout, xij, alpha, beta, lambda) RESULT(ans)\\n    !!\\n    INTEGER(I4B), INTENT(IN) :: order\\n    !! Order of interpolation\\n    INTEGER(I4B), INTENT(IN) :: ipType\\n    !! Interpolation point type\\n    !! Equidistance, GaussLegendre, GaussLegendreLobatto, GaussChebyshev,\\n    !! GaussChebyshevLobatto, GaussJacobi, GaussJacobiLobatto\\n    CHARACTER(*), INTENT(IN) :: layout\\n    !! \\\"VEFC\\\"\\n    !! \\\"INCREASING\\\"\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: xij(:, :)\\n    !! domain of interpolation\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: alpha\\n    !! Jacobi parameter\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: beta\\n    !! Jacobi parameter\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: lambda\\n    !! Ultraspherical parameter\\n    REAL(DFP), ALLOCATABLE :: ans(:, :)\\n    !! interpolation points in xij format\\n    !! size(ans,1) = 1 (if xij not present) else size(xij,1)\\n    !! size(ans,2) = order+1\\n  END FUNCTION InterpolationPoint_Line1\\nEND INTERFACE InterpolationPoint_Line\\n\"\n          })\n        }), (0,jsx_runtime.jsx)(_components.admonition, {\n          type: \"info\",\n          children: (0,jsx_runtime.jsx)(_components.mdxAdmonitionTitle, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"xij\"\n            })\n          })\n        }), (0,jsx_runtime.jsxs)(_components.p, {\n          children: [(0,jsx_runtime.jsx)(_components.code, {\n            children: \"xij\"\n          }), \" contains nodal coordinates of line in xij format.\"]\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"SIZE(xij,1) = nsd, and SIZE(xij,2)=2\"\n          }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n            children: \"If xij is absent then [-1,1] is used\"\n          }), \"\\n\"]\n        }), (0,jsx_runtime.jsx)(_components.admonition, {\n          type: \"info\",\n          children: (0,jsx_runtime.jsx)(_components.mdxAdmonitionTitle, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"ans\"\n            })\n          })\n        }), (0,jsx_runtime.jsxs)(_components.p, {\n          children: [(0,jsx_runtime.jsx)(_components.code, {\n            children: \"ans\"\n          }), \" contains the equidistance points. If \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"xij\"\n          }), \" is present, then the number of rows in xij is same as the number of rows in xij. Otherwise, \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"ans\"\n          }), \" has 1 row (for 1D).\"]\n        }), (0,jsx_runtime.jsx)(_components.admonition, {\n          type: \"info\",\n          children: (0,jsx_runtime.jsx)(_components.mdxAdmonitionTitle, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"layout\"\n            })\n          })\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"layout\"\n            }), \" specifies the arrangement of points. Following options are possible:\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"layout=VEFC\"\n            }), \" vertex, edge, face, cell, in this case first two points are boundary points, remaining (from 3 to n) are internal points in increasing order.\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"layout=INCREASING\"\n            }), \" points are arranged in increasing order\"]\n          }), \"\\n\"]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-2\",\n      children: \"Interface 2\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE InterpolationPoint_Line\\n  MODULE FUNCTION InterpolationPoint_Line2(order, ipType, xij, &\\n    & layout, alpha, beta, lambda) RESULT(ans)\\n    !!\\n    INTEGER(I4B), INTENT(IN) :: order\\n    !! order of interpolation\\n    INTEGER(I4B), INTENT(IN) :: ipType\\n    !! Interpolation point type\\n    !! Equidistance\\n    !! GaussLegendre\\n    !! GaussLegendreLobatto\\n    !! GaussChebyshev,\\n    !! GaussChebyshevLobatto\\n    !! GaussJacobi\\n    !! GaussJacobiLobatto\\n    REAL(DFP), INTENT(IN) :: xij(2)\\n    !! end points\\n    CHARACTER(*), INTENT(IN) :: layout\\n    !! \\\"VEFC\\\"\\n    !! \\\"INCREASING\\\"\\n    !! \\\"DECREASING\\\"\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: alpha\\n    !! Jacobi parameter\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: beta\\n    !! Jacobi parameter\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: lambda\\n    !! Ultraspherical parameter\\n    REAL(DFP), ALLOCATABLE :: ans(:)\\n    !! one dimensional interpolation point\\n  END FUNCTION InterpolationPoint_Line2\\nEND INTERFACE InterpolationPoint_Line\\n\"\n          })\n        }), (0,jsx_runtime.jsx)(_components.admonition, {\n          type: \"info\",\n          children: (0,jsx_runtime.jsx)(_components.mdxAdmonitionTitle, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"xij\"\n            })\n          })\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"xij\"\n            }), \" contains nodal coordinates of line in 1D.\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"xij(1)\"\n            }), \" contains 1D coordinates of starting point of line.\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"xij(2)\"\n            }), \" contains the 1D coordinates of ending point of line.\"]\n          }), \"\\n\"]\n        }), (0,jsx_runtime.jsx)(_components.admonition, {\n          type: \"info\",\n          children: (0,jsx_runtime.jsx)(_components.mdxAdmonitionTitle, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"ans\"\n            })\n          })\n        }), (0,jsx_runtime.jsxs)(_components.p, {\n          children: [(0,jsx_runtime.jsx)(_components.code, {\n            children: \"ans\"\n          }), \" contains the equidistance points. If \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"xij\"\n          }), \" is present, then the number of rows in xij is same as the number of rows in xij. Otherwise, \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"ans\"\n          }), \" has 1 row (for 1D).\"]\n        }), (0,jsx_runtime.jsx)(_components.admonition, {\n          type: \"info\",\n          children: (0,jsx_runtime.jsx)(_components.mdxAdmonitionTitle, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"layout\"\n            })\n          })\n        }), (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"layout\"\n            }), \" specifies the arrangement of points. Following options are possible:\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"layout=VEFC\"\n            }), \" vertex, edge, face, cell, in this case first two points are boundary points, remaining (from 3 to n) are internal points in increasing order.\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"layout=INCREASING\"\n            }), \" points are arranged in increasing order\"]\n          }), \"\\n\"]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_components.p, {\n          children: \"See above example.\"\n        })\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    })]\n  });\n}\nfunction InterpolationPoint_Line_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(InterpolationPoint_Line_createMdxContent, {\n      ...props\n    })\n  }) : InterpolationPoint_Line_createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./docs/docs-api/LineInterpolationUtility/InterpolationPoint_Line.md\n");

/***/ })

}]);