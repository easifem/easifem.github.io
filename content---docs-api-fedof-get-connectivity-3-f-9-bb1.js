"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkeasifem_docs"] = globalThis["webpackChunkeasifem_docs"] || []).push([["content---docs-api-fedof-get-connectivity-3-f-9-bb1"],{

/***/ "./docs/docs-api/FEDOF/GetConnectivity.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  assets: () => (/* binding */ assets),\n  contentTitle: () => (/* binding */ GetConnectivity_contentTitle),\n  \"default\": () => (/* binding */ GetConnectivity_MDXContent),\n  frontMatter: () => (/* binding */ GetConnectivity_frontMatter),\n  metadata: () => (/* reexport */ site_docs_docs_api_fedof_get_connectivity_md_3f9_namespaceObject),\n  toc: () => (/* binding */ GetConnectivity_toc)\n});\n\n;// ./.docusaurus/docusaurus-plugin-content-docs/docs-api/site-docs-docs-api-fedof-get-connectivity-md-3f9.json\nconst site_docs_docs_api_fedof_get_connectivity_md_3f9_namespaceObject = /*#__PURE__*/JSON.parse('{\"id\":\"FEDOF/GetConnectivity\",\"title\":\"GetConnectivity\",\"description\":\"The GetConnectivity method returns the global degrees of freedom (DOFs) associated with a specified element in the mesh. This connectivity information is essential for assembling local element matrices and vectors into the global system during finite element analysis.\",\"source\":\"@site/docs/docs-api/FEDOF/GetConnectivity.md\",\"sourceDirName\":\"FEDOF\",\"slug\":\"/FEDOF/GetConnectivity\",\"permalink\":\"/docs-api/FEDOF/GetConnectivity\",\"draft\":false,\"unlisted\":false,\"editUrl\":\"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/FEDOF/GetConnectivity.md\",\"tags\":[],\"version\":\"current\",\"lastUpdatedAt\":1539502055000,\"frontMatter\":{},\"sidebar\":\"tutorialSidebar\",\"previous\":{\"title\":\"GetCellOrder\",\"permalink\":\"/docs-api/FEDOF/GetCellOrder\"},\"next\":{\"title\":\"GetConnectivity_\",\"permalink\":\"/docs-api/FEDOF/GetConnectivity_\"}}');\n// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n// EXTERNAL MODULE: ./node_modules/@mdx-js/react/lib/index.js\nvar lib = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/CodeBlock/index.js + 27 modules\nvar CodeBlock = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/CodeBlock/index.js\");\n;// ./node_modules/raw-loader/dist/cjs.js!./docs/docs-api/FEDOF/examples/_GetConnectivity_test_1.F90\n/* harmony default export */ const _GetConnectivity_test_1 = (\"!> author: Vikas Sharma, Ph. D.\\n! date: 2025-06-07\\n! summary:  Testing GetConnectivity method of FEDOF class\\n! H1 Heirarchical Second Order Triangular Mesh\\n\\nPROGRAM main\\nUSE FEDOF_Class\\nUSE FEDomain_Class\\nUSE AbstractMesh_Class\\nUSE HDF5File_Class\\nUSE Display_Method\\nUSE GlobalData\\nUSE Test_Method\\nUSE ExceptionHandler_Class, ONLY: e, EXCEPTION_INFORMATION\\nUSE AppendUtility\\nUSE ArangeUtility\\n\\nIMPLICIT NONE\\n\\nCHARACTER(*), PARAMETER :: &\\n  filename = \\\"../../FEMesh/examples/meshdata/small_tri3_mesh.h5\\\", &\\n  baseContinuity = \\\"H1\\\", &\\n  baseInterpolation = \\\"Heirarchical\\\", &\\n  testname = baseContinuity // \\\" \\\" // baseInterpolation\\n\\nTYPE(FEDOF_) :: fedof\\nTYPE(FEDomain_) :: dom\\nCLASS(AbstractMesh_), POINTER :: meshptr => NULL()\\nTYPE(HDF5File_) :: meshfile\\nINTEGER(I4B), ALLOCATABLE :: found(:), want(:)\\nINTEGER(I4B) :: order, totalVertexNodes, totalFaces\\nLOGICAL(LGT) :: isok\\n\\nCALL e%SetQuietMode(EXCEPTION_INFORMATION, .TRUE.)\\n\\nCALL meshfile%Initiate(filename, mode=\\\"READ\\\")\\nCALL meshfile%OPEN()\\nCALL dom%Initiate(meshfile, '')\\nmeshptr => dom%GetMeshPointer()\\ntotalVertexNodes = meshptr%GetTotalVertexNodes()\\ntotalFaces = meshptr%GetTotalFaces()\\n\\nCALL test1\\nCALL test2\\nCALL test3\\n\\nCALL dom%DEALLOCATE()\\nCALL meshfile%DEALLOCATE()\\n\\nCONTAINS\\n\\n!----------------------------------------------------------------------------\\n!                                                                      test1\\n!----------------------------------------------------------------------------\\n\\nSUBROUTINE test1\\n\\n  INTEGER(I4B), ALLOCATABLE :: globalNode(:)\\n  INTEGER(I4B) :: ent(4), tVertices\\n\\n  order = 1\\n  CALL fedof%Initiate(baseContinuity=baseContinuity, &\\n                      baseInterpolation=baseInterpolation, &\\n                      order=order, mesh=meshptr)\\n\\n  tVertices = meshptr%GetTotalVertexNodes(globalElement=[1], islocal=.TRUE.)\\n\\n  ent = meshptr%GetTotalEntities(globalElement=1, islocal=.TRUE.)\\n\\n  ! Get all connectivity for local element 1\\n  found = fedof%GetConnectivity(opt=\\\"A\\\", globalElement=1, islocal=.TRUE.)\\n\\n  globalNode = meshptr%GetConnectivity(globalElement=1, islocal=.TRUE.)\\n\\n  want = meshptr%GetLocalNodenumber( &\\n         globalNode=globalNode(1:tVertices), islocal=.FALSE.)\\n\\n  isok = ALL(found == want)\\n  CALL OK(isok, testname // \\\" GetConnectivity (order= \\\"//ToString(order)//\\\"): \\\")\\n\\nEND SUBROUTINE test1\\n\\n!----------------------------------------------------------------------------\\n!                                                                      test2\\n!----------------------------------------------------------------------------\\n\\nSUBROUTINE test2\\n  INTEGER(I4B), ALLOCATABLE :: globalNode(:), temp1(:)\\n  INTEGER(I4B) :: ent(4), a, b, tVertices\\n\\n  order = 2\\n  CALL fedof%Initiate(baseContinuity=baseContinuity, &\\n                      baseInterpolation=baseInterpolation, &\\n                      order=order, mesh=meshptr)\\n\\n  found = fedof%GetConnectivity(opt=\\\"A\\\", globalElement=1, islocal=.TRUE.)\\n  globalNode = meshptr%GetConnectivity(globalElement=1, islocal=.TRUE.)\\n  tVertices = meshptr%GetTotalVertexNodes(globalElement=[1], islocal=.TRUE.)\\n\\n  want = meshptr%GetLocalNodenumber(globalNode=globalNode(1:tVertices), &\\n                                    islocal=.FALSE.)\\n  a = meshptr%GetTotalVertexNodes() + 1\\n  ent = meshptr%GetTotalEntities(globalElement=1, islocal=.TRUE.)\\n\\n  b = meshptr%GetTotalVertexNodes() + ent(3) * (order - 1)\\n  temp1 = Arange(a, b)\\n\\n  want = want.APPEND.temp1\\n\\n  isok = ALL(found == want)\\n\\n  CALL OK(isok, testname // \\\" GetConnectivity (order= \\\"//ToString(order)//\\\"): \\\")\\n\\nEND SUBROUTINE test2\\n\\n!----------------------------------------------------------------------------\\n!                                                                     test3\\n!----------------------------------------------------------------------------\\n\\nSUBROUTINE test3\\n  INTEGER(I4B), ALLOCATABLE :: globalNode(:), temp1(:)\\n  INTEGER(I4B) :: ent(4), a, b, tVertices\\n\\n  order = 3\\n  CALL fedof%Initiate(baseContinuity=baseContinuity, &\\n                      baseInterpolation=baseInterpolation, &\\n                      order=order, mesh=meshptr)\\n\\n  found = fedof%GetConnectivity(opt=\\\"A\\\", globalElement=1, islocal=.TRUE.)\\n\\n  globalNode = meshptr%GetConnectivity(globalElement=1, islocal=.TRUE.)\\n\\n  tVertices = meshptr%GetTotalVertexNodes(globalElement=[1], islocal=.TRUE.)\\n\\n  want = meshptr%GetLocalNodenumber( &\\n         globalNode=globalNode(1:tVertices), islocal=.FALSE.)\\n\\n  ent = meshptr%GetTotalEntities(globalElement=1, islocal=.TRUE.)\\n\\n  a = totalVertexNodes + 1\\n  b = a - 1 + ent(3) * (order - 1)\\n\\n  temp1 = Arange(a, b)\\n\\n  want = want.APPEND.temp1\\n\\n  a = totalVertexNodes + totalFaces * (order - 1) + 1\\n  b = a - 1 + ent(4) * (order - 2) * (order - 1) * 0.5\\n\\n  temp1 = Arange(a, b)\\n  want = want.APPEND.temp1\\n\\n  isok = ALL(found == want)\\n\\n  CALL OK(isok, testname // \\\" GetConnectivity (order= \\\"//ToString(order)//\\\"): \\\")\\nEND SUBROUTINE test3\\n\\nEND PROGRAM main\\n\");\n;// ./docs/docs-api/FEDOF/examples/_GetConnectivity_test_1.md\n\n\nconst frontMatter = {};\nconst contentTitle = undefined;\n\n\n\n\n\n\n\nconst toc = [];\nfunction _createMdxContent(props) {\n  return (0,jsx_runtime.jsx)(CodeBlock[\"default\"], {\n    language: \"fortran\",\n    children: _GetConnectivity_test_1\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/FEDOF/GetConnectivity.md\n\n\nconst GetConnectivity_frontMatter = {};\nconst GetConnectivity_contentTitle = 'GetConnectivity';\n\nconst assets = {\n\n};\n\n\n\n\nconst GetConnectivity_toc = [{\n  \"value\": \"Interface\",\n  \"id\": \"interface\",\n  \"level\": 2\n}, {\n  \"value\": \"Parameters\",\n  \"id\": \"parameters\",\n  \"level\": 2\n}, {\n  \"value\": \"Return Value\",\n  \"id\": \"return-value\",\n  \"level\": 2\n}, {\n  \"value\": \"Implementation Details\",\n  \"id\": \"implementation-details\",\n  \"level\": 2\n}, {\n  \"value\": \"Notes\",\n  \"id\": \"notes\",\n  \"level\": 2\n}, {\n  \"value\": \"Example\",\n  \"id\": \"example\",\n  \"level\": 2\n}, ...toc];\nfunction GetConnectivity_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    header: \"header\",\n    li: \"li\",\n    ol: \"ol\",\n    p: \"p\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.header, {\n      children: (0,jsx_runtime.jsx)(_components.h1, {\n        id: \"getconnectivity\",\n        children: \"GetConnectivity\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"The \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"GetConnectivity\"\n      }), \" method returns the global degrees of freedom (DOFs) associated with a specified element in the mesh. This connectivity information is essential for assembling local element matrices and vectors into the global system during finite element analysis.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface\",\n      children: \"Interface\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n MODULE FUNCTION GetConnectivity(obj, opt, globalElement, islocal) RESULT(ans)\\n    CLASS(FEDOF_), INTENT(INOUT) :: obj\\n    CHARACTER(*), INTENT(IN) :: opt\\n    INTEGER(I4B), INTENT(IN) :: globalElement\\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: islocal\\n    INTEGER(I4B), ALLOCATABLE :: ans(:)\\n  END FUNCTION GetConnectivity\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"parameters\",\n      children: \"Parameters\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"obj\"\n        }), \" - The \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"FEDOF_\"\n        }), \" object containing degree of freedom information\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"opt\"\n        }), \" - A string specifying which type of connectivity to retrieve:\", \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n          children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"\\\"Vertex\\\"\"\n            }), \" - Only vertex DOFs\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"\\\"Edge\\\"\"\n            }), \" - Only edge DOFs\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"\\\"Face\\\"\"\n            }), \" - Only face DOFs\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"\\\"Cell\\\"\"\n            }), \" - Only cell DOFs\"]\n          }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"\\\"All\\\"\"\n            }), \" - All DOFs (vertices, edges, faces, and cells)\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"globalElement\"\n        }), \" - The global or local element number, depending on the value of \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"islocal\"\n        })]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"islocal\"\n        }), \" - Optional logical flag. If present and \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \".TRUE.\"\n        }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"globalElement\"\n        }), \" is interpreted as a local element number; otherwise, it's a global element number\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"return-value\",\n      children: \"Return Value\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"ans\"\n        }), \" - An allocatable array containing the global DOF numbers associated with the specified element, filtered according to the \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"opt\"\n        }), \" parameter\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"implementation-details\",\n      children: \"Implementation Details\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"The function:\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ol, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"Determines the total number of DOFs for the element using \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"obj%GetTotalDOF\"\n        })]\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Allocates the return array with the appropriate size\"\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"Calls the \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"obj%GetConnectivity_\"\n        }), \" subroutine to populate the array with the actual connectivity data\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"The key steps in the implementation are:\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"tdof = obj%GetTotalDOF(globalElement=globalElement, isLocal=isLocal)\\nALLOCATE (ans(tdof))\\nCALL obj%GetConnectivity_(ans=ans, tsize=tdof, opt=opt,\\nglobalElement = globalElement, islocal = islocal)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"The underlying \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"GetConnectivity_\"\n      }), \" subroutine performs the actual work of gathering the connectivity data by:\"]\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ol, {\n      children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Getting the element's topological entities (vertices, edges, faces, and cells)\"\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"Retrieving the DOFs for each entity using the appropriate methods (\", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"GetVertexDOF\"\n        }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"GetEdgeDOF\"\n        }), \", etc.)\"]\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Combining these DOFs into a single connectivity array\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"notes\",\n      children: \"Notes\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"For Lagrangian elements (\", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"obj%isLagrange\"\n        }), \" is \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \".TRUE.\"\n        }), \"), only vertex DOFs are considered, regardless of the \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"opt\"\n        }), \" parameter\"]\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"For hierarchical elements, the connectivity includes all specified entity types (vertices, edges, faces, cells)\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"The connectivity array contains global DOF numbers that map the local element DOFs to the global system\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"The order of DOFs in the returned array follows a hierarchical pattern: vertices first, then edges, faces, and finally cell DOFs\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"This method is crucial for element assembly operations in finite element analysis\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"example\",\n      children: \"Example\"\n    }), \"\\n\", \"\\n\", (0,jsx_runtime.jsx)(MDXContent, {})]\n  });\n}\nfunction GetConnectivity_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(GetConnectivity_createMdxContent, {\n      ...props\n    })\n  }) : GetConnectivity_createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./docs/docs-api/FEDOF/GetConnectivity.md\n");

/***/ }),

/***/ "./node_modules/@mdx-js/react/lib/index.js":
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MDXProvider: () => (/* binding */ MDXProvider),\n/* harmony export */   useMDXComponents: () => (/* binding */ useMDXComponents)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/react/index.js\");\n/**\n * @import {MDXComponents} from 'mdx/types.js'\n * @import {Component, ReactElement, ReactNode} from 'react'\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\n\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nfunction useMDXComponents(components) {\n  const contextComponents = react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {ReactElement}\n *   Element.\n * @satisfies {Component}\n */\nfunction MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Vhc2lmZW0tZG9jcy8uL25vZGVfbW9kdWxlcy9AbWR4LWpzL3JlYWN0L2xpYi9pbmRleC5qcz9hZjEyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGltcG9ydCB7TURYQ29tcG9uZW50c30gZnJvbSAnbWR4L3R5cGVzLmpzJ1xuICogQGltcG9ydCB7Q29tcG9uZW50LCBSZWFjdEVsZW1lbnQsIFJlYWN0Tm9kZX0gZnJvbSAncmVhY3QnXG4gKi9cblxuLyoqXG4gKiBAY2FsbGJhY2sgTWVyZ2VDb21wb25lbnRzXG4gKiAgIEN1c3RvbSBtZXJnZSBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7UmVhZG9ubHk8TURYQ29tcG9uZW50cz59IGN1cnJlbnRDb21wb25lbnRzXG4gKiAgIEN1cnJlbnQgY29tcG9uZW50cyBmcm9tIHRoZSBjb250ZXh0LlxuICogQHJldHVybnMge01EWENvbXBvbmVudHN9XG4gKiAgIEFkZGl0aW9uYWwgY29tcG9uZW50cy5cbiAqXG4gKiBAdHlwZWRlZiBQcm9wc1xuICogICBDb25maWd1cmF0aW9uIGZvciBgTURYUHJvdmlkZXJgLlxuICogQHByb3BlcnR5IHtSZWFjdE5vZGUgfCBudWxsIHwgdW5kZWZpbmVkfSBbY2hpbGRyZW5dXG4gKiAgIENoaWxkcmVuIChvcHRpb25hbCkuXG4gKiBAcHJvcGVydHkge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+IHwgTWVyZ2VDb21wb25lbnRzIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2NvbXBvbmVudHNdXG4gKiAgIEFkZGl0aW9uYWwgY29tcG9uZW50cyB0byB1c2Ugb3IgYSBmdW5jdGlvbiB0aGF0IGNyZWF0ZXMgdGhlbSAob3B0aW9uYWwpLlxuICogQHByb3BlcnR5IHtib29sZWFuIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2Rpc2FibGVQYXJlbnRDb250ZXh0PWZhbHNlXVxuICogICBUdXJuIG9mZiBvdXRlciBjb21wb25lbnQgY29udGV4dCAoZGVmYXVsdDogYGZhbHNlYCkuXG4gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuXG4vKiogQHR5cGUge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+fSAqL1xuY29uc3QgZW1wdHlDb21wb25lbnRzID0ge31cblxuY29uc3QgTURYQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoZW1wdHlDb21wb25lbnRzKVxuXG4vKipcbiAqIEdldCBjdXJyZW50IGNvbXBvbmVudHMgZnJvbSB0aGUgTURYIENvbnRleHQuXG4gKlxuICogQHBhcmFtIHtSZWFkb25seTxNRFhDb21wb25lbnRzPiB8IE1lcmdlQ29tcG9uZW50cyB8IG51bGwgfCB1bmRlZmluZWR9IFtjb21wb25lbnRzXVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMgdG8gdXNlIG9yIGEgZnVuY3Rpb24gdGhhdCBjcmVhdGVzIHRoZW0gKG9wdGlvbmFsKS5cbiAqIEByZXR1cm5zIHtNRFhDb21wb25lbnRzfVxuICogICBDdXJyZW50IGNvbXBvbmVudHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VNRFhDb21wb25lbnRzKGNvbXBvbmVudHMpIHtcbiAgY29uc3QgY29udGV4dENvbXBvbmVudHMgPSBSZWFjdC51c2VDb250ZXh0KE1EWENvbnRleHQpXG5cbiAgLy8gTWVtb2l6ZSB0byBhdm9pZCB1bm5lY2Vzc2FyeSB0b3AtbGV2ZWwgY29udGV4dCBjaGFuZ2VzXG4gIHJldHVybiBSZWFjdC51c2VNZW1vKFxuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIEN1c3RvbSBtZXJnZSB2aWEgYSBmdW5jdGlvbiBwcm9wXG4gICAgICBpZiAodHlwZW9mIGNvbXBvbmVudHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGNvbXBvbmVudHMoY29udGV4dENvbXBvbmVudHMpXG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7Li4uY29udGV4dENvbXBvbmVudHMsIC4uLmNvbXBvbmVudHN9XG4gICAgfSxcbiAgICBbY29udGV4dENvbXBvbmVudHMsIGNvbXBvbmVudHNdXG4gIClcbn1cblxuLyoqXG4gKiBQcm92aWRlciBmb3IgTURYIGNvbnRleHQuXG4gKlxuICogQHBhcmFtIHtSZWFkb25seTxQcm9wcz59IHByb3BlcnRpZXNcbiAqICAgUHJvcGVydGllcy5cbiAqIEByZXR1cm5zIHtSZWFjdEVsZW1lbnR9XG4gKiAgIEVsZW1lbnQuXG4gKiBAc2F0aXNmaWVzIHtDb21wb25lbnR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBNRFhQcm92aWRlcihwcm9wZXJ0aWVzKSB7XG4gIC8qKiBAdHlwZSB7UmVhZG9ubHk8TURYQ29tcG9uZW50cz59ICovXG4gIGxldCBhbGxDb21wb25lbnRzXG5cbiAgaWYgKHByb3BlcnRpZXMuZGlzYWJsZVBhcmVudENvbnRleHQpIHtcbiAgICBhbGxDb21wb25lbnRzID1cbiAgICAgIHR5cGVvZiBwcm9wZXJ0aWVzLmNvbXBvbmVudHMgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBwcm9wZXJ0aWVzLmNvbXBvbmVudHMoZW1wdHlDb21wb25lbnRzKVxuICAgICAgICA6IHByb3BlcnRpZXMuY29tcG9uZW50cyB8fCBlbXB0eUNvbXBvbmVudHNcbiAgfSBlbHNlIHtcbiAgICBhbGxDb21wb25lbnRzID0gdXNlTURYQ29tcG9uZW50cyhwcm9wZXJ0aWVzLmNvbXBvbmVudHMpXG4gIH1cblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICBNRFhDb250ZXh0LlByb3ZpZGVyLFxuICAgIHt2YWx1ZTogYWxsQ29tcG9uZW50c30sXG4gICAgcHJvcGVydGllcy5jaGlsZHJlblxuICApXG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@mdx-js/react/lib/index.js\n");

/***/ })

}]);