"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkeasifem_docs"] = globalThis["webpackChunkeasifem_docs"] || []).push([["content---docs-api-domain-connectivity-initiate-cell-to-cell-data-6-fa-980"],{

/***/ "./docs/docs-api/DomainConnectivity/InitiateCellToCellData.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  assets: () => (/* binding */ assets),\n  contentTitle: () => (/* binding */ InitiateCellToCellData_contentTitle),\n  \"default\": () => (/* binding */ InitiateCellToCellData_MDXContent),\n  frontMatter: () => (/* binding */ InitiateCellToCellData_frontMatter),\n  metadata: () => (/* reexport */ site_docs_docs_api_domain_connectivity_initiate_cell_to_cell_data_md_6fa_namespaceObject),\n  toc: () => (/* binding */ InitiateCellToCellData_toc)\n});\n\n;// ./.docusaurus/docusaurus-plugin-content-docs/docs-api/site-docs-docs-api-domain-connectivity-initiate-cell-to-cell-data-md-6fa.json\nconst site_docs_docs_api_domain_connectivity_initiate_cell_to_cell_data_md_6fa_namespaceObject = /*#__PURE__*/JSON.parse('{\"id\":\"DomainConnectivity/InitiateCellToCellData\",\"title\":\"InitiateCellToCellData\",\"description\":\"This routine initiates cellToCell data (mapping) between two Domain or Mesh.\",\"source\":\"@site/docs/docs-api/DomainConnectivity/InitiateCellToCellData.md\",\"sourceDirName\":\"DomainConnectivity\",\"slug\":\"/DomainConnectivity/InitiateCellToCellData\",\"permalink\":\"/docs-api/DomainConnectivity/InitiateCellToCellData\",\"draft\":false,\"unlisted\":false,\"editUrl\":\"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/DomainConnectivity/InitiateCellToCellData.md\",\"tags\":[],\"version\":\"current\",\"lastUpdatedAt\":1539502055000,\"frontMatter\":{},\"sidebar\":\"tutorialSidebar\",\"previous\":{\"title\":\"GlobalFacetID\",\"permalink\":\"/docs-api/DomainConnectivity/GlobalFacetID\"},\"next\":{\"title\":\"InitiateFacetToCellData\",\"permalink\":\"/docs-api/DomainConnectivity/InitiateFacetToCellData\"}}');\n// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n// EXTERNAL MODULE: ./node_modules/@mdx-js/react/lib/index.js\nvar lib = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js + 2 modules\nvar Tabs = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js + 1 modules\nvar TabItem = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js\");\n;// ./docs/docs-api/DomainConnectivity/_DomainConnectivity_test_11.md\n\n\nconst frontMatter = {};\nconst contentTitle = undefined;\n\n\n\n\n\nconst toc = [];\nfunction _createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.p, {\n      children: \"In this example we will generate cell to cell connectivity information between part of pressure-domain and part of pressure-Domain.\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"dim1=2, entity=1\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"dim2=2, entity=1\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Pressure domain consists Triangle3 elements as shown below.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n  USE easifemBase\\n  USE easifemClasses\\n  IMPLICIT NONE\\n  TYPE(DomainConnectivity_) :: obj\\n  TYPE( Domain_ ) :: pressureDomain\\n  TYPE( HDF5File_ ) :: pressureMeshFile\\n  CLASS( Mesh_ ), POINTER :: pressureMesh => NULL()\\n  INTEGER( I4B ), POINTER :: cellToCell( : ) => NULL()\\n  INTEGER( I4B ) :: ii\\n  INTEGER(i4b) :: dim1=2, dim2=2, entity1=1, entity2=1\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Create domain for pressure variables, READ the mesh file, and initiates the domain for pressure\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL pressureMeshFile%Initiate( FileName=\\\"./mesh_tri3.h5\\\", MODE=\\\"READ\\\" )\\nCALL pressureMeshFile%Open()\\nCALL pressureDomain%Initiate( pressureMeshFile, \\\"\\\")\\nCALL pressureMeshFile%Deallocate()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Initiates the node to node connectivity DATA. It is important that we initiate the node to node DATA before initiating cell to cell DATA.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL obj%InitiateNodeToNodeData( domain1=pressureDomain, &\\n  & domain2=pressureDomain, dim1=dim1, entityNum1=entity1, dim2=dim2, &\\n  & entityNum2=entity2)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This will create node-to-node connectivity DATA from domain1 (dim=2, entityNum=1) to domain2 (dim=2, entityNum=2).\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Now we can initiate cell-to-cell DATA between the above mentioned meshes.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL obj%InitiateCellToCellData( domain1=pressureDomain, &\\n  & domain2=pressureDomain, dim1=dim1, entityNum1=entity1, dim2=dim2, &\\n  & entityNum2=entity2)\\nCALL Display(\\\"Success!!\\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Now let us run some checks on the results. This is ONLY for the testing purpose. IF you want, you can skip this part, and move on to the next examples.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"cellToCell => obj%getCellToCellPointer()\\npressureMesh => pressureDomain%getMeshPointer(dim=dim1, &\\n  & entityNum=entity1)\\nDO ii = pressureMesh%minElemNum, pressureMesh%maxElemNum\\n  IF (.NOT. pressureMesh%isElementPresent(ii)) CYCLE\\n  IF (cellToCell(ii) .NE. ii) THEN\\n    CALL FAIL(\\\"DomainConnectivity-test has failed\\\")\\n    STOP\\n  END IF\\nEND DO\\nCALL PASS(\\\"DomainConnectivity-test-11 has passed\\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Cleaning up.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"  CALL pressureDomain%Deallocate()\\n  CALL obj%Deallocate()\\nEND PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/DomainConnectivity/_DomainConnectivity_test_12.md\n\n\nconst _DomainConnectivity_test_12_frontMatter = {};\nconst _DomainConnectivity_test_12_contentTitle = undefined;\n\n\n\n\n\nconst _DomainConnectivity_test_12_toc = [];\nfunction _DomainConnectivity_test_12_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.p, {\n      children: \"In this example we will generate cell to cell connectivity information between part of velocity-domain and part of velocity-Domain.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Velocity domain consists Triangle6 elements as shown below.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n  USE easifemBase\\n  USE easifemClasses\\n  IMPLICIT NONE\\n  TYPE(DomainConnectivity_) :: obj\\n  TYPE( Domain_ ) :: velocityDomain\\n  TYPE( HDF5File_ ) :: velocityMeshFile\\n  CLASS( Mesh_ ), POINTER :: velocityMesh => NULL()\\n  INTEGER( I4B ), POINTER :: cellToCell( : ) => NULL()\\n  INTEGER( I4B ) :: ii\\n  INTEGER(i4b) :: dim1=2, dim2=2, entity1=1, entity2=1\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Create domain for velocity variables, READ the mesh file, and initiates the domain for pressure\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL velocityMeshFile%Initiate( FileName=\\\"./mesh_tri6.h5\\\", MODE=\\\"READ\\\" )\\nCALL velocityMeshFile%Open()\\nCALL velocityDomain%Initiate( velocityMeshFile, \\\"\\\")\\nCALL velocityMeshFile%Deallocate()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Initiates the node to node connectivity DATA. It is important that we initiate the node to node DATA before initiating cell to cell DATA.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL obj%InitiateNodeToNodeData( domain1=velocityDomain, &\\n  & domain2=velocityDomain, dim1=dim1, entityNum1=entity1, dim2=dim2, &\\n  & entityNum2=entity2)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This will create node-to-node connectivity DATA from domain1 (dim=2, entityNum=1) to domain2 (dim=2, entityNum=2).\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Now we can initiate cell-to-cell DATA between the above mentioned meshes.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL obj%InitiateCellToCellData( domain1=velocityDomain, &\\n  & domain2=velocityDomain, dim1=dim1, entityNum1=entity1, dim2=dim2, &\\n  & entityNum2=entity2)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Now let us run some checks on the results. This is ONLY for the testing purpose. IF you want, you can skip this part, and move on to the next examples.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"cellToCell => obj%getCellToCellPointer()\\nvelocityMesh => velocityDomain%getMeshPointer(dim=dim1, &\\n  & entityNum=entity1)\\nDO ii = velocityMesh%minElemNum, velocityMesh%maxElemNum\\n  IF (.NOT. velocityMesh%isElementPresent(ii)) CYCLE\\n  IF (cellToCell(ii) .NE. ii) THEN\\n    CALL FAIL(\\\"DomainConnectivity-test has failed\\\")\\n    STOP\\n  END IF\\nEND DO\\nCALL PASS(\\\"DomainConnectivity-test has passed\\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Cleaning up.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"  CALL velocityDomain%Deallocate()\\n  CALL obj%Deallocate()\\nEND PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction _DomainConnectivity_test_12_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_DomainConnectivity_test_12_createMdxContent, {\n      ...props\n    })\n  }) : _DomainConnectivity_test_12_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/DomainConnectivity/_DomainConnectivity_test_13.md\n\n\nconst _DomainConnectivity_test_13_frontMatter = {};\nconst _DomainConnectivity_test_13_contentTitle = undefined;\n\n\n\n\n\nconst _DomainConnectivity_test_13_toc = [];\nfunction _DomainConnectivity_test_13_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.p, {\n      children: \"In this example we will generate cell to cell connectivity information between part of pressure-domain and part of pressure-Domain. We will map boundary of a domain with the boundary of the other domain\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Pressure domain consists Triangle3 elements as shown below.\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Velocity domain consists Triangle6 elements as shown below.\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Importing modules and variables\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n  USE easifemBase\\n  USE easifemClasses\\n  IMPLICIT NONE\\n  TYPE(DomainConnectivity_) :: obj\\n  TYPE( Domain_ ) :: pressureDomain\\n  TYPE( HDF5File_ ) :: pressureMeshFile\\n  CLASS( Mesh_ ), POINTER :: pressureMesh => NULL()\\n  INTEGER( I4B ), POINTER :: cellToCell( : ) => NULL()\\n  INTEGER( I4B ) :: ii\\n  INTEGER(i4b) :: dim1=1, dim2=1, entity1=1, entity2=1\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Create domain for pressure variables, READ the mesh file, and initiates the domain for pressure\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL pressureMeshFile%Initiate( FileName=\\\"./mesh_tri3.h5\\\", MODE=\\\"READ\\\" )\\nCALL pressureMeshFile%Open()\\nCALL pressureDomain%Initiate( pressureMeshFile, \\\"\\\")\\nCALL pressureMeshFile%Deallocate()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Initiates the node to node connectivity DATA. It is important that we initiate the node to node DATA before initiating cell to cell DATA.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL obj%InitiateNodeToNodeData( domain1=pressureDomain, &\\n  & domain2=pressureDomain, dim1=dim1, entityNum1=entity1, dim2=dim2, &\\n  & entityNum2=entity2)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This will create node-to-node connectivity DATA from domain1 (dim=2, entityNum=1) to domain2 (dim=2, entityNum=2).\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Now we can initiate cell-to-cell DATA between the above mentioned meshes.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL obj%InitiateCellToCellData( domain1=pressureDomain, &\\n  & domain2=pressureDomain, dim1=dim1, entityNum1=entity1, dim2=dim2, &\\n  & entityNum2=entity2)\\nCALL Display(\\\"Success!!\\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Now let us run some checks on the results. This is ONLY for the testing purpose. IF you want, you can skip this part, and move on to the next examples.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"cellToCell => obj%getCellToCellPointer()\\npressureMesh => pressureDomain%getMeshPointer(dim=dim1, &\\n  & entityNum=entity1)\\nDO ii = pressureMesh%minElemNum, pressureMesh%maxElemNum\\n  IF (.NOT. pressureMesh%isElementPresent(ii)) CYCLE\\n  IF (cellToCell(ii) .NE. ii) THEN\\n    CALL FAIL(\\\"DomainConnectivity-test-11 has failed\\\")\\n    STOP\\n  END IF\\nEND DO\\nCALL PASS(\\\"DomainConnectivity-test has passed\\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Cleaning up.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"  CALL pressureDomain%Deallocate()\\n  CALL obj%Deallocate()\\nEND PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction _DomainConnectivity_test_13_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_DomainConnectivity_test_13_createMdxContent, {\n      ...props\n    })\n  }) : _DomainConnectivity_test_13_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/DomainConnectivity/_DomainConnectivity_test_14.md\n\n\nconst _DomainConnectivity_test_14_frontMatter = {};\nconst _DomainConnectivity_test_14_contentTitle = undefined;\n\n\n\n\n\nconst _DomainConnectivity_test_14_toc = [];\nfunction _DomainConnectivity_test_14_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.p, {\n      children: \"In this example we will generate cell to cell connectivity information between part of velocity-domain and part of velocity-Domain.\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"Pressure domain consists \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"Triangle3\"\n        }), \" elements as shown below.\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"Velocity domain consists \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"Triangle6\"\n        }), \" elements as shown below.\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Importing modules and variables\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n  USE easifemBase\\n  USE easifemClasses\\n  IMPLICIT NONE\\n  TYPE(DomainConnectivity_) :: obj\\n  TYPE( Domain_ ) :: velocityDomain\\n  TYPE( HDF5File_ ) :: velocityMeshFile\\n  CLASS( Mesh_ ), POINTER :: velocityMesh => NULL()\\n  INTEGER( I4B ), POINTER :: cellToCell( : ) => NULL()\\n  INTEGER( I4B ) :: ii\\n  INTEGER(i4b) :: dim1=1, dim2=1, entity1=1, entity2=1\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Create domain for velocity variables, 🎇 READ the mesh file, and ⭕ initiates the domain for pressure\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL velocityMeshFile%Initiate( FileName=\\\"./mesh_tri6.h5\\\", MODE=\\\"READ\\\" )\\nCALL velocityMeshFile%Open()\\nCALL velocityDomain%Initiate( velocityMeshFile, \\\"\\\")\\nCALL velocityMeshFile%Deallocate()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Initiates the node to node connectivity DATA. It is important that we initiate the node to node DATA before initiating cell to cell DATA.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL obj%InitiateNodeToNodeData( domain1=velocityDomain, &\\n  & domain2=velocityDomain, dim1=dim1, entityNum1=entity1, dim2=dim2, &\\n  & entityNum2=entity2)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This will create node-to-node connectivity DATA from domain1 (dim=2, entityNum=1) to domain2 (dim=2, entityNum=2).\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Now we can initiate cell-to-cell DATA between the above mentioned meshes.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL obj%InitiateCellToCellData( domain1=velocityDomain, &\\n  & domain2=velocityDomain, dim1=dim1, entityNum1=entity1, dim2=dim2, &\\n  & entityNum2=entity2)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Now let us run some checks on the results. This is ONLY for the testing purpose. IF you want, you can skip this part, and move on to the next examples.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"cellToCell => obj%getCellToCellPointer()\\nvelocityMesh => velocityDomain%getMeshPointer(dim=dim1, &\\n  & entityNum=entity1)\\nDO ii = velocityMesh%minElemNum, velocityMesh%maxElemNum\\n  IF (.NOT. velocityMesh%isElementPresent(ii)) CYCLE\\n  IF (cellToCell(ii) .NE. ii) THEN\\n    CALL FAIL(\\\"DomainConnectivity-test-11 has failed\\\")\\n    STOP\\n  END IF\\nEND DO\\nCALL PASS(\\\"DomainConnectivity-test has passed\\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Cleaning up.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"  CALL velocityDomain%Deallocate()\\n  CALL obj%Deallocate()\\nEND PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction _DomainConnectivity_test_14_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_DomainConnectivity_test_14_createMdxContent, {\n      ...props\n    })\n  }) : _DomainConnectivity_test_14_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/DomainConnectivity/_DomainConnectivity_test_15.md\n\n\nconst _DomainConnectivity_test_15_frontMatter = {};\nconst _DomainConnectivity_test_15_contentTitle = undefined;\n\n\n\n\n\nconst _DomainConnectivity_test_15_toc = [];\nfunction _DomainConnectivity_test_15_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.p, {\n      children: \"In this example we will show how to USE [[DomainConnectivity_#InitiateCellToCell]] method to generate cell-to-cell connectivity information between part of velocity-domain and part of pressure-Domain.\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"Pressure domain consists \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"Triangle3\"\n        }), \" elements as shown below.\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"Velocity domain consists \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"Triangle6\"\n        }), \" elements as shown below.\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"IMPORT modules and classes\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n  USE easifemBase\\n  USE easifemClasses\\n  IMPLICIT NONE\\n  TYPE(DomainConnectivity_) :: obj\\n  TYPE( Domain_ ) :: pressureDomain\\n  TYPE( Domain_ ) :: velocityDomain\\n  TYPE( HDF5File_ ) :: pressureMeshFile\\n  TYPE( HDF5File_ ) :: velocityMeshFile\\n  CLASS( Mesh_ ), POINTER :: velocityMesh\\n  CLASS( Mesh_ ), POINTER :: pressureMesh\\n  INTEGER( I4B ), POINTER :: cellToCell( : )\\n  INTEGER( I4B ) :: ii\\n  INTEGER(i4b), PARAMETER :: dim1=2, dim2=2, entity1=1, entity2=1\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"create domain for velocity variables, 🎇 READ the mesh file, and ⭕ initiates the domain for pressure\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL velocityMeshFile%Initiate( FileName=\\\"./mesh_tri6.h5\\\", MODE=\\\"READ\\\" )\\nCALL velocityMeshFile%Open()\\nCALL velocityDomain%Initiate( velocityMeshFile, \\\"\\\")\\nCALL velocityMeshFile%Deallocate()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"create domain for pressure variables, 🎇 READ the mesh file, and ⭕ initiates the domain for pressure\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL pressureMeshFile%Initiate( FileName=\\\"./mesh_tri3.h5\\\", MODE=\\\"READ\\\" )\\nCALL pressureMeshFile%Open()\\nCALL pressureDomain%Initiate( pressureMeshFile, \\\"\\\")\\nCALL pressureMeshFile%Deallocate()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Initiates the node to node connectivity DATA. It is important that we initiate the node to node DATA before initiating cell to cell DATA.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL obj%InitiateNodeToNodeData( domain1=velocityDomain, &\\n  & domain2=pressureDomain, dim1=dim1, entityNum1=entity1, dim2=dim2, &\\n  & entityNum2=entity2)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This will create node-to-node connectivity DATA from domain1 (dim=2, entityNum=1) to domain2 (dim=2, entityNum=2).\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Now we can initiate cell-to-cell DATA between the above mentioned meshes.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL obj%InitiateCellToCellData( domain1=velocityDomain, &\\n  & domain2=pressureDomain, dim1=dim1, entityNum1=entity1, dim2=dim2, &\\n  & entityNum2=entity2)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Now let us run some checks on the results. This is ONLY for the testing purpose. IF you want, you can skip this part, and move on to the next examples.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"cellToCell => obj%getCellToCellPointer()\\nvelocityMesh => velocityDomain%getMeshPointer(dim=dim1, &\\n  & entityNum=entity1)\\nDO ii = velocityMesh%minElemNum, velocityMesh%maxElemNum\\n  IF (.NOT. velocityMesh%isElementPresent(ii)) CYCLE\\n  IF (cellToCell(ii) .EQ. 0) THEN\\n    CALL FAIL(\\\"DomainConnectivity-test has failed\\\")\\n    STOP\\n  END IF\\nEND DO\\nCALL PASS(\\\"DomainConnectivity-test has passed\\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"  CALL pressureDomain%Deallocate()\\n  CALL velocityDomain%Deallocate()\\n  CALL obj%Deallocate()\\nEND PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction _DomainConnectivity_test_15_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_DomainConnectivity_test_15_createMdxContent, {\n      ...props\n    })\n  }) : _DomainConnectivity_test_15_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/DomainConnectivity/_DomainConnectivity_test_16.md\n\n\nconst _DomainConnectivity_test_16_frontMatter = {};\nconst _DomainConnectivity_test_16_contentTitle = undefined;\n\n\n\n\n\nconst _DomainConnectivity_test_16_toc = [];\nfunction _DomainConnectivity_test_16_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.p, {\n      children: \"In this example, we will show how to USE [[DomainConnectivity_#InitiateCellToCellData]] method to generate cell-to-cell connectivity information between part of velocity-domain and part of pressure-Domain.\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Pressure domain consists Triangle3 elements as shown below.\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Velocity domain consists Triangle6 elements as shown below.\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n  USE easifemBase\\n  USE easifemClasses\\n  IMPLICIT NONE\\n  TYPE(DomainConnectivity_) :: obj\\n  TYPE( Domain_ ) :: pressureDomain\\n  TYPE( Domain_ ) :: velocityDomain\\n  TYPE( HDF5File_ ) :: pressureMeshFile\\n  TYPE( HDF5File_ ) :: velocityMeshFile\\n  CLASS( Mesh_ ), POINTER :: velocityMesh\\n  CLASS( Mesh_ ), POINTER :: pressureMesh\\n  INTEGER( I4B ), POINTER :: cellToCell( : )\\n  INTEGER( I4B ) :: ii\\n  INTEGER(i4b), PARAMETER :: dim1=2, dim2=2, entity1=1, entity2=1\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Create domain for velocity variables, 🎇 READ the mesh file, and ⭕ initiates the domain for pressure\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL velocityMeshFile%Initiate( FileName=\\\"./mesh_tri6.h5\\\", MODE=\\\"READ\\\" )\\nCALL velocityMeshFile%Open()\\nCALL velocityDomain%Initiate( velocityMeshFile, \\\"\\\")\\nCALL velocityMeshFile%Deallocate()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Create domain for pressure variables, 🎇 READ the mesh file, and ⭕ initiates the domain for pressure\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL pressureMeshFile%Initiate( FileName=\\\"./mesh_tri3.h5\\\", MODE=\\\"READ\\\" )\\nCALL pressureMeshFile%Open()\\nCALL pressureDomain%Initiate( pressureMeshFile, \\\"\\\")\\nCALL pressureMeshFile%Deallocate()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Initiates the node to node connectivity DATA. It is important that we initiate the node to node DATA before initiating cell to cell DATA.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL obj%InitiateNodeToNodeData( domain1=pressureDomain, &\\n  & domain2=velocityDomain, dim1=dim1, entityNum1=entity1, dim2=dim2, &\\n  & entityNum2=entity2)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This will create node-to-node connectivity DATA from domain1 (dim=2, entityNum=1) to domain2 (dim=2, entityNum=2).\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Now we can initiate cell-to-cell DATA between the above mentioned meshes.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL obj%InitiateCellToCellData( domain1=pressureDomain, &\\n  & domain2=velocityDomain, dim1=dim1, entityNum1=entity1, dim2=dim2, &\\n  & entityNum2=entity2)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Now let us run some checks on the results. This is ONLY for the testing purpose. IF you want, you can skip this part, and move on to the next examples.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"cellToCell => obj%getCellToCellPointer()\\npressureMesh => pressureDomain%getMeshPointer(dim=dim1, &\\n  & entityNum=entity1)\\nDO ii = pressureMesh%minElemNum, pressureMesh%maxElemNum\\n  IF (.NOT. pressureMesh%isElementPresent(ii)) CYCLE\\n  IF (cellToCell(ii) .EQ. 0) THEN\\n    CALL FAIL(\\\"DomainConnectivity-test has failed\\\")\\n    STOP\\n  END IF\\nEND DO\\nCALL PASS(\\\"DomainConnectivity-test has passed\\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"  CALL pressureDomain%Deallocate()\\n  CALL velocityDomain%Deallocate()\\n  CALL obj%Deallocate()\\nEND PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction _DomainConnectivity_test_16_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_DomainConnectivity_test_16_createMdxContent, {\n      ...props\n    })\n  }) : _DomainConnectivity_test_16_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/DomainConnectivity/_DomainConnectivity_test_17.md\n\n\nconst _DomainConnectivity_test_17_frontMatter = {};\nconst _DomainConnectivity_test_17_contentTitle = undefined;\n\n\n\n\n\nconst _DomainConnectivity_test_17_toc = [];\nfunction _DomainConnectivity_test_17_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.p, {\n      children: \"In this example we will generate cell to cell connectivity information between pressure-domain and pressure-Domain.\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"Pressure domain consists \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"Triangle3\"\n        }), \" elements as shown below.\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"Velocity domain consists \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"Triangle6\"\n        }), \" elements as shown below.\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Importing modules and variables\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n  USE easifemBase\\n  USE easifemClasses\\n  IMPLICIT NONE\\n  TYPE(DomainConnectivity_) :: obj\\n  TYPE( Domain_ ) :: pressureDomain\\n  TYPE( HDF5File_ ) :: pressureMeshFile\\n  CLASS( Mesh_ ), POINTER :: pressureMesh\\n  CLASS( ReferenceElement_ ), POINTER :: refelem\\n  INTEGER( I4B ), POINTER :: cellToCell( : )\\n  INTEGER( I4B ) :: ii, iel\\n  INTEGER(I4B), PARAMETER :: dim1=2, dim2=2, entity1=1, entity2=1\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Initiate domain for pressure variable.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL pressureMeshFile%Initiate( FileName=\\\"./mesh_tri3.h5\\\", MODE=\\\"READ\\\" )\\nCALL pressureMeshFile%Open()\\nCALL pressureDomain%Initiate( pressureMeshFile, \\\"\\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Initiate node to node DATA.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL obj%InitiateNodeToNodeData( domain1=pressureDomain, &\\n  & domain2=pressureDomain )\\nCALL PASS(\\\"InitiateNodeToNodeData()\\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This will create node to node connectivity DATA from domain1 (dim=2, entityNum=1) to domain2 (dim=2, entityNum=2).\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Initiate cell to cell connectivity DATA.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL obj%InitiateCellToCellData(domain1=pressureDomain, &\\n  & domain2=pressureDomain)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"now let us run some tests.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"cellToCell => obj%getCellToCellPointer()\\nDO iel = pressureDomain%minElemNum, pressureDomain%maxElemNum\\n  IF (.NOT. pressureDomain%isElementPresent(iel)) CYCLE\\n  IF (cellToCell(iel) .EQ. 0) THEN\\n    pressureMesh => pressureDomain%getMeshPointer(globalElement=iel)\\n    refelem => pressureMesh%getRefElemPointer()\\n    IF (refelem%xidimension .EQ. pressureDomain%getNSD()) &\\n      & CALL fail(\\\"CellToCell: error code 1\\\")\\n  ELSE\\n    IF (cellToCell(iel) .NE. iel) THEN\\n      CALL fail(\\\"CellToCell: error code 2\\\")\\n      STOP\\n    END IF\\n  END IF\\nEND DO\\nCALL PASS(\\\"InitiateCellToCellData()\\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"  CALL pressureMeshFile%Deallocate()\\n  CALL pressureDomain%Deallocate()\\n  CALL obj%Deallocate()\\nEND PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction _DomainConnectivity_test_17_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_DomainConnectivity_test_17_createMdxContent, {\n      ...props\n    })\n  }) : _DomainConnectivity_test_17_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/DomainConnectivity/_DomainConnectivity_test_18.md\n\n\nconst _DomainConnectivity_test_18_frontMatter = {};\nconst _DomainConnectivity_test_18_contentTitle = undefined;\n\n\n\n\n\nconst _DomainConnectivity_test_18_toc = [];\nfunction _DomainConnectivity_test_18_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.p, {\n      children: \"In this example we will generate cell to cell connectivity information between velocity-domain and velocity-Domain.\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"Pressure domain consists \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"Triangle3\"\n        }), \" elements as shown below.\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"Velocity domain consists \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"Triangle6\"\n        }), \" elements as shown below.\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Importing modules and variables\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n  USE easifemBase\\n  USE easifemClasses\\n  IMPLICIT NONE\\n  TYPE(DomainConnectivity_) :: obj\\n  TYPE( Domain_ ) :: velocityDomain\\n  TYPE( HDF5File_ ) :: velocityMeshFile\\n  CLASS( Mesh_ ), POINTER :: velocityMesh\\n  CLASS( ReferenceElement_ ), POINTER :: refelem\\n  INTEGER( I4B ), POINTER :: cellToCell( : )\\n  INTEGER( I4B ) :: ii, iel\\n  INTEGER(I4B), PARAMETER :: dim1=2, dim2=2, entity1=1, entity2=1\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Initiate domain for velocity variable.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL velocityMeshFile%Initiate( FileName=\\\"./mesh_tri6.h5\\\", MODE=\\\"READ\\\" )\\nCALL velocityMeshFile%Open()\\nCALL velocityDomain%Initiate( velocityMeshFile, \\\"\\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Initiate node to node DATA.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL obj%InitiateNodeToNodeData( domain1=velocityDomain, &\\n  & domain2=velocityDomain )\\nCALL PASS(\\\"InitiateNodeToNodeData()\\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This will create node to node connectivity DATA from domain1 (dim=2, entityNum=1) to domain2 (dim=2, entityNum=2).\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Initiate cell to cell connectivity DATA.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL obj%InitiateCellToCellData(domain1=velocityDomain, &\\n  & domain2=velocityDomain)\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"now let us run some tests, this is only for testing purpose, so you can ignore the forthcoming section.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"cellToCell => obj%getCellToCellPointer()\\nDO iel = velocityDomain%minElemNum, velocityDomain%maxElemNum\\n  IF (.NOT. velocityDomain%isElementPresent(iel)) CYCLE\\n  IF (cellToCell(iel) .EQ. 0) THEN\\n    velocityMesh => velocityDomain%getMeshPointer(globalElement=iel)\\n    refelem => velocityMesh%getRefElemPointer()\\n    IF (refelem%xidimension .EQ. velocityDomain%getNSD()) &\\n      & CALL fail(\\\"CellToCell: error code 1\\\")\\n  ELSE\\n    IF (cellToCell(iel) .NE. iel) THEN\\n      CALL fail(\\\"CellToCell: error code 2\\\")\\n      STOP\\n    END IF\\n  END IF\\nEND DO\\nCALL PASS(\\\"InitiateCellToCellData()\\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"  CALL velocityMeshFile%Deallocate()\\n  CALL velocityDomain%Deallocate()\\n  CALL obj%Deallocate()\\nEND PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction _DomainConnectivity_test_18_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_DomainConnectivity_test_18_createMdxContent, {\n      ...props\n    })\n  }) : _DomainConnectivity_test_18_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/DomainConnectivity/_DomainConnectivity_test_19.md\n\n\nconst _DomainConnectivity_test_19_frontMatter = {};\nconst _DomainConnectivity_test_19_contentTitle = undefined;\n\n\n\n\n\nconst _DomainConnectivity_test_19_toc = [];\nfunction _DomainConnectivity_test_19_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.p, {\n      children: \"In this example we will generate cell to cell connectivity information between velocity-domain and pressure-Domain.\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Pressure domain consists Triangle3 elements as shown below.\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Velocity domain consists Triangle6 elements as shown below.\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Importing modules and variables\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n  USE easifemBase\\n  USE easifemClasses\\n  IMPLICIT NONE\\n  TYPE(DomainConnectivity_) :: obj\\n  TYPE( Domain_ ) :: pressureDomain\\n  TYPE( Domain_ ) :: velocityDomain\\n  TYPE( HDF5File_ ) :: pressureMeshFile\\n  TYPE( HDF5File_ ) :: velocityMeshFile\\n  CLASS( Mesh_ ), POINTER :: velocityMesh\\n  CLASS( Mesh_ ), POINTER :: pressureMesh\\n  CLASS( ReferenceElement_ ), POINTER :: velocityRefelem\\n  CLASS( ReferenceElement_ ), POINTER :: pressureRefelem\\n  CLASS( ReferenceElement_ ), POINTER :: refelem\\n  INTEGER( I4B ), POINTER :: cellToCell( : )\\n  INTEGER( I4B ) :: ii, iel\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Open the mesh file for pressure and velocity domain\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL velocityMeshFile%Initiate( FileName=\\\"./mesh_tri6.h5\\\", MODE=\\\"READ\\\" )\\nCALL velocityMeshFile%Open()\\nCALL pressureMeshFile%Initiate( FileName=\\\"./mesh_tri3.h5\\\", MODE=\\\"READ\\\" )\\nCALL pressureMeshFile%Open()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Initiate the domain for pressure and velocity\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL velocityDomain%Initiate( velocityMeshFile, \\\"\\\")\\nCALL pressureDomain%Initiate( pressureMeshFile, \\\"\\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Initiate node to node data between velocity domain and pressure domain.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL obj%InitiateNodeToNodeData( domain1=velocityDomain, &\\n  & domain2=pressureDomain )\\nCALL PASS(\\\"InitiateNodeToNodeData()\\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Now that node-to-node data is ready, let us initiate cell to cell data from velocity domain to pressure domain.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL obj%InitiateCellToCellData( domain1=velocityDomain, &\\n  & domain2=pressureDomain )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"now let us run some tests to check the validity of the data. This is only for testing purpose, so you can ignore the forthcoming section.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"cellToCell => obj%getCellToCellPointer()\\nDO iel = velocityDomain%minElemNum, velocityDomain%maxElemNum\\n  IF (.NOT. velocityDomain%isElementPresent(iel)) CYCLE\\n  IF (cellToCell(iel) .EQ. 0) THEN\\n    velocityMesh => velocityDomain%getMeshPointer(globalElement=iel)\\n    refelem => velocityMesh%getRefElemPointer()\\n    IF (refelem%xidimension .EQ. velocityDomain%getNSD()) THEN\\n      CALL fail(\\\"CellToCell: error code 1\\\")\\n      STOP\\n    END IF\\n  ELSE\\n    !! here i am checking if the cellToCell(iel) is present in\\n    !! in the pressure domain or not.\\n    !! If it is present then it should be a cell element.\\n    ii = cellToCell(iel)\\n    IF (.NOT. pressureDomain%isElementPresent(ii)) THEN\\n      CALL fail(\\\"CellToCell: error code 2\\\")\\n      STOP\\n    ELSE\\n      velocityMesh => velocityDomain%getMeshPointer(globalElement=iel)\\n      velocityRefelem => velocityMesh%getRefElemPointer()\\n      pressureMesh => pressureDomain%getMeshPointer(globalElement=ii)\\n      pressureRefelem => pressureMesh%getRefElemPointer()\\n      IF (pressureRefelem%xidimension .NE. velocityRefelem%xidimension) THEN\\n        CALL fail(\\\"CellToCell: error code 3\\\")\\n        STOP\\n      END IF\\n    END IF\\n  END IF\\nEND DO\\nCALL PASS(\\\"InitiateCellToCellData()\\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"  CALL pressureMeshFile%Deallocate()\\n  CALL velocityMeshFile%Deallocate()\\n  CALL pressureDomain%Deallocate()\\n  CALL velocityDomain%Deallocate()\\n  CALL obj%Deallocate()\\nEND PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction _DomainConnectivity_test_19_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_DomainConnectivity_test_19_createMdxContent, {\n      ...props\n    })\n  }) : _DomainConnectivity_test_19_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/DomainConnectivity/_DomainConnectivity_test_20.md\n\n\nconst _DomainConnectivity_test_20_frontMatter = {};\nconst _DomainConnectivity_test_20_contentTitle = undefined;\n\n\n\n\n\nconst _DomainConnectivity_test_20_toc = [];\nfunction _DomainConnectivity_test_20_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.p, {\n      children: \"In this example we will generate cell to cell connectivity information between pressure-domain and velocity-Domain.\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"Pressure domain consists \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"Triangle3\"\n        }), \" elements as shown below.\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"Velocity domain consists \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"Triangle6\"\n        }), \" elements as shown below.\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Importing modules and variables\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n  USE easifemBase\\n  USE easifemClasses\\n  IMPLICIT NONE\\n  TYPE(DomainConnectivity_) :: obj\\n  TYPE( Domain_ ) :: pressureDomain\\n  TYPE( Domain_ ) :: velocityDomain\\n  TYPE( HDF5File_ ) :: pressureMeshFile\\n  TYPE( HDF5File_ ) :: velocityMeshFile\\n  CLASS( Mesh_ ), POINTER :: velocityMesh\\n  CLASS( Mesh_ ), POINTER :: pressureMesh\\n  CLASS( ReferenceElement_ ), POINTER :: refelem\\n  CLASS( ReferenceElement_ ), POINTER :: velocityRefelem\\n  CLASS( ReferenceElement_ ), POINTER :: pressureRefelem\\n  INTEGER( I4B ), POINTER :: cellToCell( : )\\n  INTEGER( I4B ) :: ii, iel\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Open the mesh file for pressure and velocity domain\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL velocityMeshFile%Initiate( FileName=\\\"./mesh_tri6.h5\\\", MODE=\\\"READ\\\" )\\nCALL velocityMeshFile%Open()\\nCALL pressureMeshFile%Initiate( FileName=\\\"./mesh_tri3.h5\\\", MODE=\\\"READ\\\" )\\nCALL pressureMeshFile%Open()\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Initiate the domain for pressure and velocity\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL velocityDomain%Initiate( velocityMeshFile, \\\"\\\")\\nCALL pressureDomain%Initiate( pressureMeshFile, \\\"\\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Initiate node to node data between velocity domain and pressure domain.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL obj%InitiateNodeToNodeData( domain1=pressureDomain, &\\n  & domain2=velocityDomain )\\nCALL PASS(\\\"InitiateNodeToNodeData()\\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Now that node-to-node data is ready, let us initiate cell to cell data from pressure domain to velocity domain.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"CALL obj%InitiateCellToCellData( domain1=pressureDomain, &\\n  & domain2=velocityDomain )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"now let us run some tests to check the validity of the data. This is only for testing purpose, so you can ignore the forthcoming section.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"cellToCell => obj%getCellToCellPointer()\\nDO iel = pressureDomain%minElemNum, pressureDomain%maxElemNum\\n  IF (.NOT. pressureDomain%isElementPresent(iel)) CYCLE\\n  IF (cellToCell(iel) .EQ. 0) THEN\\n    pressureMesh => pressureDomain%getMeshPointer(globalElement=iel)\\n    refelem => pressureMesh%getRefElemPointer()\\n    IF (refelem%xidimension .EQ. pressureDomain%getNSD()) THEN\\n      CALL fail(\\\"CellToCell: error code 1\\\")\\n      STOP\\n    END IF\\n  ELSE\\n    !! here i am checking if the cellToCell(iel) is present in\\n    !! in the pressure domain or not.\\n    !! If it is present then it should be a cell element.\\n    ii = cellToCell(iel)\\n    IF (.NOT. velocityDomain%isElementPresent(ii)) THEN\\n      CALL fail(\\\"CellToCell: error code 2\\\")\\n      STOP\\n    ELSE\\n      velocityMesh => velocityDomain%getMeshPointer(globalElement=ii)\\n      velocityRefelem => velocityMesh%getRefElemPointer()\\n      pressureMesh => pressureDomain%getMeshPointer(globalElement=iel)\\n      pressureRefelem => pressureMesh%getRefElemPointer()\\n      IF (pressureRefelem%xidimension .NE. velocityRefelem%xidimension) THEN\\n        CALL fail(\\\"CellToCell: error code 3\\\")\\n        STOP\\n      END IF\\n    END IF\\n  END IF\\nEND DO\\nCALL PASS(\\\"InitiateCellToCellData()\\\")\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"  CALL pressureMeshFile%Deallocate()\\n  CALL velocityMeshFile%Deallocate()\\n  CALL pressureDomain%Deallocate()\\n  CALL velocityDomain%Deallocate()\\n  CALL obj%Deallocate()\\nEND PROGRAM main\\n\"\n      })\n    })]\n  });\n}\nfunction _DomainConnectivity_test_20_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_DomainConnectivity_test_20_createMdxContent, {\n      ...props\n    })\n  }) : _DomainConnectivity_test_20_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/DomainConnectivity/InitiateCellToCellData.md\n\n\nconst InitiateCellToCellData_frontMatter = {};\nconst InitiateCellToCellData_contentTitle = 'InitiateCellToCellData';\n\nconst assets = {\n\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst InitiateCellToCellData_toc = [{\n  \"value\": \"Interface1\",\n  \"id\": \"interface1\",\n  \"level\": 2\n}, ...toc, ..._DomainConnectivity_test_12_toc, ..._DomainConnectivity_test_13_toc, ..._DomainConnectivity_test_14_toc, ..._DomainConnectivity_test_15_toc, ..._DomainConnectivity_test_16_toc, ..._DomainConnectivity_test_17_toc, ..._DomainConnectivity_test_18_toc, {\n  \"value\": \"Interface2\",\n  \"id\": \"interface2\",\n  \"level\": 2\n}, ..._DomainConnectivity_test_19_toc, ..._DomainConnectivity_test_20_toc];\nfunction InitiateCellToCellData_createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    admonition: \"admonition\",\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    header: \"header\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    strong: \"strong\",\n    ul: \"ul\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.header, {\n      children: (0,jsx_runtime.jsx)(_components.h1, {\n        id: \"initiatecelltocelldata\",\n        children: \"InitiateCellToCellData\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"This routine initiates cellToCell data (mapping) between two \", (0,jsx_runtime.jsx)(_components.a, {\n        href: \"/docs-api/Domain/Domain_\",\n        children: \"Domain_\"\n      }), \" or \", (0,jsx_runtime.jsx)(_components.a, {\n        href: \"/docs-api/Mesh/Mesh_\",\n        children: \"Mesh_\"\n      }), \".\"]\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"The topology of elements in both meshes should be the same, this means that if one mesh is made of triangles then other mesh should be made of triangles.\"\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"The \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"xidim\"\n        }), \" of the elements in both meshes should be the same, this means that if the \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"mesh1\"\n        }), \" is surface mesh then \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"mesh2\"\n        }), \" should be a surface mesh.\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"This routine needs \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"nodeToNode\"\n        }), \" information, so make sure it is initiated before calling this routine.\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface1\",\n      children: \"Interface1\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n  MODULE SUBROUTINE dc_initiateCellToCellData1(obj, domain1, domain2, &\\n    & dim1, dim2, entityNum1, entityNum2)\\n    CLASS(DomainConnectivity_), INTENT(INOUT) :: obj\\n    !! Domain connectivity object,\\n    !! [[DomainConnectivity:cellToCell]] will be initiated\\n    CLASS(Domain_), INTENT(IN) :: domain1\\n    !! Primary domain, in cellToCell(i), i denotes the\\n    !! global element number in domain1 domain.\\n    CLASS(Domain_), INTENT(IN) :: domain2\\n    !! secondary domain, => cellToCell(i) denotes the\\n    !! global cell number in `domain2` domain.\\n    INTEGER(I4B), INTENT(IN) :: dim1\\n    !! dimension of mesh in domain1\\n    INTEGER(I4B), INTENT(IN) :: dim2\\n    !! dimension of mesh in domain2\\n    INTEGER(I4B), INTENT(IN) :: entityNum1\\n    !! entity num of mesh in domain1\\n    INTEGER(I4B), INTENT(IN) :: entityNum2\\n    !! entity num of mesh in domain2\\n  END SUBROUTINE dc_initiateCellToCellData1\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This subroutine generates the cell to cell connectivity between two meshes.\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"obj%cellToCell\"\n        }), \" will be initiated\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"domain1\"\n        }), \" main domain\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"domain2\"\n        }), \" secondary domain\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"dim1, entitynum1\"\n        }), \" dimension and entity number of mesh in \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"domain1\"\n        })]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"dim2, entitynum2\"\n        }), \" dimension and entity number of mesh in \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"domain2\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Following points should be noted\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"The topology of elements in both meshes should be the same, this means that if one mesh is triangle then other mesh should be a triangle.\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"The xidim of the elements in both meshes should be the same, this means that if the mesh1 is surface mesh then mesh2 should be a surface mesh.\"\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"This routine needs \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"nodeToNode\"\n        }), \" information, so make sure it is initiated before calling this routine.\"]\n      }), \"\\n\"]\n    }), \"\\n\", \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"1\",\n        label: \"️܀ Example 1\",\n        children: (0,jsx_runtime.jsx)(MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"2\",\n        label: \"️܀ Example 2\",\n        children: (0,jsx_runtime.jsx)(_DomainConnectivity_test_12_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"3\",\n        label: \"️܀ Example 3\",\n        children: (0,jsx_runtime.jsx)(_DomainConnectivity_test_13_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"4\",\n        label: \"️܀ Example 4\",\n        children: (0,jsx_runtime.jsx)(_DomainConnectivity_test_14_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"5\",\n        label: \"️܀ Example 5\",\n        children: (0,jsx_runtime.jsx)(_DomainConnectivity_test_15_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢\",\n        default: true\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"6\",\n        label: \"️܀ Example 6\",\n        children: (0,jsx_runtime.jsx)(_DomainConnectivity_test_16_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"7\",\n        label: \"️܀ Example 7\",\n        children: (0,jsx_runtime.jsx)(_DomainConnectivity_test_17_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"8\",\n        label: \"️܀ Example 8\",\n        children: (0,jsx_runtime.jsx)(_DomainConnectivity_test_18_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢\",\n        default: true\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface2\",\n      children: \"Interface2\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n  MODULE SUBROUTINE dc_InitiateCellToCellData2(obj, domain1, domain2)\\n    CLASS(DomainConnectivity_), INTENT(INOUT) :: obj\\n    !! Domain connectivity object\\n    CLASS(Domain_), INTENT(IN) :: domain1\\n    !! Primary domain, in CellToCell(i), i denotes the\\n    !! global element number in domain1 domain.\\n    CLASS(Domain_), INTENT(IN) :: domain2\\n    !! Secondary domain => CellToCell(i) denotes the\\n    !! global element number in domain2 domain.\\n  END SUBROUTINE dc_InitiateCellToCellData2\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This subroutine generates the cell to cell connectivity between\\ntwo domains.\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"obj%cellToCell\"\n        }), \" will be initiated\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"domain1\"\n        }), \" main domain\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"domain2\"\n        }), \" secondary domain\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.admonition, {\n      type: \"note\",\n      children: (0,jsx_runtime.jsxs)(_components.p, {\n        children: [\"All \", (0,jsx_runtime.jsx)(_components.strong, {\n          children: \"CELL\"\n        }), \" elements in domain-1 will be mapped to \", (0,jsx_runtime.jsx)(_components.strong, {\n          children: \"CELL\"\n        }), \" elements in domain-2.\"]\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.admonition, {\n      type: \"info\",\n      children: (0,jsx_runtime.jsxs)(_components.p, {\n        children: [\"If \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"cellToCell(iel)\"\n        }), \" is equal to zero then it means there is no element found in domain-2 corresponding to element number iel in domain-1.\"]\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.admonition, {\n      type: \"note\",\n      children: (0,jsx_runtime.jsxs)(_components.p, {\n        children: [\"The size of \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"cellToCell\"\n        }), \" is the largest element number present in domain1.\"]\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.admonition, {\n      title: \"TODO\",\n      type: \"info\",\n      children: (0,jsx_runtime.jsx)(_components.p, {\n        children: \"Currently, lowerbound and upper bound of cellToCell is 1 and domain1%maxElemNumber. In the future, the lower bound will be domain1%minElemNumber.\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Following points should be noted before calling this routine\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"This routine provides map between cell elements of one domain to cell elements of another domain.\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"The topology of the both elements should be the same\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"There is one to one mapping between elements of domain 1 and elements of domain2\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"This routine works well for two domains of same region with same/different order. For example, domain of tri3 and domain of tri6 elements.\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"1\",\n        label: \"️܀ Example 1\",\n        children: (0,jsx_runtime.jsx)(_DomainConnectivity_test_19_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"2\",\n        label: \"️܀ Example 2\",\n        children: (0,jsx_runtime.jsx)(_DomainConnectivity_test_20_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢\",\n        default: true\n      })]\n    })]\n  });\n}\nfunction InitiateCellToCellData_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(InitiateCellToCellData_createMdxContent, {\n      ...props\n    })\n  }) : InitiateCellToCellData_createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./docs/docs-api/DomainConnectivity/InitiateCellToCellData.md\n");

/***/ })

}]);