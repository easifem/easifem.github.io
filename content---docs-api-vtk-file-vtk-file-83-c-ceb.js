"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkeasifem_docs"] = globalThis["webpackChunkeasifem_docs"] || []).push([["content---docs-api-vtk-file-vtk-file-83-c-ceb"],{

/***/ "./docs/docs-api/VTKFile/VTKFile_.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  assets: () => (/* binding */ assets),\n  contentTitle: () => (/* binding */ contentTitle),\n  \"default\": () => (/* binding */ MDXContent),\n  frontMatter: () => (/* binding */ frontMatter),\n  metadata: () => (/* reexport */ site_docs_docs_api_vtk_file_vtk_file_md_83c_namespaceObject),\n  toc: () => (/* binding */ toc)\n});\n\n;// ./.docusaurus/docusaurus-plugin-content-docs/docs-api/site-docs-docs-api-vtk-file-vtk-file-md-83c.json\nconst site_docs_docs_api_vtk_file_vtk_file_md_83c_namespaceObject = /*#__PURE__*/JSON.parse('{\"id\":\"VTKFile/VTKFile_\",\"title\":\"Structure\",\"description\":\"VTKFile class is a child of [XMLFile]]. It is used for visualizing the results using vtk library or paraview. You can find more details on the [Website\",\"source\":\"@site/docs/docs-api/VTKFile/VTKFile_.md\",\"sourceDirName\":\"VTKFile\",\"slug\":\"/VTKFile/VTKFile_\",\"permalink\":\"/docs-api/VTKFile/VTKFile_\",\"draft\":false,\"unlisted\":false,\"editUrl\":\"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/VTKFile/VTKFile_.md\",\"tags\":[],\"version\":\"current\",\"lastUpdatedAt\":1539502055000,\"frontMatter\":{},\"sidebar\":\"tutorialSidebar\",\"previous\":{\"title\":\"VTKFile\",\"permalink\":\"/docs-api/VTKFile/\"},\"next\":{\"title\":\"VTKFile example 1\",\"permalink\":\"/docs-api/VTKFile/VTKFile_test_1\"}}');\n// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n// EXTERNAL MODULE: ./node_modules/@mdx-js/react/lib/index.js\nvar lib = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n;// ./docs/docs-api/VTKFile/VTKFile_.md\n\n\nconst frontMatter = {};\nconst contentTitle = 'Structure';\n\nconst assets = {\n\n};\n\n\n\nconst toc = [{\n  \"value\": \"Serial Format\",\n  \"id\": \"serial-format\",\n  \"level\": 2\n}, {\n  \"value\": \"ImageData\",\n  \"id\": \"imagedata\",\n  \"level\": 3\n}, {\n  \"value\": \"RectilinearGrid\",\n  \"id\": \"rectilineargrid\",\n  \"level\": 3\n}, {\n  \"value\": \"StructuredGrid\",\n  \"id\": \"structuredgrid\",\n  \"level\": 3\n}, {\n  \"value\": \"PolyData\",\n  \"id\": \"polydata\",\n  \"level\": 3\n}, {\n  \"value\": \"UnstructuredGrid\",\n  \"id\": \"unstructuredgrid\",\n  \"level\": 3\n}, {\n  \"value\": \"Module structure\",\n  \"id\": \"module-structure\",\n  \"level\": 2\n}, {\n  \"value\": \"VTKDataArrayEncoder\",\n  \"id\": \"vtkdataarrayencoder\",\n  \"level\": 3\n}, {\n  \"value\": \"XMLFile\",\n  \"id\": \"xmlfile\",\n  \"level\": 3\n}, {\n  \"value\": \"ConstructorMethods\",\n  \"id\": \"constructormethods\",\n  \"level\": 2\n}, {\n  \"value\": \"InitiateVTKFile\",\n  \"id\": \"initiatevtkfile\",\n  \"level\": 3\n}, {\n  \"value\": \"AddSurrogate\",\n  \"id\": \"addsurrogate\",\n  \"level\": 3\n}, {\n  \"value\": \"Deallocate\",\n  \"id\": \"deallocate\",\n  \"level\": 3\n}, {\n  \"value\": \"Close\",\n  \"id\": \"close\",\n  \"level\": 3\n}, {\n  \"value\": \"OpenScratchFile\",\n  \"id\": \"openscratchfile\",\n  \"level\": 3\n}, {\n  \"value\": \"CloseScratchFile\",\n  \"id\": \"closescratchfile\",\n  \"level\": 3\n}, {\n  \"value\": \"TagsMethods\",\n  \"id\": \"tagsmethods\",\n  \"level\": 2\n}, {\n  \"value\": \"WriteRootTag\",\n  \"id\": \"writeroottag\",\n  \"level\": 3\n}, {\n  \"value\": \"WriteDataStructureTag\",\n  \"id\": \"writedatastructuretag\",\n  \"level\": 3\n}, {\n  \"value\": \"WriteStartTag\",\n  \"id\": \"writestarttag\",\n  \"level\": 3\n}, {\n  \"value\": \"WriteEndTag\",\n  \"id\": \"writeendtag\",\n  \"level\": 3\n}, {\n  \"value\": \"WriteSelfClosingTag\",\n  \"id\": \"writeselfclosingtag\",\n  \"level\": 3\n}, {\n  \"value\": \"WriteTag\",\n  \"id\": \"writetag\",\n  \"level\": 3\n}, {\n  \"value\": \"VertMethods\",\n  \"id\": \"vertmethods\",\n  \"level\": 2\n}, {\n  \"value\": \"WriteVerts\",\n  \"id\": \"writeverts\",\n  \"level\": 3\n}, {\n  \"value\": \"CellMethods\",\n  \"id\": \"cellmethods\",\n  \"level\": 2\n}, {\n  \"value\": \"WriteCells\",\n  \"id\": \"writecells\",\n  \"level\": 3\n}, {\n  \"value\": \"DataArrayMethods\",\n  \"id\": \"dataarraymethods\",\n  \"level\": 2\n}, {\n  \"value\": \"WriteDataArrayLocationTag\",\n  \"id\": \"writedataarraylocationtag\",\n  \"level\": 3\n}, {\n  \"value\": \"WriteDataArrayTag\",\n  \"id\": \"writedataarraytag\",\n  \"level\": 3\n}, {\n  \"value\": \"WriteDataArray\",\n  \"id\": \"writedataarray\",\n  \"level\": 3\n}, {\n  \"value\": \"DataArrayAppendedMethods\",\n  \"id\": \"dataarrayappendedmethods\",\n  \"level\": 2\n}, {\n  \"value\": \"WriteToScratch\",\n  \"id\": \"writetoscratch\",\n  \"level\": 3\n}, {\n  \"value\": \"FieldDataMethods\",\n  \"id\": \"fielddatamethods\",\n  \"level\": 2\n}, {\n  \"value\": \"WriteFieldData\",\n  \"id\": \"writefielddata\",\n  \"level\": 3\n}, {\n  \"value\": \"PointsMethods\",\n  \"id\": \"pointsmethods\",\n  \"level\": 2\n}, {\n  \"value\": \"WritePoints\",\n  \"id\": \"writepoints\",\n  \"level\": 3\n}, {\n  \"value\": \"PieceMethods\",\n  \"id\": \"piecemethods\",\n  \"level\": 2\n}];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    blockquote: \"blockquote\",\n    code: \"code\",\n    em: \"em\",\n    h1: \"h1\",\n    h2: \"h2\",\n    h3: \"h3\",\n    header: \"header\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    strong: \"strong\",\n    ul: \"ul\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.header, {\n      children: (0,jsx_runtime.jsx)(_components.h1, {\n        id: \"structure\",\n        children: \"Structure\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [(0,jsx_runtime.jsx)(_components.code, {\n        children: \"VTKFile_\"\n      }), \" class is a child of [[XMLFile_]]. It is used for visualizing the results using \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"vtk\"\n      }), \" library or \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"paraview\"\n      }), \". You can find more details on the \", (0,jsx_runtime.jsx)(_components.a, {\n        href: \"https://kitware.github.io/vtk-examples/site/VTKFileFormats\",\n        children: \"Website\"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"The major motivation for XML based VTKFile was to facilitate data streaming and parallel I/O. Some features of the format include support for compression, portable binary encoding, random access, big endian and little endian byte order, multiple file representation of piece data, and new file extensions for different VTK dataset types. XML provides many features as well, especially the ability to extend a file format with application specific tags.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"There are two types of VTK XML data files: parallel and serial as described in the following.\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n          children: [(0,jsx_runtime.jsx)(_components.strong, {\n            children: \"Serial\"\n          }), \". File types designed for reading and writing by applications of only a single process. All of the data are contained within a single file.\"]\n        }), \"\\n\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n          children: [(0,jsx_runtime.jsx)(_components.strong, {\n            children: \"Parallel\"\n          }), \". File types designed for reading and writing by applications with multiple processes executing in parallel. The dataset is broken into pieces. Each process is assigned a piece or set of pieces to read or write. An individual piece is stored in a corresponding serial file type. The parallel file type does not actually contain any data, but instead describes structural information and then references other serial files containing the data for each piece.\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"In the XML format, VTK datasets are classified into one of two categories.\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [(0,jsx_runtime.jsx)(_components.strong, {\n        children: \"Structured\"\n      }), \". The dataset is a topologically regular array of cells such as pixels and voxels (e.g., image data) or quadrilaterals and hexahedra (e.g., structured grid). Rectangular subsets of the data are described through extents. The structured dataset types are \", (0,jsx_runtime.jsx)(_components.a, {\n        href: \"https://www.vtk.org/doc/nightly/html/classvtkImageData.html#details\",\n        children: \"vtkImageData\"\n      }), \", \", (0,jsx_runtime.jsx)(_components.a, {\n        href: \"https://www.vtk.org/doc/nightly/html/classvtkRectilinearGrid.html#details\",\n        children: \"vtkRectilinearGrid\"\n      }), \", and \", (0,jsx_runtime.jsx)(_components.a, {\n        href: \"https://www.vtk.org/doc/nightly/html/classvtkStructuredGrid.html#details\",\n        children: \"vtkStructuredGrid\"\n      }), \".\"]\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [(0,jsx_runtime.jsx)(_components.strong, {\n        children: \"Unstructured\"\n      }), \". The dataset forms a topologically irregular set of points and cells. Subsets of the data are describedusing pieces. The unstructured dataset types are \", (0,jsx_runtime.jsx)(_components.a, {\n        href: \"https://www.vtk.org/doc/nightly/html/classvtkPolyData.html#details\",\n        children: \"vtkPolyData\"\n      }), \" and \", (0,jsx_runtime.jsx)(_components.a, {\n        href: \"https://www.vtk.org/doc/nightly/html/classvtkUnstructuredGrid.html#details\",\n        children: \"vtkUnstructuredGrid\"\n      }), \".\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"By convention, each data type and file type is paired with a particular file extension. The types and corresponding extensions are\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"ImageData (\", (0,jsx_runtime.jsx)(_components.em, {\n          children: \".vti\"\n        }), \") — Serial, structured.\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"PolyData (\", (0,jsx_runtime.jsx)(_components.em, {\n          children: \".vtp\"\n        }), \") — Serial, unstructured.\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"RectilinearGrid (\", (0,jsx_runtime.jsx)(_components.em, {\n          children: \".vtr\"\n        }), \") — Serial, structured.\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"StructuredGrid (\", (0,jsx_runtime.jsx)(_components.em, {\n          children: \".vts\"\n        }), \") — Serial, structured.\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"UnstructuredGrid (\", (0,jsx_runtime.jsx)(_components.em, {\n          children: \".vtu\"\n        }), \") — Serial, unstructured.\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"PImageData (\", (0,jsx_runtime.jsx)(_components.em, {\n          children: \".pvti\"\n        }), \") — Parallel, structured.\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"PPolyData (\", (0,jsx_runtime.jsx)(_components.em, {\n          children: \".pvtp\"\n        }), \") — Parallel, unstructured.\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"PRectilinearGrid (\", (0,jsx_runtime.jsx)(_components.em, {\n          children: \".pvtr\"\n        }), \") — Parallel, structured.\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"PStructuredGrid (\", (0,jsx_runtime.jsx)(_components.em, {\n          children: \".pvts\"\n        }), \") — Parallel, structured.\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"PUnstructuredGrid (\", (0,jsx_runtime.jsx)(_components.em, {\n          children: \".pvtu\"\n        }), \") — Parallel, unstructured.\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"All of the VTK XML file types are valid XML documents.\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.blockquote, {\n      children: [\"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n        children: \"There is one case in which the file is not a valid XML document. When the AppendedData section is not encoded as base64, raw binary data is present that may violate the XML specification. This is not default behavior, and must be explicitly enabled by the user.\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"serial-format\",\n      children: \"Serial Format\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [(0,jsx_runtime.jsx)(_components.strong, {\n        children: \"Serial XML File Formats\"\n      }), \" The VTKFile element contains one element whose name corresponds to the type of dataset the file describes. We refer to this as the dataset element, which is one of\"]\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"ImageData\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"RectilinearGrid\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"StructuredGrid\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"PolyData\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"UnstructuredGrid.\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"The dataset element contains one or more Piece elements, each describing a portion of the dataset (See \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"WriteDataStructureTag()\"\n      }), \"). Together, the dataset element and Piece elements specify the entire dataset.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Each piece of a dataset must specify the geometry (points and cells) of that piece along with the data associated with each point or cell. Geometry is specified differently for each dataset type, but every piece of every dataset contains PointData and CellData elements specifying the data for each point and cell in the piece.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"The general structure for each serial dataset format is as follows:\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"imagedata\",\n      children: \"ImageData\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Each ImageData piece specifies its extent within the dataset’s whole extent (See, WholeExtent in InitiateVTKFile). See [[#WriteRootTag]]\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"The points and cells are described implicitly by the extent, origin, and spacing. See [[#PieceMethods]]\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Note that the origin and spacing are constant across all pieces, so they are specified as attributes of the ImageData XML element as follows.\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-xml\",\n        children: \"<VTKFile type=”ImageData” ...>\\n  <ImageData WholeExtent=”x1 x2 y1 y2 z1 z2”\\n   Origin=”x0 y0 z0” Spacing=”dx dy dz”>\\n   <Piece Extent=”x1 x2 y1 y2 z1 z2”>\\n      <PointData>...</PointData>\\n      <CellData>...</CellData>\\n   </Piece>\\n   </ImageData>\\n</VTKFile>\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"rectilineargrid\",\n      children: \"RectilinearGrid\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Each RectilinearGrid piece specifies its extent within the dataset’s whole extent. See [[#WriteRootTag]]\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"The points are described by the Coordinates element. See [[#PointsMethods]]\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"The cells are described implicitly by the extent.\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-xml\",\n        children: \"<VTKFile type=\\\"RectilinearGrid\\\" ...>\\n  <RectilinearGrid WholeExtent=\\\"x1 x2 y1 y2 z1 z2\\\">\\n    <Piece Extent=\\\"x1 x2 y1 y2 z1 z2\\\">\\n    <PointData>...</PointData>\\n    <CellData>...</CellData>\\n    <Coordinates>...</Coordinates>\\n    </Piece>\\n  </RectilinearGrid>\\n</VTKFile>\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"structuredgrid\",\n      children: \"StructuredGrid\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Each StructuredGrid piece specifies its extent within the dataset’s whole extent. See [[#WriteRootTag]]\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"The points are described explicitly by the Points element. See [[#PointsMethods]]\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"The cells are described implicitly by the extent.\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-xml\",\n        children: \"<VTKFile type=\\\"StructuredGrid\\\" ...>\\n  <StructuredGrid WholeExtent=\\\"x1 x2 y1 y2 z1 z2\\\">\\n    <Piece Extent=\\\"x1 x2 y1 y2 z1 z2\\\">\\n    <PointData>...</PointData>\\n    <CellData>...</CellData>\\n    <Points>...</Points>\\n    </Piece>\\n  </StructuredGrid>\\n</VTKFile>\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"You can learn more about StructuredGrid from following examples:\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"[[VTKFile_test_4]]\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"[[VTKFile_test_5]]\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"[[VTKFile_test_6]]\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"[[VTKFile_test_7]]\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"[[VTKFile_test_8]]\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"polydata\",\n      children: \"PolyData\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Each PolyData piece specifies a set of points and cells independently from the other pieces.\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"The points are described explicitly by the Points element.\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"The cells are described explicitly by the Verts, Lines, Strips, and Polys elements.\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-xml\",\n        children: \"<VTKFile type=\\\"PolyData\\\" ...>\\n  <PolyData>\\n    <Piece NumberOfPoints=\\\"#\\\" NumberOfVerts=\\\"#\\\" NumberOfLines=\\\"#\\\"\\n      NumberOfStrips=\\\"#\\\" NumberOfPolys=\\\"#\\\">\\n    <PointData>...</PointData>\\n    <CellData>...</CellData>\\n    <Points>...</Points>\\n    <Verts>...</Verts>\\n    <Lines>...</Lines>\\n    <Strips>...</Strips>\\n    <Polys>...</Polys>\\n   </Piece>\\n  </PolyData>\\n</VTKFile>\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"unstructuredgrid\",\n      children: \"UnstructuredGrid\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Each UnstructuredGrid piece specifies a set of points and cells independently from the other pieces. See [[#PieceMethods]]\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"The points are described explicitly by the Points element. See [[#PointsMethods]]\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"The cells are described explicitly by the Cells element. See [[#CellMethods]]\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-xml\",\n        children: \"<VTKFile type=\\\"UnstructuredGrid\\\" ...>\\n  <UnstructuredGrid>\\n    <Piece NumberOfPoints=\\\"#\\\" NumberOfCells=\\\"#\\\">\\n    <PointData>...</PointData>\\n    <CellData>...</CellData>\\n    <Points>...</Points>\\n    <Cells>...</Cells>\\n    </Piece>\\n  </UnstructuredGrid>\\n</VTKFile>\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"module-structure\",\n      children: \"Module structure\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"TYPE, EXTENDS( XMLFile_ ) :: VTKFile_\\n  PRIVATE\\n  LOGICAL( LGT ) :: isStructured = .FALSE.\\n    !! Is dataset structured\\n  INTEGER( I4B ) :: dataStructureType = 0\\n    !! 1 : VTK_ImageData\\n    !! 2 : VTK_RectilinearGrid\\n    !! 3 : VTK_StructuredGrid\\n    !! 4 : VTK_PolyData\\n    !! 5 : VTK_UnstructuredGrid\\n    !! 6 : PARALLEL_VTK_ImageData\\n    !! 7 : PARALLEL_VTK_RectilinearGrid\\n    !! 8 : PARALLEL_VTK_StructuredGrid\\n    !! 9 : PARALLEL_VTK_PolyData\\n    !! 10: PARALLEL_VTK_UnstructuredGrid\\n  CHARACTER( LEN = MAX_LEN_DATA_STRUCTURENAME ) :: dataStructureName\\n    !! ImageData,\\n    !! RectilinearGrid,\\n    !! StructuredGrid,\\n    !! PolyData,\\n    !! UnstructuredGrid\\n    !! PImageData\\n    !! PRectilinearGrid\\n    !! PStructuredGrid\\n    !! PPolyData\\n    !! PUnstructuredGrid\\n  INTEGER( I4B ) :: dataFormat = 0\\n    !! VTK_ASCII\\n    !! VTK_BINARY\\n    !! VTK_APPENDED\\n    !! VTK_RAW_APPENDED\\n    !! VTK_BINARY_APPENDED\\n  INTEGER( I4B ) :: wholeExtent( 6 ) = 0\\n    !! Whole extent\\n  INTEGER( I4B ) :: indent = 0\\n    !! Indent\\n  INTEGER( I4B ) :: offset = 0\\n    !! offset for appended mode\\n  TYPE( String ) :: encoding4Appended\\n    !! appended data encoding: \\\"raw\\\" or \\\"base64\\\".\\n  INTEGER( I4B ) :: scratch=0\\n    !! Used for scratch file\\n  LOGICAL( LGT ) :: isVolatile = .FALSE.\\n  TYPE( String ) :: volatileBuffer\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"vtkdataarrayencoder\",\n      children: \"VTKDataArrayEncoder\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"This module provides a function called \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"EncodeVTKDataArray\"\n      }), \" which helps us encoding the Fortran array into VTK Format.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"We have following interface:\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"MODULE FUNCTION EncodeVTKDataArray( x, fmt ) RESULT( Ans )\\nEND FUNCTION EncodeVTKDataArray\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n          children: [(0,jsx_runtime.jsx)(_components.code, {\n            children: \"x\"\n          }), \" is a Fortran array of intrinsic type, It can be a Rank-1, Rank-2, Rank-3 and Rank-4 array of \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"Real32\"\n          }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"Real64\"\n          }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"Int8\"\n          }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"Int16\"\n          }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"Int32\"\n          }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"Int64\"\n          }), \".\"]\n        }), \"\\n\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n          children: [(0,jsx_runtime.jsx)(_components.code, {\n            children: \"fmt\"\n          }), \" is a string variable having values \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"\\\"ASCII\\\", \\\"BINARY\\\"\"\n          }), \". In ASCII format two numbers are separated by a space.\"]\n        }), \"\\n\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n          children: [(0,jsx_runtime.jsx)(_components.code, {\n            children: \"ans\"\n          }), \" is the encoded string\"]\n        }), \"\\n\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n          children: \"Encoding of Rank-1 is easy to understand \\\"x(1) x(2) x(3) ... x(N)\\\"\"\n        }), \"\\n\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n          children: \"Encoding of Rank-2 is in Column major, that is, That is encoding of RESHAPE( x, [N*2])\"\n        }), \"\\n\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n          children: \"Encoding of higher rank is also in Column major, that is, encoding of RESHAPE( x, [N*Rank])\"\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"We have another interface described below.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"MODULE FUNCTION EncodeVTKDataArray( x, y, z, fmt ) RESULT( Ans )\\nEND FUNCTION EncodeVTKDataArray\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"x,y,z\"\n        }), \" can be Rank-1, Rank-2, Rank-3 of type \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"Int8\"\n        }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"Int16\"\n        }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"Int32\"\n        }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"Int64\"\n        }), \", \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"Real32\"\n        }), \", and \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"Real64\"\n        })]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"ans\"\n        }), \" is the encoded string\"]\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"The encoding of Rank-1 is \\\"x(1) y(1) z(1) ... x(N) y(N) z(N)\\\"\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"The encoding of Rank-2 is in column major \\\"x(1,jj) y(1, jj) z(1,jj) ... x(N,jj) y(N,jj) z(N,jj)\\\".\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"xmlfile\",\n      children: \"XMLFile\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"You can find more details at [[XMLFile_]]\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"constructormethods\",\n      children: \"ConstructorMethods\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"initiatevtkfile\",\n      children: \"InitiateVTKFile\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"This subroutine creates an instance of \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"VTKFile\"\n      }), \". This routine initiates the \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"XMLFile\"\n      }), \", and opens it. It also write header file by calling \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"WriteRootTag()\"\n      }), \" and DataStructure tag by calling \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"WriteDataStructureTag()\"\n      }), \". It also opens the scratch file.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"The interface is given below\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"MODULE SUBROUTINE InitiateVTKFile( obj, filename, mode, DataFormat, &\\n  & DataStructureType, WholeExtent, isVolatile, meshDataFormat, &\\n  & Spacing, Origin )\\n  CLASS( VTKFile_ ), INTENT( INOUT ) :: obj\\n  CHARACTER( LEN = * ), INTENT( IN ) :: filename\\n    !! Name of the file, where xml data will be printed\\n  CHARACTER( LEN = * ), INTENT( IN ) :: mode\\n    !! READ, WRITE, NEW, REPLACE\\n  INTEGER( I4B ), INTENT( IN ) :: DataFormat\\n    !! VTK_ASCII, VTK_APPENEDED, VTK_BINARY\\n  INTEGER( I4B ), INTENT( IN ) :: DataStructureType\\n    !! VTK_IMAGEDATA, VTK_STRUCTUREDGRID, etc.\\n  INTEGER( I4B ), OPTIONAL, INTENT( IN ) :: WholeExtent( : )\\n    !! Required for structured data set\\n    !! [x1, x2, y1, y2, z1, z2]\\n  LOGICAL( LGT ), OPTIONAL, INTENT( IN ) :: isVolatile\\n    !! True if volatileBuffer is used to keep the xml file\\n  CHARACTER( LEN = * ), OPTIONAL, INTENT( IN ) :: meshDataFormat\\n    !! Float32, Float64, etc\\n  INTEGER( I4B ), OPTIONAL, INTENT( IN ) :: Spacing( : )\\n    !! dx, dy, dz, needed in case of ImageData\\n  INTEGER( I4B ), OPTIONAL, INTENT( IN ) :: Origin( : )\\n    !! x0, y0, z0, needed in case of ImageData\\nEND SUBROUTINE InitiateVTKFile\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"addsurrogate\",\n      children: \"AddSurrogate\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Add surrogate to the module exception handler\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"MODULE SUBROUTINE AddSurrogate( obj, UserObj )\\n  CLASS( VTKFile_ ), INTENT( INOUT ) :: obj\\n  TYPE( ExceptionHandler_ ), INTENT( IN ) :: UserObj\\nEND SUBROUTINE AddSurrogate\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"deallocate\",\n      children: \"Deallocate\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Deallocate the data stored in the file, and close the file.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"MODULE SUBROUTINE Deallocate( obj, delete )\\n  CLASS( VTKFile_ ), INTENT( INOUT ) :: obj\\n  LOGICAL( LGT ), OPTIONAL, INTENT( IN ) :: delete\\nEND SUBROUTINE Deallocate\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"close\",\n      children: \"Close\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"If the file is open then close the file.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"MODULE SUBROUTINE Close( obj )\\n  CLASS( VTKFile_ ), INTENT( INOUT ) :: obj\\nEND SUBROUTINE Close\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"openscratchfile\",\n      children: \"OpenScratchFile\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"Opens the scratch file if data format is \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"VTK_APPENDED\"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"MODULE SUBROUTINE OpenScratchFile( obj )\\n  CLASS( VTKFile_ ), INTENT( INOUT ) :: obj\\nEND SUBROUTINE OpenScratchFile\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"closescratchfile\",\n      children: \"CloseScratchFile\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Closes the scratchFile\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"MODULE SUBROUTINE CloseScratchFile( obj )\\n  CLASS( VTKFile_ ), INTENT( INOUT ) :: obj\\nEND SUBROUTINE CloseScratchFile\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"tagsmethods\",\n      children: \"TagsMethods\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"writeroottag\",\n      children: \"WriteRootTag\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This routine write the root tag. This routine is called when we initiate\\nthe VTKFile.\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"The document-level element is \", (0,jsx_runtime.jsx)(_components.em, {\n        children: \"VTKFile\"\n      }), \":\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-xml\",\n        children: \"<VTKFile type=”ImageData” version=”0.1” byte_order=”LittleEndian”> ... </VTKFile>\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"The attributes of the element are:\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"type\"\n        }), \" — The type of the file (the bulleted items in the previous list)\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"version\"\n        }), \" — File version number in “major.minor” format.\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"byte_order\"\n        }), \" — Machine byte order in which data are stored. This is either “BigEndian” or “LittleEndian”.\"]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"compressor\"\n        }), \" — Some data in the file may be compressed. This specifies the subclass of \", (0,jsx_runtime.jsx)(_components.a, {\n          href: \"https://www.vtk.org/doc/nightly/html/classvtkDataCompressor.html#details\",\n          children: \"vtkDataCompressor\"\n        }), \" that was used to compress the data.\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"Nested inside the \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"VTKFile\"\n      }), \" element is an element whose name corresponds to the type of the data format (i.e., the \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"type\"\n      }), \" attribute). This element describes the topology the dataset, and is different for the serial and parallel formats, which are described as follows.\"]\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"The fortran interface for \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"WriteRootTag\"\n      }), \" is given below:\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"MODULE SUBROUTINE VTKFile_WriteRootTag( obj )\\n  CLASS( VTKFile_ ), INTENT( INOUT ) :: obj\\nEND SUBROUTINE VTKFile_WriteRootTag\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"writedatastructuretag\",\n      children: \"WriteDataStructureTag\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Please read the InitiateVTKFile routine.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"MODULE SUBROUTINE VTKFile_WriteDataStructureTag( obj, meshDataFormat )\\n  CLASS( VTKFile_ ), INTENT( INOUT ) :: obj\\n  CHARACTER( LEN = * ), OPTIONAL, INTENT( IN ) :: meshDataFormat\\n    !! Float32, Float64\\n    !! It should be present for parallel data structure\\n    !! PARALLEL_VTK_RECTILINEARGRID, PARALLEL_VTK_STRUCTUREDGRID,\\n    !! PARALLEL_VTK_UNSTRUCTUREDGRID\\nEND SUBROUTINE VTKFile_WriteDataStructureTag\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"writestarttag\",\n      children: \"WriteStartTag\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"MODULE SUBROUTINE VTKFile_WriteStartTag( obj, name, attrNames, attrValues )\\n  CLASS( VTKFile_ ), INTENT( INOUT ) :: obj\\n  TYPE( String ), INTENT( IN ) :: name\\n  TYPE( String ), OPTIONAL, INTENT( IN ) :: attrNames( : )\\n  TYPE( String ), OPTIONAL, INTENT( IN ) :: attrValues( : )\\nEND SUBROUTINE VTKFile_WriteStartTag\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"writeendtag\",\n      children: \"WriteEndTag\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"MODULE SUBROUTINE VTKFile_WriteEndTag( obj, name )\\n  CLASS( VTKFile_ ), INTENT( INOUT ) :: obj\\n  TYPE( String ), INTENT( IN ) :: name\\nEND SUBROUTINE VTKFile_WriteEndTag\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"writeselfclosingtag\",\n      children: \"WriteSelfClosingTag\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"MODULE SUBROUTINE VTKFile_WriteSelfClosingTag( obj, name, attrNames, &\\n  & attrValues )\\n  CLASS( VTKFile_ ), INTENT( INOUT ) :: obj\\n  TYPE( String ), INTENT( IN ) :: name\\n  TYPE( String ), OPTIONAL, INTENT( IN ) :: attrNames( : )\\n  TYPE( String ), OPTIONAL, INTENT( IN ) :: attrValues( : )\\nEND SUBROUTINE VTKFile_WriteSelfClosingTag\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"writetag\",\n      children: \"WriteTag\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"MODULE SUBROUTINE VTKFile_WriteTag( obj, name, attrNames, &\\n  & attrValues, content )\\n  CLASS( VTKFile_ ), INTENT( INOUT ) :: obj\\n  TYPE( String ), INTENT( IN ) :: name\\n  TYPE( String ), OPTIONAL, INTENT( IN ) :: attrNames( : )\\n  TYPE( String ), OPTIONAL, INTENT( IN ) :: attrValues( : )\\n  TYPE( String ), OPTIONAL, INTENT( IN ) :: content\\nEND SUBROUTINE VTKFile_WriteTag\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"vertmethods\",\n      children: \"VertMethods\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [(0,jsx_runtime.jsx)(_components.strong, {\n        children: \"Verts, Lines, Strips, and Polys\"\n      }), \" — The Verts, Lines, Strips, and Polys elements define cells explicitly by specifying point connectivity. Cell types are implicitly known by the type of element in which they are specified. Each element contains two DataArray elements. The first array specifies the point connectivity. All the cells’ point lists are concatenated together. The second array specifies the offset into the connectivity array for the end of each cell.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-xml\",\n        children: \"<Verts>\\n  <DataArray type=\\\"Int32\\\" Name=\\\"connectivity\\\" .../>\\n  <DataArray type=\\\"Int32\\\" Name=\\\"offsets\\\" .../>\\n</Verts>\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"writeverts\",\n      children: \"WriteVerts\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"MODULE SUBROUTINE WriteVerts( obj, connectivity, offsets )\\n  CLASS( VTKFile_ ), INTENT( INOUT ) :: obj\\n  INTEGER( I4B ), INTENT( IN ) :: connectivity( : )\\n  INTEGER( I4B ), INTENT( IN ) :: offsets( : )\\nEND SUBROUTINE WriteVerts\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"cellmethods\",\n      children: \"CellMethods\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [(0,jsx_runtime.jsx)(_components.strong, {\n        children: \"Cells\"\n      }), \" — The Cells element defines cells explicitly by specifying point connectivity and cell types. It contains three DataArray elements. The first array specifies the point \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"connectivity\"\n      }), \". All the cells’ point lists are concatenated together. The second array specifies the \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"offset\"\n      }), \" into the connectivity array for the end of each cell. The third array specifies the \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"type\"\n      }), \" of each cell.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-xml\",\n        children: \"<Cells>\\n  <DataArray type=\\\"Int32\\\" Name=\\\"connectivity\\\" .../>\\n  <DataArray type=\\\"Int32\\\" Name=\\\"offsets\\\" .../>\\n  <DataArray type=\\\"UInt8\\\" Name=\\\"types\\\" .../>\\n</Cells>\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"writecells\",\n      children: \"WriteCells\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\nMODULE SUBROUTINE WriteCells( obj, connectivity, offsets, types )\\n  CLASS( VTKFile_ ), INTENT( INOUT ) :: obj\\n  INTEGER( I4B ), INTENT( IN ) :: connectivity( : )\\n  INTEGER( I4B ), INTENT( IN ) :: offsets( : )\\n  INTEGER( Int8 ), INTENT( IN ) :: types( : )\\nEND SUBROUTINE WriteCells\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"dataarraymethods\",\n      children: \"DataArrayMethods\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Every dataset describes the data associated with its points and cells with PointData and CellData XML elements as follows:\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-xml\",\n        children: \"<PointData Scalars=\\\"Temperature\\\" Vectors=\\\"Velocity\\\">\\n  <DataArray Name=\\\"Velocity\\\" .../>\\n  <DataArray Name=\\\"Temperature\\\" .../>\\n  <DataArray Name=\\\"Pressure\\\" .../>\\n</PointData>\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"We specify \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"PointData\"\n      }), \" or \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"CellData\"\n      }), \" by using the [[#WriteDataArrayLocationTag]]. We can write DataArray element by using [[#WriteDataArrayTag]]. The content inside the DataArray can also be written by using [[#WriteDataArrayTag]]. One can also use the [[#WriteDataArray]] method to write the content in simple way.\"]\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"VTK allows an arbitrary number of data arrays to be associated with the points and cells of a dataset. Each data array is described by a \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"DataArray\"\n      }), \" element which, among other things, gives each array a name. The following attributes of \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"PointData\"\n      }), \" and \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"CellData\"\n      }), \" are used to specify the active arrays by name:\"]\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Scalars — The name of the active scalars array, if any.\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Vectors — The name of the active vectors array, if any.\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Normals — The name of the active normals array, if any.\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Tensors — The name of the active tensors array, if any.\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"TCoords — The name of the active texture coordinates array, if any.\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [(0,jsx_runtime.jsx)(_components.strong, {\n        children: \"DataArray\"\n      }), \" — The DataArray element stores a sequence of values of one type. There may be one or more components per value.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-xml\",\n        children: \"<DataArray type=\\\"Float32\\\" Name=\\\"vectors\\\" NumberOfComponents=\\\"3\\\"\\n           format=\\\"appended\\\" offset=\\\"0\\\"/>\\n<DataArray type=\\\"Float32\\\" Name=\\\"scalars\\\" format=\\\"binary\\\">\\n           bAAAAAAAAAAAAIA/AAAAQAAAQEAAAIBA... </DataArray>\\n<DataArray type=\\\"Int32\\\" Name=\\\"offsets\\\" format=\\\"ascii\\\">\\n           10 20 30 ... </DataArray>\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"The attributes of the \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"DataArray\"\n      }), \" elements are described as follows\"]\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [(0,jsx_runtime.jsx)(_components.code, {\n        children: \"type\"\n      }), \" — The data type of a single component of the array. This is one of Int8, UInt8, Int16, UInt16, Int32, UInt32, Int64, UInt64, Float32, Float64. Note: the 64-bit integer types are only supported if \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"VTK_USE_64BIT_IDS\"\n      }), \" is on the platform is 64-bit.\"]\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [(0,jsx_runtime.jsx)(_components.strong, {\n        children: \"Name\"\n      }), \" — The name of the array. This is usually a brief description of the data stored in the array.\"]\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [(0,jsx_runtime.jsx)(_components.strong, {\n        children: \"NumberOfComponents\"\n      }), \" — The number of components per value in the array.\"]\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [(0,jsx_runtime.jsx)(_components.strong, {\n        children: \"format\"\n      }), \" — The means by which the data values themselves are stored in the file. This is “ascii”, “binary”, or “appended”.\"]\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [(0,jsx_runtime.jsx)(_components.strong, {\n        children: \"offset\"\n      }), \" — If the format attribute is “appended”, this specifies the offset from the beginning of the appended data section to the beginning of this array’s data.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"The format attribute chooses among the three ways in which data values can be stored:\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"format=”ascii” — The data are listed in ASCII directly inside the DataArray element. Whitespace is used for separation.\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"format=”binary” — The data are encoded in base64 and listed contiguously inside the DataArray element. Data may also be compressed before encoding in base64. The byte-order of the data matches that specified by the byte_order attribute of the VTKFile element.\"\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"format=”appended” — The data are stored in the appended data section. Since many DataArray elements may store their data in this section, the offset attribute is used to specify where each DataArray’s data begins. This format is the default used by VTK’s writers.\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"The appended data section is stored in an AppendedData element that is nested inside VTKFile after the dataset element:\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-xml\",\n        children: \"<VTKFile ...>\\n  ...\\n  <AppendedData encoding=\\\"base64\\\">\\n                _QMwEAAAAAAAAA...\\n  </AppendedData>\\n</VTKFile>\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"The appended data section begins with the first character after the underscore inside the AppendedData element. The underscore is not part of the data, but is always present. Data in this section is always in binary form, but can be compressed and/or base64 encoded. The byte-order of the data matches that specified by the byte_order attribute of the VTKFile element. Each DataArray’s data are stored contiguously and appended immediately after the previous DataArray’s data without a seperator. The DataArray’s offset attribute indicates the file position offset from the first character after the underscore to the beginning its data.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"writedataarraylocationtag\",\n      children: \"WriteDataArrayLocationTag\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"MODULE SUBROUTINE VTKFile_WriteDataArrayLocationTag( obj, location, action )\\n  CLASS( VTKFile_ ), INTENT( INOUT ) :: obj\\n  TYPE( String ), INTENT( IN ) :: location\\n    !! \\\"CELL\\\" and \\\"NODE\\\"\\n  TYPE( String ), INTENT( IN ) :: action\\n    !! \\\"OPEN\\\" or \\\"CLOSE\\\"\\nEND SUBROUTINE VTKFile_WriteDataArrayLocationTag\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"writedataarraytag\",\n      children: \"WriteDataArrayTag\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"MODULE SUBROUTINE VTKFile_WriteDataArrayTag( obj, dataType, name, &\\n  & numberOfComponents, content, isTuples, isOffset )\\n  CLASS( VTKFile_ ), INTENT( INOUT ) :: obj\\n  TYPE( String ), INTENT( IN ) :: dataType\\n  TYPE( String ), INTENT( IN ) :: name\\n  INTEGER( I4B ), INTENT( IN ) :: numberOfComponents\\n  TYPE( String ), OPTIONAL, INTENT( IN ) :: content\\n  LOGICAL( LGT ), OPTIONAL, INTENT( IN ) :: isTuples\\n  LOGICAL( LGT ), OPTIONAL, INTENT( IN ) :: isOffset\\nEND SUBROUTINE VTKFile_WriteDataArrayTag\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"writedataarray\",\n      children: \"WriteDataArray\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This routine write the data array to VTK file. There are two main interface as explained below. This routine encode the fortran array into strings and then make a call to [[#WriteDataArrayTag]] routine.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Interface:\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"MODULE SUBROUTINE WriteDataArray( obj, name, x, isTuples, numberOfComponents )\\n  CLASS( VTKFile_ ), INTENT( INOUT ) :: obj\\n  TYPE( String ), INTENT( IN ) :: name\\n  TYPE( Real32/Real64/Int8/Int16/Int32/Int64 ), INTENT( IN ) :: x (rank-1/2/3/4)\\n  LOGICAL( LGT ), OPTIONAL, INTENT( IN ) :: isTuples\\n  INTEGER( I4B ), OPTIONAL, INTENT( IN ) :: numberOfComponents\\nEND SUBROUTINE WriteDataArray\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"Here \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"x\"\n        }), \" can be a rank-1,2,3,4 array of Fortran intrinsic type Int8/Int16/Int32/Int64, Real32/Real64\"]\n      }), \"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: (0,jsx_runtime.jsx)(_components.code, {\n          children: \"isTuples\"\n        })\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [(0,jsx_runtime.jsx)(_components.code, {\n          children: \"numberOfComponents\"\n        }), \" For rank-1 array, by default the number of components will be 1. For rank>1, the number of components will be the size of first dimension, that is, SIZE(x,1).\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"The another interface is given below\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"MODULE SUBROUTINE WriteDataArray( obj, name, x, y, z, isTuples )\\n  CLASS( VTKFile_ ), INTENT( INOUT ) :: obj\\n  TYPE( String ), INTENT( IN ) :: name\\n  TYPE( Real32/Real64/Int8/Int16/Int32/Int64 ), INTENT( IN ) :: x (rank-1/2/3/4)\\n  TYPE( Real32/Real64/Int8/Int16/Int32/Int64 ), INTENT( IN ) :: y (rank-1/2/3/4)\\n  TYPE( Real32/Real64/Int8/Int16/Int32/Int64 ), INTENT( IN ) :: z (rank-1/2/3/4)\\n  LOGICAL( LGT ), OPTIONAL, INTENT( IN ) :: isTuples\\nEND SUBROUTINE WriteDataArray\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"In this case the number of components are always 3.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"dataarrayappendedmethods\",\n      children: \"DataArrayAppendedMethods\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"writetoscratch\",\n      children: \"WriteToScratch\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"This generic routine can be used to write to scratch file.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Interface-1:\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"MODULE SUBROUTINE WriteToScratch( obj, x )\\n  CLASS( VTKFile_ ), INTENT( INOUT ) :: obj\\n  TYPE( Int8/Int16/Int32/Int64/Real32/Real64 ), INTENT( IN ) :: x (rank-1/2/3/4)\\nEND SUBROUTINE WriteToScratch\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"MODULE SUBROUTINE VTKFile_WriteToScratch5( obj, x, y, z )\\n  CLASS( VTKFile_ ), INTENT( INOUT ) :: obj\\n  TYPE( Int8/Int16/Int32/Int64/Real32/Real64 ), INTENT( IN ) :: x( rank-1/2/3 )\\n  TYPE( Int8/Int16/Int32/Int64/Real32/Real64 ), INTENT( IN ) :: y( rank-1/2/3 )\\n  TYPE( Int8/Int16/Int32/Int64/Real32/Real64 ), INTENT( IN ) :: z( rank-1/2/3 )\\nEND SUBROUTINE VTKFile_WriteToScratch5\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"fielddatamethods\",\n      children: \"FieldDataMethods\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"writefielddata\",\n      children: \"WriteFieldData\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"MODULE SUBROUTINE WriteFieldData( obj, name, x )\\n  CLASS( VTKFile_ ), INTENT( INOUT ) :: obj\\n  TYPE( String ), INTENT( IN ) :: name\\n  CLASS( * ), INTENT( IN ) :: x\\nEND SUBROUTINE WriteFieldData\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"MODULE SUBROUTINE WriteFieldData( obj, action )\\n  CLASS( VTKFile_ ), INTENT( INOUT ) :: obj\\n  TYPE( String ), INTENT( IN ) :: action\\n    !! Open, Close\\nEND SUBROUTINE WriteFieldData\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"pointsmethods\",\n      children: \"PointsMethods\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"Also see [[#InitiateVTKFile]] routine to check Datastructure where Points element is needed. The Points element explicitly defines coordinates for each point individually. It contains one \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"DataArray\"\n      }), \" element describing an array with three components per value, each specifying the coordinates of one point.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-xml\",\n        children: \"<Points>\\n  <DataArray NumberOfComponents=”3” .../>\\n</Points>\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n      children: [(0,jsx_runtime.jsx)(_components.strong, {\n        children: \"Coordinates\"\n      }), \" — The Coordinates element defines point coordinates for an extent by specifying the ordinate along each axis for each integer value in the extent’s range. It contains three DataArray elements describing the ordinates along the x-y-z axes, respectively. It is needed by \", (0,jsx_runtime.jsx)(_components.code, {\n        children: \"RectilinearGrid\"\n      }), \" Datastructure.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-xml\",\n        children: \"<Coordinates>\\n  <DataArray .../>\\n  <DataArray .../>\\n  <DataArray .../>\\n</Coordinates>\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h3, {\n      id: \"writepoints\",\n      children: \"WritePoints\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Interface-1:\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"MODULE SUBROUTINE WritePoints( obj, x, y, z )\\n  CLASS( VTKFile_ ), INTENT( INOUT ) :: obj\\n  REAL( Real64/Real32 ), INTENT( IN ) :: x( : )\\n  REAL( Real64/Real32 ), INTENT( IN ) :: y( : )\\n  REAL( Real64/Real32 ), INTENT( IN ) :: z( : )\\nEND SUBROUTINE WritePoints\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Interface-2:\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"MODULE SUBROUTINE WritePoints( obj, x )\\n  CLASS( VTKFile_ ), INTENT( INOUT ) :: obj\\n  REAL( Real64/Real32 ), INTENT( IN ) :: x( 1: )\\nEND SUBROUTINE WritePoints\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Interface-3: Some time we compute x, y, z from meshgrid. In such cases x, y and z will be rank-3. where x(I,J,K) denote the x coord of Ith node in x, Jth node in y, and Kth node in z direction. See example [[VTKFile_test_4]]\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"MODULE SUBROUTINE WritePoints( obj, x, y, z )\\n  CLASS( VTKFile_ ), INTENT( INOUT ) :: obj\\n  REAL( Real64/Real32 ), INTENT( IN ) :: x( :, :, : )\\n  REAL( Real64/Real32 ), INTENT( IN ) :: y( :, :, : )\\n  REAL( Real64/Real32 ), INTENT( IN ) :: z( :, :, : )\\nEND SUBROUTINE WritePoints\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Interface-4:\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"MODULE SUBROUTINE WritePoints( obj, x )\\n  CLASS( VTKFile_ ), INTENT( INOUT ) :: obj\\n  REAL( Real64/Real32 ), INTENT( IN ) :: x( :, :, :, : )\\nEND SUBROUTINE WritePoints\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"piecemethods\",\n      children: \"PieceMethods\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"See [[#InitiateVTKFile]] to see where PieceMethods are useful.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Write Piece for [[#ImageData]], [[#RectilinearGrid]], [[#StructuredGrid]]\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"MODULE SUBROUTINE WritePiece( obj, extent, srcFileName )\\n  CLASS( VTKFile_ ), INTENT( INOUT ) :: obj\\n  INTEGER( I4B ), INTENT( IN ) :: extent( : )\\n  CHARACTER( LEN = * ), OPTIONAL, INTENT( IN ) :: srcFileName\\nEND SUBROUTINE WritePiece\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Write Piece element for [[#UnstructuredGrid]]\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"MODULE SUBROUTINE WritePiece( obj, nPoints, nCells )\\n  CLASS( VTKFile_ ), INTENT( INOUT ) :: obj\\n  INTEGER( I4B ), INTENT( IN ) :: nPoints\\n  INTEGER( I4B ), INTENT( IN ) :: nCells\\nEND SUBROUTINE WritePiece\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Write Piece element for [[#PolyData]]\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"MODULE SUBROUTINE WritePiece( obj, nPoints, nVerts, nLines, &\\n  & nStrips, nPolys )\\n  CLASS( VTKFile_ ), INTENT( INOUT ) :: obj\\n  INTEGER( I4B ), INTENT( IN ) :: nPoints\\n  INTEGER( I4B ), INTENT( IN ) :: nVerts\\n  INTEGER( I4B ), INTENT( IN ) :: nLines\\n  INTEGER( I4B ), INTENT( IN ) :: nStrips\\n  INTEGER( I4B ), INTENT( IN ) :: nPolys\\nEND SUBROUTINE WritePiece\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"The following close the Piece element.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"MODULE SUBROUTINE WritePiece( obj )\\n  CLASS( VTKFile_ ), INTENT( INOUT ) :: obj\\nEND SUBROUTINE WritePiece\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./docs/docs-api/VTKFile/VTKFile_.md\n");

/***/ }),

/***/ "./node_modules/@mdx-js/react/lib/index.js":
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MDXProvider: () => (/* binding */ MDXProvider),\n/* harmony export */   useMDXComponents: () => (/* binding */ useMDXComponents)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/react/index.js\");\n/**\n * @import {MDXComponents} from 'mdx/types.js'\n * @import {Component, ReactElement, ReactNode} from 'react'\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\n\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nfunction useMDXComponents(components) {\n  const contextComponents = react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {ReactElement}\n *   Element.\n * @satisfies {Component}\n */\nfunction MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Vhc2lmZW0tZG9jcy8uL25vZGVfbW9kdWxlcy9AbWR4LWpzL3JlYWN0L2xpYi9pbmRleC5qcz9hZjEyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGltcG9ydCB7TURYQ29tcG9uZW50c30gZnJvbSAnbWR4L3R5cGVzLmpzJ1xuICogQGltcG9ydCB7Q29tcG9uZW50LCBSZWFjdEVsZW1lbnQsIFJlYWN0Tm9kZX0gZnJvbSAncmVhY3QnXG4gKi9cblxuLyoqXG4gKiBAY2FsbGJhY2sgTWVyZ2VDb21wb25lbnRzXG4gKiAgIEN1c3RvbSBtZXJnZSBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7UmVhZG9ubHk8TURYQ29tcG9uZW50cz59IGN1cnJlbnRDb21wb25lbnRzXG4gKiAgIEN1cnJlbnQgY29tcG9uZW50cyBmcm9tIHRoZSBjb250ZXh0LlxuICogQHJldHVybnMge01EWENvbXBvbmVudHN9XG4gKiAgIEFkZGl0aW9uYWwgY29tcG9uZW50cy5cbiAqXG4gKiBAdHlwZWRlZiBQcm9wc1xuICogICBDb25maWd1cmF0aW9uIGZvciBgTURYUHJvdmlkZXJgLlxuICogQHByb3BlcnR5IHtSZWFjdE5vZGUgfCBudWxsIHwgdW5kZWZpbmVkfSBbY2hpbGRyZW5dXG4gKiAgIENoaWxkcmVuIChvcHRpb25hbCkuXG4gKiBAcHJvcGVydHkge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+IHwgTWVyZ2VDb21wb25lbnRzIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2NvbXBvbmVudHNdXG4gKiAgIEFkZGl0aW9uYWwgY29tcG9uZW50cyB0byB1c2Ugb3IgYSBmdW5jdGlvbiB0aGF0IGNyZWF0ZXMgdGhlbSAob3B0aW9uYWwpLlxuICogQHByb3BlcnR5IHtib29sZWFuIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2Rpc2FibGVQYXJlbnRDb250ZXh0PWZhbHNlXVxuICogICBUdXJuIG9mZiBvdXRlciBjb21wb25lbnQgY29udGV4dCAoZGVmYXVsdDogYGZhbHNlYCkuXG4gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuXG4vKiogQHR5cGUge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+fSAqL1xuY29uc3QgZW1wdHlDb21wb25lbnRzID0ge31cblxuY29uc3QgTURYQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoZW1wdHlDb21wb25lbnRzKVxuXG4vKipcbiAqIEdldCBjdXJyZW50IGNvbXBvbmVudHMgZnJvbSB0aGUgTURYIENvbnRleHQuXG4gKlxuICogQHBhcmFtIHtSZWFkb25seTxNRFhDb21wb25lbnRzPiB8IE1lcmdlQ29tcG9uZW50cyB8IG51bGwgfCB1bmRlZmluZWR9IFtjb21wb25lbnRzXVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMgdG8gdXNlIG9yIGEgZnVuY3Rpb24gdGhhdCBjcmVhdGVzIHRoZW0gKG9wdGlvbmFsKS5cbiAqIEByZXR1cm5zIHtNRFhDb21wb25lbnRzfVxuICogICBDdXJyZW50IGNvbXBvbmVudHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VNRFhDb21wb25lbnRzKGNvbXBvbmVudHMpIHtcbiAgY29uc3QgY29udGV4dENvbXBvbmVudHMgPSBSZWFjdC51c2VDb250ZXh0KE1EWENvbnRleHQpXG5cbiAgLy8gTWVtb2l6ZSB0byBhdm9pZCB1bm5lY2Vzc2FyeSB0b3AtbGV2ZWwgY29udGV4dCBjaGFuZ2VzXG4gIHJldHVybiBSZWFjdC51c2VNZW1vKFxuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIEN1c3RvbSBtZXJnZSB2aWEgYSBmdW5jdGlvbiBwcm9wXG4gICAgICBpZiAodHlwZW9mIGNvbXBvbmVudHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGNvbXBvbmVudHMoY29udGV4dENvbXBvbmVudHMpXG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7Li4uY29udGV4dENvbXBvbmVudHMsIC4uLmNvbXBvbmVudHN9XG4gICAgfSxcbiAgICBbY29udGV4dENvbXBvbmVudHMsIGNvbXBvbmVudHNdXG4gIClcbn1cblxuLyoqXG4gKiBQcm92aWRlciBmb3IgTURYIGNvbnRleHQuXG4gKlxuICogQHBhcmFtIHtSZWFkb25seTxQcm9wcz59IHByb3BlcnRpZXNcbiAqICAgUHJvcGVydGllcy5cbiAqIEByZXR1cm5zIHtSZWFjdEVsZW1lbnR9XG4gKiAgIEVsZW1lbnQuXG4gKiBAc2F0aXNmaWVzIHtDb21wb25lbnR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBNRFhQcm92aWRlcihwcm9wZXJ0aWVzKSB7XG4gIC8qKiBAdHlwZSB7UmVhZG9ubHk8TURYQ29tcG9uZW50cz59ICovXG4gIGxldCBhbGxDb21wb25lbnRzXG5cbiAgaWYgKHByb3BlcnRpZXMuZGlzYWJsZVBhcmVudENvbnRleHQpIHtcbiAgICBhbGxDb21wb25lbnRzID1cbiAgICAgIHR5cGVvZiBwcm9wZXJ0aWVzLmNvbXBvbmVudHMgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBwcm9wZXJ0aWVzLmNvbXBvbmVudHMoZW1wdHlDb21wb25lbnRzKVxuICAgICAgICA6IHByb3BlcnRpZXMuY29tcG9uZW50cyB8fCBlbXB0eUNvbXBvbmVudHNcbiAgfSBlbHNlIHtcbiAgICBhbGxDb21wb25lbnRzID0gdXNlTURYQ29tcG9uZW50cyhwcm9wZXJ0aWVzLmNvbXBvbmVudHMpXG4gIH1cblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICBNRFhDb250ZXh0LlByb3ZpZGVyLFxuICAgIHt2YWx1ZTogYWxsQ29tcG9uZW50c30sXG4gICAgcHJvcGVydGllcy5jaGlsZHJlblxuICApXG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@mdx-js/react/lib/index.js\n");

/***/ })

}]);