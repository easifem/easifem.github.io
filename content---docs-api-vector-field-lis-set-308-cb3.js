"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkeasifem_docs"] = globalThis["webpackChunkeasifem_docs"] || []).push([["content---docs-api-vector-field-lis-set-308-cb3"],{

/***/ "./docs/docs-api/VectorFieldLis/Set.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  assets: () => (/* binding */ assets),\n  contentTitle: () => (/* binding */ Set_contentTitle),\n  \"default\": () => (/* binding */ Set_MDXContent),\n  frontMatter: () => (/* binding */ Set_frontMatter),\n  metadata: () => (/* reexport */ site_docs_docs_api_vector_field_lis_set_md_308_namespaceObject),\n  toc: () => (/* binding */ Set_toc)\n});\n\n;// ./.docusaurus/docusaurus-plugin-content-docs/docs-api/site-docs-docs-api-vector-field-lis-set-md-308.json\nconst site_docs_docs_api_vector_field_lis_set_md_308_namespaceObject = /*#__PURE__*/JSON.parse('{\"id\":\"VectorFieldLis/Set\",\"title\":\"Set\",\"description\":\"Set entries in vector field.\",\"source\":\"@site/docs/docs-api/VectorFieldLis/Set.md\",\"sourceDirName\":\"VectorFieldLis\",\"slug\":\"/VectorFieldLis/Set\",\"permalink\":\"/docs-api/VectorFieldLis/Set\",\"draft\":false,\"unlisted\":false,\"editUrl\":\"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/VectorFieldLis/Set.md\",\"tags\":[],\"version\":\"current\",\"lastUpdatedAt\":1539502055000,\"frontMatter\":{},\"sidebar\":\"tutorialSidebar\",\"previous\":{\"title\":\"Norm2\",\"permalink\":\"/docs-api/VectorFieldLis/Norm2\"},\"next\":{\"title\":\"SetVectorFieldParam\",\"permalink\":\"/docs-api/VectorFieldLis/SetVectorFieldParam\"}}');\n// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n// EXTERNAL MODULE: ./node_modules/@mdx-js/react/lib/index.js\nvar lib = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js + 2 modules\nvar Tabs = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js\");\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js + 1 modules\nvar TabItem = __webpack_require__(\"./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js\");\n;// ./docs/docs-api/VectorFieldLis/_VectorField_test_3.md\n\n\nconst frontMatter = {};\nconst contentTitle = undefined;\n\n\n\n\n\nconst toc = [];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsxs)(_components.p, {\n      children: [\"In this example we test the \", (0,jsx_runtime.jsx)(_components.a, {\n        href: \"/docs-api/VectorFieldLis/Set\",\n        children: \"Set\"\n      }), \" method.\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"PROGRAM main\\n  USE easifemBase\\n  USE easifemClasses\\n  TYPE( Domain_ ) :: dom\\n  TYPE( VectorFieldLis_ ) :: obj\\n  TYPE( HDF5File_ ) :: meshfile\\n  TYPE( ParameterList_ ) :: param\\n  INTEGER( I4B ) :: ierr\\n  INTEGER( I4B ), PARAMETER :: spaceCompo=2_I4B\\n  CHARACTER(*), PARAMETER :: engine = \\\"LIS_OMP\\\"\\n  REAL( DFP ), allocatable :: value(:)\\n\\n  ! import domain\\n  CALL meshfile%initiate( filename=\\\"./mesh.h5\\\", mode=\\\"READ\\\" )\\n  CALL meshfile%open()\\n  CALL dom%initiate( hdf5=meshfile, group=\\\"\\\" )\\n  CALL meshfile%Deallocate()\\n\\n\\n  ! set parameters for VectorField_\\n  CALL FPL_INIT()\\n  CALL param%initiate()\\n  CALL SetVectorFieldParam( param=param, &\\n    & fieldType=FIELD_TYPE_NORMAL, &\\n    & name=\\\"U\\\", &\\n    & engine=engine, &\\n    & spaceCompo=spaceCompo)\\n\\n  CALL obj%initiate( param, dom )\\n  !! set a single entry\\n  CALL Reallocate(value, spaceCompo)\\n  CALL Random_number(value)\\n  CALL Display(value, \\\"value = \\\")\\n  CALL obj%set(value=value, globalNode=1)\\n  CALL obj%set(value=value, globalNode=2)\\n  CALL obj%set(value=value, globalNode=3)\\n  CALL obj%Display(\\\"obj = \\\")\\n\\n  CALL obj%Deallocate(); CALL dom%Deallocate()\\n  CALL param%Deallocate(); CALL FPL_FINALIZE()\\nEND PROGRAM main\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"Results\\\"\",\n        children: \"value = \\n--------\\n0.574890\\n0.598815\\n\\n# VAR :U\\n DOF-1 ,   DOF-2 ,   \\n-------,  -------,   \\n0.57489,  0.59881,   \\n0.57489,  0.59881,   \\n0.57489,  0.59881,\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/VectorFieldLis/Set.md\n\n\nconst Set_frontMatter = {};\nconst Set_contentTitle = 'Set';\n\nconst assets = {\n\n};\n\n\n\n\n\n\nconst Set_toc = [{\n  \"value\": \"Interface 1\",\n  \"id\": \"interface-1\",\n  \"level\": 2\n}, ...toc, {\n  \"value\": \"Interface 2\",\n  \"id\": \"interface-2\",\n  \"level\": 2\n}, {\n  \"value\": \"Interface 3\",\n  \"id\": \"interface-3\",\n  \"level\": 2\n}, {\n  \"value\": \"Interface 4\",\n  \"id\": \"interface-4\",\n  \"level\": 2\n}, {\n  \"value\": \"Interface 5\",\n  \"id\": \"interface-5\",\n  \"level\": 2\n}, {\n  \"value\": \"Interface 6\",\n  \"id\": \"interface-6\",\n  \"level\": 2\n}, {\n  \"value\": \"Interface 7\",\n  \"id\": \"interface-7\",\n  \"level\": 2\n}, {\n  \"value\": \"Interface 8\",\n  \"id\": \"interface-8\",\n  \"level\": 2\n}, {\n  \"value\": \"Interface 9\",\n  \"id\": \"interface-9\",\n  \"level\": 2\n}, {\n  \"value\": \"Interface 10\",\n  \"id\": \"interface-10\",\n  \"level\": 2\n}, {\n  \"value\": \"Interface 11\",\n  \"id\": \"interface-11\",\n  \"level\": 2\n}, {\n  \"value\": \"Interface 12\",\n  \"id\": \"interface-12\",\n  \"level\": 2\n}, {\n  \"value\": \"Interface 13\",\n  \"id\": \"interface-13\",\n  \"level\": 2\n}, {\n  \"value\": \"Interface 14\",\n  \"id\": \"interface-14\",\n  \"level\": 2\n}];\nfunction Set_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    header: \"header\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.header, {\n      children: (0,jsx_runtime.jsx)(_components.h1, {\n        id: \"set\",\n        children: \"Set\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Set entries in vector field.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Calling example:\"\n    }), \"\\n\", \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-1\",\n      children: \"Interface 1\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs[\"default\"], {\n      children: [(0,jsx_runtime.jsxs)(TabItem[\"default\"], {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \" INTERFACE\\n  MODULE SUBROUTINE set1(obj, globalNode, VALUE, &\\n    & scale, addContribution)\\n    CLASS(VectorFieldLis_), INTENT(INOUT) :: obj\\n    INTEGER(I4B), INTENT(IN) :: globalNode\\n    REAL(DFP), INTENT(IN) :: VALUE(:)\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\\n  END SUBROUTINE set1\\nEND INTERFACE\\n\"\n          })\n        }), (0,jsx_runtime.jsx)(_components.p, {\n          children: \"This routine sets the single entry of the vector field.\"\n        }), (0,jsx_runtime.jsxs)(_components.p, {\n          children: [\"Here, \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"value\"\n          }), \" should be a vector representing the components of a vector.\"]\n        }), (0,jsx_runtime.jsxs)(_components.p, {\n          children: [\"The size of \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"value\"\n          }), \" should be same as \", (0,jsx_runtime.jsx)(_components.code, {\n            children: \"obj%spaceCompo\"\n          }), \".\"]\n        }), (0,jsx_runtime.jsx)(_components.p, {\n          children: \"In simple words it does following.\"\n        }), (0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-txt\",\n            children: \"vector( 1:spaceCompo, globalNode ) = value( 1:spaceCompo )\\n\"\n          })\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem[\"default\"], {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-2\",\n      children: \"Interface 2\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n  MODULE SUBROUTINE set2(obj, VALUE, scale, addContribution)\\n    CLASS(VectorFieldLis_), TARGET, INTENT(INOUT) :: obj\\n    REAL(DFP), INTENT(IN) :: VALUE(:)\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\\n  END SUBROUTINE set2\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"This method sets all the nodal values to \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"value\"\n        })]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"The size of value should be same as the \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"obj%spaceCompo\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        children: \"vector( 1:spaceCompo, i ) = value( 1:spaceCompo ), for i = 1, tNodes\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-3\",\n      children: \"Interface 3\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \" INTERFACE\\n MODULE SUBROUTINE set3(obj, VALUE, spaceCompo, scale, addContribution)\\n    CLASS(VectorFieldLis_), INTENT(INOUT) :: obj\\n    REAL(DFP), INTENT(IN) :: VALUE\\n    INTEGER(I4B), INTENT(IN) :: spaceCompo\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\\n  END SUBROUTINE set3\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"This routine sets all values of \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"spaceCompo\"\n        }), \" component of the vector field to a given scalar value \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"value\"\n        }), \".\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        children: \"vector( spaceCompo, i ) = value, for i = 1, tNodes\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-4\",\n      children: \"Interface 4\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \" INTERFACE\\n  MODULE SUBROUTINE set4(obj, VALUE, scale, addContribution)\\n    CLASS(VectorFieldLis_), INTENT(INOUT) :: obj\\n    REAL(DFP), INTENT(IN) :: VALUE(:, :)\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\\n  END SUBROUTINE set4\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"This routine set all entries of vector field to given vector\"\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"Here shape of should be \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"value(1:spaceCompo, tNodes)\"\n        }), \".\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        children: \"vector( :, : ) = value( :, : )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-5\",\n      children: \"Interface 5\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \" INTERFACE\\n MODULE SUBROUTINE set5(obj, VALUE, spaceCompo, scale, addContribution)\\n    CLASS(VectorFieldLis_), INTENT(INOUT) :: obj\\n    REAL(DFP), INTENT(IN) :: VALUE(:)\\n    INTEGER(I4B), INTENT(IN) :: spaceCompo\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\\n  END SUBROUTINE set5\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"This routine sets all entries of the component \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"spaceCompo\"\n        }), \" of VectorFieldLis to a given fortran vector \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"value\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        children: \"vector( spaceCompo, : ) = value( : )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"The size of \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"value\"\n        }), \" should be equal to the tNodes.\"]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-6\",\n      children: \"Interface 6\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n MODULE SUBROUTINE set6(obj, VALUE, spaceCompo, scale, addContribution)\\n    CLASS(VectorFieldLis_), INTENT(INOUT) :: obj\\n    TYPE(ScalarField_), INTENT(IN) :: VALUE\\n    INTEGER(I4B), INTENT(IN) :: spaceCompo\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\\n  END SUBROUTINE set6\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"This routine sets all entries of the component \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"spaceCompo\"\n        }), \" of VectorFieldLis to a given ScalarField \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"value\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        children: \"vector( spaceCompo, : ) = value\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-7\",\n      children: \"Interface 7\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n MODULE SUBROUTINE set7(obj, VALUE, globalNode, scale, addContribution)\\n    CLASS(VectorFieldLis_), INTENT(INOUT) :: obj\\n    INTEGER(I4B), INTENT(IN) :: globalNode(:)\\n    REAL(DFP), INTENT(IN) :: VALUE(:)\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\\n  END SUBROUTINE set7\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"This soubroutine sets the selected enties to a vector entry \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"value( : )\"\n        })]\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"Size of \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"value\"\n        }), \" should be equal to the \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"obj%spaceCompo\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        children: \"Effectively it does the following:\\nvector( :, globalNode ) = value( : ), for entries in global nodes\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-8\",\n      children: \"Interface 8\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n  MODULE SUBROUTINE set8(obj, globalNode, VALUE, scale, &\\n    & addContribution)\\n    CLASS(VectorFieldLis_), INTENT(INOUT) :: obj\\n    INTEGER(I4B), INTENT(IN) :: globalNode(:)\\n    REAL(DFP), INTENT(IN) :: VALUE(:, :)\\n  !! value is in value(i,J) format.\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\\n  END SUBROUTINE set8\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"This routine sets the selected entries.\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        children: \"vector( :, globalNode ) = value( :, : )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-9\",\n      children: \"Interface 9\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \" INTERFACE\\n  MODULE SUBROUTINE set9(obj, VALUE, globalNode, spaceCompo, scale, &\\n    & addContribution)\\n    CLASS(VectorFieldLis_), INTENT(INOUT) :: obj\\n    REAL(DFP), INTENT(IN) :: VALUE(:)\\n    INTEGER(I4B), INTENT(IN) :: globalNode(:)\\n    INTEGER(I4B), INTENT(IN) :: spaceCompo\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\\n  END SUBROUTINE set9\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"This routine sets the multiple values\"\n      }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n        children: [\"Size of \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"value\"\n        }), \" should be equal to size of \", (0,jsx_runtime.jsx)(_components.code, {\n          children: \"globalNode\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        children: \"vector( spaceCompo, globalNode ) = value( : )\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-10\",\n      children: \"Interface 10\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \" INTERFACE\\n  MODULE SUBROUTINE set10(obj, VALUE, globalNode, spaceCompo, scale, &\\n    & addContribution)\\n    CLASS(VectorFieldLis_), INTENT(INOUT) :: obj\\n    REAL(DFP), INTENT(IN) :: VALUE\\n    INTEGER(I4B), INTENT(IN) :: globalNode\\n    INTEGER(I4B), INTENT(IN) :: spaceCompo\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\\n  END SUBROUTINE set10\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"This routine sets a single entry\"\n      }), \"\\n\"]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-11\",\n      children: \"Interface 11\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \" INTERFACE\\n  MODULE SUBROUTINE set13(obj, VALUE, globalNode, scale, &\\n    & addContribution)\\n    CLASS(VectorFieldLis_), INTENT(INOUT) :: obj\\n    TYPE(FEVariable_), INTENT(IN) :: VALUE\\n    INTEGER(I4B), INTENT(IN) :: globalNode(:)\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\\n  END SUBROUTINE set13\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Sets the multiple values using FEVariable.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-12\",\n      children: \"Interface 12\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"INTERFACE\\n  MODULE SUBROUTINE set12(obj, VALUE, istart, iend, stride, scale, &\\n    & addContribution)\\n    CLASS(VectorFieldLis_), INTENT(INOUT) :: obj\\n    REAL(DFP), INTENT(IN) :: VALUE(:, :)\\n    INTEGER(I4B), INTENT(IN) :: istart\\n    INTEGER(I4B), INTENT(IN) :: iend\\n    INTEGER(I4B), INTENT(IN) :: stride\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\\n  END SUBROUTINE set12\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-13\",\n      children: \"Interface 13\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \" INTERFACE\\n  MODULE SUBROUTINE set13(obj, VALUE, globalNode, scale, &\\n    & addContribution)\\n    CLASS(VectorFieldLis_), INTENT(INOUT) :: obj\\n    TYPE(FEVariable_), INTENT(IN) :: VALUE\\n    INTEGER(I4B), INTENT(IN) :: globalNode(:)\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\\n  END SUBROUTINE set13\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-14\",\n      children: \"Interface 14\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \" INTERFACE\\n  MODULE SUBROUTINE set14(obj, VALUE, scale, addContribution)\\n    CLASS(VectorFieldLis_), INTENT(INOUT) :: obj\\n    REAL(DFP), INTENT(IN) :: VALUE\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: scale\\n    LOGICAL(LGT), OPTIONAL, INTENT(IN) :: addContribution\\n  END SUBROUTINE set14\\nEND INTERFACE\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: [\"\\n\", (0,jsx_runtime.jsx)(_components.li, {\n        children: \"Sets all values\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction Set_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(Set_createMdxContent, {\n      ...props\n    })\n  }) : Set_createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./docs/docs-api/VectorFieldLis/Set.md\n");

/***/ })

}]);