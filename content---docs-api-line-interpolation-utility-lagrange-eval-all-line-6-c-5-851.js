"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkeasifem_docs"] = globalThis["webpackChunkeasifem_docs"] || []).push([["content---docs-api-line-interpolation-utility-lagrange-eval-all-line-6-c-5-851"],{

/***/ "./docs/docs-api/LineInterpolationUtility/LagrangeEvalAll_Line.md":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  assets: () => (/* binding */ assets),\n  contentTitle: () => (/* binding */ LagrangeEvalAll_Line_contentTitle),\n  \"default\": () => (/* binding */ LagrangeEvalAll_Line_MDXContent),\n  frontMatter: () => (/* binding */ LagrangeEvalAll_Line_frontMatter),\n  metadata: () => (/* reexport */ site_docs_docs_api_line_interpolation_utility_lagrange_eval_all_line_md_6c5_namespaceObject),\n  toc: () => (/* binding */ LagrangeEvalAll_Line_toc)\n});\n\n;// ./.docusaurus/docusaurus-plugin-content-docs/docs-api/site-docs-docs-api-line-interpolation-utility-lagrange-eval-all-line-md-6c5.json\nconst site_docs_docs_api_line_interpolation_utility_lagrange_eval_all_line_md_6c5_namespaceObject = /*#__PURE__*/JSON.parse('{\"id\":\"LineInterpolationUtility/LagrangeEvalAll_Line\",\"title\":\"LagrangeEvalAll_Line\",\"description\":\"Evaluate Lagrangepolynomials at single point or several points.\",\"source\":\"@site/docs/docs-api/LineInterpolationUtility/LagrangeEvalAll_Line.md\",\"sourceDirName\":\"LineInterpolationUtility\",\"slug\":\"/LineInterpolationUtility/LagrangeEvalAll_Line\",\"permalink\":\"/docs-api/LineInterpolationUtility/LagrangeEvalAll_Line\",\"draft\":false,\"unlisted\":false,\"editUrl\":\"https://github.com/easifem/easifem.github.io/tree/main/docs/docs-api/LineInterpolationUtility/LagrangeEvalAll_Line.md\",\"tags\":[],\"version\":\"current\",\"lastUpdatedAt\":1539502055000,\"frontMatter\":{\"sidebar_label\":\"LagrangeEvalAll\"},\"sidebar\":\"tutorialSidebar\",\"previous\":{\"title\":\"LagrangeDegree\",\"permalink\":\"/docs-api/LineInterpolationUtility/LagrangeDegree_Line\"},\"next\":{\"title\":\"LagrangeInDOF\",\"permalink\":\"/docs-api/LineInterpolationUtility/LagrangeInDOF_Line\"}}');\n// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(\"./node_modules/react/jsx-runtime.js\");\n// EXTERNAL MODULE: ./node_modules/@mdx-js/react/lib/index.js\nvar lib = __webpack_require__(\"./node_modules/@mdx-js/react/lib/index.js\");\n;// ./docs/docs-api/LineInterpolationUtility/examples/_LagrangeEvalAll_Line_test_1.md\n\n\nconst frontMatter = {};\nconst contentTitle = undefined;\n\n\n\n\n\nconst toc = [];\nfunction _createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsx)(_components.pre, {\n    children: (0,jsx_runtime.jsx)(_components.code, {\n      className: \"language-fortran\",\n      children: \"program main\\n  use easifemBase\\n  implicit none\\n  integer(i4b) :: order\\n  real(dfp), parameter :: tol = 1.0E-10\\n  real(dfp), allocatable :: x(:), coeff(:,:), ans(:), xij(:,:)\\n  character( len = * ), parameter :: layout=\\\"VEFC\\\" \\n  integer(i4b) :: ipType\\n  !! \\\"INCREASING\\\"\\n  x = [0,1]\\n  order = 4_I4B\\n  iptype = Equidistance\\n  xij = reshape(InterpolationPoint_Line(order=order, iptype=iptype, layout=layout, xij=x), [1, order+1])\\n  call display(xij, \\\"xij: \\\")\\n  coeff = zeros(order+1, order+1, 1.0_DFP)\\n\\n  ans = LagrangeEvalAll_Line(order, xij(1,1), xij, coeff, firstCall=.true.)\\n  call ok(ans(1) .approxeq. 1.0_DFP, \\\"tests(1):\\\")\\n  call ok(all(ans(2:) .approxeq. 0.0_DFP), \\\"tests(2):\\\")\\n\\n  ans = LagrangeEvalAll_Line(order, xij(1,2),  xij, coeff, firstCall=.false.)\\n  call ok(softeq( ans(1), 0.0_DFP, tol), \\\"tests(3):\\\")\\n  call ok(softeq( ans(2), 1.0_DFP, tol), \\\"tests(4):\\\")\\n\\n  ans = LagrangeEvalAll_Line(order, xij(1,3),  xij, coeff, firstCall=.false.)\\n  call ok(all(softeq( ans(1:2), 0.0_DFP, tol)), \\\"tests(5):\\\")\\n  call ok(softeq( ans(3), 1.0_DFP, tol), \\\"tests(6):\\\")\\n\\n  ans = LagrangeEvalAll_Line(order, xij(1,4),  xij, coeff, firstCall=.false.)\\n  call ok(all(softeq( ans(1:3), 0.0_DFP, tol)), \\\"tests(7):\\\")\\n  call ok(softeq( ans(4), 1.0_DFP, tol), \\\"tests(8):\\\")\\nend program main\\n\"\n    })\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/LineInterpolationUtility/examples/_LagrangeEvalAll_Line_test_2.md\n\n\nconst _LagrangeEvalAll_Line_test_2_frontMatter = {};\nconst _LagrangeEvalAll_Line_test_2_contentTitle = undefined;\n\n\n\n\n\nconst _LagrangeEvalAll_Line_test_2_toc = [];\nfunction _LagrangeEvalAll_Line_test_2_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsx)(_components.pre, {\n    children: (0,jsx_runtime.jsx)(_components.code, {\n      className: \"language-fortran\",\n      children: \"program main\\n  use easifemBase\\n  implicit none\\n  integer(i4b) :: order\\n  real(dfp), parameter :: tol = 1.0E-10\\n  real(dfp), allocatable :: x(:), coeff(:,:), ans(:), xij(:,:)\\n  character( len = * ), parameter :: layout=\\\"VEFC\\\" \\n  integer(i4b) :: ipType\\n  !! \\\"INCREASING\\\"\\n  x = [0,1]\\n  order = 4_I4B\\n  iptype = GaussLegendreLobatto\\n  xij = reshape(InterpolationPoint_Line(order=order, iptype=iptype, layout=layout, xij=x), [1, order+1])\\n  call display(xij, \\\"xij: \\\")\\n  coeff = zeros(order+1, order+1, 1.0_DFP)\\n\\n  ans = LagrangeEvalAll_Line(order, xij(1,1), xij, coeff, firstCall=.true.)\\n  call ok(ans(1) .approxeq. 1.0_DFP, \\\"tests(1):\\\")\\n  call ok(all(ans(2:) .approxeq. 0.0_DFP), \\\"tests(2):\\\")\\n\\n  ans = LagrangeEvalAll_Line(order, xij(1,2),  xij, coeff, firstCall=.false.)\\n  call ok(softeq( ans(1), 0.0_DFP, tol), \\\"tests(3):\\\")\\n  call ok(softeq( ans(2), 1.0_DFP, tol), \\\"tests(4):\\\")\\n\\n  ans = LagrangeEvalAll_Line(order, xij(1,3),  xij, coeff, firstCall=.false.)\\n  call ok(all(softeq( ans(1:2), 0.0_DFP, tol)), \\\"tests(5):\\\")\\n  call ok(softeq( ans(3), 1.0_DFP, tol), \\\"tests(6):\\\")\\n\\n  ans = LagrangeEvalAll_Line(order, xij(1,4),  xij, coeff, firstCall=.false.)\\n  call ok(all(softeq( ans(1:3), 0.0_DFP, tol)), \\\"tests(7):\\\")\\n  call ok(softeq( ans(4), 1.0_DFP, tol), \\\"tests(8):\\\")\\n\\nend program main\\n\"\n    })\n  });\n}\nfunction _LagrangeEvalAll_Line_test_2_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_LagrangeEvalAll_Line_test_2_createMdxContent, {\n      ...props\n    })\n  }) : _LagrangeEvalAll_Line_test_2_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/LineInterpolationUtility/examples/_LagrangeEvalAll_Line_test_3.md\n\n\nconst _LagrangeEvalAll_Line_test_3_frontMatter = {};\nconst _LagrangeEvalAll_Line_test_3_contentTitle = undefined;\n\n\n\n\n\nconst _LagrangeEvalAll_Line_test_3_toc = [];\nfunction _LagrangeEvalAll_Line_test_3_createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    pre: \"pre\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-fortran\",\n        children: \"program main\\n  use easifemBase\\n  implicit none\\n  integer(i4b) :: order\\n  real(dfp), parameter :: tol = 1.0E-10\\n  real(dfp), allocatable :: x(:), coeff(:,:), ans(:,:), xij(:,:)\\n  character( len = * ), parameter :: layout=\\\"VEFC\\\" \\n  integer(i4b) :: ipType\\n  !! \\\"INCREASING\\\"\\n  x = [0,1]\\n  order = 4_I4B\\n  iptype = GaussLegendreLobatto\\n  xij = reshape(InterpolationPoint_Line(order=order, iptype=iptype, layout=layout, xij=x), [1, order+1])\\n  call display(xij, \\\"xij: \\\")\\n  coeff = zeros(order+1, order+1, 1.0_DFP)\\n\\n  ans = LagrangeEvalAll_Line(order, xij(1,:), xij, coeff, firstCall=.true.)\\n  call ok(all(softeq(ans, eye(order+1, 1.0_DFP), tol ) ), \\\"tests(1):\\\")\\n\\nend program main\\n\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: \"language-txt\",\n        metastring: \"title=\\\"results\\\"\",\n        children: \"1.00000   0.00000  -0.00000   0.00000  -0.00000\\n0.00000   1.00000   0.00000  -0.00000   0.00000\\n0.00000   0.00000   1.00000   0.00000  -0.00000\\n0.00000   0.00000  -0.00000   1.00000  -0.00000\\n0.00000  -0.00000   0.00000  -0.00000   1.00000\\n\"\n      })\n    })]\n  });\n}\nfunction _LagrangeEvalAll_Line_test_3_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_LagrangeEvalAll_Line_test_3_createMdxContent, {\n      ...props\n    })\n  }) : _LagrangeEvalAll_Line_test_3_createMdxContent(props);\n}\n\n\n;// ./docs/docs-api/LineInterpolationUtility/LagrangeEvalAll_Line.md\n\n\nconst LagrangeEvalAll_Line_frontMatter = {\n\tsidebar_label: 'LagrangeEvalAll'\n};\nconst LagrangeEvalAll_Line_contentTitle = 'LagrangeEvalAll_Line';\n\nconst assets = {\n\n};\n\n\n\n\n\n\nconst LagrangeEvalAll_Line_toc = [{\n  \"value\": \"Interface 1\",\n  \"id\": \"interface-1\",\n  \"level\": 2\n}, ...toc, ..._LagrangeEvalAll_Line_test_2_toc, {\n  \"value\": \"Interface 2\",\n  \"id\": \"interface-2\",\n  \"level\": 2\n}, ..._LagrangeEvalAll_Line_test_3_toc];\nfunction LagrangeEvalAll_Line_createMdxContent(props) {\n  const _components = {\n    admonition: \"admonition\",\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    header: \"header\",\n    input: \"input\",\n    li: \"li\",\n    mdxAdmonitionTitle: \"mdxAdmonitionTitle\",\n    p: \"p\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  }, {TabItem, Tabs} = _components;\n  if (!TabItem) _missingMdxReference(\"TabItem\", true);\n  if (!Tabs) _missingMdxReference(\"Tabs\", true);\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.header, {\n      children: (0,jsx_runtime.jsx)(_components.h1, {\n        id: \"lagrangeevalall_line\",\n        children: \"LagrangeEvalAll_Line\"\n      })\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.p, {\n      children: \"Evaluate Lagrangepolynomials at single point or several points.\"\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-1\",\n      children: \"Interface 1\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs, {\n      children: [(0,jsx_runtime.jsxs)(TabItem, {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE LagrangeEvalAll_Line\\n  MODULE FUNCTION LagrangeEvalAll_Line1(order, x, xij, coeff, firstCall, &\\n    & orthopol, alpha, beta, lambda) &\\n    & RESULT(ans)\\n    INTEGER(I4B), INTENT(IN) :: order\\n    !! order of Lagrange polynomials\\n    REAL(DFP), INTENT(IN) :: x\\n    !! point of evaluation\\n    REAL(DFP), OPTIONAL, INTENT(INOUT) :: xij(1, order + 1)\\n    !! interpolation points\\n    REAL(DFP), OPTIONAL, INTENT(INOUT) :: coeff(order + 1, order + 1)\\n    !! coefficient of Lagrange polynomials\\n    LOGICAL(LGT), OPTIONAL :: firstCall\\n    !! If firstCall is true, then coeff will be made\\n    !! If firstCall is False, then coeff will be used\\n    !! Default value of firstCall is True\\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: orthopol\\n    !! Monomial\\n    !! Jacobi\\n    !! Legendre\\n    !! Chebyshev\\n    !! Lobatto\\n    !! UnscaledLobatto\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: alpha\\n    !! Jacobi polynomial parameter\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: beta\\n    !! Jacobi polynomial parameter\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: lambda\\n    !! Ultraspherical parameter\\n    REAL(DFP) :: ans(order + 1)\\n    !! Value of n+1 Lagrange polynomials at point x\\n  END FUNCTION LagrangeEvalAll_Line1\\nEND INTERFACE LagrangeEvalAll_Line\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.admonition, {\n          type: \"note\",\n          children: [(0,jsx_runtime.jsx)(_components.mdxAdmonitionTitle, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"x\"\n            })\n          }), (0,jsx_runtime.jsx)(_components.p, {\n            children: \"Point of evaluation.\"\n          })]\n        }), (0,jsx_runtime.jsxs)(_components.admonition, {\n          type: \"note\",\n          children: [(0,jsx_runtime.jsx)(_components.mdxAdmonitionTitle, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"xij\"\n            })\n          }), (0,jsx_runtime.jsx)(_components.p, {\n            children: \"Interpolation points. SIZE(xij, 1) is 1. SIZE(xij, 2) should be equal to order+1.\"\n          })]\n        }), (0,jsx_runtime.jsxs)(_components.admonition, {\n          type: \"note\",\n          children: [(0,jsx_runtime.jsx)(_components.mdxAdmonitionTitle, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"order\"\n            })\n          }), (0,jsx_runtime.jsx)(_components.p, {\n            children: \"order denotes the order of polynomial space.\"\n          })]\n        }), (0,jsx_runtime.jsxs)(_components.admonition, {\n          type: \"note\",\n          children: [(0,jsx_runtime.jsx)(_components.mdxAdmonitionTitle, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"orthopol\"\n            })\n          }), (0,jsx_runtime.jsx)(_components.p, {\n            children: \"Currently, we can specify following types of orthogonal polynomials:\"\n          }), (0,jsx_runtime.jsxs)(_components.ul, {\n            className: \"contains-task-list\",\n            children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n              className: \"task-list-item\",\n              children: [(0,jsx_runtime.jsx)(_components.input, {\n                type: \"checkbox\",\n                checked: true,\n                disabled: true\n              }), \" \", \"Jacobi\"]\n            }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n              className: \"task-list-item\",\n              children: [(0,jsx_runtime.jsx)(_components.input, {\n                type: \"checkbox\",\n                checked: true,\n                disabled: true\n              }), \" \", \"Ultraspherical\"]\n            }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n              className: \"task-list-item\",\n              children: [(0,jsx_runtime.jsx)(_components.input, {\n                type: \"checkbox\",\n                checked: true,\n                disabled: true\n              }), \" \", \"Legendre\"]\n            }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n              className: \"task-list-item\",\n              children: [(0,jsx_runtime.jsx)(_components.input, {\n                type: \"checkbox\",\n                checked: true,\n                disabled: true\n              }), \" \", \"Chebyshev\"]\n            }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n              className: \"task-list-item\",\n              children: [(0,jsx_runtime.jsx)(_components.input, {\n                type: \"checkbox\",\n                checked: true,\n                disabled: true\n              }), \" \", \"Lobatto\"]\n            }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n              className: \"task-list-item\",\n              children: [(0,jsx_runtime.jsx)(_components.input, {\n                type: \"checkbox\",\n                checked: true,\n                disabled: true\n              }), \" \", \"UnscaledLobatto\"]\n            }), \"\\n\"]\n          })]\n        }), (0,jsx_runtime.jsxs)(_components.admonition, {\n          type: \"note\",\n          children: [(0,jsx_runtime.jsx)(_components.mdxAdmonitionTitle, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"alpha, beta\"\n            })\n          }), (0,jsx_runtime.jsxs)(_components.p, {\n            children: [\"alpha and beta are parameters of Jacobi Polynomials. They should be present when \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"orthopol\"\n            }), \" is equal to \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"Jacobi\"\n            })]\n          })]\n        }), (0,jsx_runtime.jsxs)(_components.admonition, {\n          type: \"note\",\n          children: [(0,jsx_runtime.jsx)(_components.mdxAdmonitionTitle, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"lambda\"\n            })\n          }), (0,jsx_runtime.jsxs)(_components.p, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"lambda\"\n            }), \" is parameter for Ultraspherical polynomials. They should be present when \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"orthopol\"\n            }), \" is equal to the \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"Ultraspherical\"\n            })]\n          })]\n        }), (0,jsx_runtime.jsxs)(_components.admonition, {\n          type: \"note\",\n          children: [(0,jsx_runtime.jsx)(_components.mdxAdmonitionTitle, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"ans\"\n            })\n          }), (0,jsx_runtime.jsxs)(_components.p, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"ans\"\n            }), \" denotes the \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"order+1\"\n            }), \" coefficents of ith polynomial.\"]\n          })]\n        }), (0,jsx_runtime.jsxs)(_components.admonition, {\n          type: \"note\",\n          children: [(0,jsx_runtime.jsxs)(_components.mdxAdmonitionTitle, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"coeff\"\n            }), \" and \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"firstCall\"\n            })]\n          }), (0,jsx_runtime.jsxs)(_components.p, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"coeff\"\n            }), \" denotes the coefficients of Lagrange polynomial. The jth col of \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"coeff\"\n            }), \" dentotes the coefficient of jth Lagrange polynomial.\"]\n          }), (0,jsx_runtime.jsxs)(_components.ul, {\n            children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n              children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n                children: [\"If \", (0,jsx_runtime.jsx)(_components.code, {\n                  children: \"firstCall\"\n                }), \" is true and \", (0,jsx_runtime.jsx)(_components.code, {\n                  children: \"coeff\"\n                }), \" is present, then this function will return \", (0,jsx_runtime.jsx)(_components.code, {\n                  children: \"coeff\"\n                }), \", which can be used later. Note that computation of \", (0,jsx_runtime.jsx)(_components.code, {\n                  children: \"coeff\"\n                }), \" involves inversion of a matrix.\"]\n              }), \"\\n\"]\n            }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n              children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n                children: [\"If \", (0,jsx_runtime.jsx)(_components.code, {\n                  children: \"firstCall\"\n                }), \" is false and \", (0,jsx_runtime.jsx)(_components.code, {\n                  children: \"coeff\"\n                }), \" is present, then this function will use \", (0,jsx_runtime.jsx)(_components.code, {\n                  children: \"coeff\"\n                }), \".\"]\n              }), \"\\n\"]\n            }), \"\\n\"]\n          })]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem, {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem, {\n        value: \"example2\",\n        label: \"Example 2\",\n        children: (0,jsx_runtime.jsx)(_LagrangeEvalAll_Line_test_2_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem, {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    }), \"\\n\", (0,jsx_runtime.jsx)(_components.h2, {\n      id: \"interface-2\",\n      children: \"Interface 2\"\n    }), \"\\n\", (0,jsx_runtime.jsxs)(Tabs, {\n      children: [(0,jsx_runtime.jsxs)(TabItem, {\n        value: \"interface\",\n        label: \"܀ Interface\",\n        default: true,\n        children: [(0,jsx_runtime.jsx)(_components.pre, {\n          children: (0,jsx_runtime.jsx)(_components.code, {\n            className: \"language-fortran\",\n            children: \"INTERFACE LagrangeEvalAll_Line\\n  MODULE FUNCTION LagrangeEvalAll_Line2(order, x, xij, coeff, firstCall, &\\n    & orthopol, alpha, beta, lambda) &\\n    & RESULT(ans)\\n    INTEGER(I4B), INTENT(IN) :: order\\n    !! order of Lagrange polynomials\\n    REAL(DFP), INTENT(IN) :: x(:)\\n    !! point of evaluation\\n    REAL(DFP), OPTIONAL, INTENT(INOUT) :: xij(1, order + 1)\\n    !! interpolation points\\n    REAL(DFP), OPTIONAL, INTENT(INOUT) :: coeff(order + 1, order + 1)\\n    !! coefficient of Lagrange polynomials\\n    LOGICAL(LGT), OPTIONAL :: firstCall\\n    !! If firstCall is true, then coeff will be made\\n    !! If firstCall is False, then coeff will be used\\n    !! Default value of firstCall is True\\n    INTEGER(I4B), OPTIONAL, INTENT(IN) :: orthopol\\n    !! Monomial\\n    !! Jacobi\\n    !! Legendre\\n    !! Chebyshev\\n    !! Lobatto\\n    !! UnscaledLobatto\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: alpha\\n    !! Jacobi polynomial parameter\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: beta\\n    !! Jacobi polynomial parameter\\n    REAL(DFP), OPTIONAL, INTENT(IN) :: lambda\\n    !! Ultraspherical parameter\\n    REAL(DFP) :: ans(SIZE(x), order + 1)\\n    !! Value of n+1 Lagrange polynomials at point x\\n    !! ans(:, j) is the value of jth polynomial at x points\\n    !! ans(i, :) is the value of all polynomials at x(i) point\\n  END FUNCTION LagrangeEvalAll_Line2\\nEND INTERFACE LagrangeEvalAll_Line\\n\"\n          })\n        }), (0,jsx_runtime.jsxs)(_components.admonition, {\n          type: \"note\",\n          children: [(0,jsx_runtime.jsx)(_components.mdxAdmonitionTitle, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"x\"\n            })\n          }), (0,jsx_runtime.jsx)(_components.p, {\n            children: \"Point of evaluation.\"\n          })]\n        }), (0,jsx_runtime.jsxs)(_components.admonition, {\n          type: \"note\",\n          children: [(0,jsx_runtime.jsx)(_components.mdxAdmonitionTitle, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"xij\"\n            })\n          }), (0,jsx_runtime.jsx)(_components.p, {\n            children: \"Interpolation points. SIZE(xij, 1) is 1. SIZE(xij, 2) should be equal to order+1.\"\n          })]\n        }), (0,jsx_runtime.jsxs)(_components.admonition, {\n          type: \"note\",\n          children: [(0,jsx_runtime.jsx)(_components.mdxAdmonitionTitle, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"order\"\n            })\n          }), (0,jsx_runtime.jsx)(_components.p, {\n            children: \"order denotes the order of polynomial space.\"\n          })]\n        }), (0,jsx_runtime.jsxs)(_components.admonition, {\n          type: \"note\",\n          children: [(0,jsx_runtime.jsx)(_components.mdxAdmonitionTitle, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"orthopol\"\n            })\n          }), (0,jsx_runtime.jsx)(_components.p, {\n            children: \"Currently, we can specify following types of orthogonal polynomials:\"\n          }), (0,jsx_runtime.jsxs)(_components.ul, {\n            className: \"contains-task-list\",\n            children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n              className: \"task-list-item\",\n              children: [(0,jsx_runtime.jsx)(_components.input, {\n                type: \"checkbox\",\n                checked: true,\n                disabled: true\n              }), \" \", \"Jacobi\"]\n            }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n              className: \"task-list-item\",\n              children: [(0,jsx_runtime.jsx)(_components.input, {\n                type: \"checkbox\",\n                checked: true,\n                disabled: true\n              }), \" \", \"Ultraspherical\"]\n            }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n              className: \"task-list-item\",\n              children: [(0,jsx_runtime.jsx)(_components.input, {\n                type: \"checkbox\",\n                checked: true,\n                disabled: true\n              }), \" \", \"Legendre\"]\n            }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n              className: \"task-list-item\",\n              children: [(0,jsx_runtime.jsx)(_components.input, {\n                type: \"checkbox\",\n                checked: true,\n                disabled: true\n              }), \" \", \"Chebyshev\"]\n            }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n              className: \"task-list-item\",\n              children: [(0,jsx_runtime.jsx)(_components.input, {\n                type: \"checkbox\",\n                checked: true,\n                disabled: true\n              }), \" \", \"Lobatto\"]\n            }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n              className: \"task-list-item\",\n              children: [(0,jsx_runtime.jsx)(_components.input, {\n                type: \"checkbox\",\n                checked: true,\n                disabled: true\n              }), \" \", \"UnscaledLobatto\"]\n            }), \"\\n\"]\n          })]\n        }), (0,jsx_runtime.jsxs)(_components.admonition, {\n          type: \"note\",\n          children: [(0,jsx_runtime.jsx)(_components.mdxAdmonitionTitle, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"alpha, beta\"\n            })\n          }), (0,jsx_runtime.jsxs)(_components.p, {\n            children: [\"alpha and beta are parameters of Jacobi Polynomials. They should be present when \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"orthopol\"\n            }), \" is equal to \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"Jacobi\"\n            })]\n          })]\n        }), (0,jsx_runtime.jsxs)(_components.admonition, {\n          type: \"note\",\n          children: [(0,jsx_runtime.jsx)(_components.mdxAdmonitionTitle, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"lambda\"\n            })\n          }), (0,jsx_runtime.jsxs)(_components.p, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"lambda\"\n            }), \" is parameter for Ultraspherical polynomials. They should be present when \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"orthopol\"\n            }), \" is equal to the \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"Ultraspherical\"\n            })]\n          })]\n        }), (0,jsx_runtime.jsxs)(_components.admonition, {\n          type: \"note\",\n          children: [(0,jsx_runtime.jsx)(_components.mdxAdmonitionTitle, {\n            children: (0,jsx_runtime.jsx)(_components.code, {\n              children: \"ans\"\n            })\n          }), (0,jsx_runtime.jsxs)(_components.p, {\n            children: [\"jth col of \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"ans\"\n            }), \" denotes the \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"order+1\"\n            }), \" coefficents of jth polynomial.\"]\n          })]\n        }), (0,jsx_runtime.jsxs)(_components.admonition, {\n          type: \"note\",\n          children: [(0,jsx_runtime.jsxs)(_components.mdxAdmonitionTitle, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"coeff\"\n            }), \" and \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"firstCall\"\n            })]\n          }), (0,jsx_runtime.jsxs)(_components.p, {\n            children: [(0,jsx_runtime.jsx)(_components.code, {\n              children: \"coeff\"\n            }), \" denotes the coefficients of Lagrange polynomial. The jth col of \", (0,jsx_runtime.jsx)(_components.code, {\n              children: \"coeff\"\n            }), \" dentotes the coefficient of jth Lagrange polynomial.\"]\n          }), (0,jsx_runtime.jsxs)(_components.ul, {\n            children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n              children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n                children: [\"If \", (0,jsx_runtime.jsx)(_components.code, {\n                  children: \"firstCall\"\n                }), \" is true and \", (0,jsx_runtime.jsx)(_components.code, {\n                  children: \"coeff\"\n                }), \" is present, then this function will return \", (0,jsx_runtime.jsx)(_components.code, {\n                  children: \"coeff\"\n                }), \", which can be used later. Note that computation of \", (0,jsx_runtime.jsx)(_components.code, {\n                  children: \"coeff\"\n                }), \" involves inversion of a matrix.\"]\n              }), \"\\n\"]\n            }), \"\\n\", (0,jsx_runtime.jsxs)(_components.li, {\n              children: [\"\\n\", (0,jsx_runtime.jsxs)(_components.p, {\n                children: [\"If \", (0,jsx_runtime.jsx)(_components.code, {\n                  children: \"firstCall\"\n                }), \" is false and \", (0,jsx_runtime.jsx)(_components.code, {\n                  children: \"coeff\"\n                }), \" is present, then this function will use \", (0,jsx_runtime.jsx)(_components.code, {\n                  children: \"coeff\"\n                }), \".\"]\n              }), \"\\n\"]\n            }), \"\\n\"]\n          })]\n        })]\n      }), (0,jsx_runtime.jsx)(TabItem, {\n        value: \"example\",\n        label: \"️܀ See example\",\n        children: (0,jsx_runtime.jsx)(_LagrangeEvalAll_Line_test_3_MDXContent, {})\n      }), (0,jsx_runtime.jsx)(TabItem, {\n        value: \"close\",\n        label: \"↢ \"\n      })]\n    })]\n  });\n}\nfunction LagrangeEvalAll_Line_MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib.useMDXComponents)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(LagrangeEvalAll_Line_createMdxContent, {\n      ...props\n    })\n  }) : LagrangeEvalAll_Line_createMdxContent(props);\n}\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./docs/docs-api/LineInterpolationUtility/LagrangeEvalAll_Line.md\n");

/***/ }),

/***/ "./node_modules/@mdx-js/react/lib/index.js":
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MDXProvider: () => (/* binding */ MDXProvider),\n/* harmony export */   useMDXComponents: () => (/* binding */ useMDXComponents)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/react/index.js\");\n/**\n * @import {MDXComponents} from 'mdx/types.js'\n * @import {Component, ReactElement, ReactNode} from 'react'\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\n\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nfunction useMDXComponents(components) {\n  const contextComponents = react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {ReactElement}\n *   Element.\n * @satisfies {Component}\n */\nfunction MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Vhc2lmZW0tZG9jcy8uL25vZGVfbW9kdWxlcy9AbWR4LWpzL3JlYWN0L2xpYi9pbmRleC5qcz9hZjEyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGltcG9ydCB7TURYQ29tcG9uZW50c30gZnJvbSAnbWR4L3R5cGVzLmpzJ1xuICogQGltcG9ydCB7Q29tcG9uZW50LCBSZWFjdEVsZW1lbnQsIFJlYWN0Tm9kZX0gZnJvbSAncmVhY3QnXG4gKi9cblxuLyoqXG4gKiBAY2FsbGJhY2sgTWVyZ2VDb21wb25lbnRzXG4gKiAgIEN1c3RvbSBtZXJnZSBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7UmVhZG9ubHk8TURYQ29tcG9uZW50cz59IGN1cnJlbnRDb21wb25lbnRzXG4gKiAgIEN1cnJlbnQgY29tcG9uZW50cyBmcm9tIHRoZSBjb250ZXh0LlxuICogQHJldHVybnMge01EWENvbXBvbmVudHN9XG4gKiAgIEFkZGl0aW9uYWwgY29tcG9uZW50cy5cbiAqXG4gKiBAdHlwZWRlZiBQcm9wc1xuICogICBDb25maWd1cmF0aW9uIGZvciBgTURYUHJvdmlkZXJgLlxuICogQHByb3BlcnR5IHtSZWFjdE5vZGUgfCBudWxsIHwgdW5kZWZpbmVkfSBbY2hpbGRyZW5dXG4gKiAgIENoaWxkcmVuIChvcHRpb25hbCkuXG4gKiBAcHJvcGVydHkge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+IHwgTWVyZ2VDb21wb25lbnRzIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2NvbXBvbmVudHNdXG4gKiAgIEFkZGl0aW9uYWwgY29tcG9uZW50cyB0byB1c2Ugb3IgYSBmdW5jdGlvbiB0aGF0IGNyZWF0ZXMgdGhlbSAob3B0aW9uYWwpLlxuICogQHByb3BlcnR5IHtib29sZWFuIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2Rpc2FibGVQYXJlbnRDb250ZXh0PWZhbHNlXVxuICogICBUdXJuIG9mZiBvdXRlciBjb21wb25lbnQgY29udGV4dCAoZGVmYXVsdDogYGZhbHNlYCkuXG4gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuXG4vKiogQHR5cGUge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+fSAqL1xuY29uc3QgZW1wdHlDb21wb25lbnRzID0ge31cblxuY29uc3QgTURYQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoZW1wdHlDb21wb25lbnRzKVxuXG4vKipcbiAqIEdldCBjdXJyZW50IGNvbXBvbmVudHMgZnJvbSB0aGUgTURYIENvbnRleHQuXG4gKlxuICogQHBhcmFtIHtSZWFkb25seTxNRFhDb21wb25lbnRzPiB8IE1lcmdlQ29tcG9uZW50cyB8IG51bGwgfCB1bmRlZmluZWR9IFtjb21wb25lbnRzXVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMgdG8gdXNlIG9yIGEgZnVuY3Rpb24gdGhhdCBjcmVhdGVzIHRoZW0gKG9wdGlvbmFsKS5cbiAqIEByZXR1cm5zIHtNRFhDb21wb25lbnRzfVxuICogICBDdXJyZW50IGNvbXBvbmVudHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VNRFhDb21wb25lbnRzKGNvbXBvbmVudHMpIHtcbiAgY29uc3QgY29udGV4dENvbXBvbmVudHMgPSBSZWFjdC51c2VDb250ZXh0KE1EWENvbnRleHQpXG5cbiAgLy8gTWVtb2l6ZSB0byBhdm9pZCB1bm5lY2Vzc2FyeSB0b3AtbGV2ZWwgY29udGV4dCBjaGFuZ2VzXG4gIHJldHVybiBSZWFjdC51c2VNZW1vKFxuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIEN1c3RvbSBtZXJnZSB2aWEgYSBmdW5jdGlvbiBwcm9wXG4gICAgICBpZiAodHlwZW9mIGNvbXBvbmVudHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGNvbXBvbmVudHMoY29udGV4dENvbXBvbmVudHMpXG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7Li4uY29udGV4dENvbXBvbmVudHMsIC4uLmNvbXBvbmVudHN9XG4gICAgfSxcbiAgICBbY29udGV4dENvbXBvbmVudHMsIGNvbXBvbmVudHNdXG4gIClcbn1cblxuLyoqXG4gKiBQcm92aWRlciBmb3IgTURYIGNvbnRleHQuXG4gKlxuICogQHBhcmFtIHtSZWFkb25seTxQcm9wcz59IHByb3BlcnRpZXNcbiAqICAgUHJvcGVydGllcy5cbiAqIEByZXR1cm5zIHtSZWFjdEVsZW1lbnR9XG4gKiAgIEVsZW1lbnQuXG4gKiBAc2F0aXNmaWVzIHtDb21wb25lbnR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBNRFhQcm92aWRlcihwcm9wZXJ0aWVzKSB7XG4gIC8qKiBAdHlwZSB7UmVhZG9ubHk8TURYQ29tcG9uZW50cz59ICovXG4gIGxldCBhbGxDb21wb25lbnRzXG5cbiAgaWYgKHByb3BlcnRpZXMuZGlzYWJsZVBhcmVudENvbnRleHQpIHtcbiAgICBhbGxDb21wb25lbnRzID1cbiAgICAgIHR5cGVvZiBwcm9wZXJ0aWVzLmNvbXBvbmVudHMgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBwcm9wZXJ0aWVzLmNvbXBvbmVudHMoZW1wdHlDb21wb25lbnRzKVxuICAgICAgICA6IHByb3BlcnRpZXMuY29tcG9uZW50cyB8fCBlbXB0eUNvbXBvbmVudHNcbiAgfSBlbHNlIHtcbiAgICBhbGxDb21wb25lbnRzID0gdXNlTURYQ29tcG9uZW50cyhwcm9wZXJ0aWVzLmNvbXBvbmVudHMpXG4gIH1cblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICBNRFhDb250ZXh0LlByb3ZpZGVyLFxuICAgIHt2YWx1ZTogYWxsQ29tcG9uZW50c30sXG4gICAgcHJvcGVydGllcy5jaGlsZHJlblxuICApXG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@mdx-js/react/lib/index.js\n");

/***/ })

}]);